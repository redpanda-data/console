// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/dataplane/v1/pipeline.proto (package redpanda.api.dataplane.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";

/**
 * Defines the pipeline resource.
 *
 * @generated from message redpanda.api.dataplane.v1.Pipeline
 */
export class Pipeline extends Message<Pipeline> {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * User-friendly pipeline name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Optional pipeline description.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * The pipeline configuration in YAML.
   * See https://docs.redpanda.com/redpanda-connect/configuration/about/
   *
   * @generated from field: string config_yaml = 4;
   */
  configYaml = "";

  /**
   * The number of resources that are guaranteed to be assigned to the pipeline.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Resources resources = 9;
   */
  resources?: Pipeline_Resources;

  /**
   * The current pipeline state.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.State state = 7;
   */
  state = Pipeline_State.UNSPECIFIED;

  /**
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Status status = 8;
   */
  status?: Pipeline_Status;

  /**
   * URL to connect to the pipeline, e.g. via http_server.
   * May be empty if no http_server is used.
   *
   * @generated from field: string url = 10;
   */
  url = "";

  /**
   * Tags are key-value pairs that can be assigned to a pipeline resource.
   * They help organize pipelines and enable filtering when listing them.
   *
   * @generated from field: map<string, string> tags = 11;
   */
  tags: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Pipeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.Pipeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "config_yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "resources", kind: "message", T: Pipeline_Resources },
    { no: 7, name: "state", kind: "enum", T: proto3.getEnumType(Pipeline_State) },
    { no: 8, name: "status", kind: "message", T: Pipeline_Status },
    { no: 10, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pipeline {
    return new Pipeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJsonString(jsonString, options);
  }

  static equals(a: Pipeline | PlainMessage<Pipeline> | undefined, b: Pipeline | PlainMessage<Pipeline> | undefined): boolean {
    return proto3.util.equals(Pipeline, a, b);
  }
}

/**
 * State of the pipeline.
 *
 * @generated from enum redpanda.api.dataplane.v1.Pipeline.State
 */
export enum Pipeline_State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The pipeline is starting.
   *
   * @generated from enum value: STATE_STARTING = 1;
   */
  STARTING = 1,

  /**
   * The pipeline is running.
   *
   * @generated from enum value: STATE_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The pipeline is in the process of stopping.
   *
   * @generated from enum value: STATE_STOPPING = 3;
   */
  STOPPING = 3,

  /**
   * The pipeline is stopped and in paused state.
   *
   * @generated from enum value: STATE_STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * The pipeline encountered an error. See [Error Handling](https://docs.redpanda.com/redpanda-cloud/develop/connect/configuration/error_handling/) for further guidance.
   *
   * @generated from enum value: STATE_ERROR = 5;
   */
  ERROR = 5,

  /**
   * The pipeline has completed the job successfully.
   *
   * @generated from enum value: STATE_COMPLETED = 6;
   */
  COMPLETED = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(Pipeline_State)
proto3.util.setEnumType(Pipeline_State, "redpanda.api.dataplane.v1.Pipeline.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_STARTING" },
  { no: 2, name: "STATE_RUNNING" },
  { no: 3, name: "STATE_STOPPING" },
  { no: 4, name: "STATE_STOPPED" },
  { no: 5, name: "STATE_ERROR" },
  { no: 6, name: "STATE_COMPLETED" },
]);

/**
 * @generated from message redpanda.api.dataplane.v1.Pipeline.Resources
 */
export class Pipeline_Resources extends Message<Pipeline_Resources> {
  /**
   * `memory_shares` is a string specifying the amount of memory to allocate for
   * the pipeline.
   *
   * This follows the [Kubernetes quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/) format. Acceptable units
   * include:
   * - Decimal SI units: "K", "M", "G", "T", "P", "E" (e.g., "128M" for 128
   *   megabytes)
   * - Binary SI units: "Ki", "Mi", "Gi", "Ti", "Pi", "Ei" (e.g., "512Mi" for
   * 512 mebibytes) If you don't specify a unit, the value is interpreted as
   * bytes.
   *
   * @generated from field: string memory_shares = 1;
   */
  memoryShares = "";

  /**
   * `cpu_shares` is a string specifying the amount of CPU to allocate for the
   * pipeline.
   *
   * This follows the [Kubernetes quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/) format. Acceptable
   * units include:
   * - Decimal SI units: "m" (e.g., "500m" for 500 millicores, "2" for 2 cores)
   * CPU shares can be specified in millicores (1 core = 1000 millicores).
   * If you don't specify a unit, the value is interpreted as the number of cores.
   *
   * @generated from field: string cpu_shares = 2;
   */
  cpuShares = "";

  constructor(data?: PartialMessage<Pipeline_Resources>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.Pipeline.Resources";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "memory_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cpu_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pipeline_Resources {
    return new Pipeline_Resources().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pipeline_Resources {
    return new Pipeline_Resources().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pipeline_Resources {
    return new Pipeline_Resources().fromJsonString(jsonString, options);
  }

  static equals(a: Pipeline_Resources | PlainMessage<Pipeline_Resources> | undefined, b: Pipeline_Resources | PlainMessage<Pipeline_Resources> | undefined): boolean {
    return proto3.util.equals(Pipeline_Resources, a, b);
  }
}

/**
 * Pipeline status may contain an error message.
 *
 * @generated from message redpanda.api.dataplane.v1.Pipeline.Status
 */
export class Pipeline_Status extends Message<Pipeline_Status> {
  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<Pipeline_Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.Pipeline.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pipeline_Status {
    return new Pipeline_Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pipeline_Status {
    return new Pipeline_Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pipeline_Status {
    return new Pipeline_Status().fromJsonString(jsonString, options);
  }

  static equals(a: Pipeline_Status | PlainMessage<Pipeline_Status> | undefined, b: Pipeline_Status | PlainMessage<Pipeline_Status> | undefined): boolean {
    return proto3.util.equals(Pipeline_Status, a, b);
  }
}

/**
 * PipelineCreate contains the details for the pipeline creation request.
 *
 * @generated from message redpanda.api.dataplane.v1.PipelineCreate
 */
export class PipelineCreate extends Message<PipelineCreate> {
  /**
   * User-friendly pipeline name.
   *
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * Pipeline description.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * The Repanda Connect pipeline configuration in YAML format. See the [Redpanda Connect Configuration](https://docs.redpanda.com/redpanda-cloud/develop/connect/configuration/about) documentation for more details.
   *
   * @generated from field: string config_yaml = 3;
   */
  configYaml = "";

  /**
   * The number of resources that are guaranteed to be assigned to the pipeline.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Resources resources = 6;
   */
  resources?: Pipeline_Resources;

  constructor(data?: PartialMessage<PipelineCreate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.PipelineCreate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config_yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "resources", kind: "message", T: Pipeline_Resources },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PipelineCreate {
    return new PipelineCreate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PipelineCreate {
    return new PipelineCreate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PipelineCreate {
    return new PipelineCreate().fromJsonString(jsonString, options);
  }

  static equals(a: PipelineCreate | PlainMessage<PipelineCreate> | undefined, b: PipelineCreate | PlainMessage<PipelineCreate> | undefined): boolean {
    return proto3.util.equals(PipelineCreate, a, b);
  }
}

/**
 * CreatePipelineRequest is the request of CreatePipeline.
 *
 * @generated from message redpanda.api.dataplane.v1.CreatePipelineRequest
 */
export class CreatePipelineRequest extends Message<CreatePipelineRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.PipelineCreate pipeline = 1;
   */
  pipeline?: PipelineCreate;

  constructor(data?: PartialMessage<CreatePipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreatePipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: PipelineCreate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePipelineRequest {
    return new CreatePipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePipelineRequest {
    return new CreatePipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePipelineRequest {
    return new CreatePipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePipelineRequest | PlainMessage<CreatePipelineRequest> | undefined, b: CreatePipelineRequest | PlainMessage<CreatePipelineRequest> | undefined): boolean {
    return proto3.util.equals(CreatePipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.CreatePipelineResponse
 */
export class CreatePipelineResponse extends Message<CreatePipelineResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<CreatePipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreatePipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePipelineResponse {
    return new CreatePipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePipelineResponse {
    return new CreatePipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePipelineResponse {
    return new CreatePipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePipelineResponse | PlainMessage<CreatePipelineResponse> | undefined, b: CreatePipelineResponse | PlainMessage<CreatePipelineResponse> | undefined): boolean {
    return proto3.util.equals(CreatePipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetPipelineRequest
 */
export class GetPipelineRequest extends Message<GetPipelineRequest> {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelineRequest {
    return new GetPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelineRequest {
    return new GetPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelineRequest {
    return new GetPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelineRequest | PlainMessage<GetPipelineRequest> | undefined, b: GetPipelineRequest | PlainMessage<GetPipelineRequest> | undefined): boolean {
    return proto3.util.equals(GetPipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetPipelineResponse
 */
export class GetPipelineResponse extends Message<GetPipelineResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<GetPipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetPipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelineResponse {
    return new GetPipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelineResponse {
    return new GetPipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelineResponse {
    return new GetPipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelineResponse | PlainMessage<GetPipelineResponse> | undefined, b: GetPipelineResponse | PlainMessage<GetPipelineResponse> | undefined): boolean {
    return proto3.util.equals(GetPipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListPipelinesRequest
 */
export class ListPipelinesRequest extends Message<ListPipelinesRequest> {
  /**
   * List filter.
   *
   * @generated from field: redpanda.api.dataplane.v1.ListPipelinesRequest.Filter filter = 1;
   */
  filter?: ListPipelinesRequest_Filter;

  /**
   * Limit the paginated response to a number of items.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListPipelinesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListPipelinesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: ListPipelinesRequest_Filter },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPipelinesRequest {
    return new ListPipelinesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPipelinesRequest {
    return new ListPipelinesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPipelinesRequest {
    return new ListPipelinesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPipelinesRequest | PlainMessage<ListPipelinesRequest> | undefined, b: ListPipelinesRequest | PlainMessage<ListPipelinesRequest> | undefined): boolean {
    return proto3.util.equals(ListPipelinesRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListPipelinesRequest.Filter
 */
export class ListPipelinesRequest_Filter extends Message<ListPipelinesRequest_Filter> {
  /**
   * Substring match on pipeline name. Case-sensitive.
   *
   * @generated from field: string name_contains = 1;
   */
  nameContains = "";

  /**
   * Filter pipelines that contain all of these key/value pairs.
   *
   * @generated from field: map<string, string> tags = 2;
   */
  tags: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ListPipelinesRequest_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListPipelinesRequest.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_contains", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPipelinesRequest_Filter {
    return new ListPipelinesRequest_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPipelinesRequest_Filter {
    return new ListPipelinesRequest_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPipelinesRequest_Filter {
    return new ListPipelinesRequest_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: ListPipelinesRequest_Filter | PlainMessage<ListPipelinesRequest_Filter> | undefined, b: ListPipelinesRequest_Filter | PlainMessage<ListPipelinesRequest_Filter> | undefined): boolean {
    return proto3.util.equals(ListPipelinesRequest_Filter, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListPipelinesResponse
 */
export class ListPipelinesResponse extends Message<ListPipelinesResponse> {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.Pipeline pipelines = 1;
   */
  pipelines: Pipeline[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListPipelinesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListPipelinesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipelines", kind: "message", T: Pipeline, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPipelinesResponse {
    return new ListPipelinesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPipelinesResponse {
    return new ListPipelinesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPipelinesResponse {
    return new ListPipelinesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPipelinesResponse | PlainMessage<ListPipelinesResponse> | undefined, b: ListPipelinesResponse | PlainMessage<ListPipelinesResponse> | undefined): boolean {
    return proto3.util.equals(ListPipelinesResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.PipelineUpdate
 */
export class PipelineUpdate extends Message<PipelineUpdate> {
  /**
   * User-friendly pipeline name.
   *
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * Pipeline description.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * The Repanda Connect pipeline configuration in YAML format. See the [Redpanda Connect Configuration](https://docs.redpanda.com/redpanda-cloud/develop/connect/configuration/about) documentation for more details.
   *
   * @generated from field: string config_yaml = 3;
   */
  configYaml = "";

  /**
   * The number of resources that are guaranteed to be assigned to the pipeline.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Resources resources = 6;
   */
  resources?: Pipeline_Resources;

  /**
   * A map of tags to add, update or delete.
   * If a tag's value is empty, the server interprets that as a deletion.
   *
   * @generated from field: map<string, string> tags = 7;
   */
  tags: { [key: string]: string } = {};

  constructor(data?: PartialMessage<PipelineUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.PipelineUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config_yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "resources", kind: "message", T: Pipeline_Resources },
    { no: 7, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PipelineUpdate {
    return new PipelineUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PipelineUpdate {
    return new PipelineUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PipelineUpdate {
    return new PipelineUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: PipelineUpdate | PlainMessage<PipelineUpdate> | undefined, b: PipelineUpdate | PlainMessage<PipelineUpdate> | undefined): boolean {
    return proto3.util.equals(PipelineUpdate, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.UpdatePipelineRequest
 */
export class UpdatePipelineRequest extends Message<UpdatePipelineRequest> {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: redpanda.api.dataplane.v1.PipelineUpdate pipeline = 2;
   */
  pipeline?: PipelineUpdate;

  /**
   * Specifies which fields should be updated. If not provided,
   * all fields will be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdatePipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdatePipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pipeline", kind: "message", T: PipelineUpdate },
    { no: 3, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePipelineRequest {
    return new UpdatePipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePipelineRequest {
    return new UpdatePipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePipelineRequest {
    return new UpdatePipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePipelineRequest | PlainMessage<UpdatePipelineRequest> | undefined, b: UpdatePipelineRequest | PlainMessage<UpdatePipelineRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.UpdatePipelineResponse
 */
export class UpdatePipelineResponse extends Message<UpdatePipelineResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<UpdatePipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdatePipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePipelineResponse {
    return new UpdatePipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePipelineResponse {
    return new UpdatePipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePipelineResponse {
    return new UpdatePipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePipelineResponse | PlainMessage<UpdatePipelineResponse> | undefined, b: UpdatePipelineResponse | PlainMessage<UpdatePipelineResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.DeletePipelineRequest
 */
export class DeletePipelineRequest extends Message<DeletePipelineRequest> {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeletePipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeletePipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePipelineRequest {
    return new DeletePipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePipelineRequest {
    return new DeletePipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePipelineRequest {
    return new DeletePipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePipelineRequest | PlainMessage<DeletePipelineRequest> | undefined, b: DeletePipelineRequest | PlainMessage<DeletePipelineRequest> | undefined): boolean {
    return proto3.util.equals(DeletePipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.DeletePipelineResponse
 */
export class DeletePipelineResponse extends Message<DeletePipelineResponse> {
  constructor(data?: PartialMessage<DeletePipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeletePipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePipelineResponse {
    return new DeletePipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePipelineResponse {
    return new DeletePipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePipelineResponse {
    return new DeletePipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePipelineResponse | PlainMessage<DeletePipelineResponse> | undefined, b: DeletePipelineResponse | PlainMessage<DeletePipelineResponse> | undefined): boolean {
    return proto3.util.equals(DeletePipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.StopPipelineRequest
 */
export class StopPipelineRequest extends Message<StopPipelineRequest> {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<StopPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.StopPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopPipelineRequest {
    return new StopPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopPipelineRequest {
    return new StopPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopPipelineRequest {
    return new StopPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopPipelineRequest | PlainMessage<StopPipelineRequest> | undefined, b: StopPipelineRequest | PlainMessage<StopPipelineRequest> | undefined): boolean {
    return proto3.util.equals(StopPipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.StopPipelineResponse
 */
export class StopPipelineResponse extends Message<StopPipelineResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<StopPipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.StopPipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopPipelineResponse {
    return new StopPipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopPipelineResponse {
    return new StopPipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopPipelineResponse {
    return new StopPipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopPipelineResponse | PlainMessage<StopPipelineResponse> | undefined, b: StopPipelineResponse | PlainMessage<StopPipelineResponse> | undefined): boolean {
    return proto3.util.equals(StopPipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.StartPipelineRequest
 */
export class StartPipelineRequest extends Message<StartPipelineRequest> {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<StartPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.StartPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartPipelineRequest {
    return new StartPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartPipelineRequest {
    return new StartPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartPipelineRequest {
    return new StartPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartPipelineRequest | PlainMessage<StartPipelineRequest> | undefined, b: StartPipelineRequest | PlainMessage<StartPipelineRequest> | undefined): boolean {
    return proto3.util.equals(StartPipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.StartPipelineResponse
 */
export class StartPipelineResponse extends Message<StartPipelineResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<StartPipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.StartPipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartPipelineResponse {
    return new StartPipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartPipelineResponse {
    return new StartPipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartPipelineResponse {
    return new StartPipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartPipelineResponse | PlainMessage<StartPipelineResponse> | undefined, b: StartPipelineResponse | PlainMessage<StartPipelineResponse> | undefined): boolean {
    return proto3.util.equals(StartPipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetPipelineServiceConfigSchemaRequest
 */
export class GetPipelineServiceConfigSchemaRequest extends Message<GetPipelineServiceConfigSchemaRequest> {
  constructor(data?: PartialMessage<GetPipelineServiceConfigSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetPipelineServiceConfigSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelineServiceConfigSchemaRequest {
    return new GetPipelineServiceConfigSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelineServiceConfigSchemaRequest {
    return new GetPipelineServiceConfigSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelineServiceConfigSchemaRequest {
    return new GetPipelineServiceConfigSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelineServiceConfigSchemaRequest | PlainMessage<GetPipelineServiceConfigSchemaRequest> | undefined, b: GetPipelineServiceConfigSchemaRequest | PlainMessage<GetPipelineServiceConfigSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GetPipelineServiceConfigSchemaRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetPipelineServiceConfigSchemaResponse
 */
export class GetPipelineServiceConfigSchemaResponse extends Message<GetPipelineServiceConfigSchemaResponse> {
  /**
   * JSON schema of the configuration components that are allowed for Connect pipelines.
   *
   * @generated from field: string config_schema = 1;
   */
  configSchema = "";

  constructor(data?: PartialMessage<GetPipelineServiceConfigSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetPipelineServiceConfigSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelineServiceConfigSchemaResponse {
    return new GetPipelineServiceConfigSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelineServiceConfigSchemaResponse {
    return new GetPipelineServiceConfigSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelineServiceConfigSchemaResponse {
    return new GetPipelineServiceConfigSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelineServiceConfigSchemaResponse | PlainMessage<GetPipelineServiceConfigSchemaResponse> | undefined, b: GetPipelineServiceConfigSchemaResponse | PlainMessage<GetPipelineServiceConfigSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GetPipelineServiceConfigSchemaResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.PipelinesForSecret
 */
export class PipelinesForSecret extends Message<PipelinesForSecret> {
  /**
   * @generated from field: string secret_id = 1;
   */
  secretId = "";

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.Pipeline pipelines = 2;
   */
  pipelines: Pipeline[] = [];

  constructor(data?: PartialMessage<PipelinesForSecret>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.PipelinesForSecret";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pipelines", kind: "message", T: Pipeline, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PipelinesForSecret {
    return new PipelinesForSecret().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PipelinesForSecret {
    return new PipelinesForSecret().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PipelinesForSecret {
    return new PipelinesForSecret().fromJsonString(jsonString, options);
  }

  static equals(a: PipelinesForSecret | PlainMessage<PipelinesForSecret> | undefined, b: PipelinesForSecret | PlainMessage<PipelinesForSecret> | undefined): boolean {
    return proto3.util.equals(PipelinesForSecret, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetPipelinesForSecretRequest
 */
export class GetPipelinesForSecretRequest extends Message<GetPipelinesForSecretRequest> {
  /**
   * Secret ID.
   *
   * @generated from field: string secret_id = 1;
   */
  secretId = "";

  constructor(data?: PartialMessage<GetPipelinesForSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetPipelinesForSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelinesForSecretRequest {
    return new GetPipelinesForSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelinesForSecretRequest {
    return new GetPipelinesForSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelinesForSecretRequest {
    return new GetPipelinesForSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelinesForSecretRequest | PlainMessage<GetPipelinesForSecretRequest> | undefined, b: GetPipelinesForSecretRequest | PlainMessage<GetPipelinesForSecretRequest> | undefined): boolean {
    return proto3.util.equals(GetPipelinesForSecretRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetPipelinesForSecretResponse
 */
export class GetPipelinesForSecretResponse extends Message<GetPipelinesForSecretResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.PipelinesForSecret pipelines_for_secret = 1;
   */
  pipelinesForSecret?: PipelinesForSecret;

  constructor(data?: PartialMessage<GetPipelinesForSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetPipelinesForSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipelines_for_secret", kind: "message", T: PipelinesForSecret },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelinesForSecretResponse {
    return new GetPipelinesForSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelinesForSecretResponse {
    return new GetPipelinesForSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelinesForSecretResponse {
    return new GetPipelinesForSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelinesForSecretResponse | PlainMessage<GetPipelinesForSecretResponse> | undefined, b: GetPipelinesForSecretResponse | PlainMessage<GetPipelinesForSecretResponse> | undefined): boolean {
    return proto3.util.equals(GetPipelinesForSecretResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetPipelinesBySecretsRequest
 */
export class GetPipelinesBySecretsRequest extends Message<GetPipelinesBySecretsRequest> {
  constructor(data?: PartialMessage<GetPipelinesBySecretsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetPipelinesBySecretsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelinesBySecretsRequest {
    return new GetPipelinesBySecretsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelinesBySecretsRequest {
    return new GetPipelinesBySecretsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelinesBySecretsRequest {
    return new GetPipelinesBySecretsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelinesBySecretsRequest | PlainMessage<GetPipelinesBySecretsRequest> | undefined, b: GetPipelinesBySecretsRequest | PlainMessage<GetPipelinesBySecretsRequest> | undefined): boolean {
    return proto3.util.equals(GetPipelinesBySecretsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetPipelinesBySecretsResponse
 */
export class GetPipelinesBySecretsResponse extends Message<GetPipelinesBySecretsResponse> {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.PipelinesForSecret pipelines_for_secret = 1;
   */
  pipelinesForSecret: PipelinesForSecret[] = [];

  constructor(data?: PartialMessage<GetPipelinesBySecretsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetPipelinesBySecretsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipelines_for_secret", kind: "message", T: PipelinesForSecret, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelinesBySecretsResponse {
    return new GetPipelinesBySecretsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelinesBySecretsResponse {
    return new GetPipelinesBySecretsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelinesBySecretsResponse {
    return new GetPipelinesBySecretsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelinesBySecretsResponse | PlainMessage<GetPipelinesBySecretsResponse> | undefined, b: GetPipelinesBySecretsResponse | PlainMessage<GetPipelinesBySecretsResponse> | undefined): boolean {
    return proto3.util.equals(GetPipelinesBySecretsResponse, a, b);
  }
}

