// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/dataplane/v1/kafka_connect.proto (package redpanda.api.dataplane.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/dataplane/v1/kafka_connect.proto.
 */
export const file_redpanda_api_dataplane_v1_kafka_connect: GenFile = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_api_annotations, file_google_api_field_behavior, file_google_protobuf_empty, file_protoc_gen_openapiv2_options_annotations, file_redpanda_api_auth_v1_authorization]);

/**
 * @generated from message redpanda.api.dataplane.v1.ConnectorPlugin
 */
export type ConnectorPlugin = Message<"redpanda.api.dataplane.v1.ConnectorPlugin"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: string class = 3;
   */
  class: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ConnectorPlugin.
 * Use `create(ConnectorPluginSchema)` to create a new message.
 */
export const ConnectorPluginSchema: GenMessage<ConnectorPlugin> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.ConnectCluster
 */
export type ConnectCluster = Message<"redpanda.api.dataplane.v1.ConnectCluster"> & {
  /**
   * Unique name of connect cluster. For Redpanda Cloud, the value is `redpanda`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The host address of the Kafka Connect cluster.
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectCluster.Info info = 3;
   */
  info?: ConnectCluster_Info;

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.ConnectorPlugin plugins = 4;
   */
  plugins: ConnectorPlugin[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.ConnectCluster.
 * Use `create(ConnectClusterSchema)` to create a new message.
 */
export const ConnectClusterSchema: GenMessage<ConnectCluster> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 1);

/**
 * @generated from message redpanda.api.dataplane.v1.ConnectCluster.Info
 */
export type ConnectCluster_Info = Message<"redpanda.api.dataplane.v1.ConnectCluster.Info"> & {
  /**
   * Connect worker version.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The git commit ID of the connect worker source code.
   *
   * @generated from field: string commit = 2;
   */
  commit: string;

  /**
   * Cluster ID.
   *
   * @generated from field: string kafka_cluster_id = 3;
   */
  kafkaClusterId: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ConnectCluster.Info.
 * Use `create(ConnectCluster_InfoSchema)` to create a new message.
 */
export const ConnectCluster_InfoSchema: GenMessage<ConnectCluster_Info> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 1, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.ConnectorStatus
 */
export type ConnectorStatus = Message<"redpanda.api.dataplane.v1.ConnectorStatus"> & {
  /**
   * Name of connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectorStatus.Connector connector = 2;
   */
  connector?: ConnectorStatus_Connector;

  /**
   * Status of connector tasks. For more information, see the [https://docs.redpanda.com/current/deploy/deployment-option/cloud/managed-connectors/monitor-connectors/#connector-tasks](Monitor Connectors) documentation.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.TaskStatus tasks = 3;
   */
  tasks: TaskStatus[];

  /**
   * Type of connector (sink or source).
   *
   * @generated from field: string type = 4;
   */
  type: string;

  /**
   * State of the connector including all the tasks within the connector.
   *
   * @generated from field: redpanda.api.dataplane.v1.ConnectorHolisticState holistic_state = 5;
   */
  holisticState: ConnectorHolisticState;

  /**
   * List of parsed connectors' and tasks' errors.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.ConnectorError errors = 6;
   */
  errors: ConnectorError[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.ConnectorStatus.
 * Use `create(ConnectorStatusSchema)` to create a new message.
 */
export const ConnectorStatusSchema: GenMessage<ConnectorStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 2);

/**
 * @generated from message redpanda.api.dataplane.v1.ConnectorStatus.Connector
 */
export type ConnectorStatus_Connector = Message<"redpanda.api.dataplane.v1.ConnectorStatus.Connector"> & {
  /**
   * State of the connector instance.
   *
   * @generated from field: string state = 1;
   */
  state: string;

  /**
   * ID of worker that the connector is assigned to.
   *
   * @generated from field: string worker_id = 2;
   */
  workerId: string;

  /**
   * String value of stack trace.
   *
   * @generated from field: string trace = 3;
   */
  trace: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ConnectorStatus.Connector.
 * Use `create(ConnectorStatus_ConnectorSchema)` to create a new message.
 */
export const ConnectorStatus_ConnectorSchema: GenMessage<ConnectorStatus_Connector> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 2, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.TaskStatus
 */
export type TaskStatus = Message<"redpanda.api.dataplane.v1.TaskStatus"> & {
  /**
   * The connector task ID.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * State of connector task.
   *
   * @generated from field: string state = 2;
   */
  state: string;

  /**
   * ID of worker that the task is assigned to.
   *
   * @generated from field: string worker_id = 3;
   */
  workerId: string;

  /**
   * String value of stack trace.
   *
   * @generated from field: string trace = 4;
   */
  trace: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.TaskStatus.
 * Use `create(TaskStatusSchema)` to create a new message.
 */
export const TaskStatusSchema: GenMessage<TaskStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 3);

/**
 * @generated from message redpanda.api.dataplane.v1.TaskInfo
 */
export type TaskInfo = Message<"redpanda.api.dataplane.v1.TaskInfo"> & {
  /**
   * Name of connector.
   *
   * @generated from field: string connector = 1;
   */
  connector: string;

  /**
   * The connector task ID.
   *
   * @generated from field: int32 task = 2;
   */
  task: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1.TaskInfo.
 * Use `create(TaskInfoSchema)` to create a new message.
 */
export const TaskInfoSchema: GenMessage<TaskInfo> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 4);

/**
 * ConnectorError is the error of a connector, this is holistic error
 * abstraction, made parsing the error trace of connector or Task
 *
 * @generated from message redpanda.api.dataplane.v1.ConnectorError
 */
export type ConnectorError = Message<"redpanda.api.dataplane.v1.ConnectorError"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectorError.Type type = 1;
   */
  type: ConnectorError_Type;

  /**
   * Short description of the error.
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * Detailed description of the error.
   *
   * @generated from field: string content = 3;
   */
  content: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ConnectorError.
 * Use `create(ConnectorErrorSchema)` to create a new message.
 */
export const ConnectorErrorSchema: GenMessage<ConnectorError> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 5);

/**
 * Error level.
 *
 * @generated from enum redpanda.api.dataplane.v1.ConnectorError.Type
 */
export enum ConnectorError_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_ERROR = 1;
   */
  ERROR = 1,

  /**
   * @generated from enum value: TYPE_WARNING = 2;
   */
  WARNING = 2,
}

/**
 * Describes the enum redpanda.api.dataplane.v1.ConnectorError.Type.
 */
export const ConnectorError_TypeSchema: GenEnum<ConnectorError_Type> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1_kafka_connect, 5, 0);

/**
 * Connector specifications as defined in the Kafka Connect
 * API. You may include this in the request body when creating a new connector.
 *
 * @generated from message redpanda.api.dataplane.v1.ConnectorSpec
 */
export type ConnectorSpec = Message<"redpanda.api.dataplane.v1.ConnectorSpec"> & {
  /**
   * Name of connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Connector configuration properties.
   *
   * @generated from field: map<string, string> config = 2;
   */
  config: { [key: string]: string };

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.TaskInfo tasks = 3;
   */
  tasks: TaskInfo[];

  /**
   * @generated from field: string type = 4;
   */
  type: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ConnectorSpec.
 * Use `create(ConnectorSpecSchema)` to create a new message.
 */
export const ConnectorSpecSchema: GenMessage<ConnectorSpec> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 6);

/**
 * @generated from message redpanda.api.dataplane.v1.ListConnectorsRequest
 */
export type ListConnectorsRequest = Message<"redpanda.api.dataplane.v1.ListConnectorsRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListConnectorsRequest.
 * Use `create(ListConnectorsRequestSchema)` to create a new message.
 */
export const ListConnectorsRequestSchema: GenMessage<ListConnectorsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 7);

/**
 * @generated from message redpanda.api.dataplane.v1.RestartConnectorRequest
 */
export type RestartConnectorRequest = Message<"redpanda.api.dataplane.v1.RestartConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1.RestartConnectorRequest.Options options = 3;
   */
  options?: RestartConnectorRequest_Options;
};

/**
 * Describes the message redpanda.api.dataplane.v1.RestartConnectorRequest.
 * Use `create(RestartConnectorRequestSchema)` to create a new message.
 */
export const RestartConnectorRequestSchema: GenMessage<RestartConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 8);

/**
 * @generated from message redpanda.api.dataplane.v1.RestartConnectorRequest.Options
 */
export type RestartConnectorRequest_Options = Message<"redpanda.api.dataplane.v1.RestartConnectorRequest.Options"> & {
  /**
   * Restart connector's tasks.
   *
   * @generated from field: bool include_tasks = 1;
   */
  includeTasks: boolean;

  /**
   * Restart only connectors that have failed.
   *
   * @generated from field: bool only_failed = 2;
   */
  onlyFailed: boolean;
};

/**
 * Describes the message redpanda.api.dataplane.v1.RestartConnectorRequest.Options.
 * Use `create(RestartConnectorRequest_OptionsSchema)` to create a new message.
 */
export const RestartConnectorRequest_OptionsSchema: GenMessage<RestartConnectorRequest_Options> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 8, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.DeleteConnectorRequest
 */
export type DeleteConnectorRequest = Message<"redpanda.api.dataplane.v1.DeleteConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.DeleteConnectorRequest.
 * Use `create(DeleteConnectorRequestSchema)` to create a new message.
 */
export const DeleteConnectorRequestSchema: GenMessage<DeleteConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 9);

/**
 * @generated from message redpanda.api.dataplane.v1.PauseConnectorRequest
 */
export type PauseConnectorRequest = Message<"redpanda.api.dataplane.v1.PauseConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.PauseConnectorRequest.
 * Use `create(PauseConnectorRequestSchema)` to create a new message.
 */
export const PauseConnectorRequestSchema: GenMessage<PauseConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 10);

/**
 * @generated from message redpanda.api.dataplane.v1.ResumeConnectorRequest
 */
export type ResumeConnectorRequest = Message<"redpanda.api.dataplane.v1.ResumeConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ResumeConnectorRequest.
 * Use `create(ResumeConnectorRequestSchema)` to create a new message.
 */
export const ResumeConnectorRequestSchema: GenMessage<ResumeConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 11);

/**
 * @generated from message redpanda.api.dataplane.v1.StopConnectorRequest
 */
export type StopConnectorRequest = Message<"redpanda.api.dataplane.v1.StopConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.StopConnectorRequest.
 * Use `create(StopConnectorRequestSchema)` to create a new message.
 */
export const StopConnectorRequestSchema: GenMessage<StopConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 12);

/**
 * @generated from message redpanda.api.dataplane.v1.GetConnectorRequest
 */
export type GetConnectorRequest = Message<"redpanda.api.dataplane.v1.GetConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetConnectorRequest.
 * Use `create(GetConnectorRequestSchema)` to create a new message.
 */
export const GetConnectorRequestSchema: GenMessage<GetConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 13);

/**
 * @generated from message redpanda.api.dataplane.v1.CreateConnectorRequest
 */
export type CreateConnectorRequest = Message<"redpanda.api.dataplane.v1.CreateConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectorSpec connector = 2;
   */
  connector?: ConnectorSpec;
};

/**
 * Describes the message redpanda.api.dataplane.v1.CreateConnectorRequest.
 * Use `create(CreateConnectorRequestSchema)` to create a new message.
 */
export const CreateConnectorRequestSchema: GenMessage<CreateConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 14);

/**
 * @generated from message redpanda.api.dataplane.v1.GetConnectorResponse
 */
export type GetConnectorResponse = Message<"redpanda.api.dataplane.v1.GetConnectorResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectorSpec connector = 1;
   */
  connector?: ConnectorSpec;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetConnectorResponse.
 * Use `create(GetConnectorResponseSchema)` to create a new message.
 */
export const GetConnectorResponseSchema: GenMessage<GetConnectorResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 15);

/**
 * @generated from message redpanda.api.dataplane.v1.CreateConnectorResponse
 */
export type CreateConnectorResponse = Message<"redpanda.api.dataplane.v1.CreateConnectorResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectorSpec connector = 1;
   */
  connector?: ConnectorSpec;
};

/**
 * Describes the message redpanda.api.dataplane.v1.CreateConnectorResponse.
 * Use `create(CreateConnectorResponseSchema)` to create a new message.
 */
export const CreateConnectorResponseSchema: GenMessage<CreateConnectorResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 16);

/**
 * @generated from message redpanda.api.dataplane.v1.ListConnectorsResponse
 */
export type ListConnectorsResponse = Message<"redpanda.api.dataplane.v1.ListConnectorsResponse"> & {
  /**
   * List of connectors, where the parent key is the connector name.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.ListConnectorsResponse.ConnectorInfoStatus connectors = 1;
   */
  connectors: ListConnectorsResponse_ConnectorInfoStatus[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListConnectorsResponse.
 * Use `create(ListConnectorsResponseSchema)` to create a new message.
 */
export const ListConnectorsResponseSchema: GenMessage<ListConnectorsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 17);

/**
 * @generated from message redpanda.api.dataplane.v1.ListConnectorsResponse.ConnectorInfoStatus
 */
export type ListConnectorsResponse_ConnectorInfoStatus = Message<"redpanda.api.dataplane.v1.ListConnectorsResponse.ConnectorInfoStatus"> & {
  /**
   * Name of connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectorSpec info = 2;
   */
  info?: ConnectorSpec;

  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectorStatus status = 3;
   */
  status?: ConnectorStatus;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListConnectorsResponse.ConnectorInfoStatus.
 * Use `create(ListConnectorsResponse_ConnectorInfoStatusSchema)` to create a new message.
 */
export const ListConnectorsResponse_ConnectorInfoStatusSchema: GenMessage<ListConnectorsResponse_ConnectorInfoStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 17, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.GetConnectClusterRequest
 */
export type GetConnectClusterRequest = Message<"redpanda.api.dataplane.v1.GetConnectClusterRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetConnectClusterRequest.
 * Use `create(GetConnectClusterRequestSchema)` to create a new message.
 */
export const GetConnectClusterRequestSchema: GenMessage<GetConnectClusterRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 18);

/**
 * @generated from message redpanda.api.dataplane.v1.GetConnectClusterResponse
 */
export type GetConnectClusterResponse = Message<"redpanda.api.dataplane.v1.GetConnectClusterResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectCluster cluster = 1;
   */
  cluster?: ConnectCluster;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetConnectClusterResponse.
 * Use `create(GetConnectClusterResponseSchema)` to create a new message.
 */
export const GetConnectClusterResponseSchema: GenMessage<GetConnectClusterResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 19);

/**
 * @generated from message redpanda.api.dataplane.v1.ListConnectClustersRequest
 */
export type ListConnectClustersRequest = Message<"redpanda.api.dataplane.v1.ListConnectClustersRequest"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListConnectClustersRequest.
 * Use `create(ListConnectClustersRequestSchema)` to create a new message.
 */
export const ListConnectClustersRequestSchema: GenMessage<ListConnectClustersRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 20);

/**
 * @generated from message redpanda.api.dataplane.v1.ListConnectClustersResponse
 */
export type ListConnectClustersResponse = Message<"redpanda.api.dataplane.v1.ListConnectClustersResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.ConnectCluster clusters = 1;
   */
  clusters: ConnectCluster[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListConnectClustersResponse.
 * Use `create(ListConnectClustersResponseSchema)` to create a new message.
 */
export const ListConnectClustersResponseSchema: GenMessage<ListConnectClustersResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 21);

/**
 * @generated from message redpanda.api.dataplane.v1.UpsertConnectorRequest
 */
export type UpsertConnectorRequest = Message<"redpanda.api.dataplane.v1.UpsertConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector. If a connector with this name does not already exist, a new connector is created.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Connector configuration property.
   *
   * @generated from field: map<string, string> config = 3;
   */
  config: { [key: string]: string };
};

/**
 * Describes the message redpanda.api.dataplane.v1.UpsertConnectorRequest.
 * Use `create(UpsertConnectorRequestSchema)` to create a new message.
 */
export const UpsertConnectorRequestSchema: GenMessage<UpsertConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 22);

/**
 * @generated from message redpanda.api.dataplane.v1.UpsertConnectorResponse
 */
export type UpsertConnectorResponse = Message<"redpanda.api.dataplane.v1.UpsertConnectorResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectorSpec connector = 1;
   */
  connector?: ConnectorSpec;
};

/**
 * Describes the message redpanda.api.dataplane.v1.UpsertConnectorResponse.
 * Use `create(UpsertConnectorResponseSchema)` to create a new message.
 */
export const UpsertConnectorResponseSchema: GenMessage<UpsertConnectorResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 23);

/**
 * @generated from message redpanda.api.dataplane.v1.GetConnectorConfigRequest
 */
export type GetConnectorConfigRequest = Message<"redpanda.api.dataplane.v1.GetConnectorConfigRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetConnectorConfigRequest.
 * Use `create(GetConnectorConfigRequestSchema)` to create a new message.
 */
export const GetConnectorConfigRequestSchema: GenMessage<GetConnectorConfigRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 24);

/**
 * @generated from message redpanda.api.dataplane.v1.GetConnectorConfigResponse
 */
export type GetConnectorConfigResponse = Message<"redpanda.api.dataplane.v1.GetConnectorConfigResponse"> & {
  /**
   * @generated from field: map<string, string> config = 1;
   */
  config: { [key: string]: string };
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetConnectorConfigResponse.
 * Use `create(GetConnectorConfigResponseSchema)` to create a new message.
 */
export const GetConnectorConfigResponseSchema: GenMessage<GetConnectorConfigResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 25);

/**
 * @generated from message redpanda.api.dataplane.v1.GetConnectorStatusRequest
 */
export type GetConnectorStatusRequest = Message<"redpanda.api.dataplane.v1.GetConnectorStatusRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetConnectorStatusRequest.
 * Use `create(GetConnectorStatusRequestSchema)` to create a new message.
 */
export const GetConnectorStatusRequestSchema: GenMessage<GetConnectorStatusRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 26);

/**
 * @generated from message redpanda.api.dataplane.v1.GetConnectorStatusResponse
 */
export type GetConnectorStatusResponse = Message<"redpanda.api.dataplane.v1.GetConnectorStatusResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ConnectorStatus status = 1;
   */
  status?: ConnectorStatus;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetConnectorStatusResponse.
 * Use `create(GetConnectorStatusResponseSchema)` to create a new message.
 */
export const GetConnectorStatusResponseSchema: GenMessage<GetConnectorStatusResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 27);

/**
 * @generated from message redpanda.api.dataplane.v1.ListConnectorTopicsRequest
 */
export type ListConnectorTopicsRequest = Message<"redpanda.api.dataplane.v1.ListConnectorTopicsRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListConnectorTopicsRequest.
 * Use `create(ListConnectorTopicsRequestSchema)` to create a new message.
 */
export const ListConnectorTopicsRequestSchema: GenMessage<ListConnectorTopicsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 28);

/**
 * @generated from message redpanda.api.dataplane.v1.ListConnectorTopicsResponse
 */
export type ListConnectorTopicsResponse = Message<"redpanda.api.dataplane.v1.ListConnectorTopicsResponse"> & {
  /**
   * Topic names.
   *
   * @generated from field: repeated string topics = 1;
   */
  topics: string[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListConnectorTopicsResponse.
 * Use `create(ListConnectorTopicsResponseSchema)` to create a new message.
 */
export const ListConnectorTopicsResponseSchema: GenMessage<ListConnectorTopicsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 29);

/**
 * @generated from message redpanda.api.dataplane.v1.ResetConnectorTopicsRequest
 */
export type ResetConnectorTopicsRequest = Message<"redpanda.api.dataplane.v1.ResetConnectorTopicsRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector using the topics to be reset.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ResetConnectorTopicsRequest.
 * Use `create(ResetConnectorTopicsRequestSchema)` to create a new message.
 */
export const ResetConnectorTopicsRequestSchema: GenMessage<ResetConnectorTopicsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_kafka_connect, 30);

/**
 * State of a connector or one of its tasks, as described in the [Kafka Connect documentation](https://kafka.apache.org/documentation.html#connect_administration). Takes into account not just the state of the connector instance itself, but also the tasks within the connector.
 *
 * @generated from enum redpanda.api.dataplane.v1.ConnectorHolisticState
 */
export enum ConnectorHolisticState {
  /**
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The connector or task has been administratively paused.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_PAUSED = 1;
   */
  PAUSED = 1,

  /**
   * The connector or task is restarting.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_RESTARTING = 2;
   */
  RESTARTING = 2,

  /**
   * The connector is destroyed, regardless of any tasks.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_DESTROYED = 3;
   */
  DESTROYED = 3,

  /**
   * The connector or task has been stopped.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * - The connector or task has not yet been assigned to a worker,
   * - THe connector is running, but there are unassigned tasks.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNASSIGNED = 5;
   */
  UNASSIGNED = 5,

  /**
   * The connector is running, > 0 tasks, all of them in running state.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_HEALTHY = 6;
   */
  HEALTHY = 6,

  /**
   * - The connector has failed,
   * - The connector is running, but has no tasks,
   * - Connector is running and has tasks, but all tasks have failed.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNHEALTHY = 7;
   */
  UNHEALTHY = 7,

  /**
   * The connector is running and has tasks, and at least one task, but not all, have failed.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_DEGRADED = 8;
   */
  DEGRADED = 8,

  /**
   * The connector or task state could not be determined.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNKNOWN = 9;
   */
  UNKNOWN = 9,
}

/**
 * Describes the enum redpanda.api.dataplane.v1.ConnectorHolisticState.
 */
export const ConnectorHolisticStateSchema: GenEnum<ConnectorHolisticState> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1_kafka_connect, 0);

/**
 * KafkaConnectService is the service for the Kafka connect, it exposes the
 * Kafka Connect API, you can set multiple Kafka connect services and all of
 * them can be managed using this service definition, the request is not only
 * proxied but also enriched with better error handling and custom
 * documentation and configuration
 *
 * @generated from service redpanda.api.dataplane.v1.KafkaConnectService
 */
export const KafkaConnectService: GenService<{
  /**
   * ListConnectClusters implements the list clusters method, list connect
   * clusters available in the console configuration
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.ListConnectClusters
   */
  listConnectClusters: {
    methodKind: "unary";
    input: typeof ListConnectClustersRequestSchema;
    output: typeof ListConnectClustersResponseSchema;
  },
  /**
   * GetConnectCluster implements the get cluster info method, exposes a Kafka
   * Connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.GetConnectCluster
   */
  getConnectCluster: {
    methodKind: "unary";
    input: typeof GetConnectClusterRequestSchema;
    output: typeof GetConnectClusterResponseSchema;
  },
  /**
   * ListConnectors implements the list connectors method, exposes a Kafka
   * Connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.ListConnectors
   */
  listConnectors: {
    methodKind: "unary";
    input: typeof ListConnectorsRequestSchema;
    output: typeof ListConnectorsResponseSchema;
  },
  /**
   * CreateConnector implements the create connector method, and exposes an
   * equivalent REST endpoint as the Kafka connect API endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.CreateConnector
   */
  createConnector: {
    methodKind: "unary";
    input: typeof CreateConnectorRequestSchema;
    output: typeof CreateConnectorResponseSchema;
  },
  /**
   * RestartConnector implements the restart connector method, exposes a Kafka
   * Connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.RestartConnector
   */
  restartConnector: {
    methodKind: "unary";
    input: typeof RestartConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetConnector implements the get connector method, exposes a Kafka
   * Connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.GetConnector
   */
  getConnector: {
    methodKind: "unary";
    input: typeof GetConnectorRequestSchema;
    output: typeof GetConnectorResponseSchema;
  },
  /**
   * GetConnectorStatus implement the get status method, Gets the current status of the connector, including:
   * Whether it is running or restarting, or if it has failed or paused
   * Which worker it is assigned to
   * Error information if it has failed
   * The state of all its tasks
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.GetConnectorStatus
   */
  getConnectorStatus: {
    methodKind: "unary";
    input: typeof GetConnectorStatusRequestSchema;
    output: typeof GetConnectorStatusResponseSchema;
  },
  /**
   * PauseConnector implements the pause connector method, exposes a Kafka
   * connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.PauseConnector
   */
  pauseConnector: {
    methodKind: "unary";
    input: typeof PauseConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * ResumeConnector implements the resume connector method, exposes a Kafka
   * connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.ResumeConnector
   */
  resumeConnector: {
    methodKind: "unary";
    input: typeof ResumeConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * StopConnector implements the stop connector method, exposes a Kafka
   * connect equivalent REST endpoint it stops the connector but does not
   * delete the connector. All tasks for the connector are shut down completely
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.StopConnector
   */
  stopConnector: {
    methodKind: "unary";
    input: typeof StopConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteConnector implements the delete connector method, exposes a Kafka
   * connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.DeleteConnector
   */
  deleteConnector: {
    methodKind: "unary";
    input: typeof DeleteConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertConector implements the update or create connector method, it
   * exposes a kafka connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.UpsertConnector
   */
  upsertConnector: {
    methodKind: "unary";
    input: typeof UpsertConnectorRequestSchema;
    output: typeof UpsertConnectorResponseSchema;
  },
  /**
   * GetConnectorConfig implements the get connector configuration method, expose a kafka connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.GetConnectorConfig
   */
  getConnectorConfig: {
    methodKind: "unary";
    input: typeof GetConnectorConfigRequestSchema;
    output: typeof GetConnectorConfigResponseSchema;
  },
  /**
   * ListConnectorTopics implements the list connector topics method, expose a kafka connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.ListConnectorTopics
   */
  listConnectorTopics: {
    methodKind: "unary";
    input: typeof ListConnectorTopicsRequestSchema;
    output: typeof ListConnectorTopicsResponseSchema;
  },
  /**
   * ResetConnectorTopics implements the reset connector topics method, expose a kafka connect equivalent REST endpoint
   * the request body is empty.
   *
   * @generated from rpc redpanda.api.dataplane.v1.KafkaConnectService.ResetConnectorTopics
   */
  resetConnectorTopics: {
    methodKind: "unary";
    input: typeof ResetConnectorTopicsRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_dataplane_v1_kafka_connect, 0);

