// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/dataplane/v1/cloud_storage.proto (package redpanda.api.dataplane.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message redpanda.api.dataplane.v1.MountTopicsRequest
 */
export class MountTopicsRequest extends Message<MountTopicsRequest> {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.MountTopicsRequest.TopicMount topics = 1;
   */
  topics: MountTopicsRequest_TopicMount[] = [];

  constructor(data?: PartialMessage<MountTopicsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.MountTopicsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topics", kind: "message", T: MountTopicsRequest_TopicMount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MountTopicsRequest {
    return new MountTopicsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MountTopicsRequest {
    return new MountTopicsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MountTopicsRequest {
    return new MountTopicsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MountTopicsRequest | PlainMessage<MountTopicsRequest> | undefined, b: MountTopicsRequest | PlainMessage<MountTopicsRequest> | undefined): boolean {
    return proto3.util.equals(MountTopicsRequest, a, b);
  }
}

/**
 * TopicMount defines the migration of a topic from the cloud storage into this cluster,
 * so that it becomes available via the Kafka API.
 *
 * @generated from message redpanda.api.dataplane.v1.MountTopicsRequest.TopicMount
 */
export class MountTopicsRequest_TopicMount extends Message<MountTopicsRequest_TopicMount> {
  /**
   * The topic name or full reference of the topic to mount. The full reference
   * must be used in case the same topic exists more than once. This may be the case if
   * the same topic has been unmounted multiple times. List all mountable topics to
   * find the full reference (contains topic name, cluster uuid and revision).
   *
   * @generated from field: string source_topic_reference = 1;
   */
  sourceTopicReference = "";

  /**
   * Alias may be provided to mount the topic under a different name. Leave
   * blank to re-use the source topic name. The alias does not persist if you
   * unmount the topic again.
   *
   * @generated from field: string alias = 2;
   */
  alias = "";

  constructor(data?: PartialMessage<MountTopicsRequest_TopicMount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.MountTopicsRequest.TopicMount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_topic_reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MountTopicsRequest_TopicMount {
    return new MountTopicsRequest_TopicMount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MountTopicsRequest_TopicMount {
    return new MountTopicsRequest_TopicMount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MountTopicsRequest_TopicMount {
    return new MountTopicsRequest_TopicMount().fromJsonString(jsonString, options);
  }

  static equals(a: MountTopicsRequest_TopicMount | PlainMessage<MountTopicsRequest_TopicMount> | undefined, b: MountTopicsRequest_TopicMount | PlainMessage<MountTopicsRequest_TopicMount> | undefined): boolean {
    return proto3.util.equals(MountTopicsRequest_TopicMount, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.MountTopicsResponse
 */
export class MountTopicsResponse extends Message<MountTopicsResponse> {
  /**
   * ID of mount
   *
   * @generated from field: int32 mount_task_id = 1;
   */
  mountTaskId = 0;

  constructor(data?: PartialMessage<MountTopicsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.MountTopicsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mount_task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MountTopicsResponse {
    return new MountTopicsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MountTopicsResponse {
    return new MountTopicsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MountTopicsResponse {
    return new MountTopicsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MountTopicsResponse | PlainMessage<MountTopicsResponse> | undefined, b: MountTopicsResponse | PlainMessage<MountTopicsResponse> | undefined): boolean {
    return proto3.util.equals(MountTopicsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.UnmountTopicsRequest
 */
export class UnmountTopicsRequest extends Message<UnmountTopicsRequest> {
  /**
   * List of topics to unmount.
   *
   * @generated from field: repeated string topics = 1;
   */
  topics: string[] = [];

  constructor(data?: PartialMessage<UnmountTopicsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UnmountTopicsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topics", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnmountTopicsRequest {
    return new UnmountTopicsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnmountTopicsRequest {
    return new UnmountTopicsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnmountTopicsRequest {
    return new UnmountTopicsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnmountTopicsRequest | PlainMessage<UnmountTopicsRequest> | undefined, b: UnmountTopicsRequest | PlainMessage<UnmountTopicsRequest> | undefined): boolean {
    return proto3.util.equals(UnmountTopicsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.UnmountTopicsResponse
 */
export class UnmountTopicsResponse extends Message<UnmountTopicsResponse> {
  /**
   * ID of unmount
   *
   * @generated from field: int32 mount_task_id = 1;
   */
  mountTaskId = 0;

  constructor(data?: PartialMessage<UnmountTopicsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UnmountTopicsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mount_task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnmountTopicsResponse {
    return new UnmountTopicsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnmountTopicsResponse {
    return new UnmountTopicsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnmountTopicsResponse {
    return new UnmountTopicsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnmountTopicsResponse | PlainMessage<UnmountTopicsResponse> | undefined, b: UnmountTopicsResponse | PlainMessage<UnmountTopicsResponse> | undefined): boolean {
    return proto3.util.equals(UnmountTopicsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListMountableTopicsRequest
 */
export class ListMountableTopicsRequest extends Message<ListMountableTopicsRequest> {
  constructor(data?: PartialMessage<ListMountableTopicsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListMountableTopicsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMountableTopicsRequest {
    return new ListMountableTopicsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMountableTopicsRequest {
    return new ListMountableTopicsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMountableTopicsRequest {
    return new ListMountableTopicsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMountableTopicsRequest | PlainMessage<ListMountableTopicsRequest> | undefined, b: ListMountableTopicsRequest | PlainMessage<ListMountableTopicsRequest> | undefined): boolean {
    return proto3.util.equals(ListMountableTopicsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListMountableTopicsResponse
 */
export class ListMountableTopicsResponse extends Message<ListMountableTopicsResponse> {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.ListMountableTopicsResponse.TopicLocation topics = 1;
   */
  topics: ListMountableTopicsResponse_TopicLocation[] = [];

  constructor(data?: PartialMessage<ListMountableTopicsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListMountableTopicsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topics", kind: "message", T: ListMountableTopicsResponse_TopicLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMountableTopicsResponse {
    return new ListMountableTopicsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMountableTopicsResponse {
    return new ListMountableTopicsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMountableTopicsResponse {
    return new ListMountableTopicsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMountableTopicsResponse | PlainMessage<ListMountableTopicsResponse> | undefined, b: ListMountableTopicsResponse | PlainMessage<ListMountableTopicsResponse> | undefined): boolean {
    return proto3.util.equals(ListMountableTopicsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListMountableTopicsResponse.TopicLocation
 */
export class ListMountableTopicsResponse_TopicLocation extends Message<ListMountableTopicsResponse_TopicLocation> {
  /**
   * Topic name.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName = "";

  /**
   * Full reference for the unmounted topic in this format: `topic-name/cluster-uuid/revision`.
   * Use this as unique identifier for mounting a topic if there are multiple topics available
   * with the same name.
   *
   * @generated from field: string topic_location = 2;
   */
  topicLocation = "";

  constructor(data?: PartialMessage<ListMountableTopicsResponse_TopicLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListMountableTopicsResponse.TopicLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "topic_location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMountableTopicsResponse_TopicLocation {
    return new ListMountableTopicsResponse_TopicLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMountableTopicsResponse_TopicLocation {
    return new ListMountableTopicsResponse_TopicLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMountableTopicsResponse_TopicLocation {
    return new ListMountableTopicsResponse_TopicLocation().fromJsonString(jsonString, options);
  }

  static equals(a: ListMountableTopicsResponse_TopicLocation | PlainMessage<ListMountableTopicsResponse_TopicLocation> | undefined, b: ListMountableTopicsResponse_TopicLocation | PlainMessage<ListMountableTopicsResponse_TopicLocation> | undefined): boolean {
    return proto3.util.equals(ListMountableTopicsResponse_TopicLocation, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.MountTask
 */
export class MountTask extends Message<MountTask> {
  /**
   * Unique identifier for this mount task.
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * State describes the current state of the mount task (e.g. "cancelled").
   *
   * @generated from field: redpanda.api.dataplane.v1.MountTask.State state = 2;
   */
  state = MountTask_State.UNSPECIFIED;

  /**
   * Type describes the type of this task (mount or unmount).
   *
   * @generated from field: redpanda.api.dataplane.v1.MountTask.Type type = 3;
   */
  type = MountTask_Type.UNSPECIFIED;

  /**
   * List of topics that are being mounted or unmounted.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.MountTask.Topic topics = 4;
   */
  topics: MountTask_Topic[] = [];

  constructor(data?: PartialMessage<MountTask>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.MountTask";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(MountTask_State) },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(MountTask_Type) },
    { no: 4, name: "topics", kind: "message", T: MountTask_Topic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MountTask {
    return new MountTask().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MountTask {
    return new MountTask().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MountTask {
    return new MountTask().fromJsonString(jsonString, options);
  }

  static equals(a: MountTask | PlainMessage<MountTask> | undefined, b: MountTask | PlainMessage<MountTask> | undefined): boolean {
    return proto3.util.equals(MountTask, a, b);
  }
}

/**
 * @generated from enum redpanda.api.dataplane.v1.MountTask.Type
 */
export enum MountTask_Type {
  /**
   * Default value; indicates an invalid or unknown task type.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Mount represents the process of making topics available in a cluster by loading them from object storage.
   *
   * @generated from enum value: TYPE_MOUNT = 1;
   */
  MOUNT = 1,

  /**
   * Unmount represents the process of offloading topics back to object storage.
   *
   * @generated from enum value: TYPE_UNMOUNT = 2;
   */
  UNMOUNT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(MountTask_Type)
proto3.util.setEnumType(MountTask_Type, "redpanda.api.dataplane.v1.MountTask.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_MOUNT" },
  { no: 2, name: "TYPE_UNMOUNT" },
]);

/**
 * @generated from enum redpanda.api.dataplane.v1.MountTask.State
 */
export enum MountTask_State {
  /**
   * Unspecified is the default value, indicating an invalid or unrecognized state.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Planned: The mount task has been created and is awaiting further actions.
   *
   * @generated from enum value: STATE_PLANNED = 1;
   */
  PLANNED = 1,

  /**
   * Preparing: The mount task is gathering resources and preparing for execution.
   *
   * @generated from enum value: STATE_PREPARING = 2;
   */
  PREPARING = 2,

  /**
   * Prepared: All preparations are complete, and the mount task is ready to be executed.
   *
   * @generated from enum value: STATE_PREPARED = 3;
   */
  PREPARED = 3,

  /**
   * Executing: The mount task is actively transferring or transforming data.
   *
   * @generated from enum value: STATE_EXECUTING = 4;
   */
  EXECUTING = 4,

  /**
   * Executed: The core mount task actions are complete, but the mount task has not yet cut over or finalized.
   *
   * @generated from enum value: STATE_EXECUTED = 5;
   */
  EXECUTED = 5,

  /**
   * Cut Over: The mount task has reached a critical point where ownership is transferred or final adjustments are made.
   *
   * @generated from enum value: STATE_CUT_OVER = 6;
   */
  CUT_OVER = 6,

  /**
   * Finished: The mount task has been successfully completed, and no further actions are required.
   *
   * @generated from enum value: STATE_FINISHED = 7;
   */
  FINISHED = 7,

  /**
   * Canceling: The mount task is in the process of being canceled, and rollback or cleanup actions may be in progress.
   *
   * @generated from enum value: STATE_CANCELING = 8;
   */
  CANCELING = 8,

  /**
   * Cancelled: The mount task has been fully canceled, and no further actions will be taken.
   *
   * @generated from enum value: STATE_CANCELLED = 9;
   */
  CANCELLED = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(MountTask_State)
proto3.util.setEnumType(MountTask_State, "redpanda.api.dataplane.v1.MountTask.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_PLANNED" },
  { no: 2, name: "STATE_PREPARING" },
  { no: 3, name: "STATE_PREPARED" },
  { no: 4, name: "STATE_EXECUTING" },
  { no: 5, name: "STATE_EXECUTED" },
  { no: 6, name: "STATE_CUT_OVER" },
  { no: 7, name: "STATE_FINISHED" },
  { no: 8, name: "STATE_CANCELING" },
  { no: 9, name: "STATE_CANCELLED" },
]);

/**
 * @generated from message redpanda.api.dataplane.v1.MountTask.Topic
 */
export class MountTask_Topic extends Message<MountTask_Topic> {
  /**
   * The topic reference within the current cluster, which may be either a simple topic name or a full reference
   * in the form: cluster-uuid/topic-name/revision.
   *
   * @generated from field: string topic_reference = 1;
   */
  topicReference = "";

  /**
   * The topic reference in the object storage bucket.
   * This field is only set for tasks of type MOUNT.
   *
   * @generated from field: string source_topic_reference = 2;
   */
  sourceTopicReference = "";

  constructor(data?: PartialMessage<MountTask_Topic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.MountTask.Topic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic_reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_topic_reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MountTask_Topic {
    return new MountTask_Topic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MountTask_Topic {
    return new MountTask_Topic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MountTask_Topic {
    return new MountTask_Topic().fromJsonString(jsonString, options);
  }

  static equals(a: MountTask_Topic | PlainMessage<MountTask_Topic> | undefined, b: MountTask_Topic | PlainMessage<MountTask_Topic> | undefined): boolean {
    return proto3.util.equals(MountTask_Topic, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListMountTasksRequest
 */
export class ListMountTasksRequest extends Message<ListMountTasksRequest> {
  constructor(data?: PartialMessage<ListMountTasksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListMountTasksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMountTasksRequest {
    return new ListMountTasksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMountTasksRequest {
    return new ListMountTasksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMountTasksRequest {
    return new ListMountTasksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMountTasksRequest | PlainMessage<ListMountTasksRequest> | undefined, b: ListMountTasksRequest | PlainMessage<ListMountTasksRequest> | undefined): boolean {
    return proto3.util.equals(ListMountTasksRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListMountTasksResponse
 */
export class ListMountTasksResponse extends Message<ListMountTasksResponse> {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.MountTask tasks = 1;
   */
  tasks: MountTask[] = [];

  constructor(data?: PartialMessage<ListMountTasksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListMountTasksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tasks", kind: "message", T: MountTask, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMountTasksResponse {
    return new ListMountTasksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMountTasksResponse {
    return new ListMountTasksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMountTasksResponse {
    return new ListMountTasksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMountTasksResponse | PlainMessage<ListMountTasksResponse> | undefined, b: ListMountTasksResponse | PlainMessage<ListMountTasksResponse> | undefined): boolean {
    return proto3.util.equals(ListMountTasksResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetMountTaskRequest
 */
export class GetMountTaskRequest extends Message<GetMountTaskRequest> {
  /**
   * Unique identifier of the mount or unmount task to retrieve.
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetMountTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetMountTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMountTaskRequest {
    return new GetMountTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMountTaskRequest {
    return new GetMountTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMountTaskRequest {
    return new GetMountTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMountTaskRequest | PlainMessage<GetMountTaskRequest> | undefined, b: GetMountTaskRequest | PlainMessage<GetMountTaskRequest> | undefined): boolean {
    return proto3.util.equals(GetMountTaskRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetMountTaskResponse
 */
export class GetMountTaskResponse extends Message<GetMountTaskResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.MountTask task = 1;
   */
  task?: MountTask;

  constructor(data?: PartialMessage<GetMountTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetMountTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: MountTask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMountTaskResponse {
    return new GetMountTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMountTaskResponse {
    return new GetMountTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMountTaskResponse {
    return new GetMountTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMountTaskResponse | PlainMessage<GetMountTaskResponse> | undefined, b: GetMountTaskResponse | PlainMessage<GetMountTaskResponse> | undefined): boolean {
    return proto3.util.equals(GetMountTaskResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.DeleteMountTaskRequest
 */
export class DeleteMountTaskRequest extends Message<DeleteMountTaskRequest> {
  /**
   * Unique identifier of the mount or unmount task to delete.
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteMountTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeleteMountTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMountTaskRequest {
    return new DeleteMountTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMountTaskRequest {
    return new DeleteMountTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMountTaskRequest {
    return new DeleteMountTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMountTaskRequest | PlainMessage<DeleteMountTaskRequest> | undefined, b: DeleteMountTaskRequest | PlainMessage<DeleteMountTaskRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMountTaskRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.DeleteMountTaskResponse
 */
export class DeleteMountTaskResponse extends Message<DeleteMountTaskResponse> {
  constructor(data?: PartialMessage<DeleteMountTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeleteMountTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMountTaskResponse {
    return new DeleteMountTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMountTaskResponse {
    return new DeleteMountTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMountTaskResponse {
    return new DeleteMountTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMountTaskResponse | PlainMessage<DeleteMountTaskResponse> | undefined, b: DeleteMountTaskResponse | PlainMessage<DeleteMountTaskResponse> | undefined): boolean {
    return proto3.util.equals(DeleteMountTaskResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateMountTaskRequest
 */
export class UpdateMountTaskRequest extends Message<UpdateMountTaskRequest> {
  /**
   * ID is the unique identifier of the mount or unmount to update.
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * Action to execute on mount task.
   *
   * @generated from field: redpanda.api.dataplane.v1.UpdateMountTaskRequest.Action action = 2;
   */
  action = UpdateMountTaskRequest_Action.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateMountTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdateMountTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(UpdateMountTaskRequest_Action) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMountTaskRequest {
    return new UpdateMountTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMountTaskRequest {
    return new UpdateMountTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMountTaskRequest {
    return new UpdateMountTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMountTaskRequest | PlainMessage<UpdateMountTaskRequest> | undefined, b: UpdateMountTaskRequest | PlainMessage<UpdateMountTaskRequest> | undefined): boolean {
    return proto3.util.equals(UpdateMountTaskRequest, a, b);
  }
}

/**
 * @generated from enum redpanda.api.dataplane.v1.UpdateMountTaskRequest.Action
 */
export enum UpdateMountTaskRequest_Action {
  /**
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTION_PREPARE = 1;
   */
  PREPARE = 1,

  /**
   * @generated from enum value: ACTION_EXECUTE = 2;
   */
  EXECUTE = 2,

  /**
   * @generated from enum value: ACTION_FINISH = 3;
   */
  FINISH = 3,

  /**
   * @generated from enum value: ACTION_CANCEL = 4;
   */
  CANCEL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UpdateMountTaskRequest_Action)
proto3.util.setEnumType(UpdateMountTaskRequest_Action, "redpanda.api.dataplane.v1.UpdateMountTaskRequest.Action", [
  { no: 0, name: "ACTION_UNSPECIFIED" },
  { no: 1, name: "ACTION_PREPARE" },
  { no: 2, name: "ACTION_EXECUTE" },
  { no: 3, name: "ACTION_FINISH" },
  { no: 4, name: "ACTION_CANCEL" },
]);

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateMountTaskResponse
 */
export class UpdateMountTaskResponse extends Message<UpdateMountTaskResponse> {
  constructor(data?: PartialMessage<UpdateMountTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdateMountTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMountTaskResponse {
    return new UpdateMountTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMountTaskResponse {
    return new UpdateMountTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMountTaskResponse {
    return new UpdateMountTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMountTaskResponse | PlainMessage<UpdateMountTaskResponse> | undefined, b: UpdateMountTaskResponse | PlainMessage<UpdateMountTaskResponse> | undefined): boolean {
    return proto3.util.equals(UpdateMountTaskResponse, a, b);
  }
}

