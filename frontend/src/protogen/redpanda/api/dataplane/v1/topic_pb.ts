// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/dataplane/v1/topic.proto (package redpanda.api.dataplane.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ConfigAlterOperation, ConfigSource, ConfigSynonym, ConfigType } from "./common_pb";

/**
 * @generated from message redpanda.api.dataplane.v1.Topic
 */
export class Topic extends Message<Topic> {
  constructor(data?: PartialMessage<Topic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.Topic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Topic {
    return new Topic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Topic {
    return new Topic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Topic {
    return new Topic().fromJsonString(jsonString, options);
  }

  static equals(a: Topic | PlainMessage<Topic> | undefined, b: Topic | PlainMessage<Topic> | undefined): boolean {
    return proto3.util.equals(Topic, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.Topic.Configuration
 */
export class Topic_Configuration extends Message<Topic_Configuration> {
  /**
   * A topic-level config key (e.g. `segment.bytes`).
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Config data type.
   *
   * @generated from field: redpanda.api.dataplane.v1.ConfigType type = 2;
   */
  type = ConfigType.UNSPECIFIED;

  /**
   * A topic-level config value (e.g. 1073741824).
   *
   * @generated from field: optional string value = 3;
   */
  value?: string;

  /**
   * Where the config entry is from.
   *
   * @generated from field: redpanda.api.dataplane.v1.ConfigSource source = 4;
   */
  source = ConfigSource.UNSPECIFIED;

  /**
   * Whether the config is read-only, or is dynamic and can be altered.
   *
   * @generated from field: bool read_only = 5;
   */
  readOnly = false;

  /**
   * Whether this is a sensitive config key and value.
   *
   * @generated from field: bool sensitive = 6;
   */
  sensitive = false;

  /**
   * If no config value is set at the topic level, it will inherit the value
   * set at the broker or cluster level. `name` is the corresponding config
   * key whose value is inherited. `source` indicates whether the inherited
   * config is default, broker, etc.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.ConfigSynonym config_synonyms = 7;
   */
  configSynonyms: ConfigSynonym[] = [];

  /**
   * Config documentation.
   *
   * @generated from field: optional string documentation = 8;
   */
  documentation?: string;

  constructor(data?: PartialMessage<Topic_Configuration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.Topic.Configuration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ConfigType) },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "source", kind: "enum", T: proto3.getEnumType(ConfigSource) },
    { no: 5, name: "read_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "sensitive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "config_synonyms", kind: "message", T: ConfigSynonym, repeated: true },
    { no: 8, name: "documentation", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Topic_Configuration {
    return new Topic_Configuration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Topic_Configuration {
    return new Topic_Configuration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Topic_Configuration {
    return new Topic_Configuration().fromJsonString(jsonString, options);
  }

  static equals(a: Topic_Configuration | PlainMessage<Topic_Configuration> | undefined, b: Topic_Configuration | PlainMessage<Topic_Configuration> | undefined): boolean {
    return proto3.util.equals(Topic_Configuration, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicRequest
 */
export class CreateTopicRequest extends Message<CreateTopicRequest> {
  /**
   * The topic to create.
   *
   * @generated from field: redpanda.api.dataplane.v1.CreateTopicRequest.Topic topic = 1;
   */
  topic?: CreateTopicRequest_Topic;

  /**
   * If true, makes this request a dry run; everything is validated but
   * no topics are actually created.
   *
   * @generated from field: bool validate_only = 2;
   */
  validateOnly = false;

  constructor(data?: PartialMessage<CreateTopicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreateTopicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "message", T: CreateTopicRequest_Topic },
    { no: 2, name: "validate_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTopicRequest {
    return new CreateTopicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTopicRequest {
    return new CreateTopicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTopicRequest {
    return new CreateTopicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTopicRequest | PlainMessage<CreateTopicRequest> | undefined, b: CreateTopicRequest | PlainMessage<CreateTopicRequest> | undefined): boolean {
    return proto3.util.equals(CreateTopicRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicRequest.Topic
 */
export class CreateTopicRequest_Topic extends Message<CreateTopicRequest_Topic> {
  /**
   * Name of topic.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The number of partitions to give the topic. If specifying
   * partitions manually (see `replica_assignments`), set to -1.
   * Or, to use the cluster default partition count, set to null.
   *
   * @generated from field: optional int32 partition_count = 2;
   */
  partitionCount?: number;

  /**
   * The number of replicas every partition must have.
   * If specifying partitions manually (see `replica_assignments`), set to -1.
   * Or, to use the cluster default replication factor, set to null.
   *
   * @generated from field: optional int32 replication_factor = 3;
   */
  replicationFactor?: number;

  /**
   * Manually specify broker ID assignments for partition replicas. If manually assigning replicas, both `replication_factor` and
   * `partition_count` must be -1.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.CreateTopicRequest.Topic.ReplicaAssignment replica_assignments = 4;
   */
  replicaAssignments: CreateTopicRequest_Topic_ReplicaAssignment[] = [];

  /**
   * An array of key-value config pairs for a topic.
   * These correspond to Kafka topic-level configs.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.CreateTopicRequest.Topic.Config configs = 5;
   */
  configs: CreateTopicRequest_Topic_Config[] = [];

  constructor(data?: PartialMessage<CreateTopicRequest_Topic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreateTopicRequest.Topic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "partition_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "replication_factor", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "replica_assignments", kind: "message", T: CreateTopicRequest_Topic_ReplicaAssignment, repeated: true },
    { no: 5, name: "configs", kind: "message", T: CreateTopicRequest_Topic_Config, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTopicRequest_Topic {
    return new CreateTopicRequest_Topic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTopicRequest_Topic {
    return new CreateTopicRequest_Topic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTopicRequest_Topic {
    return new CreateTopicRequest_Topic().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTopicRequest_Topic | PlainMessage<CreateTopicRequest_Topic> | undefined, b: CreateTopicRequest_Topic | PlainMessage<CreateTopicRequest_Topic> | undefined): boolean {
    return proto3.util.equals(CreateTopicRequest_Topic, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicRequest.Topic.Config
 */
export class CreateTopicRequest_Topic_Config extends Message<CreateTopicRequest_Topic_Config> {
  /**
   * A topic-level config key (e.g. `segment.bytes`).
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * A topic-level config value (e.g. 1073741824).
   *
   * @generated from field: optional string value = 2;
   */
  value?: string;

  constructor(data?: PartialMessage<CreateTopicRequest_Topic_Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreateTopicRequest.Topic.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTopicRequest_Topic_Config {
    return new CreateTopicRequest_Topic_Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTopicRequest_Topic_Config {
    return new CreateTopicRequest_Topic_Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTopicRequest_Topic_Config {
    return new CreateTopicRequest_Topic_Config().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTopicRequest_Topic_Config | PlainMessage<CreateTopicRequest_Topic_Config> | undefined, b: CreateTopicRequest_Topic_Config | PlainMessage<CreateTopicRequest_Topic_Config> | undefined): boolean {
    return proto3.util.equals(CreateTopicRequest_Topic_Config, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicRequest.Topic.ReplicaAssignment
 */
export class CreateTopicRequest_Topic_ReplicaAssignment extends Message<CreateTopicRequest_Topic_ReplicaAssignment> {
  /**
   * A partition to create.
   *
   * @generated from field: int32 partition_id = 1;
   */
  partitionId = 0;

  /**
   * The broker IDs the partition replicas are assigned to.
   *
   * @generated from field: repeated int32 replica_ids = 2;
   */
  replicaIds: number[] = [];

  constructor(data?: PartialMessage<CreateTopicRequest_Topic_ReplicaAssignment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreateTopicRequest.Topic.ReplicaAssignment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "partition_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "replica_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTopicRequest_Topic_ReplicaAssignment {
    return new CreateTopicRequest_Topic_ReplicaAssignment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTopicRequest_Topic_ReplicaAssignment {
    return new CreateTopicRequest_Topic_ReplicaAssignment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTopicRequest_Topic_ReplicaAssignment {
    return new CreateTopicRequest_Topic_ReplicaAssignment().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTopicRequest_Topic_ReplicaAssignment | PlainMessage<CreateTopicRequest_Topic_ReplicaAssignment> | undefined, b: CreateTopicRequest_Topic_ReplicaAssignment | PlainMessage<CreateTopicRequest_Topic_ReplicaAssignment> | undefined): boolean {
    return proto3.util.equals(CreateTopicRequest_Topic_ReplicaAssignment, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicResponse
 */
export class CreateTopicResponse extends Message<CreateTopicResponse> {
  /**
   * Name of topic.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName = "";

  /**
   * The number of partitions created for the topic.
   * This field has a default value of -1, which may be returned if the broker
   * does not support v5+ of this request which added support for returning
   * this information.
   *
   * @generated from field: int32 partition_count = 2;
   */
  partitionCount = 0;

  /**
   * The number of replicas per topic partition.
   * This field has a default of -1, which may be returned if the broker
   * does not support v5+ of this request which added support for returning
   * this information.
   *
   * @generated from field: int32 replication_factor = 3;
   */
  replicationFactor = 0;

  constructor(data?: PartialMessage<CreateTopicResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreateTopicResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "partition_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "replication_factor", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTopicResponse {
    return new CreateTopicResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTopicResponse {
    return new CreateTopicResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTopicResponse {
    return new CreateTopicResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTopicResponse | PlainMessage<CreateTopicResponse> | undefined, b: CreateTopicResponse | PlainMessage<CreateTopicResponse> | undefined): boolean {
    return proto3.util.equals(CreateTopicResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListTopicsRequest
 */
export class ListTopicsRequest extends Message<ListTopicsRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ListTopicsRequest.Filter filter = 1;
   */
  filter?: ListTopicsRequest_Filter;

  /**
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListTopicsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListTopicsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: ListTopicsRequest_Filter },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTopicsRequest {
    return new ListTopicsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTopicsRequest {
    return new ListTopicsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTopicsRequest {
    return new ListTopicsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTopicsRequest | PlainMessage<ListTopicsRequest> | undefined, b: ListTopicsRequest | PlainMessage<ListTopicsRequest> | undefined): boolean {
    return proto3.util.equals(ListTopicsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListTopicsRequest.Filter
 */
export class ListTopicsRequest_Filter extends Message<ListTopicsRequest_Filter> {
  /**
   * Substring match on topic name. Case-sensitive.
   *
   * @generated from field: string name_contains = 1;
   */
  nameContains = "";

  constructor(data?: PartialMessage<ListTopicsRequest_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListTopicsRequest.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_contains", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTopicsRequest_Filter {
    return new ListTopicsRequest_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTopicsRequest_Filter {
    return new ListTopicsRequest_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTopicsRequest_Filter {
    return new ListTopicsRequest_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: ListTopicsRequest_Filter | PlainMessage<ListTopicsRequest_Filter> | undefined, b: ListTopicsRequest_Filter | PlainMessage<ListTopicsRequest_Filter> | undefined): boolean {
    return proto3.util.equals(ListTopicsRequest_Filter, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListTopicsResponse
 */
export class ListTopicsResponse extends Message<ListTopicsResponse> {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.ListTopicsResponse.Topic topics = 1;
   */
  topics: ListTopicsResponse_Topic[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTopicsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListTopicsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topics", kind: "message", T: ListTopicsResponse_Topic, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTopicsResponse {
    return new ListTopicsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTopicsResponse {
    return new ListTopicsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTopicsResponse {
    return new ListTopicsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTopicsResponse | PlainMessage<ListTopicsResponse> | undefined, b: ListTopicsResponse | PlainMessage<ListTopicsResponse> | undefined): boolean {
    return proto3.util.equals(ListTopicsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.ListTopicsResponse.Topic
 */
export class ListTopicsResponse_Topic extends Message<ListTopicsResponse_Topic> {
  /**
   * Topic name.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Whether topic is internal only.
   *
   * @generated from field: bool internal = 2;
   */
  internal = false;

  /**
   * Topic partition count.
   *
   * @generated from field: int32 partition_count = 3;
   */
  partitionCount = 0;

  /**
   * Topic replication factor.
   *
   * @generated from field: int32 replication_factor = 4;
   */
  replicationFactor = 0;

  constructor(data?: PartialMessage<ListTopicsResponse_Topic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListTopicsResponse.Topic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "internal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "partition_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "replication_factor", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTopicsResponse_Topic {
    return new ListTopicsResponse_Topic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTopicsResponse_Topic {
    return new ListTopicsResponse_Topic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTopicsResponse_Topic {
    return new ListTopicsResponse_Topic().fromJsonString(jsonString, options);
  }

  static equals(a: ListTopicsResponse_Topic | PlainMessage<ListTopicsResponse_Topic> | undefined, b: ListTopicsResponse_Topic | PlainMessage<ListTopicsResponse_Topic> | undefined): boolean {
    return proto3.util.equals(ListTopicsResponse_Topic, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.DeleteTopicRequest
 */
export class DeleteTopicRequest extends Message<DeleteTopicRequest> {
  /**
   * Topic name.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName = "";

  constructor(data?: PartialMessage<DeleteTopicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeleteTopicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTopicRequest {
    return new DeleteTopicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTopicRequest {
    return new DeleteTopicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTopicRequest {
    return new DeleteTopicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTopicRequest | PlainMessage<DeleteTopicRequest> | undefined, b: DeleteTopicRequest | PlainMessage<DeleteTopicRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTopicRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.DeleteTopicResponse
 */
export class DeleteTopicResponse extends Message<DeleteTopicResponse> {
  constructor(data?: PartialMessage<DeleteTopicResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeleteTopicResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTopicResponse {
    return new DeleteTopicResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTopicResponse {
    return new DeleteTopicResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTopicResponse {
    return new DeleteTopicResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTopicResponse | PlainMessage<DeleteTopicResponse> | undefined, b: DeleteTopicResponse | PlainMessage<DeleteTopicResponse> | undefined): boolean {
    return proto3.util.equals(DeleteTopicResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetTopicConfigurationsRequest
 */
export class GetTopicConfigurationsRequest extends Message<GetTopicConfigurationsRequest> {
  /**
   * Topic name
   *
   * @generated from field: string topic_name = 1;
   */
  topicName = "";

  constructor(data?: PartialMessage<GetTopicConfigurationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetTopicConfigurationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopicConfigurationsRequest {
    return new GetTopicConfigurationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopicConfigurationsRequest {
    return new GetTopicConfigurationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopicConfigurationsRequest {
    return new GetTopicConfigurationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopicConfigurationsRequest | PlainMessage<GetTopicConfigurationsRequest> | undefined, b: GetTopicConfigurationsRequest | PlainMessage<GetTopicConfigurationsRequest> | undefined): boolean {
    return proto3.util.equals(GetTopicConfigurationsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.GetTopicConfigurationsResponse
 */
export class GetTopicConfigurationsResponse extends Message<GetTopicConfigurationsResponse> {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.Topic.Configuration configurations = 1;
   */
  configurations: Topic_Configuration[] = [];

  constructor(data?: PartialMessage<GetTopicConfigurationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetTopicConfigurationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configurations", kind: "message", T: Topic_Configuration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopicConfigurationsResponse {
    return new GetTopicConfigurationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopicConfigurationsResponse {
    return new GetTopicConfigurationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopicConfigurationsResponse {
    return new GetTopicConfigurationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopicConfigurationsResponse | PlainMessage<GetTopicConfigurationsResponse> | undefined, b: GetTopicConfigurationsResponse | PlainMessage<GetTopicConfigurationsResponse> | undefined): boolean {
    return proto3.util.equals(GetTopicConfigurationsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest
 */
export class UpdateTopicConfigurationsRequest extends Message<UpdateTopicConfigurationsRequest> {
  /**
   * Topic name
   *
   * @generated from field: string topic_name = 1;
   */
  topicName = "";

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest.UpdateConfiguration configurations = 2;
   */
  configurations: UpdateTopicConfigurationsRequest_UpdateConfiguration[] = [];

  constructor(data?: PartialMessage<UpdateTopicConfigurationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "configurations", kind: "message", T: UpdateTopicConfigurationsRequest_UpdateConfiguration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTopicConfigurationsRequest {
    return new UpdateTopicConfigurationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTopicConfigurationsRequest {
    return new UpdateTopicConfigurationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTopicConfigurationsRequest {
    return new UpdateTopicConfigurationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTopicConfigurationsRequest | PlainMessage<UpdateTopicConfigurationsRequest> | undefined, b: UpdateTopicConfigurationsRequest | PlainMessage<UpdateTopicConfigurationsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTopicConfigurationsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest.UpdateConfiguration
 */
export class UpdateTopicConfigurationsRequest_UpdateConfiguration extends Message<UpdateTopicConfigurationsRequest_UpdateConfiguration> {
  /**
   * A topic-level config key (e.g. `segment.bytes`).
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * A topic-level config value (e.g. 1073741824).
   *
   * @generated from field: optional string value = 2;
   */
  value?: string;

  /**
   * The update operation to apply to the topic config.
   *
   * @generated from field: redpanda.api.dataplane.v1.ConfigAlterOperation operation = 3;
   */
  operation = ConfigAlterOperation.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateTopicConfigurationsRequest_UpdateConfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest.UpdateConfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "operation", kind: "enum", T: proto3.getEnumType(ConfigAlterOperation) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTopicConfigurationsRequest_UpdateConfiguration {
    return new UpdateTopicConfigurationsRequest_UpdateConfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTopicConfigurationsRequest_UpdateConfiguration {
    return new UpdateTopicConfigurationsRequest_UpdateConfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTopicConfigurationsRequest_UpdateConfiguration {
    return new UpdateTopicConfigurationsRequest_UpdateConfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTopicConfigurationsRequest_UpdateConfiguration | PlainMessage<UpdateTopicConfigurationsRequest_UpdateConfiguration> | undefined, b: UpdateTopicConfigurationsRequest_UpdateConfiguration | PlainMessage<UpdateTopicConfigurationsRequest_UpdateConfiguration> | undefined): boolean {
    return proto3.util.equals(UpdateTopicConfigurationsRequest_UpdateConfiguration, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateTopicConfigurationsResponse
 */
export class UpdateTopicConfigurationsResponse extends Message<UpdateTopicConfigurationsResponse> {
  /**
   * Topic's complete set of configurations after applying this partial patch.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Topic.Configuration configurations = 1;
   */
  configurations: Topic_Configuration[] = [];

  constructor(data?: PartialMessage<UpdateTopicConfigurationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdateTopicConfigurationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configurations", kind: "message", T: Topic_Configuration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTopicConfigurationsResponse {
    return new UpdateTopicConfigurationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTopicConfigurationsResponse {
    return new UpdateTopicConfigurationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTopicConfigurationsResponse {
    return new UpdateTopicConfigurationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTopicConfigurationsResponse | PlainMessage<UpdateTopicConfigurationsResponse> | undefined, b: UpdateTopicConfigurationsResponse | PlainMessage<UpdateTopicConfigurationsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTopicConfigurationsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.SetTopicConfigurationsRequest
 */
export class SetTopicConfigurationsRequest extends Message<SetTopicConfigurationsRequest> {
  /**
   * Name of topic.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName = "";

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.SetTopicConfigurationsRequest.SetConfiguration configurations = 2;
   */
  configurations: SetTopicConfigurationsRequest_SetConfiguration[] = [];

  constructor(data?: PartialMessage<SetTopicConfigurationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.SetTopicConfigurationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "configurations", kind: "message", T: SetTopicConfigurationsRequest_SetConfiguration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTopicConfigurationsRequest {
    return new SetTopicConfigurationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTopicConfigurationsRequest {
    return new SetTopicConfigurationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTopicConfigurationsRequest {
    return new SetTopicConfigurationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetTopicConfigurationsRequest | PlainMessage<SetTopicConfigurationsRequest> | undefined, b: SetTopicConfigurationsRequest | PlainMessage<SetTopicConfigurationsRequest> | undefined): boolean {
    return proto3.util.equals(SetTopicConfigurationsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.SetTopicConfigurationsRequest.SetConfiguration
 */
export class SetTopicConfigurationsRequest_SetConfiguration extends Message<SetTopicConfigurationsRequest_SetConfiguration> {
  /**
   * A topic-level config key (e.g. `segment.bytes`).
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * A topic-level config value (e.g. 1073741824).
   *
   * @generated from field: optional string value = 2;
   */
  value?: string;

  constructor(data?: PartialMessage<SetTopicConfigurationsRequest_SetConfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.SetTopicConfigurationsRequest.SetConfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTopicConfigurationsRequest_SetConfiguration {
    return new SetTopicConfigurationsRequest_SetConfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTopicConfigurationsRequest_SetConfiguration {
    return new SetTopicConfigurationsRequest_SetConfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTopicConfigurationsRequest_SetConfiguration {
    return new SetTopicConfigurationsRequest_SetConfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: SetTopicConfigurationsRequest_SetConfiguration | PlainMessage<SetTopicConfigurationsRequest_SetConfiguration> | undefined, b: SetTopicConfigurationsRequest_SetConfiguration | PlainMessage<SetTopicConfigurationsRequest_SetConfiguration> | undefined): boolean {
    return proto3.util.equals(SetTopicConfigurationsRequest_SetConfiguration, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1.SetTopicConfigurationsResponse
 */
export class SetTopicConfigurationsResponse extends Message<SetTopicConfigurationsResponse> {
  /**
   * Topic's complete set of configurations after this update.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Topic.Configuration configurations = 1;
   */
  configurations: Topic_Configuration[] = [];

  constructor(data?: PartialMessage<SetTopicConfigurationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.SetTopicConfigurationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configurations", kind: "message", T: Topic_Configuration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTopicConfigurationsResponse {
    return new SetTopicConfigurationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTopicConfigurationsResponse {
    return new SetTopicConfigurationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTopicConfigurationsResponse {
    return new SetTopicConfigurationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetTopicConfigurationsResponse | PlainMessage<SetTopicConfigurationsResponse> | undefined, b: SetTopicConfigurationsResponse | PlainMessage<SetTopicConfigurationsResponse> | undefined): boolean {
    return proto3.util.equals(SetTopicConfigurationsResponse, a, b);
  }
}

