// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/dataplane/v1/topic.proto (package redpanda.api.dataplane.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { ConfigAlterOperation, ConfigSource, ConfigSynonym, ConfigType } from "./common_pb";
import { file_redpanda_api_dataplane_v1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/dataplane/v1/topic.proto.
 */
export const file_redpanda_api_dataplane_v1_topic: GenFile = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_api_annotations, file_protoc_gen_openapiv2_options_annotations, file_redpanda_api_auth_v1_authorization, file_redpanda_api_dataplane_v1_common]);

/**
 * @generated from message redpanda.api.dataplane.v1.Topic
 */
export type Topic = Message<"redpanda.api.dataplane.v1.Topic"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1.Topic.
 * Use `create(TopicSchema)` to create a new message.
 */
export const TopicSchema: GenMessage<Topic> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.Topic.Configuration
 */
export type Topic_Configuration = Message<"redpanda.api.dataplane.v1.Topic.Configuration"> & {
  /**
   * A topic-level config key (e.g. `segment.bytes`).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Config data type.
   *
   * @generated from field: redpanda.api.dataplane.v1.ConfigType type = 2;
   */
  type: ConfigType;

  /**
   * A topic-level config value (e.g. 1073741824).
   *
   * @generated from field: optional string value = 3;
   */
  value?: string;

  /**
   * Where the config entry is from.
   *
   * @generated from field: redpanda.api.dataplane.v1.ConfigSource source = 4;
   */
  source: ConfigSource;

  /**
   * Whether the config is read-only, or is dynamic and can be altered.
   *
   * @generated from field: bool read_only = 5;
   */
  readOnly: boolean;

  /**
   * Whether this is a sensitive config key and value.
   *
   * @generated from field: bool sensitive = 6;
   */
  sensitive: boolean;

  /**
   * If no config value is set at the topic level, it will inherit the value
   * set at the broker or cluster level. `name` is the corresponding config
   * key whose value is inherited. `source` indicates whether the inherited
   * config is default, broker, etc.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.ConfigSynonym config_synonyms = 7;
   */
  configSynonyms: ConfigSynonym[];

  /**
   * Config documentation.
   *
   * @generated from field: optional string documentation = 8;
   */
  documentation?: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.Topic.Configuration.
 * Use `create(Topic_ConfigurationSchema)` to create a new message.
 */
export const Topic_ConfigurationSchema: GenMessage<Topic_Configuration> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 0, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicRequest
 */
export type CreateTopicRequest = Message<"redpanda.api.dataplane.v1.CreateTopicRequest"> & {
  /**
   * The topic to create.
   *
   * @generated from field: redpanda.api.dataplane.v1.CreateTopicRequest.Topic topic = 1;
   */
  topic?: CreateTopicRequest_Topic;

  /**
   * If true, makes this request a dry run; everything is validated but
   * no topics are actually created.
   *
   * @generated from field: bool validate_only = 2;
   */
  validateOnly: boolean;
};

/**
 * Describes the message redpanda.api.dataplane.v1.CreateTopicRequest.
 * Use `create(CreateTopicRequestSchema)` to create a new message.
 */
export const CreateTopicRequestSchema: GenMessage<CreateTopicRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 1);

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicRequest.Topic
 */
export type CreateTopicRequest_Topic = Message<"redpanda.api.dataplane.v1.CreateTopicRequest.Topic"> & {
  /**
   * Name of topic.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The number of partitions to give the topic. If specifying
   * partitions manually (see `replica_assignments`), set to -1.
   * Or, to use the cluster default partition count, set to null.
   *
   * @generated from field: optional int32 partition_count = 2;
   */
  partitionCount?: number;

  /**
   * The number of replicas every partition must have.
   * If specifying partitions manually (see `replica_assignments`), set to -1.
   * Or, to use the cluster default replication factor, set to null.
   *
   * @generated from field: optional int32 replication_factor = 3;
   */
  replicationFactor?: number;

  /**
   * Manually specify broker ID assignments for partition replicas. If manually assigning replicas, both `replication_factor` and
   * `partition_count` must be -1.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.CreateTopicRequest.Topic.ReplicaAssignment replica_assignments = 4;
   */
  replicaAssignments: CreateTopicRequest_Topic_ReplicaAssignment[];

  /**
   * An array of key-value config pairs for a topic.
   * These correspond to Kafka topic-level configs.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.CreateTopicRequest.Topic.Config configs = 5;
   */
  configs: CreateTopicRequest_Topic_Config[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.CreateTopicRequest.Topic.
 * Use `create(CreateTopicRequest_TopicSchema)` to create a new message.
 */
export const CreateTopicRequest_TopicSchema: GenMessage<CreateTopicRequest_Topic> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 1, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicRequest.Topic.Config
 */
export type CreateTopicRequest_Topic_Config = Message<"redpanda.api.dataplane.v1.CreateTopicRequest.Topic.Config"> & {
  /**
   * A topic-level config key (e.g. `segment.bytes`).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A topic-level config value (e.g. 1073741824).
   *
   * @generated from field: optional string value = 2;
   */
  value?: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.CreateTopicRequest.Topic.Config.
 * Use `create(CreateTopicRequest_Topic_ConfigSchema)` to create a new message.
 */
export const CreateTopicRequest_Topic_ConfigSchema: GenMessage<CreateTopicRequest_Topic_Config> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 1, 0, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicRequest.Topic.ReplicaAssignment
 */
export type CreateTopicRequest_Topic_ReplicaAssignment = Message<"redpanda.api.dataplane.v1.CreateTopicRequest.Topic.ReplicaAssignment"> & {
  /**
   * A partition to create.
   *
   * @generated from field: int32 partition_id = 1;
   */
  partitionId: number;

  /**
   * The broker IDs the partition replicas are assigned to.
   *
   * @generated from field: repeated int32 replica_ids = 2;
   */
  replicaIds: number[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.CreateTopicRequest.Topic.ReplicaAssignment.
 * Use `create(CreateTopicRequest_Topic_ReplicaAssignmentSchema)` to create a new message.
 */
export const CreateTopicRequest_Topic_ReplicaAssignmentSchema: GenMessage<CreateTopicRequest_Topic_ReplicaAssignment> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 1, 0, 1);

/**
 * @generated from message redpanda.api.dataplane.v1.CreateTopicResponse
 */
export type CreateTopicResponse = Message<"redpanda.api.dataplane.v1.CreateTopicResponse"> & {
  /**
   * Name of topic.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName: string;

  /**
   * The number of partitions created for the topic.
   * This field has a default value of -1, which may be returned if the broker
   * does not support v5+ of this request which added support for returning
   * this information.
   *
   * @generated from field: int32 partition_count = 2;
   */
  partitionCount: number;

  /**
   * The number of replicas per topic partition.
   * This field has a default of -1, which may be returned if the broker
   * does not support v5+ of this request which added support for returning
   * this information.
   *
   * @generated from field: int32 replication_factor = 3;
   */
  replicationFactor: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1.CreateTopicResponse.
 * Use `create(CreateTopicResponseSchema)` to create a new message.
 */
export const CreateTopicResponseSchema: GenMessage<CreateTopicResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 2);

/**
 * @generated from message redpanda.api.dataplane.v1.ListTopicsRequest
 */
export type ListTopicsRequest = Message<"redpanda.api.dataplane.v1.ListTopicsRequest"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ListTopicsRequest.Filter filter = 1;
   */
  filter?: ListTopicsRequest_Filter;

  /**
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListTopicsRequest.
 * Use `create(ListTopicsRequestSchema)` to create a new message.
 */
export const ListTopicsRequestSchema: GenMessage<ListTopicsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 3);

/**
 * @generated from message redpanda.api.dataplane.v1.ListTopicsRequest.Filter
 */
export type ListTopicsRequest_Filter = Message<"redpanda.api.dataplane.v1.ListTopicsRequest.Filter"> & {
  /**
   * Substring match on topic name. Case-sensitive.
   *
   * @generated from field: string name_contains = 1;
   */
  nameContains: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListTopicsRequest.Filter.
 * Use `create(ListTopicsRequest_FilterSchema)` to create a new message.
 */
export const ListTopicsRequest_FilterSchema: GenMessage<ListTopicsRequest_Filter> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 3, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.ListTopicsResponse
 */
export type ListTopicsResponse = Message<"redpanda.api.dataplane.v1.ListTopicsResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.ListTopicsResponse.Topic topics = 1;
   */
  topics: ListTopicsResponse_Topic[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListTopicsResponse.
 * Use `create(ListTopicsResponseSchema)` to create a new message.
 */
export const ListTopicsResponseSchema: GenMessage<ListTopicsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 4);

/**
 * @generated from message redpanda.api.dataplane.v1.ListTopicsResponse.Topic
 */
export type ListTopicsResponse_Topic = Message<"redpanda.api.dataplane.v1.ListTopicsResponse.Topic"> & {
  /**
   * Topic name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Whether topic is internal only.
   *
   * @generated from field: bool internal = 2;
   */
  internal: boolean;

  /**
   * Topic partition count.
   *
   * @generated from field: int32 partition_count = 3;
   */
  partitionCount: number;

  /**
   * Topic replication factor.
   *
   * @generated from field: int32 replication_factor = 4;
   */
  replicationFactor: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListTopicsResponse.Topic.
 * Use `create(ListTopicsResponse_TopicSchema)` to create a new message.
 */
export const ListTopicsResponse_TopicSchema: GenMessage<ListTopicsResponse_Topic> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 4, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.DeleteTopicRequest
 */
export type DeleteTopicRequest = Message<"redpanda.api.dataplane.v1.DeleteTopicRequest"> & {
  /**
   * Topic name.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.DeleteTopicRequest.
 * Use `create(DeleteTopicRequestSchema)` to create a new message.
 */
export const DeleteTopicRequestSchema: GenMessage<DeleteTopicRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 5);

/**
 * @generated from message redpanda.api.dataplane.v1.DeleteTopicResponse
 */
export type DeleteTopicResponse = Message<"redpanda.api.dataplane.v1.DeleteTopicResponse"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1.DeleteTopicResponse.
 * Use `create(DeleteTopicResponseSchema)` to create a new message.
 */
export const DeleteTopicResponseSchema: GenMessage<DeleteTopicResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 6);

/**
 * @generated from message redpanda.api.dataplane.v1.GetTopicConfigurationsRequest
 */
export type GetTopicConfigurationsRequest = Message<"redpanda.api.dataplane.v1.GetTopicConfigurationsRequest"> & {
  /**
   * Topic name
   *
   * @generated from field: string topic_name = 1;
   */
  topicName: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetTopicConfigurationsRequest.
 * Use `create(GetTopicConfigurationsRequestSchema)` to create a new message.
 */
export const GetTopicConfigurationsRequestSchema: GenMessage<GetTopicConfigurationsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 7);

/**
 * @generated from message redpanda.api.dataplane.v1.GetTopicConfigurationsResponse
 */
export type GetTopicConfigurationsResponse = Message<"redpanda.api.dataplane.v1.GetTopicConfigurationsResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.Topic.Configuration configurations = 1;
   */
  configurations: Topic_Configuration[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetTopicConfigurationsResponse.
 * Use `create(GetTopicConfigurationsResponseSchema)` to create a new message.
 */
export const GetTopicConfigurationsResponseSchema: GenMessage<GetTopicConfigurationsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 8);

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest
 */
export type UpdateTopicConfigurationsRequest = Message<"redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest"> & {
  /**
   * Topic name
   *
   * @generated from field: string topic_name = 1;
   */
  topicName: string;

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest.UpdateConfiguration configurations = 2;
   */
  configurations: UpdateTopicConfigurationsRequest_UpdateConfiguration[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest.
 * Use `create(UpdateTopicConfigurationsRequestSchema)` to create a new message.
 */
export const UpdateTopicConfigurationsRequestSchema: GenMessage<UpdateTopicConfigurationsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 9);

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest.UpdateConfiguration
 */
export type UpdateTopicConfigurationsRequest_UpdateConfiguration = Message<"redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest.UpdateConfiguration"> & {
  /**
   * A topic-level config key (e.g. `segment.bytes`).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A topic-level config value (e.g. 1073741824).
   *
   * @generated from field: optional string value = 2;
   */
  value?: string;

  /**
   * The update operation to apply to the topic config.
   *
   * @generated from field: redpanda.api.dataplane.v1.ConfigAlterOperation operation = 3;
   */
  operation: ConfigAlterOperation;
};

/**
 * Describes the message redpanda.api.dataplane.v1.UpdateTopicConfigurationsRequest.UpdateConfiguration.
 * Use `create(UpdateTopicConfigurationsRequest_UpdateConfigurationSchema)` to create a new message.
 */
export const UpdateTopicConfigurationsRequest_UpdateConfigurationSchema: GenMessage<UpdateTopicConfigurationsRequest_UpdateConfiguration> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 9, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateTopicConfigurationsResponse
 */
export type UpdateTopicConfigurationsResponse = Message<"redpanda.api.dataplane.v1.UpdateTopicConfigurationsResponse"> & {
  /**
   * Topic's complete set of configurations after applying this partial patch.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Topic.Configuration configurations = 1;
   */
  configurations: Topic_Configuration[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.UpdateTopicConfigurationsResponse.
 * Use `create(UpdateTopicConfigurationsResponseSchema)` to create a new message.
 */
export const UpdateTopicConfigurationsResponseSchema: GenMessage<UpdateTopicConfigurationsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 10);

/**
 * @generated from message redpanda.api.dataplane.v1.SetTopicConfigurationsRequest
 */
export type SetTopicConfigurationsRequest = Message<"redpanda.api.dataplane.v1.SetTopicConfigurationsRequest"> & {
  /**
   * Name of topic.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName: string;

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.SetTopicConfigurationsRequest.SetConfiguration configurations = 2;
   */
  configurations: SetTopicConfigurationsRequest_SetConfiguration[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.SetTopicConfigurationsRequest.
 * Use `create(SetTopicConfigurationsRequestSchema)` to create a new message.
 */
export const SetTopicConfigurationsRequestSchema: GenMessage<SetTopicConfigurationsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 11);

/**
 * @generated from message redpanda.api.dataplane.v1.SetTopicConfigurationsRequest.SetConfiguration
 */
export type SetTopicConfigurationsRequest_SetConfiguration = Message<"redpanda.api.dataplane.v1.SetTopicConfigurationsRequest.SetConfiguration"> & {
  /**
   * A topic-level config key (e.g. `segment.bytes`).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A topic-level config value (e.g. 1073741824).
   *
   * @generated from field: optional string value = 2;
   */
  value?: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.SetTopicConfigurationsRequest.SetConfiguration.
 * Use `create(SetTopicConfigurationsRequest_SetConfigurationSchema)` to create a new message.
 */
export const SetTopicConfigurationsRequest_SetConfigurationSchema: GenMessage<SetTopicConfigurationsRequest_SetConfiguration> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 11, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.SetTopicConfigurationsResponse
 */
export type SetTopicConfigurationsResponse = Message<"redpanda.api.dataplane.v1.SetTopicConfigurationsResponse"> & {
  /**
   * Topic's complete set of configurations after this update.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Topic.Configuration configurations = 1;
   */
  configurations: Topic_Configuration[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.SetTopicConfigurationsResponse.
 * Use `create(SetTopicConfigurationsResponseSchema)` to create a new message.
 */
export const SetTopicConfigurationsResponseSchema: GenMessage<SetTopicConfigurationsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 12);

/**
 * @generated from message redpanda.api.dataplane.v1.AddTopicPartitionsResponse
 */
export type AddTopicPartitionsResponse = Message<"redpanda.api.dataplane.v1.AddTopicPartitionsResponse"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1.AddTopicPartitionsResponse.
 * Use `create(AddTopicPartitionsResponseSchema)` to create a new message.
 */
export const AddTopicPartitionsResponseSchema: GenMessage<AddTopicPartitionsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 13);

/**
 * @generated from message redpanda.api.dataplane.v1.AddTopicPartitionsRequest
 */
export type AddTopicPartitionsRequest = Message<"redpanda.api.dataplane.v1.AddTopicPartitionsRequest"> & {
  /**
   * The topic name.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName: string;

  /**
   * The number of partitions to add to the topic.
   *
   * @generated from field: int32 partition_count = 2;
   */
  partitionCount: number;

  /**
   * Validate the request only, do not execute it.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly: boolean;
};

/**
 * Describes the message redpanda.api.dataplane.v1.AddTopicPartitionsRequest.
 * Use `create(AddTopicPartitionsRequestSchema)` to create a new message.
 */
export const AddTopicPartitionsRequestSchema: GenMessage<AddTopicPartitionsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 14);

/**
 * @generated from message redpanda.api.dataplane.v1.SetTopicPartitionsRequest
 */
export type SetTopicPartitionsRequest = Message<"redpanda.api.dataplane.v1.SetTopicPartitionsRequest"> & {
  /**
   * The topic name.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName: string;

  /**
   * The number of partitions to set for the topic.
   *
   * @generated from field: int32 partition_count = 2;
   */
  partitionCount: number;

  /**
   * Validate the request only, do not execute it.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly: boolean;
};

/**
 * Describes the message redpanda.api.dataplane.v1.SetTopicPartitionsRequest.
 * Use `create(SetTopicPartitionsRequestSchema)` to create a new message.
 */
export const SetTopicPartitionsRequestSchema: GenMessage<SetTopicPartitionsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 15);

/**
 * @generated from message redpanda.api.dataplane.v1.SetTopicPartitionsResponse
 */
export type SetTopicPartitionsResponse = Message<"redpanda.api.dataplane.v1.SetTopicPartitionsResponse"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1.SetTopicPartitionsResponse.
 * Use `create(SetTopicPartitionsResponseSchema)` to create a new message.
 */
export const SetTopicPartitionsResponseSchema: GenMessage<SetTopicPartitionsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 16);

/**
 * @generated from message redpanda.api.dataplane.v1.AlterTopicPartitionStatus
 */
export type AlterTopicPartitionStatus = Message<"redpanda.api.dataplane.v1.AlterTopicPartitionStatus"> & {
  /**
   * The topic name.
   *
   * @generated from field: string topic_name = 1;
   */
  topicName: string;

  /**
   * Whether the operation was successful.
   *
   * @generated from field: bool success = 2;
   */
  success: boolean;

  /**
   * The error if any.
   *
   * @generated from field: string error = 3;
   */
  error: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.AlterTopicPartitionStatus.
 * Use `create(AlterTopicPartitionStatusSchema)` to create a new message.
 */
export const AlterTopicPartitionStatusSchema: GenMessage<AlterTopicPartitionStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 17);

/**
 * @generated from message redpanda.api.dataplane.v1.SetPartitionsToTopicsRequest
 */
export type SetPartitionsToTopicsRequest = Message<"redpanda.api.dataplane.v1.SetPartitionsToTopicsRequest"> & {
  /**
   * The topic names.
   *
   * @generated from field: repeated string topic_names = 1;
   */
  topicNames: string[];

  /**
   * The number of partitions to set for the topics.
   *
   * @generated from field: int32 partition_count = 2;
   */
  partitionCount: number;

  /**
   * Validate the request only, do not execute it.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly: boolean;
};

/**
 * Describes the message redpanda.api.dataplane.v1.SetPartitionsToTopicsRequest.
 * Use `create(SetPartitionsToTopicsRequestSchema)` to create a new message.
 */
export const SetPartitionsToTopicsRequestSchema: GenMessage<SetPartitionsToTopicsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 18);

/**
 * @generated from message redpanda.api.dataplane.v1.SetPartitionsToTopicsResponse
 */
export type SetPartitionsToTopicsResponse = Message<"redpanda.api.dataplane.v1.SetPartitionsToTopicsResponse"> & {
  /**
   * The status of the operation for each topic.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.AlterTopicPartitionStatus statuses = 1;
   */
  statuses: AlterTopicPartitionStatus[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.SetPartitionsToTopicsResponse.
 * Use `create(SetPartitionsToTopicsResponseSchema)` to create a new message.
 */
export const SetPartitionsToTopicsResponseSchema: GenMessage<SetPartitionsToTopicsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 19);

/**
 * @generated from message redpanda.api.dataplane.v1.AddPartitionsToTopicsRequest
 */
export type AddPartitionsToTopicsRequest = Message<"redpanda.api.dataplane.v1.AddPartitionsToTopicsRequest"> & {
  /**
   * The topic names.
   *
   * @generated from field: repeated string topic_names = 1;
   */
  topicNames: string[];

  /**
   * The number of partitions to add for the topics.
   *
   * @generated from field: int32 partition_count = 2;
   */
  partitionCount: number;

  /**
   * Validate the request only, do not execute it.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly: boolean;
};

/**
 * Describes the message redpanda.api.dataplane.v1.AddPartitionsToTopicsRequest.
 * Use `create(AddPartitionsToTopicsRequestSchema)` to create a new message.
 */
export const AddPartitionsToTopicsRequestSchema: GenMessage<AddPartitionsToTopicsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 20);

/**
 * @generated from message redpanda.api.dataplane.v1.AddPartitionsToTopicsResponse
 */
export type AddPartitionsToTopicsResponse = Message<"redpanda.api.dataplane.v1.AddPartitionsToTopicsResponse"> & {
  /**
   * The status of the operation for each topic.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.AlterTopicPartitionStatus statuses = 1;
   */
  statuses: AlterTopicPartitionStatus[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.AddPartitionsToTopicsResponse.
 * Use `create(AddPartitionsToTopicsResponseSchema)` to create a new message.
 */
export const AddPartitionsToTopicsResponseSchema: GenMessage<AddPartitionsToTopicsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_topic, 21);

/**
 * @generated from service redpanda.api.dataplane.v1.TopicService
 */
export const TopicService: GenService<{
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.CreateTopic
   */
  createTopic: {
    methodKind: "unary";
    input: typeof CreateTopicRequestSchema;
    output: typeof CreateTopicResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.ListTopics
   */
  listTopics: {
    methodKind: "unary";
    input: typeof ListTopicsRequestSchema;
    output: typeof ListTopicsResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.DeleteTopic
   */
  deleteTopic: {
    methodKind: "unary";
    input: typeof DeleteTopicRequestSchema;
    output: typeof DeleteTopicResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.GetTopicConfigurations
   */
  getTopicConfigurations: {
    methodKind: "unary";
    input: typeof GetTopicConfigurationsRequestSchema;
    output: typeof GetTopicConfigurationsResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.UpdateTopicConfigurations
   */
  updateTopicConfigurations: {
    methodKind: "unary";
    input: typeof UpdateTopicConfigurationsRequestSchema;
    output: typeof UpdateTopicConfigurationsResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.SetTopicConfigurations
   */
  setTopicConfigurations: {
    methodKind: "unary";
    input: typeof SetTopicConfigurationsRequestSchema;
    output: typeof SetTopicConfigurationsResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.AddTopicPartitions
   */
  addTopicPartitions: {
    methodKind: "unary";
    input: typeof AddTopicPartitionsRequestSchema;
    output: typeof AddTopicPartitionsResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.SetTopicPartitions
   */
  setTopicPartitions: {
    methodKind: "unary";
    input: typeof SetTopicPartitionsRequestSchema;
    output: typeof SetTopicPartitionsResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.AddPartitionsToTopics
   */
  addPartitionsToTopics: {
    methodKind: "unary";
    input: typeof AddPartitionsToTopicsRequestSchema;
    output: typeof AddPartitionsToTopicsResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.dataplane.v1.TopicService.SetPartitionsToTopics
   */
  setPartitionsToTopics: {
    methodKind: "unary";
    input: typeof SetPartitionsToTopicsRequestSchema;
    output: typeof SetPartitionsToTopicsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_dataplane_v1_topic, 0);

