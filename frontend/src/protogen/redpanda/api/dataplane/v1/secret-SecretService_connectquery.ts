// @generated by protoc-gen-connect-query v1.4.0 with parameter "target=ts,import_extension=,js_import_style=legacy_commonjs"
// @generated from file redpanda/api/dataplane/v1/secret.proto (package redpanda.api.dataplane.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { CreateKafkaConnectSecretRequest, CreateKafkaConnectSecretResponse, CreateSecretRequest, CreateSecretResponse, DeleteKafkaConnectSecretRequest, DeleteKafkaConnectSecretResponse, DeleteSecretRequest, DeleteSecretResponse, GetKafkaConnectSecretRequest, GetKafkaConnectSecretResponse, GetSecretRequest, GetSecretResponse, ListKafkaConnectSecretsRequest, ListKafkaConnectSecretsResponse, ListSecretScopesRequest, ListSecretScopesResponse, ListSecretsRequest, ListSecretsResponse, UpdateKafkaConnectSecretRequest, UpdateKafkaConnectSecretResponse, UpdateSecretRequest, UpdateSecretResponse } from "./secret_pb";

/**
 * GetSecret retrieves the specific secret.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.GetSecret
 */
export const getSecret = {
  localName: "getSecret",
  name: "GetSecret",
  kind: MethodKind.Unary,
  I: GetSecretRequest,
  O: GetSecretResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * ListSecrets lists the secrets based on optional filter.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.ListSecrets
 */
export const listSecrets = {
  localName: "listSecrets",
  name: "ListSecrets",
  kind: MethodKind.Unary,
  I: ListSecretsRequest,
  O: ListSecretsResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * CreateSecret creates the secret.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.CreateSecret
 */
export const createSecret = {
  localName: "createSecret",
  name: "CreateSecret",
  kind: MethodKind.Unary,
  I: CreateSecretRequest,
  O: CreateSecretResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * UpdateSecret updates the secret.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.UpdateSecret
 */
export const updateSecret = {
  localName: "updateSecret",
  name: "UpdateSecret",
  kind: MethodKind.Unary,
  I: UpdateSecretRequest,
  O: UpdateSecretResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * DeleteSecret deletes the secret.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.DeleteSecret
 */
export const deleteSecret = {
  localName: "deleteSecret",
  name: "DeleteSecret",
  kind: MethodKind.Unary,
  I: DeleteSecretRequest,
  O: DeleteSecretResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * ListSecretScopes lists the supported secret scopes.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.ListSecretScopes
 */
export const listSecretScopes = {
  localName: "listSecretScopes",
  name: "ListSecretScopes",
  kind: MethodKind.Unary,
  I: ListSecretScopesRequest,
  O: ListSecretScopesResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * GetKafkaConnectSecret retrieves the specific secret for a specific Connect.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.GetKafkaConnectSecret
 */
export const getKafkaConnectSecret = {
  localName: "getKafkaConnectSecret",
  name: "GetKafkaConnectSecret",
  kind: MethodKind.Unary,
  I: GetKafkaConnectSecretRequest,
  O: GetKafkaConnectSecretResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * ListKafkaConnectSecrets lists the Connect secrets based on optional filter.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.ListKafkaConnectSecrets
 */
export const listKafkaConnectSecrets = {
  localName: "listKafkaConnectSecrets",
  name: "ListKafkaConnectSecrets",
  kind: MethodKind.Unary,
  I: ListKafkaConnectSecretsRequest,
  O: ListKafkaConnectSecretsResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * CreateKafkaConnectSecret creates the secret for a Connect.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.CreateKafkaConnectSecret
 */
export const createKafkaConnectSecret = {
  localName: "createKafkaConnectSecret",
  name: "CreateKafkaConnectSecret",
  kind: MethodKind.Unary,
  I: CreateKafkaConnectSecretRequest,
  O: CreateKafkaConnectSecretResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * UpdateKafkaConnectSecret updates the Connect secret.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.UpdateKafkaConnectSecret
 */
export const updateKafkaConnectSecret = {
  localName: "updateKafkaConnectSecret",
  name: "UpdateKafkaConnectSecret",
  kind: MethodKind.Unary,
  I: UpdateKafkaConnectSecretRequest,
  O: UpdateKafkaConnectSecretResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;

/**
 * DeleteKafkaConnectSecret deletes the secret.
 *
 * @generated from rpc redpanda.api.dataplane.v1.SecretService.DeleteKafkaConnectSecret
 */
export const deleteKafkaConnectSecret = {
  localName: "deleteKafkaConnectSecret",
  name: "DeleteKafkaConnectSecret",
  kind: MethodKind.Unary,
  I: DeleteKafkaConnectSecretRequest,
  O: DeleteKafkaConnectSecretResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1.SecretService"
  }
} as const;
