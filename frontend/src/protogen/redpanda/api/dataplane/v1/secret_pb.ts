// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/dataplane/v1/secret.proto (package redpanda.api.dataplane.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Defines the scope of a secret.
 *
 * @generated from enum redpanda.api.dataplane.v1.Scope
 */
export enum Scope {
  /**
   * @generated from enum value: SCOPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SCOPE_REDPANDA_CONNECT = 1;
   */
  REDPANDA_CONNECT = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Scope)
proto3.util.setEnumType(Scope, "redpanda.api.dataplane.v1.Scope", [
  { no: 0, name: "SCOPE_UNSPECIFIED" },
  { no: 1, name: "SCOPE_REDPANDA_CONNECT" },
]);

/**
 * Defines the secret resource.
 *
 * @generated from message redpanda.api.dataplane.v1.Secret
 */
export class Secret extends Message<Secret> {
  /**
   * Secret identifier.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string } = {};

  /**
   * Secret scopes
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Scope scopes = 3;
   */
  scopes: Scope[] = [];

  constructor(data?: PartialMessage<Secret>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.Secret";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "scopes", kind: "enum", T: proto3.getEnumType(Scope), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Secret {
    return new Secret().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Secret {
    return new Secret().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Secret {
    return new Secret().fromJsonString(jsonString, options);
  }

  static equals(a: Secret | PlainMessage<Secret> | undefined, b: Secret | PlainMessage<Secret> | undefined): boolean {
    return proto3.util.equals(Secret, a, b);
  }
}

/**
 * ListSecretsResponse is the response of ListSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1.ListSecretsResponse
 */
export class ListSecretsResponse extends Message<ListSecretsResponse> {
  /**
   * Secrets retrieved.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Secret secrets = 1;
   */
  secrets: Secret[] = [];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListSecretsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListSecretsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secrets", kind: "message", T: Secret, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsResponse | PlainMessage<ListSecretsResponse> | undefined, b: ListSecretsResponse | PlainMessage<ListSecretsResponse> | undefined): boolean {
    return proto3.util.equals(ListSecretsResponse, a, b);
  }
}

/**
 * ListSecretsFilter are the filter options for listing secrets.
 *
 * @generated from message redpanda.api.dataplane.v1.ListSecretsFilter
 */
export class ListSecretsFilter extends Message<ListSecretsFilter> {
  /**
   * Substring match on secret name. Case-sensitive.
   *
   * @generated from field: string name_contains = 1;
   */
  nameContains = "";

  /**
   * The secret labels to search for.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string } = {};

  /**
   * Secret scopes to search for
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Scope scopes = 3;
   */
  scopes: Scope[] = [];

  constructor(data?: PartialMessage<ListSecretsFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListSecretsFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_contains", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "scopes", kind: "enum", T: proto3.getEnumType(Scope), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsFilter {
    return new ListSecretsFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsFilter {
    return new ListSecretsFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsFilter {
    return new ListSecretsFilter().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsFilter | PlainMessage<ListSecretsFilter> | undefined, b: ListSecretsFilter | PlainMessage<ListSecretsFilter> | undefined): boolean {
    return proto3.util.equals(ListSecretsFilter, a, b);
  }
}

/**
 * ListSecretsRequest is the request of ListSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1.ListSecretsRequest
 */
export class ListSecretsRequest extends Message<ListSecretsRequest> {
  /**
   * List filter.
   *
   * @generated from field: redpanda.api.dataplane.v1.ListSecretsFilter filter = 1;
   */
  filter?: ListSecretsFilter;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * Limit the paginated response to a number of items.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<ListSecretsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListSecretsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: ListSecretsFilter },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsRequest | PlainMessage<ListSecretsRequest> | undefined, b: ListSecretsRequest | PlainMessage<ListSecretsRequest> | undefined): boolean {
    return proto3.util.equals(ListSecretsRequest, a, b);
  }
}

/**
 * GetSecretRequest is the request of GetSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.GetSecretRequest
 */
export class GetSecretRequest extends Message<GetSecretRequest> {
  /**
   * The id of the secret to retrieve.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSecretRequest {
    return new GetSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSecretRequest {
    return new GetSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSecretRequest {
    return new GetSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSecretRequest | PlainMessage<GetSecretRequest> | undefined, b: GetSecretRequest | PlainMessage<GetSecretRequest> | undefined): boolean {
    return proto3.util.equals(GetSecretRequest, a, b);
  }
}

/**
 * GetSecretResponse is the response of GetSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.GetSecretResponse
 */
export class GetSecretResponse extends Message<GetSecretResponse> {
  /**
   * The created secret.
   *
   * @generated from field: redpanda.api.dataplane.v1.Secret secret = 1;
   */
  secret?: Secret;

  constructor(data?: PartialMessage<GetSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "message", T: Secret },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSecretResponse {
    return new GetSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSecretResponse {
    return new GetSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSecretResponse {
    return new GetSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSecretResponse | PlainMessage<GetSecretResponse> | undefined, b: GetSecretResponse | PlainMessage<GetSecretResponse> | undefined): boolean {
    return proto3.util.equals(GetSecretResponse, a, b);
  }
}

/**
 * CreateSecretRequest is the request of CreateSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.CreateSecretRequest
 */
export class CreateSecretRequest extends Message<CreateSecretRequest> {
  /**
   * Secret identifier.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string } = {};

  /**
   * Secret scopes
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Scope scopes = 3;
   */
  scopes: Scope[] = [];

  /**
   * The secret data. Must be Base64-encoded.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData = new Uint8Array(0);

  constructor(data?: PartialMessage<CreateSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreateSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "scopes", kind: "enum", T: proto3.getEnumType(Scope), repeated: true },
    { no: 4, name: "secret_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSecretRequest {
    return new CreateSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSecretRequest {
    return new CreateSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSecretRequest {
    return new CreateSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSecretRequest | PlainMessage<CreateSecretRequest> | undefined, b: CreateSecretRequest | PlainMessage<CreateSecretRequest> | undefined): boolean {
    return proto3.util.equals(CreateSecretRequest, a, b);
  }
}

/**
 * CreateSecretResponse is the response of CreateSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.CreateSecretResponse
 */
export class CreateSecretResponse extends Message<CreateSecretResponse> {
  /**
   * The created secret.
   *
   * @generated from field: redpanda.api.dataplane.v1.Secret secret = 1;
   */
  secret?: Secret;

  constructor(data?: PartialMessage<CreateSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreateSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "message", T: Secret },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSecretResponse {
    return new CreateSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSecretResponse {
    return new CreateSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSecretResponse {
    return new CreateSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSecretResponse | PlainMessage<CreateSecretResponse> | undefined, b: CreateSecretResponse | PlainMessage<CreateSecretResponse> | undefined): boolean {
    return proto3.util.equals(CreateSecretResponse, a, b);
  }
}

/**
 * UpdateSecretRequest is the request of UpdateSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.UpdateSecretRequest
 */
export class UpdateSecretRequest extends Message<UpdateSecretRequest> {
  /**
   * Secret identifier.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string } = {};

  /**
   * Secret scopes
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Scope scopes = 3;
   */
  scopes: Scope[] = [];

  /**
   * The secret data. Must be Base64-encoded.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData = new Uint8Array(0);

  constructor(data?: PartialMessage<UpdateSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdateSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "scopes", kind: "enum", T: proto3.getEnumType(Scope), repeated: true },
    { no: 4, name: "secret_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSecretRequest {
    return new UpdateSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSecretRequest {
    return new UpdateSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSecretRequest {
    return new UpdateSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSecretRequest | PlainMessage<UpdateSecretRequest> | undefined, b: UpdateSecretRequest | PlainMessage<UpdateSecretRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSecretRequest, a, b);
  }
}

/**
 * UpdateSecretResponse is the response of UpdateSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.UpdateSecretResponse
 */
export class UpdateSecretResponse extends Message<UpdateSecretResponse> {
  /**
   * The updated secret.
   *
   * @generated from field: redpanda.api.dataplane.v1.Secret secret = 1;
   */
  secret?: Secret;

  constructor(data?: PartialMessage<UpdateSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdateSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "message", T: Secret },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSecretResponse {
    return new UpdateSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSecretResponse {
    return new UpdateSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSecretResponse {
    return new UpdateSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSecretResponse | PlainMessage<UpdateSecretResponse> | undefined, b: UpdateSecretResponse | PlainMessage<UpdateSecretResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSecretResponse, a, b);
  }
}

/**
 * DeleteSecretRequest is the request of DeleteSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.DeleteSecretRequest
 */
export class DeleteSecretRequest extends Message<DeleteSecretRequest> {
  /**
   * The id of the secret to delete.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeleteSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSecretRequest {
    return new DeleteSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSecretRequest {
    return new DeleteSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSecretRequest {
    return new DeleteSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSecretRequest | PlainMessage<DeleteSecretRequest> | undefined, b: DeleteSecretRequest | PlainMessage<DeleteSecretRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSecretRequest, a, b);
  }
}

/**
 * DeleteSecretResponse is the response of DeleteSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.DeleteSecretResponse
 */
export class DeleteSecretResponse extends Message<DeleteSecretResponse> {
  constructor(data?: PartialMessage<DeleteSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeleteSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSecretResponse {
    return new DeleteSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSecretResponse {
    return new DeleteSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSecretResponse {
    return new DeleteSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSecretResponse | PlainMessage<DeleteSecretResponse> | undefined, b: DeleteSecretResponse | PlainMessage<DeleteSecretResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSecretResponse, a, b);
  }
}

/**
 * ListSecretScopesRequest is the request of ListSecretScopes.
 *
 * @generated from message redpanda.api.dataplane.v1.ListSecretScopesRequest
 */
export class ListSecretScopesRequest extends Message<ListSecretScopesRequest> {
  constructor(data?: PartialMessage<ListSecretScopesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListSecretScopesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretScopesRequest {
    return new ListSecretScopesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretScopesRequest {
    return new ListSecretScopesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretScopesRequest {
    return new ListSecretScopesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretScopesRequest | PlainMessage<ListSecretScopesRequest> | undefined, b: ListSecretScopesRequest | PlainMessage<ListSecretScopesRequest> | undefined): boolean {
    return proto3.util.equals(ListSecretScopesRequest, a, b);
  }
}

/**
 * ListSecretScopesResponse is the response of ListSecretScopes.
 *
 * @generated from message redpanda.api.dataplane.v1.ListSecretScopesResponse
 */
export class ListSecretScopesResponse extends Message<ListSecretScopesResponse> {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.Scope scopes = 1;
   */
  scopes: Scope[] = [];

  constructor(data?: PartialMessage<ListSecretScopesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListSecretScopesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scopes", kind: "enum", T: proto3.getEnumType(Scope), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretScopesResponse {
    return new ListSecretScopesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretScopesResponse {
    return new ListSecretScopesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretScopesResponse {
    return new ListSecretScopesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretScopesResponse | PlainMessage<ListSecretScopesResponse> | undefined, b: ListSecretScopesResponse | PlainMessage<ListSecretScopesResponse> | undefined): boolean {
    return proto3.util.equals(ListSecretScopesResponse, a, b);
  }
}

/**
 * GetConnectSecretRequest is the request of GetSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.GetConnectSecretRequest
 */
export class GetConnectSecretRequest extends Message<GetConnectSecretRequest> {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * The ID of the secret to retrieve.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetConnectSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetConnectSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectSecretRequest {
    return new GetConnectSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectSecretRequest {
    return new GetConnectSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectSecretRequest {
    return new GetConnectSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectSecretRequest | PlainMessage<GetConnectSecretRequest> | undefined, b: GetConnectSecretRequest | PlainMessage<GetConnectSecretRequest> | undefined): boolean {
    return proto3.util.equals(GetConnectSecretRequest, a, b);
  }
}

/**
 * GetConnectSecretResponse is the response of GetConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.GetConnectSecretResponse
 */
export class GetConnectSecretResponse extends Message<GetConnectSecretResponse> {
  /**
   * The retrieved secret.
   *
   * @generated from field: redpanda.api.dataplane.v1.Secret secret = 1;
   */
  secret?: Secret;

  constructor(data?: PartialMessage<GetConnectSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.GetConnectSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "message", T: Secret },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectSecretResponse {
    return new GetConnectSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectSecretResponse {
    return new GetConnectSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectSecretResponse {
    return new GetConnectSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectSecretResponse | PlainMessage<GetConnectSecretResponse> | undefined, b: GetConnectSecretResponse | PlainMessage<GetConnectSecretResponse> | undefined): boolean {
    return proto3.util.equals(GetConnectSecretResponse, a, b);
  }
}

/**
 * CreateConnectSecretRequest is the request of CreateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.CreateConnectSecretRequest
 */
export class CreateConnectSecretRequest extends Message<CreateConnectSecretRequest> {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string } = {};

  /**
   * The secret data. Must be Base64-encoded.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData = new Uint8Array(0);

  constructor(data?: PartialMessage<CreateConnectSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreateConnectSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "secret_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateConnectSecretRequest {
    return new CreateConnectSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateConnectSecretRequest {
    return new CreateConnectSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateConnectSecretRequest {
    return new CreateConnectSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateConnectSecretRequest | PlainMessage<CreateConnectSecretRequest> | undefined, b: CreateConnectSecretRequest | PlainMessage<CreateConnectSecretRequest> | undefined): boolean {
    return proto3.util.equals(CreateConnectSecretRequest, a, b);
  }
}

/**
 * CreateConnectSecretResponse is the response of CreateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.CreateConnectSecretResponse
 */
export class CreateConnectSecretResponse extends Message<CreateConnectSecretResponse> {
  /**
   * The created secret.
   *
   * @generated from field: redpanda.api.dataplane.v1.Secret secret = 1;
   */
  secret?: Secret;

  constructor(data?: PartialMessage<CreateConnectSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.CreateConnectSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "message", T: Secret },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateConnectSecretResponse {
    return new CreateConnectSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateConnectSecretResponse {
    return new CreateConnectSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateConnectSecretResponse {
    return new CreateConnectSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateConnectSecretResponse | PlainMessage<CreateConnectSecretResponse> | undefined, b: CreateConnectSecretResponse | PlainMessage<CreateConnectSecretResponse> | undefined): boolean {
    return proto3.util.equals(CreateConnectSecretResponse, a, b);
  }
}

/**
 * ListConnectSecretRequest is the request of ListConnectSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1.ListConnectSecretsRequest
 */
export class ListConnectSecretsRequest extends Message<ListConnectSecretsRequest> {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * List filter.
   *
   * @generated from field: redpanda.api.dataplane.v1.ListSecretsFilter filter = 2;
   */
  filter?: ListSecretsFilter;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * Limit the paginated response to a number of items.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<ListConnectSecretsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListConnectSecretsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: ListSecretsFilter },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectSecretsRequest {
    return new ListConnectSecretsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectSecretsRequest {
    return new ListConnectSecretsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectSecretsRequest {
    return new ListConnectSecretsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectSecretsRequest | PlainMessage<ListConnectSecretsRequest> | undefined, b: ListConnectSecretsRequest | PlainMessage<ListConnectSecretsRequest> | undefined): boolean {
    return proto3.util.equals(ListConnectSecretsRequest, a, b);
  }
}

/**
 * ListConnectSecretsResponse is the response of ListConnectSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1.ListConnectSecretsResponse
 */
export class ListConnectSecretsResponse extends Message<ListConnectSecretsResponse> {
  /**
   * Secrets retrieved.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1.Secret secrets = 1;
   */
  secrets: Secret[] = [];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListConnectSecretsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.ListConnectSecretsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secrets", kind: "message", T: Secret, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectSecretsResponse {
    return new ListConnectSecretsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectSecretsResponse {
    return new ListConnectSecretsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectSecretsResponse {
    return new ListConnectSecretsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectSecretsResponse | PlainMessage<ListConnectSecretsResponse> | undefined, b: ListConnectSecretsResponse | PlainMessage<ListConnectSecretsResponse> | undefined): boolean {
    return proto3.util.equals(ListConnectSecretsResponse, a, b);
  }
}

/**
 * UpdateConnectSecretRequest is the request of UpdateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.UpdateConnectSecretRequest
 */
export class UpdateConnectSecretRequest extends Message<UpdateConnectSecretRequest> {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * ID of the secret to update.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string } = {};

  /**
   * The secret data. Must be Base64-encoded.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData = new Uint8Array(0);

  constructor(data?: PartialMessage<UpdateConnectSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdateConnectSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "secret_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateConnectSecretRequest {
    return new UpdateConnectSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateConnectSecretRequest {
    return new UpdateConnectSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateConnectSecretRequest {
    return new UpdateConnectSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateConnectSecretRequest | PlainMessage<UpdateConnectSecretRequest> | undefined, b: UpdateConnectSecretRequest | PlainMessage<UpdateConnectSecretRequest> | undefined): boolean {
    return proto3.util.equals(UpdateConnectSecretRequest, a, b);
  }
}

/**
 * UpdateConnectSecretResponse is the response of UpdateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.UpdateConnectSecretResponse
 */
export class UpdateConnectSecretResponse extends Message<UpdateConnectSecretResponse> {
  /**
   * The updated secret.
   *
   * @generated from field: redpanda.api.dataplane.v1.Secret secret = 1;
   */
  secret?: Secret;

  constructor(data?: PartialMessage<UpdateConnectSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.UpdateConnectSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "message", T: Secret },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateConnectSecretResponse {
    return new UpdateConnectSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateConnectSecretResponse {
    return new UpdateConnectSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateConnectSecretResponse {
    return new UpdateConnectSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateConnectSecretResponse | PlainMessage<UpdateConnectSecretResponse> | undefined, b: UpdateConnectSecretResponse | PlainMessage<UpdateConnectSecretResponse> | undefined): boolean {
    return proto3.util.equals(UpdateConnectSecretResponse, a, b);
  }
}

/**
 * DeleteConnectSecretRequest is the request of DeleteConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.DeleteConnectSecretRequest
 */
export class DeleteConnectSecretRequest extends Message<DeleteConnectSecretRequest> {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * ID of the secret to delete.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteConnectSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeleteConnectSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteConnectSecretRequest {
    return new DeleteConnectSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteConnectSecretRequest {
    return new DeleteConnectSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteConnectSecretRequest {
    return new DeleteConnectSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteConnectSecretRequest | PlainMessage<DeleteConnectSecretRequest> | undefined, b: DeleteConnectSecretRequest | PlainMessage<DeleteConnectSecretRequest> | undefined): boolean {
    return proto3.util.equals(DeleteConnectSecretRequest, a, b);
  }
}

/**
 * DeleteConnectSecretResponse is the response of DeleteConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1.DeleteConnectSecretResponse
 */
export class DeleteConnectSecretResponse extends Message<DeleteConnectSecretResponse> {
  constructor(data?: PartialMessage<DeleteConnectSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1.DeleteConnectSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteConnectSecretResponse {
    return new DeleteConnectSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteConnectSecretResponse {
    return new DeleteConnectSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteConnectSecretResponse {
    return new DeleteConnectSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteConnectSecretResponse | PlainMessage<DeleteConnectSecretResponse> | undefined, b: DeleteConnectSecretResponse | PlainMessage<DeleteConnectSecretResponse> | undefined): boolean {
    return proto3.util.equals(DeleteConnectSecretResponse, a, b);
  }
}

