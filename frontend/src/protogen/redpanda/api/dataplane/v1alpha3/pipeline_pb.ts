// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/dataplane/v1alpha3/pipeline.proto (package redpanda.api.dataplane.v1alpha3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/dataplane/v1alpha3/pipeline.proto.
 */
export const file_redpanda_api_dataplane_v1alpha3_pipeline: GenFile = /*@__PURE__*/
  fileDesc("Ci5yZWRwYW5kYS9hcGkvZGF0YXBsYW5lL3YxYWxwaGEzL3BpcGVsaW5lLnByb3RvEh9yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGEzIlkKFFRva2VuVXNhZ2VTdGF0aXN0aWNzEhQKDGlucHV0X3Rva2VucxgBIAEoBRIVCg1vdXRwdXRfdG9rZW5zGAIgASgFEhQKDHRvdGFsX3Rva2VucxgDIAEoBSI0ChNDb252ZXJzYXRpb25NZXNzYWdlEgwKBHJvbGUYASABKAkSDwoHY29udGVudBgCIAEoCSKYAQoaRXhlY3V0ZVBpcGVsaW5lVGFza1JlcXVlc3QSJgoMdXNlcl9yZXF1ZXN0GAEgASgJQhDgQQK6SArIAQFyBRABGIAQElIKFGNvbnZlcnNhdGlvbl9oaXN0b3J5GAIgAygLMjQucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMy5Db252ZXJzYXRpb25NZXNzYWdlIpIDChtFeGVjdXRlUGlwZWxpbmVUYXNrUmVzcG9uc2USUgoTY29udmVyc2F0aW9uX3VwZGF0ZRgBIAEoCzIzLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTMuQ29udmVyc2F0aW9uVXBkYXRlSAASSgoPcGlwZWxpbmVfdXBkYXRlGAIgASgLMi8ucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMy5QaXBlbGluZVVwZGF0ZUgAEkYKBXVzYWdlGAMgASgLMjUucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMy5Ub2tlblVzYWdlU3RhdGlzdGljc0gAEj0KBWVycm9yGAQgASgLMiwucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMy5TdHJlYW1FcnJvckgAEkMKB2NvbnRlbnQYBSABKAsyMC5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGEzLlBpcGVsaW5lQ29udGVudEgAQgcKBWV2ZW50IuABChJDb252ZXJzYXRpb25VcGRhdGUSOgoEdHlwZRgBIAEoDjIsLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTMuQ29udGVudFR5cGUSOwoGc3RhdHVzGAIgASgOMisucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMy5UYXNrU3RhdHVzEgwKBHRleHQYAyABKAkSQwoKY29tcGxldGlvbhgEIAEoDjIvLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTMuQ29tcGxldGlvblR5cGUiLwoOUGlwZWxpbmVVcGRhdGUSDAoEdGV4dBgBIAEoCRIPCgdpc19kb25lGAIgASgIIlsKC1N0cmVhbUVycm9yEg8KB21lc3NhZ2UYASABKAkSOwoGc3RhdHVzGAIgASgOMisucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMy5UYXNrU3RhdHVzIl4KD1BpcGVsaW5lQ29udGVudBIVCg1waXBlbGluZV95YW1sGAEgASgJEhAKCHJldmlzaW9uGAIgASgFEhAKCGlzX2ZpbmFsGAMgASgIEhAKCGNoZWNrc3VtGAQgASgJKqsBCgpUYXNrU3RhdHVzEhsKF1RBU0tfU1RBVFVTX1VOU1BFQ0lGSUVEEAASGAoUVEFTS19TVEFUVVNfVEhJTktJTkcQARIaChZUQVNLX1NUQVRVU19HRU5FUkFUSU5HEAISGQoVVEFTS19TVEFUVVNfQ09NUExFVEVEEAMSFgoSVEFTS19TVEFUVVNfRkFJTEVEEAQSFwoTVEFTS19TVEFUVVNfU1RBUlRFRBAFKo8BCgtDb250ZW50VHlwZRIcChhDT05URU5UX1RZUEVfVU5TUEVDSUZJRUQQABIXChNDT05URU5UX1RZUEVfU1RBVFVTEAESGgoWQ09OVEVOVF9UWVBFX1JFQVNPTklORxACEhUKEUNPTlRFTlRfVFlQRV9URVhUEAMSFgoSQ09OVEVOVF9UWVBFX0VSUk9SEAQqyAEKDkNvbXBsZXRpb25UeXBlEh8KG0NPTVBMRVRJT05fVFlQRV9VTlNQRUNJRklFRBAAEhgKFENPTVBMRVRJT05fVFlQRV9OT05FEAESHQoZQ09NUExFVElPTl9UWVBFX1RFWFRfRE9ORRACEh0KGUNPTVBMRVRJT05fVFlQRV9QQVJUX0RPTkUQAxIeChpDT01QTEVUSU9OX1RZUEVfUEhBU0VfRE9ORRAEEh0KGUNPTVBMRVRJT05fVFlQRV9UQVNLX0RPTkUQBTLXAgoPUGlwZWxpbmVTZXJ2aWNlEp4BChNFeGVjdXRlUGlwZWxpbmVUYXNrEjsucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMy5FeGVjdXRlUGlwZWxpbmVUYXNrUmVxdWVzdBo8LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTMuRXhlY3V0ZVBpcGVsaW5lVGFza1Jlc3BvbnNlIgiKph0ECAIQBCgBMAEaogGSQZ4BChxSZWRwYW5kYSBDb25uZWN0IEFJIFBpcGVsaW5lEn5JbnRlcmFjdGl2ZSBBSS1wb3dlcmVkIFtSZWRwYW5kYSBDb25uZWN0XShodHRwczovL2RvY3MucmVkcGFuZGEuY29tL3JlZHBhbmRhLWNsb3VkL2RldmVsb3AvY29ubmVjdC9hYm91dCkgcGlwZWxpbmUgZ2VuZXJhdGlvbi5CvAIKI2NvbS5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGEzQg1QaXBlbGluZVByb3RvUAFaZ2dpdGh1Yi5jb20vcmVkcGFuZGEtZGF0YS9jb25zb2xlL2JhY2tlbmQvcGtnL3Byb3RvZ2VuL3JlZHBhbmRhL2FwaS9kYXRhcGxhbmUvdjFhbHBoYTM7ZGF0YXBsYW5ldjFhbHBoYTOiAgNSQUSqAh9SZWRwYW5kYS5BcGkuRGF0YXBsYW5lLlYxYWxwaGEzygIfUmVkcGFuZGFcQXBpXERhdGFwbGFuZVxWMWFscGhhM+ICK1JlZHBhbmRhXEFwaVxEYXRhcGxhbmVcVjFhbHBoYTNcR1BCTWV0YWRhdGHqAiJSZWRwYW5kYTo6QXBpOjpEYXRhcGxhbmU6OlYxYWxwaGEzYgZwcm90bzM", [file_buf_validate_validate, file_google_api_field_behavior, file_protoc_gen_openapiv2_options_annotations, file_redpanda_api_auth_v1_authorization]);

/**
 * TokenUsageStatistics tracks token usage for the task.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.TokenUsageStatistics
 */
export type TokenUsageStatistics = Message<"redpanda.api.dataplane.v1alpha3.TokenUsageStatistics"> & {
  /**
   * @generated from field: int32 input_tokens = 1;
   */
  inputTokens: number;

  /**
   * @generated from field: int32 output_tokens = 2;
   */
  outputTokens: number;

  /**
   * @generated from field: int32 total_tokens = 3;
   */
  totalTokens: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.TokenUsageStatistics.
 * Use `create(TokenUsageStatisticsSchema)` to create a new message.
 */
export const TokenUsageStatisticsSchema: GenMessage<TokenUsageStatistics> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 0);

/**
 * ConversationMessage represents a single message in the conversation history.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.ConversationMessage
 */
export type ConversationMessage = Message<"redpanda.api.dataplane.v1alpha3.ConversationMessage"> & {
  /**
   * Message role: "user", "assistant", "system"
   *
   * @generated from field: string role = 1;
   */
  role: string;

  /**
   * Message content
   *
   * @generated from field: string content = 2;
   */
  content: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.ConversationMessage.
 * Use `create(ConversationMessageSchema)` to create a new message.
 */
export const ConversationMessageSchema: GenMessage<ConversationMessage> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 1);

/**
 * ExecutePipelineTaskRequest supports both initial requests and follow-up messages.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskRequest
 */
export type ExecutePipelineTaskRequest = Message<"redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskRequest"> & {
  /**
   * @generated from field: string user_request = 1;
   */
  userRequest: string;

  /**
   * Conversation history for multi-turn context (optional for first request)
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha3.ConversationMessage conversation_history = 2;
   */
  conversationHistory: ConversationMessage[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskRequest.
 * Use `create(ExecutePipelineTaskRequestSchema)` to create a new message.
 */
export const ExecutePipelineTaskRequestSchema: GenMessage<ExecutePipelineTaskRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 2);

/**
 * ExecutePipelineTaskResponse is streamed back with updates and the final result.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse
 */
export type ExecutePipelineTaskResponse = Message<"redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse"> & {
  /**
   * @generated from oneof redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse.event
   */
  event: {
    /**
     * Status, reasoning, or text updates
     *
     * @generated from field: redpanda.api.dataplane.v1alpha3.ConversationUpdate conversation_update = 1;
     */
    value: ConversationUpdate;
    case: "conversationUpdate";
  } | {
    /**
     * Pipeline updates (just YAML deltas)
     *
     * @generated from field: redpanda.api.dataplane.v1alpha3.PipelineUpdate pipeline_update = 2;
     */
    value: PipelineUpdate;
    case: "pipelineUpdate";
  } | {
    /**
     * Token usage stats
     *
     * @generated from field: redpanda.api.dataplane.v1alpha3.TokenUsageStatistics usage = 3;
     */
    value: TokenUsageStatistics;
    case: "usage";
  } | {
    /**
     * Error information
     *
     * @generated from field: redpanda.api.dataplane.v1alpha3.StreamError error = 4;
     */
    value: StreamError;
    case: "error";
  } | {
    /**
     * Streaming pipeline content updates
     *
     * @generated from field: redpanda.api.dataplane.v1alpha3.PipelineContent content = 5;
     */
    value: PipelineContent;
    case: "content";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse.
 * Use `create(ExecutePipelineTaskResponseSchema)` to create a new message.
 */
export const ExecutePipelineTaskResponseSchema: GenMessage<ExecutePipelineTaskResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 3);

/**
 * ConversationUpdat represents any kind of streaming update.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.ConversationUpdate
 */
export type ConversationUpdate = Message<"redpanda.api.dataplane.v1alpha3.ConversationUpdate"> & {
  /**
   * What kind of content this is
   *
   * @generated from field: redpanda.api.dataplane.v1alpha3.ContentType type = 1;
   */
  type: ContentType;

  /**
   * Current overall status
   *
   * @generated from field: redpanda.api.dataplane.v1alpha3.TaskStatus status = 2;
   */
  status: TaskStatus;

  /**
   * Text content (always delta)
   *
   * @generated from field: string text = 3;
   */
  text: string;

  /**
   * What just completed - this is specific to the task status (e.g. thinking is done/completed)
   *
   * @generated from field: redpanda.api.dataplane.v1alpha3.CompletionType completion = 4;
   */
  completion: CompletionType;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.ConversationUpdate.
 * Use `create(ConversationUpdateSchema)` to create a new message.
 */
export const ConversationUpdateSchema: GenMessage<ConversationUpdate> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 4);

/**
 * PipelineResult contains the final generated pipeline configuration.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.PipelineUpdate
 */
export type PipelineUpdate = Message<"redpanda.api.dataplane.v1alpha3.PipelineUpdate"> & {
  /**
   * Generated pipeline YAML (always a delta)
   *
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * Is done is set true when it was the last delta.
   *
   * @generated from field: bool is_done = 2;
   */
  isDone: boolean;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.PipelineUpdate.
 * Use `create(PipelineUpdateSchema)` to create a new message.
 */
export const PipelineUpdateSchema: GenMessage<PipelineUpdate> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 5);

/**
 * StreamError represents any error during generation.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.StreamError
 */
export type StreamError = Message<"redpanda.api.dataplane.v1alpha3.StreamError"> & {
  /**
   * Error description
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * Final status (TASK_STATUS_FAILED)
   *
   * @generated from field: redpanda.api.dataplane.v1alpha3.TaskStatus status = 2;
   */
  status: TaskStatus;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.StreamError.
 * Use `create(StreamErrorSchema)` to create a new message.
 */
export const StreamErrorSchema: GenMessage<StreamError> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 6);

/**
 * PipelineContent contains streaming pipeline content updates during generation.
 * This message is used to stream intermediate pipeline YAML updates to the code editor
 * while keeping conversational content separate in StreamUpdate messages.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.PipelineContent
 */
export type PipelineContent = Message<"redpanda.api.dataplane.v1alpha3.PipelineContent"> & {
  /**
   * Current pipeline YAML snapshot
   *
   * @generated from field: string pipeline_yaml = 1;
   */
  pipelineYaml: string;

  /**
   * Revision number, strictly increasing per session
   *
   * @generated from field: int32 revision = 2;
   */
  revision: number;

  /**
   * True exactly once, signals completion before final PipelineResult
   *
   * @generated from field: bool is_final = 3;
   */
  isFinal: boolean;

  /**
   * Optional SHA-256 hash of pipeline_yaml for integrity validation
   *
   * @generated from field: string checksum = 4;
   */
  checksum: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.PipelineContent.
 * Use `create(PipelineContentSchema)` to create a new message.
 */
export const PipelineContentSchema: GenMessage<PipelineContent> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 7);

/**
 * TaskStatus represents the current state of the generation.
 *
 * @generated from enum redpanda.api.dataplane.v1alpha3.TaskStatus
 */
export enum TaskStatus {
  /**
   * @generated from enum value: TASK_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Agent is reasoning/thinking
   *
   * @generated from enum value: TASK_STATUS_THINKING = 1;
   */
  THINKING = 1,

  /**
   * Agent is generating pipeline
   *
   * @generated from enum value: TASK_STATUS_GENERATING = 2;
   */
  GENERATING = 2,

  /**
   * Generation completed successfully
   *
   * @generated from enum value: TASK_STATUS_COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * Generation failed with error
   *
   * @generated from enum value: TASK_STATUS_FAILED = 4;
   */
  FAILED = 4,

  /**
   * We started a conversation with the LLM, this is first expected status.
   *
   * @generated from enum value: TASK_STATUS_STARTED = 5;
   */
  STARTED = 5,
}

/**
 * Describes the enum redpanda.api.dataplane.v1alpha3.TaskStatus.
 */
export const TaskStatusSchema: GenEnum<TaskStatus> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 0);

/**
 * ContentType represents the type of streaming content.
 *
 * @generated from enum redpanda.api.dataplane.v1alpha3.ContentType
 */
export enum ContentType {
  /**
   * @generated from enum value: CONTENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Status update
   *
   * @generated from enum value: CONTENT_TYPE_STATUS = 1;
   */
  STATUS = 1,

  /**
   * Agent reasoning/thinking
   *
   * @generated from enum value: CONTENT_TYPE_REASONING = 2;
   */
  REASONING = 2,

  /**
   * Response text
   *
   * @generated from enum value: CONTENT_TYPE_TEXT = 3;
   */
  TEXT = 3,

  /**
   * Error occurred
   *
   * @generated from enum value: CONTENT_TYPE_ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Describes the enum redpanda.api.dataplane.v1alpha3.ContentType.
 */
export const ContentTypeSchema: GenEnum<ContentType> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 1);

/**
 * CompletionType represents what level of completion occurred.
 *
 * @generated from enum redpanda.api.dataplane.v1alpha3.CompletionType
 */
export enum CompletionType {
  /**
   * Default/unknown
   *
   * @generated from enum value: COMPLETION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * No completion, just a delta
   *
   * @generated from enum value: COMPLETION_TYPE_NONE = 1;
   */
  NONE = 1,

  /**
   * Text stream within part finished
   *
   * @generated from enum value: COMPLETION_TYPE_TEXT_DONE = 2;
   */
  TEXT_DONE = 2,

  /**
   * Entire reasoning/content part finished
   *
   * @generated from enum value: COMPLETION_TYPE_PART_DONE = 3;
   */
  PART_DONE = 3,

  /**
   * Entire thinking/generating phase finished
   *
   * @generated from enum value: COMPLETION_TYPE_PHASE_DONE = 4;
   */
  PHASE_DONE = 4,

  /**
   * Entire task finished
   *
   * @generated from enum value: COMPLETION_TYPE_TASK_DONE = 5;
   */
  TASK_DONE = 5,
}

/**
 * Describes the enum redpanda.api.dataplane.v1alpha3.CompletionType.
 */
export const CompletionTypeSchema: GenEnum<CompletionType> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 2);

/**
 * PipelineService is the service for Redpanda Connect AI-powered pipeline generation.
 * It exposes a bidirectional streaming API for interactive pipeline generation tasks.
 *
 * @generated from service redpanda.api.dataplane.v1alpha3.PipelineService
 */
export const PipelineService: GenService<{
  /**
   * ExecutePipelineTask generates a pipeline using AI with real-time streaming updates.
   * Supports multi-turn conversations and interactive pipeline refinement.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha3.PipelineService.ExecutePipelineTask
   */
  executePipelineTask: {
    methodKind: "bidi_streaming";
    input: typeof ExecutePipelineTaskRequestSchema;
    output: typeof ExecutePipelineTaskResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_dataplane_v1alpha3_pipeline, 0);

