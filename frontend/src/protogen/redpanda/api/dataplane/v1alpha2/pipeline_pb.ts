// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/dataplane/v1alpha2/pipeline.proto (package redpanda.api.dataplane.v1alpha2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/dataplane/v1alpha2/pipeline.proto.
 */
export const file_redpanda_api_dataplane_v1alpha2_pipeline: GenFile = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_api_annotations, file_google_api_field_behavior, file_protoc_gen_openapiv2_options_annotations, file_redpanda_api_auth_v1_authorization]);

/**
 * Defines the pipeline resource.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.Pipeline
 */
export type Pipeline = Message<"redpanda.api.dataplane.v1alpha2.Pipeline"> & {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * User-friendly pipeline name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Optional pipeline description.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * The pipeline configuration in YAML.
   * See https://docs.redpanda.com/redpanda-connect/configuration/about/
   *
   * @generated from field: string config_yaml = 4;
   */
  configYaml: string;

  /**
   * The number of resources that are guaranteed to be assigned to the pipeline.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline.Resources resources = 9;
   */
  resources?: Pipeline_Resources;

  /**
   * The current pipeline state.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline.State state = 7;
   */
  state: Pipeline_State;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline.Status status = 8;
   */
  status?: Pipeline_Status;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.Pipeline.
 * Use `create(PipelineSchema)` to create a new message.
 */
export const PipelineSchema: GenMessage<Pipeline> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.Pipeline.Resources
 */
export type Pipeline_Resources = Message<"redpanda.api.dataplane.v1alpha2.Pipeline.Resources"> & {
  /**
   * `memory_shares` is a string specifying the amount of memory to allocate for
   * the pipeline.
   *
   * This follows the [Kubernetes quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/) format. Acceptable units
   * include:
   * - Decimal SI units: "K", "M", "G", "T", "P", "E" (e.g., "128M" for 128
   *   megabytes)
   * - Binary SI units: "Ki", "Mi", "Gi", "Ti", "Pi", "Ei" (e.g., "512Mi" for
   * 512 mebibytes) If you don't specify a unit, the value is interpreted as
   * bytes.
   *
   * @generated from field: string memory_shares = 1;
   */
  memoryShares: string;

  /**
   * `cpu_shares` is a string specifying the amount of CPU to allocate for the
   * pipeline.
   *
   * This follows the [Kubernetes quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/) format. Acceptable
   * units include:
   * - Decimal SI units: "m" (e.g., "500m" for 500 millicores, "2" for 2 cores)
   * CPU shares can be specified in millicores (1 core = 1000 millicores).
   * If you don't specify a unit, the value is interpreted as the number of cores.
   *
   * @generated from field: string cpu_shares = 2;
   */
  cpuShares: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.Pipeline.Resources.
 * Use `create(Pipeline_ResourcesSchema)` to create a new message.
 */
export const Pipeline_ResourcesSchema: GenMessage<Pipeline_Resources> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 0, 0);

/**
 * Pipeline status may contain an error message.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.Pipeline.Status
 */
export type Pipeline_Status = Message<"redpanda.api.dataplane.v1alpha2.Pipeline.Status"> & {
  /**
   * @generated from field: string error = 2;
   */
  error: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.Pipeline.Status.
 * Use `create(Pipeline_StatusSchema)` to create a new message.
 */
export const Pipeline_StatusSchema: GenMessage<Pipeline_Status> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 0, 1);

/**
 * State of the pipeline.
 *
 * @generated from enum redpanda.api.dataplane.v1alpha2.Pipeline.State
 */
export enum Pipeline_State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The pipeline is starting.
   *
   * @generated from enum value: STATE_STARTING = 1;
   */
  STARTING = 1,

  /**
   * The pipeline is running.
   *
   * @generated from enum value: STATE_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The pipeline is in the process of stopping.
   *
   * @generated from enum value: STATE_STOPPING = 3;
   */
  STOPPING = 3,

  /**
   * The pipeline is stopped and in paused state.
   *
   * @generated from enum value: STATE_STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * The pipeline encountered an error. See [Error Handling](https://docs.redpanda.com/redpanda-cloud/develop/connect/configuration/error_handling/) for further guidance.
   *
   * @generated from enum value: STATE_ERROR = 5;
   */
  ERROR = 5,

  /**
   * The pipeline has completed the job successfully.
   *
   * @generated from enum value: STATE_COMPLETED = 6;
   */
  COMPLETED = 6,
}

/**
 * Describes the enum redpanda.api.dataplane.v1alpha2.Pipeline.State.
 */
export const Pipeline_StateSchema: GenEnum<Pipeline_State> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 0, 0);

/**
 * PipelineCreate contains the details for the pipeline creation request.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.PipelineCreate
 */
export type PipelineCreate = Message<"redpanda.api.dataplane.v1alpha2.PipelineCreate"> & {
  /**
   * User-friendly pipeline name.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * Pipeline description.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * The Redpanda Connect pipeline configuration in YAML format. See the [Redpanda Connect Configuration](https://docs.redpanda.com/redpanda-cloud/develop/connect/configuration/about) documentation for more details.
   *
   * @generated from field: string config_yaml = 3;
   */
  configYaml: string;

  /**
   * The number of resources that are guaranteed to be assigned to the pipeline.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline.Resources resources = 6;
   */
  resources?: Pipeline_Resources;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.PipelineCreate.
 * Use `create(PipelineCreateSchema)` to create a new message.
 */
export const PipelineCreateSchema: GenMessage<PipelineCreate> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 1);

/**
 * CreatePipelineRequest is the request of CreatePipeline.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.CreatePipelineRequest
 */
export type CreatePipelineRequest = Message<"redpanda.api.dataplane.v1alpha2.CreatePipelineRequest"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.PipelineCreate pipeline = 1;
   */
  pipeline?: PipelineCreate;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.CreatePipelineRequest.
 * Use `create(CreatePipelineRequestSchema)` to create a new message.
 */
export const CreatePipelineRequestSchema: GenMessage<CreatePipelineRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 2);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.CreatePipelineResponse
 */
export type CreatePipelineResponse = Message<"redpanda.api.dataplane.v1alpha2.CreatePipelineResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.CreatePipelineResponse.
 * Use `create(CreatePipelineResponseSchema)` to create a new message.
 */
export const CreatePipelineResponseSchema: GenMessage<CreatePipelineResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 3);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.GetPipelineRequest
 */
export type GetPipelineRequest = Message<"redpanda.api.dataplane.v1alpha2.GetPipelineRequest"> & {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetPipelineRequest.
 * Use `create(GetPipelineRequestSchema)` to create a new message.
 */
export const GetPipelineRequestSchema: GenMessage<GetPipelineRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 4);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.GetPipelineResponse
 */
export type GetPipelineResponse = Message<"redpanda.api.dataplane.v1alpha2.GetPipelineResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetPipelineResponse.
 * Use `create(GetPipelineResponseSchema)` to create a new message.
 */
export const GetPipelineResponseSchema: GenMessage<GetPipelineResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 5);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.ListPipelinesRequest
 */
export type ListPipelinesRequest = Message<"redpanda.api.dataplane.v1alpha2.ListPipelinesRequest"> & {
  /**
   * List filter.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.ListPipelinesRequest.Filter filter = 1;
   */
  filter?: ListPipelinesRequest_Filter;

  /**
   * Limit the paginated response to a number of items.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListPipelinesRequest.
 * Use `create(ListPipelinesRequestSchema)` to create a new message.
 */
export const ListPipelinesRequestSchema: GenMessage<ListPipelinesRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 6);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.ListPipelinesRequest.Filter
 */
export type ListPipelinesRequest_Filter = Message<"redpanda.api.dataplane.v1alpha2.ListPipelinesRequest.Filter"> & {
  /**
   * Substring match on pipeline name. Case-sensitive.
   *
   * @generated from field: string name_contains = 1;
   */
  nameContains: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListPipelinesRequest.Filter.
 * Use `create(ListPipelinesRequest_FilterSchema)` to create a new message.
 */
export const ListPipelinesRequest_FilterSchema: GenMessage<ListPipelinesRequest_Filter> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 6, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.ListPipelinesResponse
 */
export type ListPipelinesResponse = Message<"redpanda.api.dataplane.v1alpha2.ListPipelinesResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.Pipeline pipelines = 1;
   */
  pipelines: Pipeline[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListPipelinesResponse.
 * Use `create(ListPipelinesResponseSchema)` to create a new message.
 */
export const ListPipelinesResponseSchema: GenMessage<ListPipelinesResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 7);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.PipelineUpdate
 */
export type PipelineUpdate = Message<"redpanda.api.dataplane.v1alpha2.PipelineUpdate"> & {
  /**
   * User-friendly pipeline name.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * Pipeline description.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * The Redpanda Connect pipeline configuration in YAML format. See the [Redpanda Connect Configuration](https://docs.redpanda.com/redpanda-cloud/develop/connect/configuration/about) documentation for more details.
   *
   * @generated from field: string config_yaml = 3;
   */
  configYaml: string;

  /**
   * The number of resources that are guaranteed to be assigned to the pipeline.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline.Resources resources = 6;
   */
  resources?: Pipeline_Resources;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.PipelineUpdate.
 * Use `create(PipelineUpdateSchema)` to create a new message.
 */
export const PipelineUpdateSchema: GenMessage<PipelineUpdate> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 8);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.UpdatePipelineRequest
 */
export type UpdatePipelineRequest = Message<"redpanda.api.dataplane.v1alpha2.UpdatePipelineRequest"> & {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.PipelineUpdate pipeline = 2;
   */
  pipeline?: PipelineUpdate;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.UpdatePipelineRequest.
 * Use `create(UpdatePipelineRequestSchema)` to create a new message.
 */
export const UpdatePipelineRequestSchema: GenMessage<UpdatePipelineRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 9);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.UpdatePipelineResponse
 */
export type UpdatePipelineResponse = Message<"redpanda.api.dataplane.v1alpha2.UpdatePipelineResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.UpdatePipelineResponse.
 * Use `create(UpdatePipelineResponseSchema)` to create a new message.
 */
export const UpdatePipelineResponseSchema: GenMessage<UpdatePipelineResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 10);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.DeletePipelineRequest
 */
export type DeletePipelineRequest = Message<"redpanda.api.dataplane.v1alpha2.DeletePipelineRequest"> & {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.DeletePipelineRequest.
 * Use `create(DeletePipelineRequestSchema)` to create a new message.
 */
export const DeletePipelineRequestSchema: GenMessage<DeletePipelineRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 11);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.DeletePipelineResponse
 */
export type DeletePipelineResponse = Message<"redpanda.api.dataplane.v1alpha2.DeletePipelineResponse"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.DeletePipelineResponse.
 * Use `create(DeletePipelineResponseSchema)` to create a new message.
 */
export const DeletePipelineResponseSchema: GenMessage<DeletePipelineResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 12);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.StopPipelineRequest
 */
export type StopPipelineRequest = Message<"redpanda.api.dataplane.v1alpha2.StopPipelineRequest"> & {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.StopPipelineRequest.
 * Use `create(StopPipelineRequestSchema)` to create a new message.
 */
export const StopPipelineRequestSchema: GenMessage<StopPipelineRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 13);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.StopPipelineResponse
 */
export type StopPipelineResponse = Message<"redpanda.api.dataplane.v1alpha2.StopPipelineResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.StopPipelineResponse.
 * Use `create(StopPipelineResponseSchema)` to create a new message.
 */
export const StopPipelineResponseSchema: GenMessage<StopPipelineResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 14);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.StartPipelineRequest
 */
export type StartPipelineRequest = Message<"redpanda.api.dataplane.v1alpha2.StartPipelineRequest"> & {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.StartPipelineRequest.
 * Use `create(StartPipelineRequestSchema)` to create a new message.
 */
export const StartPipelineRequestSchema: GenMessage<StartPipelineRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 15);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.StartPipelineResponse
 */
export type StartPipelineResponse = Message<"redpanda.api.dataplane.v1alpha2.StartPipelineResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.StartPipelineResponse.
 * Use `create(StartPipelineResponseSchema)` to create a new message.
 */
export const StartPipelineResponseSchema: GenMessage<StartPipelineResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 16);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.GetPipelineServiceConfigSchemaRequest
 */
export type GetPipelineServiceConfigSchemaRequest = Message<"redpanda.api.dataplane.v1alpha2.GetPipelineServiceConfigSchemaRequest"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetPipelineServiceConfigSchemaRequest.
 * Use `create(GetPipelineServiceConfigSchemaRequestSchema)` to create a new message.
 */
export const GetPipelineServiceConfigSchemaRequestSchema: GenMessage<GetPipelineServiceConfigSchemaRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 17);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.GetPipelineServiceConfigSchemaResponse
 */
export type GetPipelineServiceConfigSchemaResponse = Message<"redpanda.api.dataplane.v1alpha2.GetPipelineServiceConfigSchemaResponse"> & {
  /**
   * JSON schema of the configuration components that are allowed for Connect pipelines.
   *
   * @generated from field: string config_schema = 1;
   */
  configSchema: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetPipelineServiceConfigSchemaResponse.
 * Use `create(GetPipelineServiceConfigSchemaResponseSchema)` to create a new message.
 */
export const GetPipelineServiceConfigSchemaResponseSchema: GenMessage<GetPipelineServiceConfigSchemaResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 18);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.PipelinesForSecret
 */
export type PipelinesForSecret = Message<"redpanda.api.dataplane.v1alpha2.PipelinesForSecret"> & {
  /**
   * @generated from field: string secret_id = 1;
   */
  secretId: string;

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.Pipeline pipelines = 2;
   */
  pipelines: Pipeline[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.PipelinesForSecret.
 * Use `create(PipelinesForSecretSchema)` to create a new message.
 */
export const PipelinesForSecretSchema: GenMessage<PipelinesForSecret> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 19);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.GetPipelinesForSecretRequest
 */
export type GetPipelinesForSecretRequest = Message<"redpanda.api.dataplane.v1alpha2.GetPipelinesForSecretRequest"> & {
  /**
   * Secret ID.
   *
   * @generated from field: string secret_id = 1;
   */
  secretId: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetPipelinesForSecretRequest.
 * Use `create(GetPipelinesForSecretRequestSchema)` to create a new message.
 */
export const GetPipelinesForSecretRequestSchema: GenMessage<GetPipelinesForSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 20);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.GetPipelinesForSecretResponse
 */
export type GetPipelinesForSecretResponse = Message<"redpanda.api.dataplane.v1alpha2.GetPipelinesForSecretResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.PipelinesForSecret pipelines_for_secret = 1;
   */
  pipelinesForSecret?: PipelinesForSecret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetPipelinesForSecretResponse.
 * Use `create(GetPipelinesForSecretResponseSchema)` to create a new message.
 */
export const GetPipelinesForSecretResponseSchema: GenMessage<GetPipelinesForSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 21);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.GetPipelinesBySecretsRequest
 */
export type GetPipelinesBySecretsRequest = Message<"redpanda.api.dataplane.v1alpha2.GetPipelinesBySecretsRequest"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetPipelinesBySecretsRequest.
 * Use `create(GetPipelinesBySecretsRequestSchema)` to create a new message.
 */
export const GetPipelinesBySecretsRequestSchema: GenMessage<GetPipelinesBySecretsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 22);

/**
 * @generated from message redpanda.api.dataplane.v1alpha2.GetPipelinesBySecretsResponse
 */
export type GetPipelinesBySecretsResponse = Message<"redpanda.api.dataplane.v1alpha2.GetPipelinesBySecretsResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.PipelinesForSecret pipelines_for_secret = 1;
   */
  pipelinesForSecret: PipelinesForSecret[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetPipelinesBySecretsResponse.
 * Use `create(GetPipelinesBySecretsResponseSchema)` to create a new message.
 */
export const GetPipelinesBySecretsResponseSchema: GenMessage<GetPipelinesBySecretsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 23);

/**
 * PipelineService is the service for Redpanda Connect.
 * It exposes the API for creating and managing Redpanda Connect pipelines and their configurations.
 *
 * @generated from service redpanda.api.dataplane.v1alpha2.PipelineService
 */
export const PipelineService: GenService<{
  /**
   * CreatePipeline creates a Redpanda Connect pipeline in the Redpanda cluster.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.CreatePipeline
   */
  createPipeline: {
    methodKind: "unary";
    input: typeof CreatePipelineRequestSchema;
    output: typeof CreatePipelineResponseSchema;
  },
  /**
   * GetPipeline gets a specific Redpanda Connect pipeline.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.GetPipeline
   */
  getPipeline: {
    methodKind: "unary";
    input: typeof GetPipelineRequestSchema;
    output: typeof GetPipelineResponseSchema;
  },
  /**
   * ListPipelines implements the list pipelines method which lists the pipelines
   * in the Redpanda cluster.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.ListPipelines
   */
  listPipelines: {
    methodKind: "unary";
    input: typeof ListPipelinesRequestSchema;
    output: typeof ListPipelinesResponseSchema;
  },
  /**
   * UpdatePipeline updates a specific Redpanda Connect pipeline configuration.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.UpdatePipeline
   */
  updatePipeline: {
    methodKind: "unary";
    input: typeof UpdatePipelineRequestSchema;
    output: typeof UpdatePipelineResponseSchema;
  },
  /**
   * DeletePipeline deletes a specific Redpanda Connect pipeline.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.DeletePipeline
   */
  deletePipeline: {
    methodKind: "unary";
    input: typeof DeletePipelineRequestSchema;
    output: typeof DeletePipelineResponseSchema;
  },
  /**
   * StopPipeline stops a specific Redpanda Connect pipeline.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.StopPipeline
   */
  stopPipeline: {
    methodKind: "unary";
    input: typeof StopPipelineRequestSchema;
    output: typeof StopPipelineResponseSchema;
  },
  /**
   * StartPipeline starts a specific Redpanda Connect pipeline that has been previously stopped.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.StartPipeline
   */
  startPipeline: {
    methodKind: "unary";
    input: typeof StartPipelineRequestSchema;
    output: typeof StartPipelineResponseSchema;
  },
  /**
   * The configuration schema includes available [components and processors](https://docs.redpanda.com/redpanda-cloud/develop/connect/components/about) in this Redpanda Connect instance.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.GetPipelineServiceConfigSchema
   */
  getPipelineServiceConfigSchema: {
    methodKind: "unary";
    input: typeof GetPipelineServiceConfigSchemaRequestSchema;
    output: typeof GetPipelineServiceConfigSchemaResponseSchema;
  },
  /**
   * GetPipelinesForSecret implements the get pipelines for secret method which lists the pipelines
   * in the Redpanda cluster for the given secret.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.GetPipelinesForSecret
   */
  getPipelinesForSecret: {
    methodKind: "unary";
    input: typeof GetPipelinesForSecretRequestSchema;
    output: typeof GetPipelinesForSecretResponseSchema;
  },
  /**
   * GetPipelinesBySecrets implements the get pipelines by secrets method which lists the pipelines
   * in the Redpanda cluster for all secrets.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.PipelineService.GetPipelinesBySecrets
   */
  getPipelinesBySecrets: {
    methodKind: "unary";
    input: typeof GetPipelinesBySecretsRequestSchema;
    output: typeof GetPipelinesBySecretsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_dataplane_v1alpha2_pipeline, 0);

