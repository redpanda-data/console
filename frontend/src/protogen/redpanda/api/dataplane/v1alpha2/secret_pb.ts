// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/dataplane/v1alpha2/secret.proto (package redpanda.api.dataplane.v1alpha2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/dataplane/v1alpha2/secret.proto.
 */
export const file_redpanda_api_dataplane_v1alpha2_secret: GenFile = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_api_annotations, file_google_api_field_behavior, file_protoc_gen_openapiv2_options_annotations, file_redpanda_api_auth_v1_authorization]);

/**
 * Defines the secret resource.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.Secret
 */
export type Secret = Message<"redpanda.api.dataplane.v1alpha2.Secret"> & {
  /**
   * Secret identifier.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * Secret scopes
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.Scope scopes = 3;
   */
  scopes: Scope[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.Secret.
 * Use `create(SecretSchema)` to create a new message.
 */
export const SecretSchema: GenMessage<Secret> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 0);

/**
 * ListSecretsResponse is the response of ListSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.ListSecretsResponse
 */
export type ListSecretsResponse = Message<"redpanda.api.dataplane.v1alpha2.ListSecretsResponse"> & {
  /**
   * Secrets retrieved.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.Secret secrets = 1;
   */
  secrets: Secret[];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListSecretsResponse.
 * Use `create(ListSecretsResponseSchema)` to create a new message.
 */
export const ListSecretsResponseSchema: GenMessage<ListSecretsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 1);

/**
 * ListSecretsFilter are the filter options for listing secrets.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.ListSecretsFilter
 */
export type ListSecretsFilter = Message<"redpanda.api.dataplane.v1alpha2.ListSecretsFilter"> & {
  /**
   * Substring match on secret name. Case-sensitive.
   *
   * @generated from field: string name_contains = 1;
   */
  nameContains: string;

  /**
   * The secret labels to search for.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * Secret scopes to search for
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.Scope scopes = 3;
   */
  scopes: Scope[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListSecretsFilter.
 * Use `create(ListSecretsFilterSchema)` to create a new message.
 */
export const ListSecretsFilterSchema: GenMessage<ListSecretsFilter> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 2);

/**
 * ListSecretsRequest is the request of ListSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.ListSecretsRequest
 */
export type ListSecretsRequest = Message<"redpanda.api.dataplane.v1alpha2.ListSecretsRequest"> & {
  /**
   * List filter.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.ListSecretsFilter filter = 1;
   */
  filter?: ListSecretsFilter;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Limit the paginated response to a number of items.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListSecretsRequest.
 * Use `create(ListSecretsRequestSchema)` to create a new message.
 */
export const ListSecretsRequestSchema: GenMessage<ListSecretsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 3);

/**
 * GetSecretRequest is the request of GetSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.GetSecretRequest
 */
export type GetSecretRequest = Message<"redpanda.api.dataplane.v1alpha2.GetSecretRequest"> & {
  /**
   * The id of the secret to retrieve.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetSecretRequest.
 * Use `create(GetSecretRequestSchema)` to create a new message.
 */
export const GetSecretRequestSchema: GenMessage<GetSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 4);

/**
 * GetSecretResponse is the response of GetSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.GetSecretResponse
 */
export type GetSecretResponse = Message<"redpanda.api.dataplane.v1alpha2.GetSecretResponse"> & {
  /**
   * The created secret.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetSecretResponse.
 * Use `create(GetSecretResponseSchema)` to create a new message.
 */
export const GetSecretResponseSchema: GenMessage<GetSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 5);

/**
 * CreateSecretRequest is the request of CreateSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.CreateSecretRequest
 */
export type CreateSecretRequest = Message<"redpanda.api.dataplane.v1alpha2.CreateSecretRequest"> & {
  /**
   * Secret identifier.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * Secret scopes
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.Scope scopes = 3;
   */
  scopes: Scope[];

  /**
   * The secret data. Must be Base64-encoded.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData: Uint8Array;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.CreateSecretRequest.
 * Use `create(CreateSecretRequestSchema)` to create a new message.
 */
export const CreateSecretRequestSchema: GenMessage<CreateSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 6);

/**
 * CreateSecretResponse is the response of CreateSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.CreateSecretResponse
 */
export type CreateSecretResponse = Message<"redpanda.api.dataplane.v1alpha2.CreateSecretResponse"> & {
  /**
   * The created secret.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.CreateSecretResponse.
 * Use `create(CreateSecretResponseSchema)` to create a new message.
 */
export const CreateSecretResponseSchema: GenMessage<CreateSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 7);

/**
 * UpdateSecretRequest is the request of UpdateSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.UpdateSecretRequest
 */
export type UpdateSecretRequest = Message<"redpanda.api.dataplane.v1alpha2.UpdateSecretRequest"> & {
  /**
   * Secret identifier.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * Secret scopes
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.Scope scopes = 3;
   */
  scopes: Scope[];

  /**
   * The secret data. Must be Base64-encoded.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData: Uint8Array;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.UpdateSecretRequest.
 * Use `create(UpdateSecretRequestSchema)` to create a new message.
 */
export const UpdateSecretRequestSchema: GenMessage<UpdateSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 8);

/**
 * UpdateSecretResponse is the response of UpdateSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.UpdateSecretResponse
 */
export type UpdateSecretResponse = Message<"redpanda.api.dataplane.v1alpha2.UpdateSecretResponse"> & {
  /**
   * The updated secret.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.UpdateSecretResponse.
 * Use `create(UpdateSecretResponseSchema)` to create a new message.
 */
export const UpdateSecretResponseSchema: GenMessage<UpdateSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 9);

/**
 * DeleteSecretRequest is the request of DeleteSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.DeleteSecretRequest
 */
export type DeleteSecretRequest = Message<"redpanda.api.dataplane.v1alpha2.DeleteSecretRequest"> & {
  /**
   * The id of the secret to delete.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.DeleteSecretRequest.
 * Use `create(DeleteSecretRequestSchema)` to create a new message.
 */
export const DeleteSecretRequestSchema: GenMessage<DeleteSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 10);

/**
 * DeleteSecretResponse is the response of DeleteSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.DeleteSecretResponse
 */
export type DeleteSecretResponse = Message<"redpanda.api.dataplane.v1alpha2.DeleteSecretResponse"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.DeleteSecretResponse.
 * Use `create(DeleteSecretResponseSchema)` to create a new message.
 */
export const DeleteSecretResponseSchema: GenMessage<DeleteSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 11);

/**
 * ListSecretScopesRequest is the request of ListSecretScopes.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.ListSecretScopesRequest
 */
export type ListSecretScopesRequest = Message<"redpanda.api.dataplane.v1alpha2.ListSecretScopesRequest"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListSecretScopesRequest.
 * Use `create(ListSecretScopesRequestSchema)` to create a new message.
 */
export const ListSecretScopesRequestSchema: GenMessage<ListSecretScopesRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 12);

/**
 * ListSecretScopesResponse is the response of ListSecretScopes.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.ListSecretScopesResponse
 */
export type ListSecretScopesResponse = Message<"redpanda.api.dataplane.v1alpha2.ListSecretScopesResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.Scope scopes = 1;
   */
  scopes: Scope[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListSecretScopesResponse.
 * Use `create(ListSecretScopesResponseSchema)` to create a new message.
 */
export const ListSecretScopesResponseSchema: GenMessage<ListSecretScopesResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 13);

/**
 * GetConnectSecretRequest is the request of GetSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.GetConnectSecretRequest
 */
export type GetConnectSecretRequest = Message<"redpanda.api.dataplane.v1alpha2.GetConnectSecretRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * The ID of the secret to retrieve.
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetConnectSecretRequest.
 * Use `create(GetConnectSecretRequestSchema)` to create a new message.
 */
export const GetConnectSecretRequestSchema: GenMessage<GetConnectSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 14);

/**
 * GetConnectSecretResponse is the response of GetConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.GetConnectSecretResponse
 */
export type GetConnectSecretResponse = Message<"redpanda.api.dataplane.v1alpha2.GetConnectSecretResponse"> & {
  /**
   * The retrieved secret.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.GetConnectSecretResponse.
 * Use `create(GetConnectSecretResponseSchema)` to create a new message.
 */
export const GetConnectSecretResponseSchema: GenMessage<GetConnectSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 15);

/**
 * CreateConnectSecretRequest is the request of CreateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.CreateConnectSecretRequest
 */
export type CreateConnectSecretRequest = Message<"redpanda.api.dataplane.v1alpha2.CreateConnectSecretRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * The secret data. Must be Base64-encoded.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData: Uint8Array;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.CreateConnectSecretRequest.
 * Use `create(CreateConnectSecretRequestSchema)` to create a new message.
 */
export const CreateConnectSecretRequestSchema: GenMessage<CreateConnectSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 16);

/**
 * CreateConnectSecretResponse is the response of CreateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.CreateConnectSecretResponse
 */
export type CreateConnectSecretResponse = Message<"redpanda.api.dataplane.v1alpha2.CreateConnectSecretResponse"> & {
  /**
   * The created secret.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.CreateConnectSecretResponse.
 * Use `create(CreateConnectSecretResponseSchema)` to create a new message.
 */
export const CreateConnectSecretResponseSchema: GenMessage<CreateConnectSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 17);

/**
 * ListConnectSecretRequest is the request of ListConnectSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.ListConnectSecretsRequest
 */
export type ListConnectSecretsRequest = Message<"redpanda.api.dataplane.v1alpha2.ListConnectSecretsRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * List filter.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.ListSecretsFilter filter = 2;
   */
  filter?: ListSecretsFilter;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Limit the paginated response to a number of items.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListConnectSecretsRequest.
 * Use `create(ListConnectSecretsRequestSchema)` to create a new message.
 */
export const ListConnectSecretsRequestSchema: GenMessage<ListConnectSecretsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 18);

/**
 * ListConnectSecretsResponse is the response of ListConnectSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.ListConnectSecretsResponse
 */
export type ListConnectSecretsResponse = Message<"redpanda.api.dataplane.v1alpha2.ListConnectSecretsResponse"> & {
  /**
   * Secrets retrieved.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha2.Secret secrets = 1;
   */
  secrets: Secret[];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.ListConnectSecretsResponse.
 * Use `create(ListConnectSecretsResponseSchema)` to create a new message.
 */
export const ListConnectSecretsResponseSchema: GenMessage<ListConnectSecretsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 19);

/**
 * UpdateConnectSecretRequest is the request of UpdateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.UpdateConnectSecretRequest
 */
export type UpdateConnectSecretRequest = Message<"redpanda.api.dataplane.v1alpha2.UpdateConnectSecretRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * ID of the secret to update.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * The secret data. Must be Base64-encoded.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData: Uint8Array;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.UpdateConnectSecretRequest.
 * Use `create(UpdateConnectSecretRequestSchema)` to create a new message.
 */
export const UpdateConnectSecretRequestSchema: GenMessage<UpdateConnectSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 20);

/**
 * UpdateConnectSecretResponse is the response of UpdateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.UpdateConnectSecretResponse
 */
export type UpdateConnectSecretResponse = Message<"redpanda.api.dataplane.v1alpha2.UpdateConnectSecretResponse"> & {
  /**
   * The updated secret.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha2.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.UpdateConnectSecretResponse.
 * Use `create(UpdateConnectSecretResponseSchema)` to create a new message.
 */
export const UpdateConnectSecretResponseSchema: GenMessage<UpdateConnectSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 21);

/**
 * DeleteConnectSecretRequest is the request of DeleteConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.DeleteConnectSecretRequest
 */
export type DeleteConnectSecretRequest = Message<"redpanda.api.dataplane.v1alpha2.DeleteConnectSecretRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * ID of the secret to delete.
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.DeleteConnectSecretRequest.
 * Use `create(DeleteConnectSecretRequestSchema)` to create a new message.
 */
export const DeleteConnectSecretRequestSchema: GenMessage<DeleteConnectSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 22);

/**
 * DeleteConnectSecretResponse is the response of DeleteConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha2.DeleteConnectSecretResponse
 */
export type DeleteConnectSecretResponse = Message<"redpanda.api.dataplane.v1alpha2.DeleteConnectSecretResponse"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha2.DeleteConnectSecretResponse.
 * Use `create(DeleteConnectSecretResponseSchema)` to create a new message.
 */
export const DeleteConnectSecretResponseSchema: GenMessage<DeleteConnectSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha2_secret, 23);

/**
 * Defines the scope of a secret.
 *
 * @generated from enum redpanda.api.dataplane.v1alpha2.Scope
 */
export enum Scope {
  /**
   * @generated from enum value: SCOPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SCOPE_REDPANDA_CONNECT = 1;
   */
  REDPANDA_CONNECT = 1,
}

/**
 * Describes the enum redpanda.api.dataplane.v1alpha2.Scope.
 */
export const ScopeSchema: GenEnum<Scope> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1alpha2_secret, 0);

/**
 * @generated from service redpanda.api.dataplane.v1alpha2.SecretService
 */
export const SecretService: GenService<{
  /**
   * GetSecret retrieves the specific secret.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.GetSecret
   */
  getSecret: {
    methodKind: "unary";
    input: typeof GetSecretRequestSchema;
    output: typeof GetSecretResponseSchema;
  },
  /**
   * ListSecrets lists the secrets based on optional filter.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.ListSecrets
   */
  listSecrets: {
    methodKind: "unary";
    input: typeof ListSecretsRequestSchema;
    output: typeof ListSecretsResponseSchema;
  },
  /**
   * CreateSecret creates the secret.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.CreateSecret
   */
  createSecret: {
    methodKind: "unary";
    input: typeof CreateSecretRequestSchema;
    output: typeof CreateSecretResponseSchema;
  },
  /**
   * UpdateSecret updates the secret.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.UpdateSecret
   */
  updateSecret: {
    methodKind: "unary";
    input: typeof UpdateSecretRequestSchema;
    output: typeof UpdateSecretResponseSchema;
  },
  /**
   * DeleteSecret deletes the secret.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.DeleteSecret
   */
  deleteSecret: {
    methodKind: "unary";
    input: typeof DeleteSecretRequestSchema;
    output: typeof DeleteSecretResponseSchema;
  },
  /**
   * ListSecretScopes lists the supported secret scopes.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.ListSecretScopes
   */
  listSecretScopes: {
    methodKind: "unary";
    input: typeof ListSecretScopesRequestSchema;
    output: typeof ListSecretScopesResponseSchema;
  },
  /**
   * GetConnectSecret retrieves the specific secret for a specific Connect.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.GetConnectSecret
   */
  getConnectSecret: {
    methodKind: "unary";
    input: typeof GetConnectSecretRequestSchema;
    output: typeof GetConnectSecretResponseSchema;
  },
  /**
   * ListConnectSecrets lists the Connect secrets based on optional filter.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.ListConnectSecrets
   */
  listConnectSecrets: {
    methodKind: "unary";
    input: typeof ListConnectSecretsRequestSchema;
    output: typeof ListConnectSecretsResponseSchema;
  },
  /**
   * CreateConnectSecret creates the secret for a Connect.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.CreateConnectSecret
   */
  createConnectSecret: {
    methodKind: "unary";
    input: typeof CreateConnectSecretRequestSchema;
    output: typeof CreateConnectSecretResponseSchema;
  },
  /**
   * UpdateConnectSecret updates the Connect secret.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.UpdateConnectSecret
   */
  updateConnectSecret: {
    methodKind: "unary";
    input: typeof UpdateConnectSecretRequestSchema;
    output: typeof UpdateConnectSecretResponseSchema;
  },
  /**
   * DeleteSecret deletes the secret.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha2.SecretService.DeleteConnectSecret
   */
  deleteConnectSecret: {
    methodKind: "unary";
    input: typeof DeleteConnectSecretRequestSchema;
    output: typeof DeleteConnectSecretResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_dataplane_v1alpha2_secret, 0);

