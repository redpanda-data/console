// @generated by protoc-gen-connect-query v1.4.0 with parameter "target=ts,import_extension=,js_import_style=legacy_commonjs"
// @generated from file redpanda/api/dataplane/v1alpha1/kafka_connect.proto (package redpanda.api.dataplane.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateConnectorRequest, CreateConnectorResponse, DeleteConnectorRequest, GetConnectClusterRequest, GetConnectClusterResponse, GetConnectorConfigRequest, GetConnectorConfigResponse, GetConnectorRequest, GetConnectorResponse, GetConnectorStatusRequest, GetConnectorStatusResponse, ListConnectClustersRequest, ListConnectClustersResponse, ListConnectorsRequest, ListConnectorsResponse, ListConnectorTopicsRequest, ListConnectorTopicsResponse, PauseConnectorRequest, ResetConnectorTopicsRequest, RestartConnectorRequest, ResumeConnectorRequest, StopConnectorRequest, UpsertConnectorRequest, UpsertConnectorResponse } from "./kafka_connect_pb";

/**
 * ListConnectClusters implements the list clusters method, list connect
 * clusters available in the console configuration
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ListConnectClusters
 * @deprecated
 */
export const listConnectClusters = {
  localName: "listConnectClusters",
  name: "ListConnectClusters",
  kind: MethodKind.Unary,
  I: ListConnectClustersRequest,
  O: ListConnectClustersResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * GetConnectCluster implements the get cluster info method, exposes a Kafka
 * Connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.GetConnectCluster
 * @deprecated
 */
export const getConnectCluster = {
  localName: "getConnectCluster",
  name: "GetConnectCluster",
  kind: MethodKind.Unary,
  I: GetConnectClusterRequest,
  O: GetConnectClusterResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * ListConnectors implements the list connectors method, exposes a Kafka
 * Connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ListConnectors
 * @deprecated
 */
export const listConnectors = {
  localName: "listConnectors",
  name: "ListConnectors",
  kind: MethodKind.Unary,
  I: ListConnectorsRequest,
  O: ListConnectorsResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * CreateConnector implements the create connector method, and exposes an
 * equivalent REST endpoint as the Kafka connect API endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.CreateConnector
 * @deprecated
 */
export const createConnector = {
  localName: "createConnector",
  name: "CreateConnector",
  kind: MethodKind.Unary,
  I: CreateConnectorRequest,
  O: CreateConnectorResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * RestartConnector implements the restart connector method, exposes a Kafka
 * Connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.RestartConnector
 * @deprecated
 */
export const restartConnector = {
  localName: "restartConnector",
  name: "RestartConnector",
  kind: MethodKind.Unary,
  I: RestartConnectorRequest,
  O: Empty,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * GetConnector implements the get connector method, exposes a Kafka
 * Connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.GetConnector
 * @deprecated
 */
export const getConnector = {
  localName: "getConnector",
  name: "GetConnector",
  kind: MethodKind.Unary,
  I: GetConnectorRequest,
  O: GetConnectorResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * GetConnectorStatus implement the get status method, Gets the current status of the connector, including:
 * Whether it is running or restarting, or if it has failed or paused
 * Which worker it is assigned to
 * Error information if it has failed
 * The state of all its tasks
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.GetConnectorStatus
 * @deprecated
 */
export const getConnectorStatus = {
  localName: "getConnectorStatus",
  name: "GetConnectorStatus",
  kind: MethodKind.Unary,
  I: GetConnectorStatusRequest,
  O: GetConnectorStatusResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * PauseConnector implements the pause connector method, exposes a Kafka
 * connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.PauseConnector
 * @deprecated
 */
export const pauseConnector = {
  localName: "pauseConnector",
  name: "PauseConnector",
  kind: MethodKind.Unary,
  I: PauseConnectorRequest,
  O: Empty,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * ResumeConnector implements the resume connector method, exposes a Kafka
 * connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ResumeConnector
 * @deprecated
 */
export const resumeConnector = {
  localName: "resumeConnector",
  name: "ResumeConnector",
  kind: MethodKind.Unary,
  I: ResumeConnectorRequest,
  O: Empty,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * StopConnector implements the stop connector method, exposes a Kafka
 * connect equivalent REST endpoint it stops the connector but does not
 * delete the connector. All tasks for the connector are shut down completely
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.StopConnector
 * @deprecated
 */
export const stopConnector = {
  localName: "stopConnector",
  name: "StopConnector",
  kind: MethodKind.Unary,
  I: StopConnectorRequest,
  O: Empty,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * DeleteConnector implements the delete connector method, exposes a Kafka
 * connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.DeleteConnector
 */
export const deleteConnector = {
  localName: "deleteConnector",
  name: "DeleteConnector",
  kind: MethodKind.Unary,
  I: DeleteConnectorRequest,
  O: Empty,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * UpsertConector implements the update or create connector method, it
 * exposes a kafka connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.UpsertConnector
 * @deprecated
 */
export const upsertConnector = {
  localName: "upsertConnector",
  name: "UpsertConnector",
  kind: MethodKind.Unary,
  I: UpsertConnectorRequest,
  O: UpsertConnectorResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * GetConnectorConfig implements the get connector configuration method, expose a kafka connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.GetConnectorConfig
 * @deprecated
 */
export const getConnectorConfig = {
  localName: "getConnectorConfig",
  name: "GetConnectorConfig",
  kind: MethodKind.Unary,
  I: GetConnectorConfigRequest,
  O: GetConnectorConfigResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * ListConnectorTopics implements the list connector topics method, expose a kafka connect equivalent REST endpoint
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ListConnectorTopics
 * @deprecated
 */
export const listConnectorTopics = {
  localName: "listConnectorTopics",
  name: "ListConnectorTopics",
  kind: MethodKind.Unary,
  I: ListConnectorTopicsRequest,
  O: ListConnectorTopicsResponse,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;

/**
 * ResetConnectorTopics implements the reset connector topics method, expose a kafka connect equivalent REST endpoint
 * the request body is empty.
 *
 * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ResetConnectorTopics
 * @deprecated
 */
export const resetConnectorTopics = {
  localName: "resetConnectorTopics",
  name: "ResetConnectorTopics",
  kind: MethodKind.Unary,
  I: ResetConnectorTopicsRequest,
  O: Empty,
  service: {
    typeName: "redpanda.api.dataplane.v1alpha1.KafkaConnectService"
  }
} as const;
