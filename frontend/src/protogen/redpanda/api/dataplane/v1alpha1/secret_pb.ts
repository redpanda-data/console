// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/dataplane/v1alpha1/secret.proto (package redpanda.api.dataplane.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/dataplane/v1alpha1/secret.proto.
 */
export const file_redpanda_api_dataplane_v1alpha1_secret: GenFile = /*@__PURE__*/
  fileDesc("CixyZWRwYW5kYS9hcGkvZGF0YXBsYW5lL3YxYWxwaGExL3NlY3JldC5wcm90bxIfcmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMSLAAQoGU2VjcmV0EhIKAmlkGAEgASgJQgbgQQXgQQMScwoGbGFiZWxzGAIgAygLMjMucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5TZWNyZXQuTGFiZWxzRW50cnlCLuBBBbpIKJoBJSojciEyH14oW1xwe0x9XHB7Wn1ccHtOfV8uOi89K1wtQF0qKSQaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJoChNMaXN0U2VjcmV0c1Jlc3BvbnNlEjgKB3NlY3JldHMYASADKAsyJy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlNlY3JldBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAki9AEKEUxpc3RTZWNyZXRzRmlsdGVyEjMKDW5hbWVfY29udGFpbnMYASABKAlCHLpIGXIXGIABMhJeKFthLXpBLVowLTktX10qKSQSewoGbGFiZWxzGAIgAygLMj4ucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5MaXN0U2VjcmV0c0ZpbHRlci5MYWJlbHNFbnRyeUIrukgomgElKiNyITIfXihbXHB7TH1ccHtafVxwe059Xy46Lz0rXC1AXSopJBotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIvIBChdHZXRDb25uZWN0U2VjcmV0UmVxdWVzdBKmAQoMY2x1c3Rlcl9uYW1lGAEgASgJQo8BkkFqMkpVbmlxdWUgbmFtZSBvZiB0YXJnZXQgY29ubmVjdCBjbHVzdGVyLiBGb3IgUmVkcGFuZGEgQ2xvdWQsIHVzZSBgcmVkcGFuZGFgLkoKInJlZHBhbmRhIso+D/oCDGNsdXN0ZXJfbmFtZeBBArpIHMgBAXIXEAEYgAEyEF5bYS16QS1aMC05LV9dKyQSLgoCaWQYAiABKAlCIrpIH3IdEAEY/wEyFl5bYS16QS1aMC05L18rPS5AJS1dKyQiUwoYR2V0Q29ubmVjdFNlY3JldFJlc3BvbnNlEjcKBnNlY3JldBgBIAEoCzInLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuU2VjcmV0IsUDChpDcmVhdGVDb25uZWN0U2VjcmV0UmVxdWVzdBKTAQoMY2x1c3Rlcl9uYW1lGAEgASgJQn2SQVgySlVuaXF1ZSBuYW1lIG9mIHRhcmdldCBjb25uZWN0IGNsdXN0ZXIuIEZvciBSZWRwYW5kYSBDbG91ZCwgdXNlIGByZWRwYW5kYWAuSgoicmVkcGFuZGEi4EECukgcyAEBchcQARiAATIQXlthLXpBLVowLTktX10rJBIwCgRuYW1lGAIgASgJQiLgQQK6SBzIAQFyFxABGIABMhBeW2EtekEtWjAtOS1fXSskEocBCgZsYWJlbHMYAyADKAsyRy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNyZWF0ZUNvbm5lY3RTZWNyZXRSZXF1ZXN0LkxhYmVsc0VudHJ5Qi7gQQW6SCiaASUqI3IhMh9eKFtccHtMfVxwe1p9XHB7Tn1fLjovPStcLUBdKikkEiYKC3NlY3JldF9kYXRhGAQgASgMQhHgQQTgQQK6SAh6BhABGICABBotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlYKG0NyZWF0ZUNvbm5lY3RTZWNyZXRSZXNwb25zZRI3CgZzZWNyZXQYASABKAsyJy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlNlY3JldCK+AwoZTGlzdENvbm5lY3RTZWNyZXRzUmVxdWVzdBKmAQoMY2x1c3Rlcl9uYW1lGAEgASgJQo8BkkFqMkpVbmlxdWUgbmFtZSBvZiB0YXJnZXQgY29ubmVjdCBjbHVzdGVyLiBGb3IgUmVkcGFuZGEgQ2xvdWQsIHVzZSBgcmVkcGFuZGFgLkoKInJlZHBhbmRhIso+D/oCDGNsdXN0ZXJfbmFtZeBBArpIHMgBAXIXEAEYgAEyEF5bYS16QS1aMC05LV9dKyQSQgoGZmlsdGVyGAIgASgLMjIucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5MaXN0U2VjcmV0c0ZpbHRlchISCgpwYWdlX3Rva2VuGAMgASgJEp8BCglwYWdlX3NpemUYBCABKAVCiwGSQXUyYUxpbWl0IHRoZSBwYWdpbmF0ZWQgcmVzcG9uc2UgdG8gYSBudW1iZXIgb2YgaXRlbXMuIERlZmF1bHRzIHRvIDEwMC4gVXNlIC0xIHRvIGRpc2FibGUgcGFnaW5hdGlvbi5ZAAAAAABAj0BpAAAAAAAA8L+6SBAaDhjoByj///////////8BIm8KGkxpc3RDb25uZWN0U2VjcmV0c1Jlc3BvbnNlEjgKB3NlY3JldHMYASADKAsyJy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlNlY3JldBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiwwMKGlVwZGF0ZUNvbm5lY3RTZWNyZXRSZXF1ZXN0EpMBCgxjbHVzdGVyX25hbWUYASABKAlCfZJBWDJKVW5pcXVlIG5hbWUgb2YgdGFyZ2V0IGNvbm5lY3QgY2x1c3Rlci4gRm9yIFJlZHBhbmRhIENsb3VkLCB1c2UgYHJlZHBhbmRhYC5KCiJyZWRwYW5kYSLgQQK6SBzIAQFyFxABGIABMhBeW2EtekEtWjAtOS1fXSskEi4KAmlkGAIgASgJQiK6SB9yHRABGP8BMhZeW2EtekEtWjAtOS9fKz0uQCUtXSskEocBCgZsYWJlbHMYAyADKAsyRy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlVwZGF0ZUNvbm5lY3RTZWNyZXRSZXF1ZXN0LkxhYmVsc0VudHJ5Qi7gQQW6SCiaASUqI3IhMh9eKFtccHtMfVxwe1p9XHB7Tn1fLjovPStcLUBdKikkEiYKC3NlY3JldF9kYXRhGAQgASgMQhHgQQTgQQK6SAh6BhABGICABBotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlYKG1VwZGF0ZUNvbm5lY3RTZWNyZXRSZXNwb25zZRI3CgZzZWNyZXQYASABKAsyJy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlNlY3JldCL1AQoaRGVsZXRlQ29ubmVjdFNlY3JldFJlcXVlc3QSpgEKDGNsdXN0ZXJfbmFtZRgBIAEoCUKPAZJBajJKVW5pcXVlIG5hbWUgb2YgdGFyZ2V0IGNvbm5lY3QgY2x1c3Rlci4gRm9yIFJlZHBhbmRhIENsb3VkLCB1c2UgYHJlZHBhbmRhYC5KCiJyZWRwYW5kYSLKPg/6AgxjbHVzdGVyX25hbWXgQQK6SBzIAQFyFxABGIABMhBeW2EtekEtWjAtOS1fXSskEi4KAmlkGAIgASgJQiK6SB9yHRABGP8BMhZeW2EtekEtWjAtOS9fKz0uQCUtXSskIh0KG0RlbGV0ZUNvbm5lY3RTZWNyZXRSZXNwb25zZTLHEAoNU2VjcmV0U2VydmljZRKMAwoQR2V0Q29ubmVjdFNlY3JldBI4LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuR2V0Q29ubmVjdFNlY3JldFJlcXVlc3QaOS5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkdldENvbm5lY3RTZWNyZXRSZXNwb25zZSKCApJBsAESGkdldCBDb25uZWN0IENsdXN0ZXIgU2VjcmV0GixHZXQgYSBzcGVjaWZpYyBLYWZrYSBDb25uZWN0IGNsdXN0ZXIgc2VjcmV0Lko4CgMyMDASMQoCT0sSKwopGicucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5TZWNyZXRKKgoDNDA0EiMKCU5vdCBGb3VuZBIWChQaEi5nb29nbGUucnBjLlN0YXR1c4qmHQQIARAGgtPkkwJAYgZzZWNyZXQSNi92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9L3NlY3JldHMve2lkfRKUAwoSTGlzdENvbm5lY3RTZWNyZXRzEjoucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5MaXN0Q29ubmVjdFNlY3JldHNSZXF1ZXN0GjsucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5MaXN0Q29ubmVjdFNlY3JldHNSZXNwb25zZSKEAogCAZJBvAESHExpc3QgQ29ubmVjdCBDbHVzdGVyIFNlY3JldHMaVUxpc3QgS2Fma2EgQ29ubmVjdCBjbHVzdGVyIHNlY3JldHMuIE9wdGlvbmFsOiBmaWx0ZXIgYmFzZWQgb24gc2VjcmV0IG5hbWUgYW5kIGxhYmVscy5KRQoDMjAwEj4KAk9LEjgKNho0LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuTGlzdFNlY3JldHNSZXNwb25zZYqmHQQIARAGgtPkkwIzEjEvdjFhbHBoYTEvY29ubmVjdC9jbHVzdGVycy97Y2x1c3Rlcl9uYW1lfS9zZWNyZXRzEvMCChNDcmVhdGVDb25uZWN0U2VjcmV0EjsucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5DcmVhdGVDb25uZWN0U2VjcmV0UmVxdWVzdBo8LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ3JlYXRlQ29ubmVjdFNlY3JldFJlc3BvbnNlIuABiAIBkkGNARIdQ3JlYXRlIENvbm5lY3QgQ2x1c3RlciBTZWNyZXQaJkNyZWF0ZSBhIEthZmthIENvbm5lY3QgY2x1c3RlciBzZWNyZXQuSkQKAzIwMRI9Cg5TZWNyZXQgY3JlYXRlZBIrCikaJy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlNlY3JldIqmHQQIAhAGgtPkkwI+OgEqYgZzZWNyZXQiMS92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9L3NlY3JldHMSmAMKE1VwZGF0ZUNvbm5lY3RTZWNyZXQSOy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlVwZGF0ZUNvbm5lY3RTZWNyZXRSZXF1ZXN0GjwucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5VcGRhdGVDb25uZWN0U2VjcmV0UmVzcG9uc2UihQKIAgGSQa0BEh1VcGRhdGUgQ29ubmVjdCBDbHVzdGVyIFNlY3JldBomVXBkYXRlIGEgS2Fma2EgQ29ubmVjdCBjbHVzdGVyIHNlY3JldC5KOAoDMjAwEjEKAk9LEisKKRonLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuU2VjcmV0SioKAzQwNBIjCglOb3QgRm91bmQSFgoUGhIuZ29vZ2xlLnJwYy5TdGF0dXOKph0ECAIQBoLT5JMCQzoBKmIGc2VjcmV0GjYvdjFhbHBoYTEvY29ubmVjdC9jbHVzdGVycy97Y2x1c3Rlcl9uYW1lfS9zZWNyZXRzL3tpZH0S+wIKE0RlbGV0ZUNvbm5lY3RTZWNyZXQSOy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkRlbGV0ZUNvbm5lY3RTZWNyZXRSZXF1ZXN0GjwucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5EZWxldGVDb25uZWN0U2VjcmV0UmVzcG9uc2Ui6AGIAgGSQZsBEh1EZWxldGUgQ29ubmVjdCBDbHVzdGVyIFNlY3JldBomRGVsZXRlIGEgS2Fma2EgQ29ubmVjdCBjbHVzdGVyIHNlY3JldC5KJgoDMjA0Eh8KG1NlY3JldCBkZWxldGVkIHN1Y2Nlc3NmdWxseRIASioKAzQwNBIjCglOb3QgRm91bmQSFgoUGhIuZ29vZ2xlLnJwYy5TdGF0dXOKph0ECAIQBoLT5JMCOCo2L3YxYWxwaGExL2Nvbm5lY3QvY2x1c3RlcnMve2NsdXN0ZXJfbmFtZX0vc2VjcmV0cy97aWR9GoABiAIBkkF6EnhNYW5hZ2UgW3NlY3JldHNdKGh0dHBzOi8vZG9jcy5yZWRwYW5kYS5jb20vY3VycmVudC9kZXBsb3kvZGVwbG95bWVudC1vcHRpb24vY2xvdWQvc2VjdXJpdHkvc2VjcmV0cy8pIGZvciBSZWRwYW5kYSBDbG91ZC5CugIKI2NvbS5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExQgtTZWNyZXRQcm90b1ABWmdnaXRodWIuY29tL3JlZHBhbmRhLWRhdGEvY29uc29sZS9iYWNrZW5kL3BrZy9wcm90b2dlbi9yZWRwYW5kYS9hcGkvZGF0YXBsYW5lL3YxYWxwaGExO2RhdGFwbGFuZXYxYWxwaGExogIDUkFEqgIfUmVkcGFuZGEuQXBpLkRhdGFwbGFuZS5WMWFscGhhMcoCH1JlZHBhbmRhXEFwaVxEYXRhcGxhbmVcVjFhbHBoYTHiAitSZWRwYW5kYVxBcGlcRGF0YXBsYW5lXFYxYWxwaGExXEdQQk1ldGFkYXRh6gIiUmVkcGFuZGE6OkFwaTo6RGF0YXBsYW5lOjpWMWFscGhhMWIGcHJvdG8z", [file_buf_validate_validate, file_google_api_annotations, file_google_api_field_behavior, file_protoc_gen_openapiv2_options_annotations, file_redpanda_api_auth_v1_authorization]);

/**
 * Defines the secret resource.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.Secret
 */
export type Secret = Message<"redpanda.api.dataplane.v1alpha1.Secret"> & {
  /**
   * Secret identifier.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.Secret.
 * Use `create(SecretSchema)` to create a new message.
 */
export const SecretSchema: GenMessage<Secret> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 0);

/**
 * ListSecretsResponse is the response of ListSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.ListSecretsResponse
 */
export type ListSecretsResponse = Message<"redpanda.api.dataplane.v1alpha1.ListSecretsResponse"> & {
  /**
   * Secrets retrieved.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.Secret secrets = 1;
   */
  secrets: Secret[];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListSecretsResponse.
 * Use `create(ListSecretsResponseSchema)` to create a new message.
 */
export const ListSecretsResponseSchema: GenMessage<ListSecretsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 1);

/**
 * ListSecretsFilter are the filter options for listing secrets.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.ListSecretsFilter
 */
export type ListSecretsFilter = Message<"redpanda.api.dataplane.v1alpha1.ListSecretsFilter"> & {
  /**
   * Substring match on secret name. Case-sensitive.
   *
   * @generated from field: string name_contains = 1;
   */
  nameContains: string;

  /**
   * The secret labels to search for.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListSecretsFilter.
 * Use `create(ListSecretsFilterSchema)` to create a new message.
 */
export const ListSecretsFilterSchema: GenMessage<ListSecretsFilter> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 2);

/**
 * GetConnectSecretRequest is the request of GetSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectSecretRequest
 */
export type GetConnectSecretRequest = Message<"redpanda.api.dataplane.v1alpha1.GetConnectSecretRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * The ID of the secret to retrieve.
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectSecretRequest.
 * Use `create(GetConnectSecretRequestSchema)` to create a new message.
 */
export const GetConnectSecretRequestSchema: GenMessage<GetConnectSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 3);

/**
 * GetConnectSecretResponse is the response of GetConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectSecretResponse
 */
export type GetConnectSecretResponse = Message<"redpanda.api.dataplane.v1alpha1.GetConnectSecretResponse"> & {
  /**
   * The retrieved secret.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha1.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectSecretResponse.
 * Use `create(GetConnectSecretResponseSchema)` to create a new message.
 */
export const GetConnectSecretResponseSchema: GenMessage<GetConnectSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 4);

/**
 * CreateConnectSecretRequest is the request of CreateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.CreateConnectSecretRequest
 */
export type CreateConnectSecretRequest = Message<"redpanda.api.dataplane.v1alpha1.CreateConnectSecretRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * The secret data.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData: Uint8Array;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.CreateConnectSecretRequest.
 * Use `create(CreateConnectSecretRequestSchema)` to create a new message.
 */
export const CreateConnectSecretRequestSchema: GenMessage<CreateConnectSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 5);

/**
 * CreateConnectSecretResponse is the response of CreateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.CreateConnectSecretResponse
 */
export type CreateConnectSecretResponse = Message<"redpanda.api.dataplane.v1alpha1.CreateConnectSecretResponse"> & {
  /**
   * The created secret.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha1.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.CreateConnectSecretResponse.
 * Use `create(CreateConnectSecretResponseSchema)` to create a new message.
 */
export const CreateConnectSecretResponseSchema: GenMessage<CreateConnectSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 6);

/**
 * ListConnectSecretRequest is the request of ListConnectSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectSecretsRequest
 */
export type ListConnectSecretsRequest = Message<"redpanda.api.dataplane.v1alpha1.ListConnectSecretsRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * List filter.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha1.ListSecretsFilter filter = 2;
   */
  filter?: ListSecretsFilter;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Limit the paginated response to a number of items.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListConnectSecretsRequest.
 * Use `create(ListConnectSecretsRequestSchema)` to create a new message.
 */
export const ListConnectSecretsRequestSchema: GenMessage<ListConnectSecretsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 7);

/**
 * ListConnectSecretsResponse is the response of ListConnectSecrets.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectSecretsResponse
 */
export type ListConnectSecretsResponse = Message<"redpanda.api.dataplane.v1alpha1.ListConnectSecretsResponse"> & {
  /**
   * Secrets retrieved.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.Secret secrets = 1;
   */
  secrets: Secret[];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListConnectSecretsResponse.
 * Use `create(ListConnectSecretsResponseSchema)` to create a new message.
 */
export const ListConnectSecretsResponseSchema: GenMessage<ListConnectSecretsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 8);

/**
 * UpdateConnectSecretRequest is the request of UpdateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.UpdateConnectSecretRequest
 */
export type UpdateConnectSecretRequest = Message<"redpanda.api.dataplane.v1alpha1.UpdateConnectSecretRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * ID of the secret to update.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * Secret labels.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * The secret data.
   *
   * @generated from field: bytes secret_data = 4;
   */
  secretData: Uint8Array;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.UpdateConnectSecretRequest.
 * Use `create(UpdateConnectSecretRequestSchema)` to create a new message.
 */
export const UpdateConnectSecretRequestSchema: GenMessage<UpdateConnectSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 9);

/**
 * UpdateConnectSecretResponse is the response of UpdateConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.UpdateConnectSecretResponse
 */
export type UpdateConnectSecretResponse = Message<"redpanda.api.dataplane.v1alpha1.UpdateConnectSecretResponse"> & {
  /**
   * The updated secret.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha1.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.UpdateConnectSecretResponse.
 * Use `create(UpdateConnectSecretResponseSchema)` to create a new message.
 */
export const UpdateConnectSecretResponseSchema: GenMessage<UpdateConnectSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 10);

/**
 * DeleteConnectSecretRequest is the request of DeleteConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.DeleteConnectSecretRequest
 */
export type DeleteConnectSecretRequest = Message<"redpanda.api.dataplane.v1alpha1.DeleteConnectSecretRequest"> & {
  /**
   * Unique name of the target connect cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * ID of the secret to delete.
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.DeleteConnectSecretRequest.
 * Use `create(DeleteConnectSecretRequestSchema)` to create a new message.
 */
export const DeleteConnectSecretRequestSchema: GenMessage<DeleteConnectSecretRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 11);

/**
 * DeleteConnectSecretResponse is the response of DeleteConnectSecret.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.DeleteConnectSecretResponse
 */
export type DeleteConnectSecretResponse = Message<"redpanda.api.dataplane.v1alpha1.DeleteConnectSecretResponse"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.DeleteConnectSecretResponse.
 * Use `create(DeleteConnectSecretResponseSchema)` to create a new message.
 */
export const DeleteConnectSecretResponseSchema: GenMessage<DeleteConnectSecretResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_secret, 12);

/**
 * @generated from service redpanda.api.dataplane.v1alpha1.SecretService
 * @deprecated
 */
export const SecretService: GenService<{
  /**
   * GetConnectSecret retrieves the specific secret for a specific Connect.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.SecretService.GetConnectSecret
   */
  getConnectSecret: {
    methodKind: "unary";
    input: typeof GetConnectSecretRequestSchema;
    output: typeof GetConnectSecretResponseSchema;
  },
  /**
   * ListConnectSecrets lists the Connect secrets based on optional filter.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.SecretService.ListConnectSecrets
   * @deprecated
   */
  listConnectSecrets: {
    methodKind: "unary";
    input: typeof ListConnectSecretsRequestSchema;
    output: typeof ListConnectSecretsResponseSchema;
  },
  /**
   * CreateConnectSecret creates the secret for a Connect.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.SecretService.CreateConnectSecret
   * @deprecated
   */
  createConnectSecret: {
    methodKind: "unary";
    input: typeof CreateConnectSecretRequestSchema;
    output: typeof CreateConnectSecretResponseSchema;
  },
  /**
   * UpdateConnectSecret updates the Connect secret.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.SecretService.UpdateConnectSecret
   * @deprecated
   */
  updateConnectSecret: {
    methodKind: "unary";
    input: typeof UpdateConnectSecretRequestSchema;
    output: typeof UpdateConnectSecretResponseSchema;
  },
  /**
   * DeleteSecret deletes the secret.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.SecretService.DeleteConnectSecret
   * @deprecated
   */
  deleteConnectSecret: {
    methodKind: "unary";
    input: typeof DeleteConnectSecretRequestSchema;
    output: typeof DeleteConnectSecretResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_dataplane_v1alpha1_secret, 0);

