// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/dataplane/v1alpha1/kafka_connect.proto (package redpanda.api.dataplane.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/dataplane/v1alpha1/kafka_connect.proto.
 */
export const file_redpanda_api_dataplane_v1alpha1_kafka_connect: GenFile = /*@__PURE__*/
  fileDesc("CjNyZWRwYW5kYS9hcGkvZGF0YXBsYW5lL3YxYWxwaGExL2thZmthX2Nvbm5lY3QucHJvdG8SH3JlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEiPwoPQ29ubmVjdG9yUGx1Z2luEgwKBHR5cGUYASABKAkSDwoHdmVyc2lvbhgCIAEoCRINCgVjbGFzcxgDIAEoCSL5AQoOQ29ubmVjdENsdXN0ZXISDAoEbmFtZRgBIAEoCRIPCgdhZGRyZXNzGAIgASgJEkIKBGluZm8YAyABKAsyNC5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RDbHVzdGVyLkluZm8SQQoHcGx1Z2lucxgEIAMoCzIwLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ29ubmVjdG9yUGx1Z2luGkEKBEluZm8SDwoHdmVyc2lvbhgBIAEoCRIOCgZjb21taXQYAiABKAkSGAoQa2Fma2FfY2x1c3Rlcl9pZBgDIAEoCSKIAwoPQ29ubmVjdG9yU3RhdHVzEgwKBG5hbWUYASABKAkSTQoJY29ubmVjdG9yGAIgASgLMjoucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5Db25uZWN0b3JTdGF0dXMuQ29ubmVjdG9yEjoKBXRhc2tzGAMgAygLMisucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5UYXNrU3RhdHVzEgwKBHR5cGUYBCABKAkSTwoOaG9saXN0aWNfc3RhdGUYBSABKA4yNy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RvckhvbGlzdGljU3RhdGUSPwoGZXJyb3JzGAYgAygLMi8ucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5Db25uZWN0b3JFcnJvcho8CglDb25uZWN0b3ISDQoFc3RhdGUYASABKAkSEQoJd29ya2VyX2lkGAIgASgJEg0KBXRyYWNlGAMgASgJIkkKClRhc2tTdGF0dXMSCgoCaWQYASABKAUSDQoFc3RhdGUYAiABKAkSEQoJd29ya2VyX2lkGAMgASgJEg0KBXRyYWNlGAQgASgJIisKCFRhc2tJbmZvEhEKCWNvbm5lY3RvchgBIAEoCRIMCgR0YXNrGAIgASgFIrQBCg5Db25uZWN0b3JFcnJvchJCCgR0eXBlGAEgASgOMjQucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5Db25uZWN0b3JFcnJvci5UeXBlEg0KBXRpdGxlGAIgASgJEg8KB2NvbnRlbnQYAyABKAkiPgoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASDgoKVFlQRV9FUlJPUhABEhAKDFRZUEVfV0FSTklORxACIoACCg1Db25uZWN0b3JTcGVjEhcKBG5hbWUYASABKAlCCeBBArpIA8gBARJVCgZjb25maWcYAiADKAsyOi5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RvclNwZWMuQ29uZmlnRW50cnlCCeBBArpIA8gBARI9CgV0YXNrcxgDIAMoCzIpLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuVGFza0luZm9CA+BBAxIRCgR0eXBlGAQgASgJQgPgQQMaLQoLQ29uZmlnRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASL2AgoVTGlzdENvbm5lY3RvcnNSZXF1ZXN0EqYBCgxjbHVzdGVyX25hbWUYASABKAlCjwGSQWoySlVuaXF1ZSBuYW1lIG9mIHRhcmdldCBjb25uZWN0IGNsdXN0ZXIuIEZvciBSZWRwYW5kYSBDbG91ZCwgdXNlIGByZWRwYW5kYWAuSgoicmVkcGFuZGEiyj4P+gIMY2x1c3Rlcl9uYW1l4EECukgcyAEBchcQARiAATIQXlthLXpBLVowLTktX10rJBISCgpwYWdlX3Rva2VuGAIgASgJEp8BCglwYWdlX3NpemUYAyABKAVCiwGSQXUyYUxpbWl0IHRoZSBwYWdpbmF0ZWQgcmVzcG9uc2UgdG8gYSBudW1iZXIgb2YgaXRlbXMuIERlZmF1bHRzIHRvIDEwMC4gVXNlIC0xIHRvIGRpc2FibGUgcGFnaW5hdGlvbi5ZAAAAAABAj0BpAAAAAAAA8L+6SBAaDhjoByj///////////8BIpkDChdSZXN0YXJ0Q29ubmVjdG9yUmVxdWVzdBKmAQoMY2x1c3Rlcl9uYW1lGAEgASgJQo8BkkFqMkpVbmlxdWUgbmFtZSBvZiB0YXJnZXQgY29ubmVjdCBjbHVzdGVyLiBGb3IgUmVkcGFuZGEgQ2xvdWQsIHVzZSBgcmVkcGFuZGFgLkoKInJlZHBhbmRhIso+D/oCDGNsdXN0ZXJfbmFtZeBBArpIHMgBAXIXEAEYgAEyEF5bYS16QS1aMC05LV9dKyQSSwoEbmFtZRgCIAEoCUI94EECukg3yAEBcjIQARiACDIrXltBLVphLXowLTkhQCMkJV4mKigpLV89Kzs6JyJgfiw8Lj4vP3xcLV0rJBJRCgdvcHRpb25zGAMgASgLMkAucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5SZXN0YXJ0Q29ubmVjdG9yUmVxdWVzdC5PcHRpb25zGjUKB09wdGlvbnMSFQoNaW5jbHVkZV90YXNrcxgBIAEoCBITCgtvbmx5X2ZhaWxlZBgCIAEoCCKOAgoWRGVsZXRlQ29ubmVjdG9yUmVxdWVzdBKmAQoMY2x1c3Rlcl9uYW1lGAEgASgJQo8BkkFqMkpVbmlxdWUgbmFtZSBvZiB0YXJnZXQgY29ubmVjdCBjbHVzdGVyLiBGb3IgUmVkcGFuZGEgQ2xvdWQsIHVzZSBgcmVkcGFuZGFgLkoKInJlZHBhbmRhIso+D/oCDGNsdXN0ZXJfbmFtZeBBArpIHMgBAXIXEAEYgAEyEF5bYS16QS1aMC05LV9dKyQSSwoEbmFtZRgCIAEoCUI94EECukg3yAEBcjIQARiACDIrXltBLVphLXowLTkhQCMkJV4mKigpLV89Kzs6JyJgfiw8Lj4vP3xcLV0rJCKNAgoVUGF1c2VDb25uZWN0b3JSZXF1ZXN0EqYBCgxjbHVzdGVyX25hbWUYASABKAlCjwGSQWoySlVuaXF1ZSBuYW1lIG9mIHRhcmdldCBjb25uZWN0IGNsdXN0ZXIuIEZvciBSZWRwYW5kYSBDbG91ZCwgdXNlIGByZWRwYW5kYWAuSgoicmVkcGFuZGEiyj4P+gIMY2x1c3Rlcl9uYW1l4EECukgcyAEBchcQARiAATIQXlthLXpBLVowLTktX10rJBJLCgRuYW1lGAIgASgJQj3gQQK6SDfIAQFyMhABGIAIMiteW0EtWmEtejAtOSFAIyQlXiYqKCktXz0rOzonImB+LDwuPi8/fFwtXSskIo4CChZSZXN1bWVDb25uZWN0b3JSZXF1ZXN0EqYBCgxjbHVzdGVyX25hbWUYASABKAlCjwGSQWoySlVuaXF1ZSBuYW1lIG9mIHRhcmdldCBjb25uZWN0IGNsdXN0ZXIuIEZvciBSZWRwYW5kYSBDbG91ZCwgdXNlIGByZWRwYW5kYWAuSgoicmVkcGFuZGEiyj4P+gIMY2x1c3Rlcl9uYW1l4EECukgcyAEBchcQARiAATIQXlthLXpBLVowLTktX10rJBJLCgRuYW1lGAIgASgJQj3gQQK6SDfIAQFyMhABGIAIMiteW0EtWmEtejAtOSFAIyQlXiYqKCktXz0rOzonImB+LDwuPi8/fFwtXSskIowCChRTdG9wQ29ubmVjdG9yUmVxdWVzdBKmAQoMY2x1c3Rlcl9uYW1lGAEgASgJQo8BkkFqMkpVbmlxdWUgbmFtZSBvZiB0YXJnZXQgY29ubmVjdCBjbHVzdGVyLiBGb3IgUmVkcGFuZGEgQ2xvdWQsIHVzZSBgcmVkcGFuZGFgLkoKInJlZHBhbmRhIso+D/oCDGNsdXN0ZXJfbmFtZeBBArpIHMgBAXIXEAEYgAEyEF5bYS16QS1aMC05LV9dKyQSSwoEbmFtZRgCIAEoCUI94EECukg3yAEBcjIQARiACDIrXltBLVphLXowLTkhQCMkJV4mKigpLV89Kzs6JyJgfiw8Lj4vP3xcLV0rJCKLAgoTR2V0Q29ubmVjdG9yUmVxdWVzdBKmAQoMY2x1c3Rlcl9uYW1lGAEgASgJQo8BkkFqMkpVbmlxdWUgbmFtZSBvZiB0YXJnZXQgY29ubmVjdCBjbHVzdGVyLiBGb3IgUmVkcGFuZGEgQ2xvdWQsIHVzZSBgcmVkcGFuZGFgLkoKInJlZHBhbmRhIso+D/oCDGNsdXN0ZXJfbmFtZeBBArpIHMgBAXIXEAEYgAEyEF5bYS16QS1aMC05LV9dKyQSSwoEbmFtZRgCIAEoCUI94EECukg3yAEBcjIQARiACDIrXltBLVphLXowLTkhQCMkJV4mKigpLV89Kzs6JyJgfiw8Lj4vP3xcLV0rJCKEAgoWQ3JlYXRlQ29ubmVjdG9yUmVxdWVzdBKmAQoMY2x1c3Rlcl9uYW1lGAEgASgJQo8BkkFqMkpVbmlxdWUgbmFtZSBvZiB0YXJnZXQgY29ubmVjdCBjbHVzdGVyLiBGb3IgUmVkcGFuZGEgQ2xvdWQsIHVzZSBgcmVkcGFuZGFgLkoKInJlZHBhbmRhIso+D/oCDGNsdXN0ZXJfbmFtZeBBArpIHMgBAXIXEAEYgAEyEF5bYS16QS1aMC05LV9dKyQSQQoJY29ubmVjdG9yGAIgASgLMi4ucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5Db25uZWN0b3JTcGVjIlkKFEdldENvbm5lY3RvclJlc3BvbnNlEkEKCWNvbm5lY3RvchgBIAEoCzIuLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ29ubmVjdG9yU3BlYyJcChdDcmVhdGVDb25uZWN0b3JSZXNwb25zZRJBCgljb25uZWN0b3IYASABKAsyLi5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RvclNwZWMiqQMKFkxpc3RDb25uZWN0b3JzUmVzcG9uc2USXwoKY29ubmVjdG9ycxgBIAMoCzJLLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuTGlzdENvbm5lY3RvcnNSZXNwb25zZS5Db25uZWN0b3JJbmZvU3RhdHVzEocBCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAlCbpJBazJpUGFnZSBUb2tlbiB0byBmZXRjaCB0aGUgbmV4dCBwYWdlLiBUaGUgdmFsdWUgY2FuIGJlIHVzZWQgYXMgcGFnZV90b2tlbiBpbiB0aGUgbmV4dCBjYWxsIHRvIHRoaXMgZW5kcG9pbnQuGqMBChNDb25uZWN0b3JJbmZvU3RhdHVzEgwKBG5hbWUYASABKAkSPAoEaW5mbxgCIAEoCzIuLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ29ubmVjdG9yU3BlYxJACgZzdGF0dXMYAyABKAsyMC5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RvclN0YXR1cyLDAQoYR2V0Q29ubmVjdENsdXN0ZXJSZXF1ZXN0EqYBCgxjbHVzdGVyX25hbWUYASABKAlCjwGSQWoySlVuaXF1ZSBuYW1lIG9mIHRhcmdldCBjb25uZWN0IGNsdXN0ZXIuIEZvciBSZWRwYW5kYSBDbG91ZCwgdXNlIGByZWRwYW5kYWAuSgoicmVkcGFuZGEiyj4P+gIMY2x1c3Rlcl9uYW1l4EECukgcyAEBchcQARiAATIQXlthLXpBLVowLTktX10rJCJdChlHZXRDb25uZWN0Q2x1c3RlclJlc3BvbnNlEkAKB2NsdXN0ZXIYASABKAsyLy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RDbHVzdGVyIhwKGkxpc3RDb25uZWN0Q2x1c3RlcnNSZXF1ZXN0ImAKG0xpc3RDb25uZWN0Q2x1c3RlcnNSZXNwb25zZRJBCghjbHVzdGVycxgBIAMoCzIvLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ29ubmVjdENsdXN0ZXIinQMKFlVwc2VydENvbm5lY3RvclJlcXVlc3QSpgEKDGNsdXN0ZXJfbmFtZRgBIAEoCUKPAZJBajJKVW5pcXVlIG5hbWUgb2YgdGFyZ2V0IGNvbm5lY3QgY2x1c3Rlci4gRm9yIFJlZHBhbmRhIENsb3VkLCB1c2UgYHJlZHBhbmRhYC5KCiJyZWRwYW5kYSLKPg/6AgxjbHVzdGVyX25hbWXgQQK6SBzIAQFyFxABGIABMhBeW2EtekEtWjAtOS1fXSskEksKBG5hbWUYAiABKAlCPeBBArpIN8gBAXIyEAEYgAEyK15bQS1aYS16MC05IUAjJCVeJiooKS1fPSs7OiciYH4sPC4+Lz98XC1dKyQSXgoGY29uZmlnGAMgAygLMkMucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5VcHNlcnRDb25uZWN0b3JSZXF1ZXN0LkNvbmZpZ0VudHJ5QgngQQK6SAPIAQEaLQoLQ29uZmlnRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJcChdVcHNlcnRDb25uZWN0b3JSZXNwb25zZRJBCgljb25uZWN0b3IYASABKAsyLi5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RvclNwZWMikQIKGUdldENvbm5lY3RvckNvbmZpZ1JlcXVlc3QSpgEKDGNsdXN0ZXJfbmFtZRgBIAEoCUKPAZJBajJKVW5pcXVlIG5hbWUgb2YgdGFyZ2V0IGNvbm5lY3QgY2x1c3Rlci4gRm9yIFJlZHBhbmRhIENsb3VkLCB1c2UgYHJlZHBhbmRhYC5KCiJyZWRwYW5kYSLKPg/6AgxjbHVzdGVyX25hbWXgQQK6SBzIAQFyFxABGIABMhBeW2EtekEtWjAtOS1fXSskEksKBG5hbWUYAiABKAlCPeBBArpIN8gBAXIyEAEYgAEyK15bQS1aYS16MC05IUAjJCVeJiooKS1fPSs7OiciYH4sPC4+Lz98XC1dKyQipAEKGkdldENvbm5lY3RvckNvbmZpZ1Jlc3BvbnNlElcKBmNvbmZpZxgBIAMoCzJHLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuR2V0Q29ubmVjdG9yQ29uZmlnUmVzcG9uc2UuQ29uZmlnRW50cnkaLQoLQ29uZmlnRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKRAgoZR2V0Q29ubmVjdG9yU3RhdHVzUmVxdWVzdBKmAQoMY2x1c3Rlcl9uYW1lGAEgASgJQo8BkkFqMkpVbmlxdWUgbmFtZSBvZiB0YXJnZXQgY29ubmVjdCBjbHVzdGVyLiBGb3IgUmVkcGFuZGEgQ2xvdWQsIHVzZSBgcmVkcGFuZGFgLkoKInJlZHBhbmRhIso+D/oCDGNsdXN0ZXJfbmFtZeBBArpIHMgBAXIXEAEYgAEyEF5bYS16QS1aMC05LV9dKyQSSwoEbmFtZRgCIAEoCUI94EECukg3yAEBcjIQARiACDIrXltBLVphLXowLTkhQCMkJV4mKigpLV89Kzs6JyJgfiw8Lj4vP3xcLV0rJCJeChpHZXRDb25uZWN0b3JTdGF0dXNSZXNwb25zZRJACgZzdGF0dXMYASABKAsyMC5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RvclN0YXR1cyKSAgoaTGlzdENvbm5lY3RvclRvcGljc1JlcXVlc3QSpgEKDGNsdXN0ZXJfbmFtZRgBIAEoCUKPAZJBajJKVW5pcXVlIG5hbWUgb2YgdGFyZ2V0IGNvbm5lY3QgY2x1c3Rlci4gRm9yIFJlZHBhbmRhIENsb3VkLCB1c2UgYHJlZHBhbmRhYC5KCiJyZWRwYW5kYSLKPg/6AgxjbHVzdGVyX25hbWXgQQK6SBzIAQFyFxABGIABMhBeW2EtekEtWjAtOS1fXSskEksKBG5hbWUYAiABKAlCPeBBArpIN8gBAXIyEAEYgAgyK15bQS1aYS16MC05IUAjJCVeJiooKS1fPSs7OiciYH4sPC4+Lz98XC1dKyQiMgobTGlzdENvbm5lY3RvclRvcGljc1Jlc3BvbnNlEhMKBnRvcGljcxgBIAMoCUID4EEGIpMCChtSZXNldENvbm5lY3RvclRvcGljc1JlcXVlc3QSpgEKDGNsdXN0ZXJfbmFtZRgBIAEoCUKPAZJBajJKVW5pcXVlIG5hbWUgb2YgdGFyZ2V0IGNvbm5lY3QgY2x1c3Rlci4gRm9yIFJlZHBhbmRhIENsb3VkLCB1c2UgYHJlZHBhbmRhYC5KCiJyZWRwYW5kYSLKPg/6AgxjbHVzdGVyX25hbWXgQQK6SBzIAQFyFxABGIABMhBeW2EtekEtWjAtOS1fXSskEksKBG5hbWUYAiABKAlCPeBBArpIN8gBAXIyEAEYgAgyK15bQS1aYS16MC05IUAjJCVeJiooKS1fPSs7OiciYH4sPC4+Lz98XC1dKyQqogMKFkNvbm5lY3RvckhvbGlzdGljU3RhdGUSKAokQ09OTkVDVE9SX0hPTElTVElDX1NUQVRFX1VOU1BFQ0lGSUVEEAASIwofQ09OTkVDVE9SX0hPTElTVElDX1NUQVRFX1BBVVNFRBABEicKI0NPTk5FQ1RPUl9IT0xJU1RJQ19TVEFURV9SRVNUQVJUSU5HEAISJgoiQ09OTkVDVE9SX0hPTElTVElDX1NUQVRFX0RFU1RST1lFRBADEiQKIENPTk5FQ1RPUl9IT0xJU1RJQ19TVEFURV9TVE9QUEVEEAQSJwojQ09OTkVDVE9SX0hPTElTVElDX1NUQVRFX1VOQVNTSUdORUQQBRIkCiBDT05ORUNUT1JfSE9MSVNUSUNfU1RBVEVfSEVBTFRIWRAGEiYKIkNPTk5FQ1RPUl9IT0xJU1RJQ19TVEFURV9VTkhFQUxUSFkQBxIlCiFDT05ORUNUT1JfSE9MSVNUSUNfU1RBVEVfREVHUkFERUQQCBIkCiBDT05ORUNUT1JfSE9MSVNUSUNfU1RBVEVfVU5LTk9XThAJMsUwChNLYWZrYUNvbm5lY3RTZXJ2aWNlEoYDChNMaXN0Q29ubmVjdENsdXN0ZXJzEjsucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5MaXN0Q29ubmVjdENsdXN0ZXJzUmVxdWVzdBo8LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuTGlzdENvbm5lY3RDbHVzdGVyc1Jlc3BvbnNlIvMBiAIBkkHCARIVTGlzdCBjb25uZWN0IGNsdXN0ZXJzGlpMaXN0IGNvbm5lY3QgY2x1c3RlcnMgYXZhaWxhYmxlIGZvciBiZWluZyBjb25zdW1lZCBieSB0aGUgY29uc29sZSdzIGthZmthLWNvbm5lY3Qgc2VydmljZS5KTQoDMjAwEkYKAk9LEkAKPho8LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuTGlzdENvbm5lY3RDbHVzdGVyc1Jlc3BvbnNliqYdBAgBEAWC0+STAhwSGi92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzEqQDChFHZXRDb25uZWN0Q2x1c3RlchI5LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuR2V0Q29ubmVjdENsdXN0ZXJSZXF1ZXN0GjoucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5HZXRDb25uZWN0Q2x1c3RlclJlc3BvbnNlIpcCiAIBkkHOARITR2V0IGNvbm5lY3QgY2x1c3Rlcho5R2V0IGluZm9ybWF0aW9uIGFib3V0IGFuIGF2YWlsYWJsZSBLYWZrYSBDb25uZWN0IGNsdXN0ZXIuSkAKAzIwMBI5CgJPSxIzCjEaLy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RDbHVzdGVySjoKAzQwNBIzChlDb25uZWN0IGNsdXN0ZXIgbm90IGZvdW5kEhYKFBoSLmdvb2dsZS5ycGMuU3RhdHVziqYdBAgBEAWC0+STAjRiB2NsdXN0ZXISKS92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9EuECCg5MaXN0Q29ubmVjdG9ycxI2LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuTGlzdENvbm5lY3RvcnNSZXF1ZXN0GjcucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5MaXN0Q29ubmVjdG9yc1Jlc3BvbnNlIt0BiAIBkkGSARIPTGlzdCBjb25uZWN0b3JzGjVMaXN0IGNvbm5lY3RvcnMgbWFuYWdlZCBieSB0aGUgS2Fma2EgQ29ubmVjdCBzZXJ2aWNlLkpICgMyMDASQQoCT0sSOwo5GjcucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5MaXN0Q29ubmVjdG9yc1Jlc3BvbnNliqYdBAgBEAWC0+STAjYSNC92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9L2Nvbm5lY3RvcnMS9gIKD0NyZWF0ZUNvbm5lY3RvchI3LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ3JlYXRlQ29ubmVjdG9yUmVxdWVzdBo4LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ3JlYXRlQ29ubmVjdG9yUmVzcG9uc2Ui7wGIAgGSQY4BEhBDcmVhdGUgY29ubmVjdG9yGjRDcmVhdGUgYSBjb25uZWN0b3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZ3VyYXRpb24uSkQKAzIwMRI9CgdDcmVhdGVkEjIKMBouLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ29ubmVjdG9yU3BlY4qmHQQIAhAFgtPkkwJMOgljb25uZWN0b3JiCWNvbm5lY3RvciI0L3YxYWxwaGExL2Nvbm5lY3QvY2x1c3RlcnMve2NsdXN0ZXJfbmFtZX0vY29ubmVjdG9ycxKXAwoQUmVzdGFydENvbm5lY3RvchI4LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuUmVzdGFydENvbm5lY3RvclJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkisAKIAgGSQc0BEhFSZXN0YXJ0IGNvbm5lY3RvchqJAVRyaWdnZXJzIGEgY29ubmVjdG9yIHJlc3RhcnQuIFlvdSBtdXN0IHNwZWNpZnkgd2hldGhlciBvciBub3QgdGFza3MgYXJlIGFsc28gcmVzdGFydGVkLCBhbmQgd2hldGhlciBvbmx5IGZhaWxlZCBjb25uZWN0b3JzIGFyZSByZXN0YXJ0ZWQuSiwKAzIwNBIlCiFSZXN0YXJ0IGNvbm5lY3RvciByZXF1ZXN0IHN1Y2Nlc3MSAIqmHQQIAhAFgtPkkwJOOgdvcHRpb25zIkMvdjFhbHBoYTEvY29ubmVjdC9jbHVzdGVycy97Y2x1c3Rlcl9uYW1lfS9jb25uZWN0b3JzL3tuYW1lfS9yZXN0YXJ0EuUCCgxHZXRDb25uZWN0b3ISNC5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkdldENvbm5lY3RvclJlcXVlc3QaNS5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkdldENvbm5lY3RvclJlc3BvbnNlIucBiAIBkkGKARINR2V0IGNvbm5lY3Rvcho4R2V0IGluZm9ybWF0aW9uIGFib3V0IGEgY29ubmVjdG9yIGluIGEgc3BlY2lmaWMgY2x1c3Rlci5KPwoDMjAwEjgKAk9LEjIKMBouLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ29ubmVjdG9yU3BlY4qmHQQIARAFgtPkkwJIYgljb25uZWN0b3ISOy92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9L2Nvbm5lY3RvcnMve25hbWV9ErgDChJHZXRDb25uZWN0b3JTdGF0dXMSOi5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkdldENvbm5lY3RvclN0YXR1c1JlcXVlc3QaOy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkdldENvbm5lY3RvclN0YXR1c1Jlc3BvbnNlIqgCiAIBkkHHARIUR2V0IGNvbm5lY3RvciBzdGF0dXMabEdldHMgdGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBjb25uZWN0b3IsIGluY2x1ZGluZyB0aGUgc3RhdGUgZm9yIGVhY2ggb2YgaXRzIHRhc2tzLCBlcnJvciBpbmZvcm1hdGlvbiwgZXRjLkpBCgMyMDASOgoCT0sSNAoyGjAucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5Db25uZWN0b3JTdGF0dXOKph0ECAEQBYLT5JMCTGIGc3RhdHVzEkIvdjFhbHBoYTEvY29ubmVjdC9jbHVzdGVycy97Y2x1c3Rlcl9uYW1lfS9jb25uZWN0b3JzL3tuYW1lfS9zdGF0dXMSlgMKDlBhdXNlQ29ubmVjdG9yEjYucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5QYXVzZUNvbm5lY3RvclJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiswKIAgGSQdsBEg9QYXVzZSBjb25uZWN0b3IapAFQYXVzZSB0aGUgY29ubmVjdG9yIGFuZCBpdHMgdGFza3MsIHdoaWNoIHN0b3BzIG1lc3NhZ2VzIGZyb20gcHJvY2Vzc2luZyB1bnRpbCB0aGUgY29ubmVjdG9yIGlzIHJlc3VtZWQuIFRoaXMgY2FsbCBpcyBhc3luY2hyb25vdXMgYW5kIG1heSB0YWtlIHNvbWUgdGltZSB0byBwcm9jZXNzLkohCgMyMDISGgoWUGF1c2UgcmVxdWVzdCBhY2NlcHRlZBIAiqYdBAgCEAWC0+STAkMaQS92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9L2Nvbm5lY3RvcnMve25hbWV9L3BhdXNlEsIDCg9SZXN1bWVDb25uZWN0b3ISNy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlJlc3VtZUNvbm5lY3RvclJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHki3QKIAgGSQYQCEhBSZXN1bWUgY29ubmVjdG9yGssBUmVzdW1lIGEgcGF1c2VkIGNvbm5lY3RvciBhbmQgaXRzIHRhc2tzLCBhbmQgcmVzdW1lcyBtZXNzYWdlIHByb2Nlc3NpbmcuIFRoaXMgY2FsbCBpcyBhc3luY2hyb25vdXMgYW5kIG1heSB0YWtlIHNvbWUgdGltZSB0byBwcm9jZXNzLiBJZiB0aGUgY29ubmVjdG9yIHdhcyBub3QgcGF1c2VkLCB0aGlzIG9wZXJhdGlvbiBkb2VzIG5vdCBkbyBhbnl0aGluZy5KIgoDMjAyEhsKF1Jlc3VtZSByZXF1ZXN0IGFjY2VwdGVkEgCKph0ECAIQBYLT5JMCRBpCL3YxYWxwaGExL2Nvbm5lY3QvY2x1c3RlcnMve2NsdXN0ZXJfbmFtZX0vY29ubmVjdG9ycy97bmFtZX0vcmVzdW1lEoUDCg1TdG9wQ29ubmVjdG9yEjUucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5TdG9wQ29ubmVjdG9yUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSKkAogCAZJBzQESDlN0b3AgY29ubmVjdG9yGp0BU3RvcHMgYSBjb25uZWN0b3IsIGJ1dCBkb2VzIG5vdCBkZWxldGUgaXQuIEFsbCB0YXNrcyBmb3IgdGhlIGNvbm5lY3RvciBhcmUgc2h1dCBkb3duIGNvbXBsZXRlbHkuIFRoaXMgY2FsbCBpcyBhc3luY2hyb25vdXMgYW5kIG1heSB0YWtlIHNvbWUgdGltZSB0byBwcm9jZXNzLkobCgMyMDISFAoQUmVxdWVzdCBhY2NlcHRlZBIAiqYdBAgCEAWC0+STAkIaQC92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9L2Nvbm5lY3RvcnMve25hbWV9L3N0b3ASwgIKD0RlbGV0ZUNvbm5lY3RvchI3LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuRGVsZXRlQ29ubmVjdG9yUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSLdAZJBjgESEERlbGV0ZSBjb25uZWN0b3IaZkRlbGV0ZSBhIGNvbm5lY3Rvci4gVGhpcyBvcGVyYXRpb24gZm9yY2Ugc3RvcHMgYWxsIHRhc2tzIGFuZCBhbHNvIGRlbGV0ZXMgdGhlIGNvbm5lY3RvciBjb25maWd1cmF0aW9uLkoSCgMyMDQSCwoHRGVsZXRlZBIAiqYdBAgCEAWC0+STAj0qOy92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9L2Nvbm5lY3RvcnMve25hbWV9Eu4ECg9VcHNlcnRDb25uZWN0b3ISNy5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlVwc2VydENvbm5lY3RvclJlcXVlc3QaOC5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLlVwc2VydENvbm5lY3RvclJlc3BvbnNlIucDiAIBkkH7AhIeVXBzZXJ0IGNvbm5lY3RvciBjb25maWd1cmF0aW9uGswBVXBkYXRlIHRoZSBjb25maWd1cmF0aW9uIGZvciBhbiBleGlzdGluZyBjb25uZWN0b3Igd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUsIG9yIGNyZWF0ZSBhIG5ldyBjb25uZWN0b3IgdXNpbmcgdGhlIGdpdmVuIGNvbmZpZ3VyYXRpb24uIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbm5lY3RvciBhZnRlciB0aGUgY2hhbmdlIGhhcyBiZWVuIG1hZGUuSkQKAzIwMBI9CgdVcGRhdGVkEjIKMBouLnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuQ29ubmVjdG9yU3BlY0pECgMyMDESPQoHQ3JlYXRlZBIyCjAaLi5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkNvbm5lY3RvclNwZWOKph0ECAIQBYLT5JMCVzoGY29uZmlnYgljb25uZWN0b3IaQi92MWFscGhhMS9jb25uZWN0L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9L2Nvbm5lY3RvcnMve25hbWV9L2NvbmZpZxK3AgoSR2V0Q29ubmVjdG9yQ29uZmlnEjoucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5HZXRDb25uZWN0b3JDb25maWdSZXF1ZXN0GjsucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5HZXRDb25uZWN0b3JDb25maWdSZXNwb25zZSKnAYgCAZJBRxIbR2V0IGNvbm5lY3RvciBjb25maWd1cmF0aW9uGihHZXQgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBjb25uZWN0b3IuiqYdBAgBEAWC0+STAkxiBmNvbmZpZxJCL3YxYWxwaGExL2Nvbm5lY3QvY2x1c3RlcnMve2NsdXN0ZXJfbmFtZX0vY29ubmVjdG9ycy97bmFtZX0vY29uZmlnErsDChNMaXN0Q29ubmVjdG9yVG9waWNzEjsucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5MaXN0Q29ubmVjdG9yVG9waWNzUmVxdWVzdBo8LnJlZHBhbmRhLmFwaS5kYXRhcGxhbmUudjFhbHBoYTEuTGlzdENvbm5lY3RvclRvcGljc1Jlc3BvbnNlIqgCiAIBkkHPARIVTGlzdCBjb25uZWN0b3IgdG9waWNzGmdSZXR1cm5zIGEgbGlzdCBvZiBjb25uZWN0b3IgdG9waWMgbmFtZXMuIElmIHRoZSBjb25uZWN0b3IgaXMgaW5hY3RpdmUsIHRoaXMgY2FsbCByZXR1cm5zIGFuIGVtcHR5IGxpc3QuSk0KAzIwMBJGCgJPSxJACj4aPC5yZWRwYW5kYS5hcGkuZGF0YXBsYW5lLnYxYWxwaGExLkxpc3RDb25uZWN0b3JUb3BpY3NSZXNwb25zZYqmHQQIARAFgtPkkwJEEkIvdjFhbHBoYTEvY29ubmVjdC9jbHVzdGVycy97Y2x1c3Rlcl9uYW1lfS9jb25uZWN0b3JzL3tuYW1lfS90b3BpY3MSsAIKFFJlc2V0Q29ubmVjdG9yVG9waWNzEjwucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMS5SZXNldENvbm5lY3RvclRvcGljc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiwQGIAgGSQWMSFlJlc2V0IGNvbm5lY3RvciB0b3BpY3MaOlJlc2V0cyB0aGUgc2V0IG9mIHRvcGljIG5hbWVzIHRoYXQgdGhlIGNvbm5lY3RvciBpcyB1c2luZy5KDQoDMjAwEgYKAk9LEgCKph0ECAIQBYLT5JMCShpIL3YxYWxwaGExL2Nvbm5lY3QvY2x1c3RlcnMve2NsdXN0ZXJfbmFtZX0vY29ubmVjdG9ycy97bmFtZX0vdG9waWNzL3Jlc2V0GpwBiAIBkkGVARKSAU1hbmFnZSBbY29ubmVjdG9yc10oaHR0cHM6Ly9kb2NzLnJlZHBhbmRhLmNvbS9jdXJyZW50L2RlcGxveS9kZXBsb3ltZW50LW9wdGlvbi9jbG91ZC9tYW5hZ2VkLWNvbm5lY3RvcnMvKSBhbmQgaW50ZXJhY3Qgd2l0aCB0aGUgS2Fma2EgQ29ubmVjdCBBUEkuQsACCiNjb20ucmVkcGFuZGEuYXBpLmRhdGFwbGFuZS52MWFscGhhMUIRS2Fma2FDb25uZWN0UHJvdG9QAVpnZ2l0aHViLmNvbS9yZWRwYW5kYS1kYXRhL2NvbnNvbGUvYmFja2VuZC9wa2cvcHJvdG9nZW4vcmVkcGFuZGEvYXBpL2RhdGFwbGFuZS92MWFscGhhMTtkYXRhcGxhbmV2MWFscGhhMaICA1JBRKoCH1JlZHBhbmRhLkFwaS5EYXRhcGxhbmUuVjFhbHBoYTHKAh9SZWRwYW5kYVxBcGlcRGF0YXBsYW5lXFYxYWxwaGEx4gIrUmVkcGFuZGFcQXBpXERhdGFwbGFuZVxWMWFscGhhMVxHUEJNZXRhZGF0YeoCIlJlZHBhbmRhOjpBcGk6OkRhdGFwbGFuZTo6VjFhbHBoYTFiBnByb3RvMw", [file_buf_validate_validate, file_google_api_annotations, file_google_api_field_behavior, file_google_protobuf_empty, file_protoc_gen_openapiv2_options_annotations, file_redpanda_api_auth_v1_authorization]);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorPlugin
 */
export type ConnectorPlugin = Message<"redpanda.api.dataplane.v1alpha1.ConnectorPlugin"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: string class = 3;
   */
  class: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ConnectorPlugin.
 * Use `create(ConnectorPluginSchema)` to create a new message.
 */
export const ConnectorPluginSchema: GenMessage<ConnectorPlugin> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectCluster
 */
export type ConnectCluster = Message<"redpanda.api.dataplane.v1alpha1.ConnectCluster"> & {
  /**
   * Unique name of connect cluster. For Redpanda Cloud, the value is `redpanda`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The host address of the Kafka Connect cluster.
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectCluster.Info info = 3;
   */
  info?: ConnectCluster_Info;

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.ConnectorPlugin plugins = 4;
   */
  plugins: ConnectorPlugin[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ConnectCluster.
 * Use `create(ConnectClusterSchema)` to create a new message.
 */
export const ConnectClusterSchema: GenMessage<ConnectCluster> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 1);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectCluster.Info
 */
export type ConnectCluster_Info = Message<"redpanda.api.dataplane.v1alpha1.ConnectCluster.Info"> & {
  /**
   * Connect worker version.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The git commit ID of the connect worker source code.
   *
   * @generated from field: string commit = 2;
   */
  commit: string;

  /**
   * Cluster ID.
   *
   * @generated from field: string kafka_cluster_id = 3;
   */
  kafkaClusterId: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ConnectCluster.Info.
 * Use `create(ConnectCluster_InfoSchema)` to create a new message.
 */
export const ConnectCluster_InfoSchema: GenMessage<ConnectCluster_Info> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 1, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorStatus
 */
export type ConnectorStatus = Message<"redpanda.api.dataplane.v1alpha1.ConnectorStatus"> & {
  /**
   * Name of connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorStatus.Connector connector = 2;
   */
  connector?: ConnectorStatus_Connector;

  /**
   * Status of connector tasks. For more information, see the [https://docs.redpanda.com/current/deploy/deployment-option/cloud/managed-connectors/monitor-connectors/#connector-tasks](Monitor Connectors) documentation.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.TaskStatus tasks = 3;
   */
  tasks: TaskStatus[];

  /**
   * Type of connector (sink or source).
   *
   * @generated from field: string type = 4;
   */
  type: string;

  /**
   * State of the connector including all the tasks within the connector.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorHolisticState holistic_state = 5;
   */
  holisticState: ConnectorHolisticState;

  /**
   * List of parsed connectors' and tasks' errors.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.ConnectorError errors = 6;
   */
  errors: ConnectorError[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ConnectorStatus.
 * Use `create(ConnectorStatusSchema)` to create a new message.
 */
export const ConnectorStatusSchema: GenMessage<ConnectorStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 2);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorStatus.Connector
 */
export type ConnectorStatus_Connector = Message<"redpanda.api.dataplane.v1alpha1.ConnectorStatus.Connector"> & {
  /**
   * State of the connector instance.
   *
   * @generated from field: string state = 1;
   */
  state: string;

  /**
   * ID of worker that the connector is assigned to.
   *
   * @generated from field: string worker_id = 2;
   */
  workerId: string;

  /**
   * String value of stack trace.
   *
   * @generated from field: string trace = 3;
   */
  trace: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ConnectorStatus.Connector.
 * Use `create(ConnectorStatus_ConnectorSchema)` to create a new message.
 */
export const ConnectorStatus_ConnectorSchema: GenMessage<ConnectorStatus_Connector> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 2, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.TaskStatus
 */
export type TaskStatus = Message<"redpanda.api.dataplane.v1alpha1.TaskStatus"> & {
  /**
   * The connector task ID.
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * State of connector task.
   *
   * @generated from field: string state = 2;
   */
  state: string;

  /**
   * ID of worker that the task is assigned to.
   *
   * @generated from field: string worker_id = 3;
   */
  workerId: string;

  /**
   * String value of stack trace.
   *
   * @generated from field: string trace = 4;
   */
  trace: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.TaskStatus.
 * Use `create(TaskStatusSchema)` to create a new message.
 */
export const TaskStatusSchema: GenMessage<TaskStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 3);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.TaskInfo
 */
export type TaskInfo = Message<"redpanda.api.dataplane.v1alpha1.TaskInfo"> & {
  /**
   * Name of connector.
   *
   * @generated from field: string connector = 1;
   */
  connector: string;

  /**
   * The connector task ID.
   *
   * @generated from field: int32 task = 2;
   */
  task: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.TaskInfo.
 * Use `create(TaskInfoSchema)` to create a new message.
 */
export const TaskInfoSchema: GenMessage<TaskInfo> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 4);

/**
 * ConnectorError is the error of a connector, this is holistic error
 * abstraction, made parsing the error trace of connector or Task
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorError
 */
export type ConnectorError = Message<"redpanda.api.dataplane.v1alpha1.ConnectorError"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorError.Type type = 1;
   */
  type: ConnectorError_Type;

  /**
   * Short description of the error.
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * Detailed description of the error.
   *
   * @generated from field: string content = 3;
   */
  content: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ConnectorError.
 * Use `create(ConnectorErrorSchema)` to create a new message.
 */
export const ConnectorErrorSchema: GenMessage<ConnectorError> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 5);

/**
 * Error level.
 *
 * @generated from enum redpanda.api.dataplane.v1alpha1.ConnectorError.Type
 */
export enum ConnectorError_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_ERROR = 1;
   */
  ERROR = 1,

  /**
   * @generated from enum value: TYPE_WARNING = 2;
   */
  WARNING = 2,
}

/**
 * Describes the enum redpanda.api.dataplane.v1alpha1.ConnectorError.Type.
 */
export const ConnectorError_TypeSchema: GenEnum<ConnectorError_Type> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 5, 0);

/**
 * Connector specifications as defined in the Kafka Connect
 * API. You may include this in the request body when creating a new connector.
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorSpec
 */
export type ConnectorSpec = Message<"redpanda.api.dataplane.v1alpha1.ConnectorSpec"> & {
  /**
   * Name of connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Connector configuration properties.
   *
   * @generated from field: map<string, string> config = 2;
   */
  config: { [key: string]: string };

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.TaskInfo tasks = 3;
   */
  tasks: TaskInfo[];

  /**
   * @generated from field: string type = 4;
   */
  type: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ConnectorSpec.
 * Use `create(ConnectorSpecSchema)` to create a new message.
 */
export const ConnectorSpecSchema: GenMessage<ConnectorSpec> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 6);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectorsRequest
 */
export type ListConnectorsRequest = Message<"redpanda.api.dataplane.v1alpha1.ListConnectorsRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListConnectorsRequest.
 * Use `create(ListConnectorsRequestSchema)` to create a new message.
 */
export const ListConnectorsRequestSchema: GenMessage<ListConnectorsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 7);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.RestartConnectorRequest
 */
export type RestartConnectorRequest = Message<"redpanda.api.dataplane.v1alpha1.RestartConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.RestartConnectorRequest.Options options = 3;
   */
  options?: RestartConnectorRequest_Options;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.RestartConnectorRequest.
 * Use `create(RestartConnectorRequestSchema)` to create a new message.
 */
export const RestartConnectorRequestSchema: GenMessage<RestartConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 8);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.RestartConnectorRequest.Options
 */
export type RestartConnectorRequest_Options = Message<"redpanda.api.dataplane.v1alpha1.RestartConnectorRequest.Options"> & {
  /**
   * Restart connector's tasks.
   *
   * @generated from field: bool include_tasks = 1;
   */
  includeTasks: boolean;

  /**
   * Restart only connectors that have failed.
   *
   * @generated from field: bool only_failed = 2;
   */
  onlyFailed: boolean;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.RestartConnectorRequest.Options.
 * Use `create(RestartConnectorRequest_OptionsSchema)` to create a new message.
 */
export const RestartConnectorRequest_OptionsSchema: GenMessage<RestartConnectorRequest_Options> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 8, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.DeleteConnectorRequest
 */
export type DeleteConnectorRequest = Message<"redpanda.api.dataplane.v1alpha1.DeleteConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.DeleteConnectorRequest.
 * Use `create(DeleteConnectorRequestSchema)` to create a new message.
 */
export const DeleteConnectorRequestSchema: GenMessage<DeleteConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 9);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.PauseConnectorRequest
 */
export type PauseConnectorRequest = Message<"redpanda.api.dataplane.v1alpha1.PauseConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.PauseConnectorRequest.
 * Use `create(PauseConnectorRequestSchema)` to create a new message.
 */
export const PauseConnectorRequestSchema: GenMessage<PauseConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 10);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ResumeConnectorRequest
 */
export type ResumeConnectorRequest = Message<"redpanda.api.dataplane.v1alpha1.ResumeConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ResumeConnectorRequest.
 * Use `create(ResumeConnectorRequestSchema)` to create a new message.
 */
export const ResumeConnectorRequestSchema: GenMessage<ResumeConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 11);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.StopConnectorRequest
 */
export type StopConnectorRequest = Message<"redpanda.api.dataplane.v1alpha1.StopConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.StopConnectorRequest.
 * Use `create(StopConnectorRequestSchema)` to create a new message.
 */
export const StopConnectorRequestSchema: GenMessage<StopConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 12);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectorRequest
 */
export type GetConnectorRequest = Message<"redpanda.api.dataplane.v1alpha1.GetConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectorRequest.
 * Use `create(GetConnectorRequestSchema)` to create a new message.
 */
export const GetConnectorRequestSchema: GenMessage<GetConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 13);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.CreateConnectorRequest
 */
export type CreateConnectorRequest = Message<"redpanda.api.dataplane.v1alpha1.CreateConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorSpec connector = 2;
   */
  connector?: ConnectorSpec;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.CreateConnectorRequest.
 * Use `create(CreateConnectorRequestSchema)` to create a new message.
 */
export const CreateConnectorRequestSchema: GenMessage<CreateConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 14);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectorResponse
 */
export type GetConnectorResponse = Message<"redpanda.api.dataplane.v1alpha1.GetConnectorResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorSpec connector = 1;
   */
  connector?: ConnectorSpec;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectorResponse.
 * Use `create(GetConnectorResponseSchema)` to create a new message.
 */
export const GetConnectorResponseSchema: GenMessage<GetConnectorResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 15);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.CreateConnectorResponse
 */
export type CreateConnectorResponse = Message<"redpanda.api.dataplane.v1alpha1.CreateConnectorResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorSpec connector = 1;
   */
  connector?: ConnectorSpec;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.CreateConnectorResponse.
 * Use `create(CreateConnectorResponseSchema)` to create a new message.
 */
export const CreateConnectorResponseSchema: GenMessage<CreateConnectorResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 16);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectorsResponse
 */
export type ListConnectorsResponse = Message<"redpanda.api.dataplane.v1alpha1.ListConnectorsResponse"> & {
  /**
   * List of connectors, where the parent key is the connector name.
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.ListConnectorsResponse.ConnectorInfoStatus connectors = 1;
   */
  connectors: ListConnectorsResponse_ConnectorInfoStatus[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListConnectorsResponse.
 * Use `create(ListConnectorsResponseSchema)` to create a new message.
 */
export const ListConnectorsResponseSchema: GenMessage<ListConnectorsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 17);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectorsResponse.ConnectorInfoStatus
 */
export type ListConnectorsResponse_ConnectorInfoStatus = Message<"redpanda.api.dataplane.v1alpha1.ListConnectorsResponse.ConnectorInfoStatus"> & {
  /**
   * Name of connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorSpec info = 2;
   */
  info?: ConnectorSpec;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorStatus status = 3;
   */
  status?: ConnectorStatus;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListConnectorsResponse.ConnectorInfoStatus.
 * Use `create(ListConnectorsResponse_ConnectorInfoStatusSchema)` to create a new message.
 */
export const ListConnectorsResponse_ConnectorInfoStatusSchema: GenMessage<ListConnectorsResponse_ConnectorInfoStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 17, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectClusterRequest
 */
export type GetConnectClusterRequest = Message<"redpanda.api.dataplane.v1alpha1.GetConnectClusterRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectClusterRequest.
 * Use `create(GetConnectClusterRequestSchema)` to create a new message.
 */
export const GetConnectClusterRequestSchema: GenMessage<GetConnectClusterRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 18);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectClusterResponse
 */
export type GetConnectClusterResponse = Message<"redpanda.api.dataplane.v1alpha1.GetConnectClusterResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectCluster cluster = 1;
   */
  cluster?: ConnectCluster;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectClusterResponse.
 * Use `create(GetConnectClusterResponseSchema)` to create a new message.
 */
export const GetConnectClusterResponseSchema: GenMessage<GetConnectClusterResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 19);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectClustersRequest
 */
export type ListConnectClustersRequest = Message<"redpanda.api.dataplane.v1alpha1.ListConnectClustersRequest"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListConnectClustersRequest.
 * Use `create(ListConnectClustersRequestSchema)` to create a new message.
 */
export const ListConnectClustersRequestSchema: GenMessage<ListConnectClustersRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 20);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectClustersResponse
 */
export type ListConnectClustersResponse = Message<"redpanda.api.dataplane.v1alpha1.ListConnectClustersResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.ConnectCluster clusters = 1;
   */
  clusters: ConnectCluster[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListConnectClustersResponse.
 * Use `create(ListConnectClustersResponseSchema)` to create a new message.
 */
export const ListConnectClustersResponseSchema: GenMessage<ListConnectClustersResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 21);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.UpsertConnectorRequest
 */
export type UpsertConnectorRequest = Message<"redpanda.api.dataplane.v1alpha1.UpsertConnectorRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector. If a connector with this name does not already exist, a new connector is created.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Connector configuration property.
   *
   * @generated from field: map<string, string> config = 3;
   */
  config: { [key: string]: string };
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.UpsertConnectorRequest.
 * Use `create(UpsertConnectorRequestSchema)` to create a new message.
 */
export const UpsertConnectorRequestSchema: GenMessage<UpsertConnectorRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 22);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.UpsertConnectorResponse
 */
export type UpsertConnectorResponse = Message<"redpanda.api.dataplane.v1alpha1.UpsertConnectorResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorSpec connector = 1;
   */
  connector?: ConnectorSpec;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.UpsertConnectorResponse.
 * Use `create(UpsertConnectorResponseSchema)` to create a new message.
 */
export const UpsertConnectorResponseSchema: GenMessage<UpsertConnectorResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 23);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectorConfigRequest
 */
export type GetConnectorConfigRequest = Message<"redpanda.api.dataplane.v1alpha1.GetConnectorConfigRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectorConfigRequest.
 * Use `create(GetConnectorConfigRequestSchema)` to create a new message.
 */
export const GetConnectorConfigRequestSchema: GenMessage<GetConnectorConfigRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 24);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectorConfigResponse
 */
export type GetConnectorConfigResponse = Message<"redpanda.api.dataplane.v1alpha1.GetConnectorConfigResponse"> & {
  /**
   * @generated from field: map<string, string> config = 1;
   */
  config: { [key: string]: string };
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectorConfigResponse.
 * Use `create(GetConnectorConfigResponseSchema)` to create a new message.
 */
export const GetConnectorConfigResponseSchema: GenMessage<GetConnectorConfigResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 25);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectorStatusRequest
 */
export type GetConnectorStatusRequest = Message<"redpanda.api.dataplane.v1alpha1.GetConnectorStatusRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectorStatusRequest.
 * Use `create(GetConnectorStatusRequestSchema)` to create a new message.
 */
export const GetConnectorStatusRequestSchema: GenMessage<GetConnectorStatusRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 26);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectorStatusResponse
 */
export type GetConnectorStatusResponse = Message<"redpanda.api.dataplane.v1alpha1.GetConnectorStatusResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorStatus status = 1;
   */
  status?: ConnectorStatus;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.GetConnectorStatusResponse.
 * Use `create(GetConnectorStatusResponseSchema)` to create a new message.
 */
export const GetConnectorStatusResponseSchema: GenMessage<GetConnectorStatusResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 27);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectorTopicsRequest
 */
export type ListConnectorTopicsRequest = Message<"redpanda.api.dataplane.v1alpha1.ListConnectorTopicsRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListConnectorTopicsRequest.
 * Use `create(ListConnectorTopicsRequestSchema)` to create a new message.
 */
export const ListConnectorTopicsRequestSchema: GenMessage<ListConnectorTopicsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 28);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectorTopicsResponse
 */
export type ListConnectorTopicsResponse = Message<"redpanda.api.dataplane.v1alpha1.ListConnectorTopicsResponse"> & {
  /**
   * Topic names.
   *
   * @generated from field: repeated string topics = 1;
   */
  topics: string[];
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ListConnectorTopicsResponse.
 * Use `create(ListConnectorTopicsResponseSchema)` to create a new message.
 */
export const ListConnectorTopicsResponseSchema: GenMessage<ListConnectorTopicsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 29);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ResetConnectorTopicsRequest
 */
export type ResetConnectorTopicsRequest = Message<"redpanda.api.dataplane.v1alpha1.ResetConnectorTopicsRequest"> & {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Name of connector using the topics to be reset.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha1.ResetConnectorTopicsRequest.
 * Use `create(ResetConnectorTopicsRequestSchema)` to create a new message.
 */
export const ResetConnectorTopicsRequestSchema: GenMessage<ResetConnectorTopicsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 30);

/**
 * State of a connector or one of its tasks, as described in the [Kafka Connect documentation](https://kafka.apache.org/documentation.html#connect_administration). Takes into account not just the state of the connector instance itself, but also the tasks within the connector.
 *
 * @generated from enum redpanda.api.dataplane.v1alpha1.ConnectorHolisticState
 */
export enum ConnectorHolisticState {
  /**
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The connector or task has been administratively paused.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_PAUSED = 1;
   */
  PAUSED = 1,

  /**
   * The connector or task is restarting.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_RESTARTING = 2;
   */
  RESTARTING = 2,

  /**
   * The connector is destroyed, regardless of any tasks.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_DESTROYED = 3;
   */
  DESTROYED = 3,

  /**
   * The connector or task has been stopped.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * - The connector or task has not yet been assigned to a worker,
   * - THe connector is running, but there are unassigned tasks.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNASSIGNED = 5;
   */
  UNASSIGNED = 5,

  /**
   * The connector is running, > 0 tasks, all of them in running state.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_HEALTHY = 6;
   */
  HEALTHY = 6,

  /**
   * - The connector has failed,
   * - The connector is running, but has no tasks,
   * - Connector is running and has tasks, but all tasks have failed.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNHEALTHY = 7;
   */
  UNHEALTHY = 7,

  /**
   * The connector is running and has tasks, and at least one task, but not all, have failed.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_DEGRADED = 8;
   */
  DEGRADED = 8,

  /**
   * The connector or task state could not be determined.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNKNOWN = 9;
   */
  UNKNOWN = 9,
}

/**
 * Describes the enum redpanda.api.dataplane.v1alpha1.ConnectorHolisticState.
 */
export const ConnectorHolisticStateSchema: GenEnum<ConnectorHolisticState> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 0);

/**
 * KafkaConnectService is the service for the Kafka connect, it exposes the
 * Kafka Connect API, you can set multiple Kafka connect services and all of
 * them can be managed using this service definition, the request is not only
 * proxied but also enriched with better error handling and custom
 * documentation and configuration
 *
 * @generated from service redpanda.api.dataplane.v1alpha1.KafkaConnectService
 * @deprecated
 */
export const KafkaConnectService: GenService<{
  /**
   * ListConnectClusters implements the list clusters method, list connect
   * clusters available in the console configuration
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ListConnectClusters
   * @deprecated
   */
  listConnectClusters: {
    methodKind: "unary";
    input: typeof ListConnectClustersRequestSchema;
    output: typeof ListConnectClustersResponseSchema;
  },
  /**
   * GetConnectCluster implements the get cluster info method, exposes a Kafka
   * Connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.GetConnectCluster
   * @deprecated
   */
  getConnectCluster: {
    methodKind: "unary";
    input: typeof GetConnectClusterRequestSchema;
    output: typeof GetConnectClusterResponseSchema;
  },
  /**
   * ListConnectors implements the list connectors method, exposes a Kafka
   * Connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ListConnectors
   * @deprecated
   */
  listConnectors: {
    methodKind: "unary";
    input: typeof ListConnectorsRequestSchema;
    output: typeof ListConnectorsResponseSchema;
  },
  /**
   * CreateConnector implements the create connector method, and exposes an
   * equivalent REST endpoint as the Kafka connect API endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.CreateConnector
   * @deprecated
   */
  createConnector: {
    methodKind: "unary";
    input: typeof CreateConnectorRequestSchema;
    output: typeof CreateConnectorResponseSchema;
  },
  /**
   * RestartConnector implements the restart connector method, exposes a Kafka
   * Connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.RestartConnector
   * @deprecated
   */
  restartConnector: {
    methodKind: "unary";
    input: typeof RestartConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetConnector implements the get connector method, exposes a Kafka
   * Connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.GetConnector
   * @deprecated
   */
  getConnector: {
    methodKind: "unary";
    input: typeof GetConnectorRequestSchema;
    output: typeof GetConnectorResponseSchema;
  },
  /**
   * GetConnectorStatus implement the get status method, Gets the current status of the connector, including:
   * Whether it is running or restarting, or if it has failed or paused
   * Which worker it is assigned to
   * Error information if it has failed
   * The state of all its tasks
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.GetConnectorStatus
   * @deprecated
   */
  getConnectorStatus: {
    methodKind: "unary";
    input: typeof GetConnectorStatusRequestSchema;
    output: typeof GetConnectorStatusResponseSchema;
  },
  /**
   * PauseConnector implements the pause connector method, exposes a Kafka
   * connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.PauseConnector
   * @deprecated
   */
  pauseConnector: {
    methodKind: "unary";
    input: typeof PauseConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * ResumeConnector implements the resume connector method, exposes a Kafka
   * connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ResumeConnector
   * @deprecated
   */
  resumeConnector: {
    methodKind: "unary";
    input: typeof ResumeConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * StopConnector implements the stop connector method, exposes a Kafka
   * connect equivalent REST endpoint it stops the connector but does not
   * delete the connector. All tasks for the connector are shut down completely
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.StopConnector
   * @deprecated
   */
  stopConnector: {
    methodKind: "unary";
    input: typeof StopConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteConnector implements the delete connector method, exposes a Kafka
   * connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.DeleteConnector
   */
  deleteConnector: {
    methodKind: "unary";
    input: typeof DeleteConnectorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertConector implements the update or create connector method, it
   * exposes a kafka connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.UpsertConnector
   * @deprecated
   */
  upsertConnector: {
    methodKind: "unary";
    input: typeof UpsertConnectorRequestSchema;
    output: typeof UpsertConnectorResponseSchema;
  },
  /**
   * GetConnectorConfig implements the get connector configuration method, expose a kafka connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.GetConnectorConfig
   * @deprecated
   */
  getConnectorConfig: {
    methodKind: "unary";
    input: typeof GetConnectorConfigRequestSchema;
    output: typeof GetConnectorConfigResponseSchema;
  },
  /**
   * ListConnectorTopics implements the list connector topics method, expose a kafka connect equivalent REST endpoint
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ListConnectorTopics
   * @deprecated
   */
  listConnectorTopics: {
    methodKind: "unary";
    input: typeof ListConnectorTopicsRequestSchema;
    output: typeof ListConnectorTopicsResponseSchema;
  },
  /**
   * ResetConnectorTopics implements the reset connector topics method, expose a kafka connect equivalent REST endpoint
   * the request body is empty.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha1.KafkaConnectService.ResetConnectorTopics
   * @deprecated
   */
  resetConnectorTopics: {
    methodKind: "unary";
    input: typeof ResetConnectorTopicsRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_dataplane_v1alpha1_kafka_connect, 0);

