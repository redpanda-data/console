// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/auth/v1/authorization.proto (package redpanda.api.auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * API defines the different APIs that can be communicated with, to answer
 * the request. The information about the API is relevant for authorization
 * because we may want to defer authorization to the upstream API rather
 * than enforcing it inside Console. Whether or not we want to do this
 * user impersonation can be configured per API.
 *
 * @generated from enum redpanda.api.auth.v1.API
 */
export enum API {
  /**
   * @generated from enum value: API_UNSPECIFIED = 0;
   */
  API_UNSPECIFIED = 0,

  /**
   * @generated from enum value: API_KAFKA = 1;
   */
  API_KAFKA = 1,

  /**
   * @generated from enum value: API_SCHEMA_REGISTRY = 2;
   */
  API_SCHEMA_REGISTRY = 2,

  /**
   * @generated from enum value: API_REDPANDA_ADMIN = 3;
   */
  API_REDPANDA_ADMIN = 3,

  /**
   * @generated from enum value: API_REDPANDA_CONNECT = 4;
   */
  API_REDPANDA_CONNECT = 4,

  /**
   * @generated from enum value: API_KAFKA_CONNECT = 5;
   */
  API_KAFKA_CONNECT = 5,

  /**
   * @generated from enum value: API_CONSOLE = 6;
   */
  API_CONSOLE = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(API)
proto3.util.setEnumType(API, "redpanda.api.auth.v1.API", [
  { no: 0, name: "API_UNSPECIFIED" },
  { no: 1, name: "API_KAFKA" },
  { no: 2, name: "API_SCHEMA_REGISTRY" },
  { no: 3, name: "API_REDPANDA_ADMIN" },
  { no: 4, name: "API_REDPANDA_CONNECT" },
  { no: 5, name: "API_KAFKA_CONNECT" },
  { no: 6, name: "API_CONSOLE" },
]);

/**
 * AuthorizationRole defines the primitive pre-defined roles a user can have.
 *
 * @generated from enum redpanda.api.auth.v1.Permission
 */
export enum Permission {
  /**
   * @generated from enum value: PERMISSION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PERMISSION_VIEW = 1;
   */
  VIEW = 1,

  /**
   * @generated from enum value: PERMISSION_EDIT = 2;
   */
  EDIT = 2,

  /**
   * @generated from enum value: PERMISSION_ADMIN = 3;
   */
  ADMIN = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Permission)
proto3.util.setEnumType(Permission, "redpanda.api.auth.v1.Permission", [
  { no: 0, name: "PERMISSION_UNSPECIFIED" },
  { no: 1, name: "PERMISSION_VIEW" },
  { no: 2, name: "PERMISSION_EDIT" },
  { no: 3, name: "PERMISSION_ADMIN" },
]);

/**
 * @generated from message redpanda.api.auth.v1.AuthorizationRequirements
 */
export class AuthorizationRequirements extends Message<AuthorizationRequirements> {
  /**
   * @generated from field: redpanda.api.auth.v1.Permission required_permission = 1;
   */
  requiredPermission = Permission.UNSPECIFIED;

  /**
   * @generated from field: redpanda.api.auth.v1.API api = 2;
   */
  api = API.API_UNSPECIFIED;

  constructor(data?: PartialMessage<AuthorizationRequirements>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.auth.v1.AuthorizationRequirements";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "required_permission", kind: "enum", T: proto3.getEnumType(Permission) },
    { no: 2, name: "api", kind: "enum", T: proto3.getEnumType(API) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthorizationRequirements {
    return new AuthorizationRequirements().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthorizationRequirements {
    return new AuthorizationRequirements().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthorizationRequirements {
    return new AuthorizationRequirements().fromJsonString(jsonString, options);
  }

  static equals(a: AuthorizationRequirements | PlainMessage<AuthorizationRequirements> | undefined, b: AuthorizationRequirements | PlainMessage<AuthorizationRequirements> | undefined): boolean {
    return proto3.util.equals(AuthorizationRequirements, a, b);
  }
}

