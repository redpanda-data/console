// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/console/v1alpha1/publish_messages.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import type { CompressionType, KafkaRecordHeader, PayloadEncoding } from "./common_pb";
import { file_redpanda_api_console_v1alpha1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/console/v1alpha1/publish_messages.proto.
 */
export const file_redpanda_api_console_v1alpha1_publish_messages: GenFile = /*@__PURE__*/
  fileDesc("CjRyZWRwYW5kYS9hcGkvY29uc29sZS92MWFscGhhMS9wdWJsaXNoX21lc3NhZ2VzLnByb3RvEh1yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMSKmAwoVUHVibGlzaE1lc3NhZ2VSZXF1ZXN0Ei0KBXRvcGljGAEgASgJQh66SBtyGRABGPkBMhJeW2EtekEtWjAtOS5fXC1dKiQSJgoMcGFydGl0aW9uX2lkGAIgASgFQhC6SA0aCyj///////////8BEkMKC2NvbXByZXNzaW9uGAMgASgOMi4ucmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEuQ29tcHJlc3Npb25UeXBlEhgKEHVzZV90cmFuc2FjdGlvbnMYBCABKAgSQQoHaGVhZGVycxgFIAMoCzIwLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkthZmthUmVjb3JkSGVhZGVyEkgKA2tleRgGIAEoCzI7LnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLlB1Ymxpc2hNZXNzYWdlUGF5bG9hZE9wdGlvbnMSSgoFdmFsdWUYByABKAsyOy5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5QdWJsaXNoTWVzc2FnZVBheWxvYWRPcHRpb25zIrIBChxQdWJsaXNoTWVzc2FnZVBheWxvYWRPcHRpb25zEkAKCGVuY29kaW5nGAEgASgOMi4ucmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEuUGF5bG9hZEVuY29kaW5nEgwKBGRhdGEYAiABKAwSFgoJc2NoZW1hX2lkGAkgASgFSACIAQESEgoFaW5kZXgYCiABKAVIAYgBAUIMCgpfc2NoZW1hX2lkQggKBl9pbmRleCJNChZQdWJsaXNoTWVzc2FnZVJlc3BvbnNlEg0KBXRvcGljGAEgASgJEhQKDHBhcnRpdGlvbl9pZBgCIAEoBRIOCgZvZmZzZXQYAyABKANCtQIKIWNvbS5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMUIUUHVibGlzaE1lc3NhZ2VzUHJvdG9QAVpjZ2l0aHViLmNvbS9yZWRwYW5kYS1kYXRhL2NvbnNvbGUvYmFja2VuZC9wa2cvcHJvdG9nZW4vcmVkcGFuZGEvYXBpL2NvbnNvbGUvdjFhbHBoYTE7Y29uc29sZXYxYWxwaGExogIDUkFDqgIdUmVkcGFuZGEuQXBpLkNvbnNvbGUuVjFhbHBoYTHKAh1SZWRwYW5kYVxBcGlcQ29uc29sZVxWMWFscGhhMeICKVJlZHBhbmRhXEFwaVxDb25zb2xlXFYxYWxwaGExXEdQQk1ldGFkYXRh6gIgUmVkcGFuZGE6OkFwaTo6Q29uc29sZTo6VjFhbHBoYTFiBnByb3RvMw", [file_buf_validate_validate, file_redpanda_api_console_v1alpha1_common]);

/**
 * PublishMessageRequest is the request for PublishMessage call.
 *
 * @generated from message redpanda.api.console.v1alpha1.PublishMessageRequest
 */
export type PublishMessageRequest = Message<"redpanda.api.console.v1alpha1.PublishMessageRequest"> & {
  /**
   * The topics to publish to.
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * -1 for automatic partition assignment.
   *
   * @generated from field: int32 partition_id = 2;
   */
  partitionId: number;

  /**
   * The compression to be used.
   *
   * @generated from field: redpanda.api.console.v1alpha1.CompressionType compression = 3;
   */
  compression: CompressionType;

  /**
   * Use transactions.
   *
   * @generated from field: bool use_transactions = 4;
   */
  useTransactions: boolean;

  /**
   * Kafka record headers.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.KafkaRecordHeader headers = 5;
   */
  headers: KafkaRecordHeader[];

  /**
   * @generated from field: redpanda.api.console.v1alpha1.PublishMessagePayloadOptions key = 6;
   */
  key?: PublishMessagePayloadOptions;

  /**
   * @generated from field: redpanda.api.console.v1alpha1.PublishMessagePayloadOptions value = 7;
   */
  value?: PublishMessagePayloadOptions;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.PublishMessageRequest.
 * Use `create(PublishMessageRequestSchema)` to create a new message.
 */
export const PublishMessageRequestSchema: GenMessage<PublishMessageRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_publish_messages, 0);

/**
 * @generated from message redpanda.api.console.v1alpha1.PublishMessagePayloadOptions
 */
export type PublishMessagePayloadOptions = Message<"redpanda.api.console.v1alpha1.PublishMessagePayloadOptions"> & {
  /**
   * Payload encoding to use.
   *
   * @generated from field: redpanda.api.console.v1alpha1.PayloadEncoding encoding = 1;
   */
  encoding: PayloadEncoding;

  /**
   * Data.
   *
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;

  /**
   * Optional schema ID.
   *
   * @generated from field: optional int32 schema_id = 9;
   */
  schemaId?: number;

  /**
   * Optional index. Useful for Protobuf messages.
   *
   * @generated from field: optional int32 index = 10;
   */
  index?: number;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.PublishMessagePayloadOptions.
 * Use `create(PublishMessagePayloadOptionsSchema)` to create a new message.
 */
export const PublishMessagePayloadOptionsSchema: GenMessage<PublishMessagePayloadOptions> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_publish_messages, 1);

/**
 * PublishMessageResponse is the response for PublishMessage call.
 *
 * @generated from message redpanda.api.console.v1alpha1.PublishMessageResponse
 */
export type PublishMessageResponse = Message<"redpanda.api.console.v1alpha1.PublishMessageResponse"> & {
  /**
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * @generated from field: int32 partition_id = 2;
   */
  partitionId: number;

  /**
   * @generated from field: int64 offset = 3;
   */
  offset: bigint;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.PublishMessageResponse.
 * Use `create(PublishMessageResponseSchema)` to create a new message.
 */
export const PublishMessageResponseSchema: GenMessage<PublishMessageResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_publish_messages, 2);

