// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/console/v1alpha1/secret.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CreateSecretRequest as CreateSecretRequest$1, CreateSecretResponse as CreateSecretResponse$1, DeleteSecretRequest as DeleteSecretRequest$1, DeleteSecretResponse as DeleteSecretResponse$1, GetSecretRequest as GetSecretRequest$1, GetSecretResponse as GetSecretResponse$1, ListSecretScopesRequest as ListSecretScopesRequest$1, ListSecretScopesResponse as ListSecretScopesResponse$1, ListSecretsRequest as ListSecretsRequest$1, ListSecretsResponse as ListSecretsResponse$1, UpdateSecretRequest as UpdateSecretRequest$1, UpdateSecretResponse as UpdateSecretResponse$1 } from "../../dataplane/v1/secret_pb";

/**
 * @generated from message redpanda.api.console.v1alpha1.GetSecretRequest
 */
export class GetSecretRequest extends Message<GetSecretRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.GetSecretRequest request = 1;
   */
  request?: GetSecretRequest$1;

  constructor(data?: PartialMessage<GetSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: GetSecretRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSecretRequest {
    return new GetSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSecretRequest {
    return new GetSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSecretRequest {
    return new GetSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSecretRequest | PlainMessage<GetSecretRequest> | undefined, b: GetSecretRequest | PlainMessage<GetSecretRequest> | undefined): boolean {
    return proto3.util.equals(GetSecretRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetSecretResponse
 */
export class GetSecretResponse extends Message<GetSecretResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.GetSecretResponse response = 1;
   */
  response?: GetSecretResponse$1;

  constructor(data?: PartialMessage<GetSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: GetSecretResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSecretResponse {
    return new GetSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSecretResponse {
    return new GetSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSecretResponse {
    return new GetSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSecretResponse | PlainMessage<GetSecretResponse> | undefined, b: GetSecretResponse | PlainMessage<GetSecretResponse> | undefined): boolean {
    return proto3.util.equals(GetSecretResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ListSecretsRequest
 */
export class ListSecretsRequest extends Message<ListSecretsRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ListSecretsRequest request = 1;
   */
  request?: ListSecretsRequest$1;

  constructor(data?: PartialMessage<ListSecretsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListSecretsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: ListSecretsRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsRequest | PlainMessage<ListSecretsRequest> | undefined, b: ListSecretsRequest | PlainMessage<ListSecretsRequest> | undefined): boolean {
    return proto3.util.equals(ListSecretsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ListSecretsResponse
 */
export class ListSecretsResponse extends Message<ListSecretsResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ListSecretsResponse response = 1;
   */
  response?: ListSecretsResponse$1;

  constructor(data?: PartialMessage<ListSecretsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListSecretsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: ListSecretsResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsResponse | PlainMessage<ListSecretsResponse> | undefined, b: ListSecretsResponse | PlainMessage<ListSecretsResponse> | undefined): boolean {
    return proto3.util.equals(ListSecretsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.CreateSecretRequest
 */
export class CreateSecretRequest extends Message<CreateSecretRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.CreateSecretRequest request = 1;
   */
  request?: CreateSecretRequest$1;

  constructor(data?: PartialMessage<CreateSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreateSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: CreateSecretRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSecretRequest {
    return new CreateSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSecretRequest {
    return new CreateSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSecretRequest {
    return new CreateSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSecretRequest | PlainMessage<CreateSecretRequest> | undefined, b: CreateSecretRequest | PlainMessage<CreateSecretRequest> | undefined): boolean {
    return proto3.util.equals(CreateSecretRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.CreateSecretResponse
 */
export class CreateSecretResponse extends Message<CreateSecretResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.CreateSecretResponse response = 1;
   */
  response?: CreateSecretResponse$1;

  constructor(data?: PartialMessage<CreateSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreateSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: CreateSecretResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSecretResponse {
    return new CreateSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSecretResponse {
    return new CreateSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSecretResponse {
    return new CreateSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSecretResponse | PlainMessage<CreateSecretResponse> | undefined, b: CreateSecretResponse | PlainMessage<CreateSecretResponse> | undefined): boolean {
    return proto3.util.equals(CreateSecretResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.UpdateSecretRequest
 */
export class UpdateSecretRequest extends Message<UpdateSecretRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.UpdateSecretRequest request = 1;
   */
  request?: UpdateSecretRequest$1;

  constructor(data?: PartialMessage<UpdateSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.UpdateSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: UpdateSecretRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSecretRequest {
    return new UpdateSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSecretRequest {
    return new UpdateSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSecretRequest {
    return new UpdateSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSecretRequest | PlainMessage<UpdateSecretRequest> | undefined, b: UpdateSecretRequest | PlainMessage<UpdateSecretRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSecretRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.UpdateSecretResponse
 */
export class UpdateSecretResponse extends Message<UpdateSecretResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.UpdateSecretResponse response = 1;
   */
  response?: UpdateSecretResponse$1;

  constructor(data?: PartialMessage<UpdateSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.UpdateSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: UpdateSecretResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSecretResponse {
    return new UpdateSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSecretResponse {
    return new UpdateSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSecretResponse {
    return new UpdateSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSecretResponse | PlainMessage<UpdateSecretResponse> | undefined, b: UpdateSecretResponse | PlainMessage<UpdateSecretResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSecretResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DeleteSecretRequest
 */
export class DeleteSecretRequest extends Message<DeleteSecretRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.DeleteSecretRequest request = 1;
   */
  request?: DeleteSecretRequest$1;

  constructor(data?: PartialMessage<DeleteSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: DeleteSecretRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSecretRequest {
    return new DeleteSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSecretRequest {
    return new DeleteSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSecretRequest {
    return new DeleteSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSecretRequest | PlainMessage<DeleteSecretRequest> | undefined, b: DeleteSecretRequest | PlainMessage<DeleteSecretRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSecretRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DeleteSecretResponse
 */
export class DeleteSecretResponse extends Message<DeleteSecretResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.DeleteSecretResponse response = 1;
   */
  response?: DeleteSecretResponse$1;

  constructor(data?: PartialMessage<DeleteSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: DeleteSecretResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSecretResponse {
    return new DeleteSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSecretResponse {
    return new DeleteSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSecretResponse {
    return new DeleteSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSecretResponse | PlainMessage<DeleteSecretResponse> | undefined, b: DeleteSecretResponse | PlainMessage<DeleteSecretResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSecretResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ListSecretScopesRequest
 */
export class ListSecretScopesRequest extends Message<ListSecretScopesRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ListSecretScopesRequest request = 1;
   */
  request?: ListSecretScopesRequest$1;

  constructor(data?: PartialMessage<ListSecretScopesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListSecretScopesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: ListSecretScopesRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretScopesRequest {
    return new ListSecretScopesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretScopesRequest {
    return new ListSecretScopesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretScopesRequest {
    return new ListSecretScopesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretScopesRequest | PlainMessage<ListSecretScopesRequest> | undefined, b: ListSecretScopesRequest | PlainMessage<ListSecretScopesRequest> | undefined): boolean {
    return proto3.util.equals(ListSecretScopesRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ListSecretScopesResponse
 */
export class ListSecretScopesResponse extends Message<ListSecretScopesResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1.ListSecretScopesResponse response = 1;
   */
  response?: ListSecretScopesResponse$1;

  constructor(data?: PartialMessage<ListSecretScopesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListSecretScopesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: ListSecretScopesResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretScopesResponse {
    return new ListSecretScopesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretScopesResponse {
    return new ListSecretScopesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretScopesResponse {
    return new ListSecretScopesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretScopesResponse | PlainMessage<ListSecretScopesResponse> | undefined, b: ListSecretScopesResponse | PlainMessage<ListSecretScopesResponse> | undefined): boolean {
    return proto3.util.equals(ListSecretScopesResponse, a, b);
  }
}

