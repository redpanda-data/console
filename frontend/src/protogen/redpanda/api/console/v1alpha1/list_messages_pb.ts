// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/console/v1alpha1/list_messages.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import type { CompressionType, KafkaRecordHeader, PayloadEncoding, TroubleshootReport } from "./common_pb";
import { file_redpanda_api_console_v1alpha1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/console/v1alpha1/list_messages.proto.
 */
export const file_redpanda_api_console_v1alpha1_list_messages: GenFile = /*@__PURE__*/
  fileDesc("CjFyZWRwYW5kYS9hcGkvY29uc29sZS92MWFscGhhMS9saXN0X21lc3NhZ2VzLnByb3RvEh1yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMSKbBAoTTGlzdE1lc3NhZ2VzUmVxdWVzdBItCgV0b3BpYxgBIAEoCUIeukgbchkQARj5ATISXlthLXpBLVowLTkuX1wtXSokEiMKDHN0YXJ0X29mZnNldBgCIAEoEkINukgKQggwATADMAUwBxIXCg9zdGFydF90aW1lc3RhbXAYAyABKAMSJgoMcGFydGl0aW9uX2lkGAQgASgFQhC6SA0aCyj///////////8BEhMKC21heF9yZXN1bHRzGAUgASgFEh8KF2ZpbHRlcl9pbnRlcnByZXRlcl9jb2RlGAYgASgJEhIKCmVudGVycHJpc2UYByABKAwSFAoMdHJvdWJsZXNob290GAggASgIEiQKHGluY2x1ZGVfb3JpZ2luYWxfcmF3X3BheWxvYWQYCSABKAgSTQoQa2V5X2Rlc2VyaWFsaXplchgKIAEoDjIuLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLlBheWxvYWRFbmNvZGluZ0gAiAEBEk8KEnZhbHVlX2Rlc2VyaWFsaXplchgLIAEoDjIuLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLlBheWxvYWRFbmNvZGluZ0gBiAEBEh0KFWlnbm9yZV9tYXhfc2l6ZV9saW1pdBgMIAEoCEITChFfa2V5X2Rlc2VyaWFsaXplckIVChNfdmFsdWVfZGVzZXJpYWxpemVyIr8IChRMaXN0TWVzc2FnZXNSZXNwb25zZRJPCgRkYXRhGAEgASgLMj8ucmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEuTGlzdE1lc3NhZ2VzUmVzcG9uc2UuRGF0YU1lc3NhZ2VIABJRCgVwaGFzZRgCIAEoCzJALnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkxpc3RNZXNzYWdlc1Jlc3BvbnNlLlBoYXNlTWVzc2FnZUgAElcKCHByb2dyZXNzGAMgASgLMkMucmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEuTGlzdE1lc3NhZ2VzUmVzcG9uc2UuUHJvZ3Jlc3NNZXNzYWdlSAASWgoEZG9uZRgEIAEoCzJKLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkxpc3RNZXNzYWdlc1Jlc3BvbnNlLlN0cmVhbUNvbXBsZXRlZE1lc3NhZ2VIABJRCgVlcnJvchgFIAEoCzJALnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkxpc3RNZXNzYWdlc1Jlc3BvbnNlLkVycm9yTWVzc2FnZUgAGuoCCgtEYXRhTWVzc2FnZRIUCgxwYXJ0aXRpb25faWQYASABKAUSDgoGb2Zmc2V0GAIgASgDEhEKCXRpbWVzdGFtcBgDIAEoAxJDCgtjb21wcmVzc2lvbhgEIAEoDjIuLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkNvbXByZXNzaW9uVHlwZRIYChBpc190cmFuc2FjdGlvbmFsGAUgASgIEkEKB2hlYWRlcnMYBiADKAsyMC5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5LYWZrYVJlY29yZEhlYWRlchI+CgNrZXkYByABKAsyMS5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5LYWZrYVJlY29yZFBheWxvYWQSQAoFdmFsdWUYCCABKAsyMS5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5LYWZrYVJlY29yZFBheWxvYWQaHQoMUGhhc2VNZXNzYWdlEg0KBXBoYXNlGAEgASgJGkQKD1Byb2dyZXNzTWVzc2FnZRIZChFtZXNzYWdlc19jb25zdW1lZBgBIAEoAxIWCg5ieXRlc19jb25zdW1lZBgCIAEoAxp1ChZTdHJlYW1Db21wbGV0ZWRNZXNzYWdlEhIKCmVsYXBzZWRfbXMYASABKAMSFAoMaXNfY2FuY2VsbGVkGAIgASgIEhkKEW1lc3NhZ2VzX2NvbnN1bWVkGAMgASgDEhYKDmJ5dGVzX2NvbnN1bWVkGAQgASgDGh8KDEVycm9yTWVzc2FnZRIPCgdtZXNzYWdlGAEgASgJQhEKD2NvbnRyb2xfbWVzc2FnZSLsAgoSS2Fma2FSZWNvcmRQYXlsb2FkEh0KEG9yaWdpbmFsX3BheWxvYWQYASABKAxIAIgBARIfChJub3JtYWxpemVkX3BheWxvYWQYAiABKAxIAYgBARJACghlbmNvZGluZxgDIAEoDjIuLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLlBheWxvYWRFbmNvZGluZxIWCglzY2hlbWFfaWQYBCABKAVIAogBARIUCgxwYXlsb2FkX3NpemUYBSABKAUSHAoUaXNfcGF5bG9hZF90b29fbGFyZ2UYBiABKAgSTgoTdHJvdWJsZXNob290X3JlcG9ydBgHIAMoCzIxLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLlRyb3VibGVzaG9vdFJlcG9ydEITChFfb3JpZ2luYWxfcGF5bG9hZEIVChNfbm9ybWFsaXplZF9wYXlsb2FkQgwKCl9zY2hlbWFfaWRCsgIKIWNvbS5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMUIRTGlzdE1lc3NhZ2VzUHJvdG9QAVpjZ2l0aHViLmNvbS9yZWRwYW5kYS1kYXRhL2NvbnNvbGUvYmFja2VuZC9wa2cvcHJvdG9nZW4vcmVkcGFuZGEvYXBpL2NvbnNvbGUvdjFhbHBoYTE7Y29uc29sZXYxYWxwaGExogIDUkFDqgIdUmVkcGFuZGEuQXBpLkNvbnNvbGUuVjFhbHBoYTHKAh1SZWRwYW5kYVxBcGlcQ29uc29sZVxWMWFscGhhMeICKVJlZHBhbmRhXEFwaVxDb25zb2xlXFYxYWxwaGExXEdQQk1ldGFkYXRh6gIgUmVkcGFuZGE6OkFwaTo6Q29uc29sZTo6VjFhbHBoYTFiBnByb3RvMw", [file_buf_validate_validate, file_redpanda_api_console_v1alpha1_common]);

/**
 * ListMessagesRequest is the request for ListMessages call.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListMessagesRequest
 */
export type ListMessagesRequest = Message<"redpanda.api.console.v1alpha1.ListMessagesRequest"> & {
  /**
   * Topic name.
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * Start offset. -1 for recent (newest - results), -2 for oldest offset, -3 for newest, -4 for timestamp.
   *
   * @generated from field: sint64 start_offset = 2;
   */
  startOffset: bigint;

  /**
   * Start offset by unix timestamp in ms (only considered if start offset is set to -4).
   *
   * @generated from field: int64 start_timestamp = 3;
   */
  startTimestamp: bigint;

  /**
   * -1 for all partition ids
   *
   * @generated from field: int32 partition_id = 4;
   */
  partitionId: number;

  /**
   * Maximum number of results
   *
   * @generated from field: int32 max_results = 5;
   */
  maxResults: number;

  /**
   * Base64 encoded code
   *
   * @generated from field: string filter_interpreter_code = 6;
   */
  filterInterpreterCode: string;

  /**
   * Enterprise may only be set in the Enterprise mode. The JSON deserialization is deferred.
   *
   * @generated from field: bytes enterprise = 7;
   */
  enterprise: Uint8Array;

  /**
   * Optionally include troubleshooting data in the response.
   *
   * @generated from field: bool troubleshoot = 8;
   */
  troubleshoot: boolean;

  /**
   * Optionally include original raw payload.
   *
   * @generated from field: bool include_original_raw_payload = 9;
   */
  includeOriginalRawPayload: boolean;

  /**
   * Optionally specify key payload deserialization strategy to use.
   *
   * @generated from field: optional redpanda.api.console.v1alpha1.PayloadEncoding key_deserializer = 10;
   */
  keyDeserializer?: PayloadEncoding;

  /**
   * Optionally specify value payload deserialization strategy to use.
   *
   * @generated from field: optional redpanda.api.console.v1alpha1.PayloadEncoding value_deserializer = 11;
   */
  valueDeserializer?: PayloadEncoding;

  /**
   * Optionally ignore configured maximum payload size limit.
   *
   * @generated from field: bool ignore_max_size_limit = 12;
   */
  ignoreMaxSizeLimit: boolean;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.ListMessagesRequest.
 * Use `create(ListMessagesRequestSchema)` to create a new message.
 */
export const ListMessagesRequestSchema: GenMessage<ListMessagesRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_list_messages, 0);

/**
 * ListMessagesResponse is the response for ListMessages call.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListMessagesResponse
 */
export type ListMessagesResponse = Message<"redpanda.api.console.v1alpha1.ListMessagesResponse"> & {
  /**
   * The control message as we consume messages.
   *
   * @generated from oneof redpanda.api.console.v1alpha1.ListMessagesResponse.control_message
   */
  controlMessage: {
    /**
     * @generated from field: redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage data = 1;
     */
    value: ListMessagesResponse_DataMessage;
    case: "data";
  } | {
    /**
     * @generated from field: redpanda.api.console.v1alpha1.ListMessagesResponse.PhaseMessage phase = 2;
     */
    value: ListMessagesResponse_PhaseMessage;
    case: "phase";
  } | {
    /**
     * @generated from field: redpanda.api.console.v1alpha1.ListMessagesResponse.ProgressMessage progress = 3;
     */
    value: ListMessagesResponse_ProgressMessage;
    case: "progress";
  } | {
    /**
     * @generated from field: redpanda.api.console.v1alpha1.ListMessagesResponse.StreamCompletedMessage done = 4;
     */
    value: ListMessagesResponse_StreamCompletedMessage;
    case: "done";
  } | {
    /**
     * @generated from field: redpanda.api.console.v1alpha1.ListMessagesResponse.ErrorMessage error = 5;
     */
    value: ListMessagesResponse_ErrorMessage;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message redpanda.api.console.v1alpha1.ListMessagesResponse.
 * Use `create(ListMessagesResponseSchema)` to create a new message.
 */
export const ListMessagesResponseSchema: GenMessage<ListMessagesResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_list_messages, 1);

/**
 * Data control message.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage
 */
export type ListMessagesResponse_DataMessage = Message<"redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage"> & {
  /**
   * @generated from field: int32 partition_id = 1;
   */
  partitionId: number;

  /**
   * @generated from field: int64 offset = 2;
   */
  offset: bigint;

  /**
   * @generated from field: int64 timestamp = 3;
   */
  timestamp: bigint;

  /**
   * @generated from field: redpanda.api.console.v1alpha1.CompressionType compression = 4;
   */
  compression: CompressionType;

  /**
   * @generated from field: bool is_transactional = 5;
   */
  isTransactional: boolean;

  /**
   * Kafka record headers.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.KafkaRecordHeader headers = 6;
   */
  headers: KafkaRecordHeader[];

  /**
   * Kafka key of the payload record.
   *
   * @generated from field: redpanda.api.console.v1alpha1.KafkaRecordPayload key = 7;
   */
  key?: KafkaRecordPayload;

  /**
   * Kafka value of the payload record.
   *
   * @generated from field: redpanda.api.console.v1alpha1.KafkaRecordPayload value = 8;
   */
  value?: KafkaRecordPayload;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage.
 * Use `create(ListMessagesResponse_DataMessageSchema)` to create a new message.
 */
export const ListMessagesResponse_DataMessageSchema: GenMessage<ListMessagesResponse_DataMessage> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_list_messages, 1, 0);

/**
 * Phase control message.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListMessagesResponse.PhaseMessage
 */
export type ListMessagesResponse_PhaseMessage = Message<"redpanda.api.console.v1alpha1.ListMessagesResponse.PhaseMessage"> & {
  /**
   * The current phase.
   *
   * @generated from field: string phase = 1;
   */
  phase: string;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.ListMessagesResponse.PhaseMessage.
 * Use `create(ListMessagesResponse_PhaseMessageSchema)` to create a new message.
 */
export const ListMessagesResponse_PhaseMessageSchema: GenMessage<ListMessagesResponse_PhaseMessage> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_list_messages, 1, 1);

/**
 * Progress control message.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListMessagesResponse.ProgressMessage
 */
export type ListMessagesResponse_ProgressMessage = Message<"redpanda.api.console.v1alpha1.ListMessagesResponse.ProgressMessage"> & {
  /**
   * Currently consumed messages.
   *
   * @generated from field: int64 messages_consumed = 1;
   */
  messagesConsumed: bigint;

  /**
   * Currently consumed bytes.
   *
   * @generated from field: int64 bytes_consumed = 2;
   */
  bytesConsumed: bigint;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.ListMessagesResponse.ProgressMessage.
 * Use `create(ListMessagesResponse_ProgressMessageSchema)` to create a new message.
 */
export const ListMessagesResponse_ProgressMessageSchema: GenMessage<ListMessagesResponse_ProgressMessage> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_list_messages, 1, 2);

/**
 * Stream completed control message.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListMessagesResponse.StreamCompletedMessage
 */
export type ListMessagesResponse_StreamCompletedMessage = Message<"redpanda.api.console.v1alpha1.ListMessagesResponse.StreamCompletedMessage"> & {
  /**
   * Total elapsed time in milliseconds.
   *
   * @generated from field: int64 elapsed_ms = 1;
   */
  elapsedMs: bigint;

  /**
   * Whether the call was cancelled.
   *
   * @generated from field: bool is_cancelled = 2;
   */
  isCancelled: boolean;

  /**
   * Total consumed messages.
   *
   * @generated from field: int64 messages_consumed = 3;
   */
  messagesConsumed: bigint;

  /**
   * Total consumed bytes.
   *
   * @generated from field: int64 bytes_consumed = 4;
   */
  bytesConsumed: bigint;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.ListMessagesResponse.StreamCompletedMessage.
 * Use `create(ListMessagesResponse_StreamCompletedMessageSchema)` to create a new message.
 */
export const ListMessagesResponse_StreamCompletedMessageSchema: GenMessage<ListMessagesResponse_StreamCompletedMessage> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_list_messages, 1, 3);

/**
 * Error control message.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListMessagesResponse.ErrorMessage
 */
export type ListMessagesResponse_ErrorMessage = Message<"redpanda.api.console.v1alpha1.ListMessagesResponse.ErrorMessage"> & {
  /**
   * The error message.
   *
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.ListMessagesResponse.ErrorMessage.
 * Use `create(ListMessagesResponse_ErrorMessageSchema)` to create a new message.
 */
export const ListMessagesResponse_ErrorMessageSchema: GenMessage<ListMessagesResponse_ErrorMessage> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_list_messages, 1, 4);

/**
 * KafkaRecordPayload is record payload representation.
 *
 * @generated from message redpanda.api.console.v1alpha1.KafkaRecordPayload
 */
export type KafkaRecordPayload = Message<"redpanda.api.console.v1alpha1.KafkaRecordPayload"> & {
  /**
   * Original raw binary payload.
   *
   * @generated from field: optional bytes original_payload = 1;
   */
  originalPayload?: Uint8Array;

  /**
   * Normalized user friendly representation of the payload.
   *
   * @generated from field: optional bytes normalized_payload = 2;
   */
  normalizedPayload?: Uint8Array;

  /**
   * Payload encoding if we have been able to detect.
   *
   * @generated from field: redpanda.api.console.v1alpha1.PayloadEncoding encoding = 3;
   */
  encoding: PayloadEncoding;

  /**
   * Optionally, the schema ID used to deserialized the message.
   *
   * @generated from field: optional int32 schema_id = 4;
   */
  schemaId?: number;

  /**
   * Payload size in bytes.
   *
   * @generated from field: int32 payload_size = 5;
   */
  payloadSize: number;

  /**
   * If payload is too large for deserialization.
   *
   * @generated from field: bool is_payload_too_large = 6;
   */
  isPayloadTooLarge: boolean;

  /**
   * Troubleshooting data for debugging.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.TroubleshootReport troubleshoot_report = 7;
   */
  troubleshootReport: TroubleshootReport[];
};

/**
 * Describes the message redpanda.api.console.v1alpha1.KafkaRecordPayload.
 * Use `create(KafkaRecordPayloadSchema)` to create a new message.
 */
export const KafkaRecordPayloadSchema: GenMessage<KafkaRecordPayload> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_list_messages, 2);

