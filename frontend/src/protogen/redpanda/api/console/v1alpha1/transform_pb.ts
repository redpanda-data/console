// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/console/v1alpha1/transform.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DeleteTransformRequest as DeleteTransformRequest$1, DeleteTransformResponse as DeleteTransformResponse$1, GetTransformRequest as GetTransformRequest$1, GetTransformResponse as GetTransformResponse$1, ListTransformsRequest as ListTransformsRequest$1, ListTransformsResponse as ListTransformsResponse$1 } from "../../dataplane/v1alpha2/transform_pb";

/**
 * @generated from message redpanda.api.console.v1alpha1.ListTransformsRequest
 */
export class ListTransformsRequest extends Message<ListTransformsRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.ListTransformsRequest request = 1;
   */
  request?: ListTransformsRequest$1;

  constructor(data?: PartialMessage<ListTransformsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListTransformsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: ListTransformsRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTransformsRequest {
    return new ListTransformsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTransformsRequest {
    return new ListTransformsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTransformsRequest {
    return new ListTransformsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTransformsRequest | PlainMessage<ListTransformsRequest> | undefined, b: ListTransformsRequest | PlainMessage<ListTransformsRequest> | undefined): boolean {
    return proto3.util.equals(ListTransformsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ListTransformsResponse
 */
export class ListTransformsResponse extends Message<ListTransformsResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.ListTransformsResponse response = 1;
   */
  response?: ListTransformsResponse$1;

  constructor(data?: PartialMessage<ListTransformsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListTransformsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: ListTransformsResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTransformsResponse {
    return new ListTransformsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTransformsResponse {
    return new ListTransformsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTransformsResponse {
    return new ListTransformsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTransformsResponse | PlainMessage<ListTransformsResponse> | undefined, b: ListTransformsResponse | PlainMessage<ListTransformsResponse> | undefined): boolean {
    return proto3.util.equals(ListTransformsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetTransformRequest
 */
export class GetTransformRequest extends Message<GetTransformRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.GetTransformRequest request = 1;
   */
  request?: GetTransformRequest$1;

  constructor(data?: PartialMessage<GetTransformRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetTransformRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: GetTransformRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransformRequest {
    return new GetTransformRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransformRequest {
    return new GetTransformRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransformRequest {
    return new GetTransformRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransformRequest | PlainMessage<GetTransformRequest> | undefined, b: GetTransformRequest | PlainMessage<GetTransformRequest> | undefined): boolean {
    return proto3.util.equals(GetTransformRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetTransformResponse
 */
export class GetTransformResponse extends Message<GetTransformResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.GetTransformResponse response = 1;
   */
  response?: GetTransformResponse$1;

  constructor(data?: PartialMessage<GetTransformResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetTransformResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: GetTransformResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransformResponse {
    return new GetTransformResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransformResponse {
    return new GetTransformResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransformResponse {
    return new GetTransformResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransformResponse | PlainMessage<GetTransformResponse> | undefined, b: GetTransformResponse | PlainMessage<GetTransformResponse> | undefined): boolean {
    return proto3.util.equals(GetTransformResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DeleteTransformRequest
 */
export class DeleteTransformRequest extends Message<DeleteTransformRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.DeleteTransformRequest request = 1;
   */
  request?: DeleteTransformRequest$1;

  constructor(data?: PartialMessage<DeleteTransformRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteTransformRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: DeleteTransformRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTransformRequest {
    return new DeleteTransformRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTransformRequest {
    return new DeleteTransformRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTransformRequest {
    return new DeleteTransformRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTransformRequest | PlainMessage<DeleteTransformRequest> | undefined, b: DeleteTransformRequest | PlainMessage<DeleteTransformRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTransformRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DeleteTransformResponse
 */
export class DeleteTransformResponse extends Message<DeleteTransformResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.DeleteTransformResponse response = 1;
   */
  response?: DeleteTransformResponse$1;

  constructor(data?: PartialMessage<DeleteTransformResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteTransformResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: DeleteTransformResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTransformResponse {
    return new DeleteTransformResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTransformResponse {
    return new DeleteTransformResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTransformResponse {
    return new DeleteTransformResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTransformResponse | PlainMessage<DeleteTransformResponse> | undefined, b: DeleteTransformResponse | PlainMessage<DeleteTransformResponse> | undefined): boolean {
    return proto3.util.equals(DeleteTransformResponse, a, b);
  }
}

