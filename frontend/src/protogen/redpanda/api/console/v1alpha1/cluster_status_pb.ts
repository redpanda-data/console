// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/console/v1alpha1/cluster_status.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/console/v1alpha1/cluster_status.proto.
 */
export const file_redpanda_api_console_v1alpha1_cluster_status: GenFile = /*@__PURE__*/
  fileDesc("CjJyZWRwYW5kYS9hcGkvY29uc29sZS92MWFscGhhMS9jbHVzdGVyX3N0YXR1cy5wcm90bxIdcmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEiFQoTR2V0S2Fma2FJbmZvUmVxdWVzdCKRAwoUR2V0S2Fma2FJbmZvUmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4ucmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEuQ29tcG9uZW50U3RhdHVzEg8KB3ZlcnNpb24YAiABKAkSRgoMZGlzdHJpYnV0aW9uGAMgASgOMjAucmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEuS2Fma2FEaXN0cmlidXRpb24SFgoOYnJva2Vyc19vbmxpbmUYBCABKAUSGAoQYnJva2Vyc19leHBlY3RlZBgFIAEoBRIUCgx0b3BpY3NfY291bnQYBiABKAUSGAoQcGFydGl0aW9uc19jb3VudBgHIAEoBRIWCg5yZXBsaWNhc19jb3VudBgIIAEoBRIVCg1jb250cm9sbGVyX2lkGAkgASgFEjsKB2Jyb2tlcnMYCiADKAsyKi5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5LYWZrYUJyb2tlchISCgpjbHVzdGVyX2lkGAsgASgJIh8KHUdldEthZmthQXV0aG9yaXplckluZm9SZXF1ZXN0IjMKHkdldEthZmthQXV0aG9yaXplckluZm9SZXNwb25zZRIRCglhY2xfY291bnQYASABKAUiGAoWR2V0UmVkcGFuZGFJbmZvUmVxdWVzdCI+ChdHZXRSZWRwYW5kYUluZm9SZXNwb25zZRIPCgd2ZXJzaW9uGAEgASgJEhIKCnVzZXJfY291bnQYAiABKAUiKwopR2V0UmVkcGFuZGFQYXJ0aXRpb25CYWxhbmNlclN0YXR1c1JlcXVlc3QimAUKKkdldFJlZHBhbmRhUGFydGl0aW9uQmFsYW5jZXJTdGF0dXNSZXNwb25zZRJgCgZzdGF0dXMYASABKA4yUC5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5HZXRSZWRwYW5kYVBhcnRpdGlvbkJhbGFuY2VyU3RhdHVzUmVzcG9uc2UuU3RhdHVzEmgKCnZpb2xhdGlvbnMYAiABKAsyVC5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5HZXRSZWRwYW5kYVBhcnRpdGlvbkJhbGFuY2VyU3RhdHVzUmVzcG9uc2UuVmlvbGF0aW9ucxIfChdzZWNvbmRzX3NpbmNlX2xhc3RfdGljaxgDIAEoBRIjChtjdXJyZW50X3JlYXNzaWdubWVudHNfY291bnQYBCABKAUSNAoncGFydGl0aW9uc19wZW5kaW5nX2ZvcmNlX3JlY292ZXJ5X2NvdW50GAUgASgFSACIAQESKAogcGFydGl0aW9uc19wZW5kaW5nX3JlY292ZXJ5X2xpc3QYBiADKAkaRgoKVmlvbGF0aW9ucxIZChF1bmF2YWlsYWJsZV9ub2RlcxgBIAMoBRIdChVvdmVyX2Rpc2tfbGltaXRfbm9kZXMYAiADKAUigwEKBlN0YXR1cxIWChJTVEFUVVNfVU5TUEVDSUZJRUQQABIOCgpTVEFUVVNfT0ZGEAESEAoMU1RBVFVTX1JFQURZEAISEwoPU1RBVFVTX1NUQVJUSU5HEAMSFgoSU1RBVFVTX0lOX1BST0dSRVNTEAQSEgoOU1RBVFVTX1NUQUxMRUQQBUIqCihfcGFydGl0aW9uc19wZW5kaW5nX2ZvcmNlX3JlY292ZXJ5X2NvdW50IhcKFUdldENvbnNvbGVJbmZvUmVxdWVzdCJFChZHZXRDb25zb2xlSW5mb1Jlc3BvbnNlEhQKB3ZlcnNpb24YASABKAlCA+BBAxIVCghidWlsdF9hdBgCIAEoCUID4EEDIhwKGkdldEthZmthQ29ubmVjdEluZm9SZXF1ZXN0IqUCChtHZXRLYWZrYUNvbm5lY3RJbmZvUmVzcG9uc2USYAoIY2x1c3RlcnMYASADKAsyTi5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5HZXRLYWZrYUNvbm5lY3RJbmZvUmVzcG9uc2UuS2Fma2FDb25uZWN0Q2x1c3RlchqjAQoTS2Fma2FDb25uZWN0Q2x1c3RlchIMCgRuYW1lGAEgASgJEj4KBnN0YXR1cxgCIAEoCzIuLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkNvbXBvbmVudFN0YXR1cxIMCgRob3N0GAMgASgJEg8KB3ZlcnNpb24YBCABKAkSHwoXaW5zdGFsbGVkX3BsdWdpbnNfY291bnQYBSABKAUiHgocR2V0U2NoZW1hUmVnaXN0cnlJbmZvUmVxdWVzdCKCAQodR2V0U2NoZW1hUmVnaXN0cnlJbmZvUmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4ucmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEuQ29tcG9uZW50U3RhdHVzEiEKGXJlZ2lzdGVyZWRfc3ViamVjdHNfY291bnQYAiABKAUiYwoPQ29tcG9uZW50U3RhdHVzEjkKBnN0YXR1cxgBIAEoDjIpLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLlN0YXR1c1R5cGUSFQoNc3RhdHVzX3JlYXNvbhgCIAEoCSJQCgtLYWZrYUJyb2tlchIRCglicm9rZXJfaWQYASABKAUSDAoEaG9zdBgCIAEoCRIUCgdyYWNrX2lkGAMgASgJSACIAQFCCgoIX3JhY2tfaWQqdwoKU3RhdHVzVHlwZRIbChdTVEFUVVNfVFlQRV9VTlNQRUNJRklFRBAAEhcKE1NUQVRVU19UWVBFX0hFQUxUSFkQARIYChRTVEFUVVNfVFlQRV9ERUdSQURFRBACEhkKFVNUQVRVU19UWVBFX1VOSEVBTFRIWRADKp0BChFLYWZrYURpc3RyaWJ1dGlvbhIiCh5LQUZLQV9ESVNUUklCVVRJT05fVU5TUEVDSUZJRUQQABIeChpLQUZLQV9ESVNUUklCVVRJT05fVU5LTk9XThABEiMKH0tBRktBX0RJU1RSSUJVVElPTl9BUEFDSEVfS0FGS0EQAhIfChtLQUZLQV9ESVNUUklCVVRJT05fUkVEUEFOREEQAyp8CgtMaWNlbnNlVHlwZRIcChhMSUNFTlNFX1RZUEVfVU5TUEVDSUZJRUQQABIaChZMSUNFTlNFX1RZUEVfQ09NTVVOSVRZEAESGwoXTElDRU5TRV9UWVBFX0VOVEVSUFJJU0UQAhIWChJMSUNFTlNFX1RZUEVfVFJJQUwQAypnCg1MaWNlbnNlU291cmNlEh4KGkxJQ0VOU0VfU09VUkNFX1VOU1BFQ0lGSUVEEAASGgoWTElDRU5TRV9TT1VSQ0VfQ0xVU1RFUhABEhoKFkxJQ0VOU0VfU09VUkNFX0NPTlNPTEUQAjLRCAoUQ2x1c3RlclN0YXR1c1NlcnZpY2USgQEKDEdldEthZmthSW5mbxIyLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkdldEthZmthSW5mb1JlcXVlc3QaMy5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5HZXRLYWZrYUluZm9SZXNwb25zZSIIiqYdBAgBEAESnwEKFkdldEthZmthQXV0aG9yaXplckluZm8SPC5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5HZXRLYWZrYUF1dGhvcml6ZXJJbmZvUmVxdWVzdBo9LnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkdldEthZmthQXV0aG9yaXplckluZm9SZXNwb25zZSIIiqYdBAgBEAESigEKD0dldFJlZHBhbmRhSW5mbxI1LnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkdldFJlZHBhbmRhSW5mb1JlcXVlc3QaNi5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5HZXRSZWRwYW5kYUluZm9SZXNwb25zZSIIiqYdBAgBEAMSwwEKIkdldFJlZHBhbmRhUGFydGl0aW9uQmFsYW5jZXJTdGF0dXMSSC5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5HZXRSZWRwYW5kYVBhcnRpdGlvbkJhbGFuY2VyU3RhdHVzUmVxdWVzdBpJLnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkdldFJlZHBhbmRhUGFydGl0aW9uQmFsYW5jZXJTdGF0dXNSZXNwb25zZSIIiqYdBAgBEAMShwEKDkdldENvbnNvbGVJbmZvEjQucmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEuR2V0Q29uc29sZUluZm9SZXF1ZXN0GjUucmVkcGFuZGEuYXBpLmNvbnNvbGUudjFhbHBoYTEuR2V0Q29uc29sZUluZm9SZXNwb25zZSIIiqYdBAgBEAYSlgEKE0dldEthZmthQ29ubmVjdEluZm8SOS5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5HZXRLYWZrYUNvbm5lY3RJbmZvUmVxdWVzdBo6LnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkdldEthZmthQ29ubmVjdEluZm9SZXNwb25zZSIIiqYdBAgBEAUSnAEKFUdldFNjaGVtYVJlZ2lzdHJ5SW5mbxI7LnJlZHBhbmRhLmFwaS5jb25zb2xlLnYxYWxwaGExLkdldFNjaGVtYVJlZ2lzdHJ5SW5mb1JlcXVlc3QaPC5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMS5HZXRTY2hlbWFSZWdpc3RyeUluZm9SZXNwb25zZSIIiqYdBAgBEAJCswIKIWNvbS5yZWRwYW5kYS5hcGkuY29uc29sZS52MWFscGhhMUISQ2x1c3RlclN0YXR1c1Byb3RvUAFaY2dpdGh1Yi5jb20vcmVkcGFuZGEtZGF0YS9jb25zb2xlL2JhY2tlbmQvcGtnL3Byb3RvZ2VuL3JlZHBhbmRhL2FwaS9jb25zb2xlL3YxYWxwaGExO2NvbnNvbGV2MWFscGhhMaICA1JBQ6oCHVJlZHBhbmRhLkFwaS5Db25zb2xlLlYxYWxwaGExygIdUmVkcGFuZGFcQXBpXENvbnNvbGVcVjFhbHBoYTHiAilSZWRwYW5kYVxBcGlcQ29uc29sZVxWMWFscGhhMVxHUEJNZXRhZGF0YeoCIFJlZHBhbmRhOjpBcGk6OkNvbnNvbGU6OlYxYWxwaGExYgZwcm90bzM", [file_google_api_field_behavior, file_redpanda_api_auth_v1_authorization]);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetKafkaInfoRequest
 */
export type GetKafkaInfoRequest = Message<"redpanda.api.console.v1alpha1.GetKafkaInfoRequest"> & {
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetKafkaInfoRequest.
 * Use `create(GetKafkaInfoRequestSchema)` to create a new message.
 */
export const GetKafkaInfoRequestSchema: GenMessage<GetKafkaInfoRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 0);

/**
 * KafkaInfo contains general Kafka cluster information.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetKafkaInfoResponse
 */
export type GetKafkaInfoResponse = Message<"redpanda.api.console.v1alpha1.GetKafkaInfoResponse"> & {
  /**
   * The health status for Kafka.
   *
   * @generated from field: redpanda.api.console.v1alpha1.ComponentStatus status = 1;
   */
  status?: ComponentStatus;

  /**
   * Version is the Kafka API version.
   *
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * Distribution indicates the software flavor (e.g. Apache Kafka, Redpanda).
   *
   * @generated from field: redpanda.api.console.v1alpha1.KafkaDistribution distribution = 3;
   */
  distribution: KafkaDistribution;

  /**
   * BrokersOnline is the number of brokers currently online.
   *
   * @generated from field: int32 brokers_online = 4;
   */
  brokersOnline: number;

  /**
   * BrokersExpected is the number of brokers expected.
   *
   * @generated from field: int32 brokers_expected = 5;
   */
  brokersExpected: number;

  /**
   * TopicsCount is the total number of topics.
   *
   * @generated from field: int32 topics_count = 6;
   */
  topicsCount: number;

  /**
   * PartitionsCount is the total number of partitions.
   *
   * @generated from field: int32 partitions_count = 7;
   */
  partitionsCount: number;

  /**
   * ReplicasCount is the total number of replicas.
   *
   * @generated from field: int32 replicas_count = 8;
   */
  replicasCount: number;

  /**
   * ControllerID is the ID of the controller broker.
   *
   * @generated from field: int32 controller_id = 9;
   */
  controllerId: number;

  /**
   * Brokers lists details of individual Kafka brokers.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.KafkaBroker brokers = 10;
   */
  brokers: KafkaBroker[];

  /**
   * ClusterID is the unique identifier for the Kafka cluster.
   *
   * @generated from field: string cluster_id = 11;
   */
  clusterId: string;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetKafkaInfoResponse.
 * Use `create(GetKafkaInfoResponseSchema)` to create a new message.
 */
export const GetKafkaInfoResponseSchema: GenMessage<GetKafkaInfoResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 1);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoRequest
 */
export type GetKafkaAuthorizerInfoRequest = Message<"redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoRequest"> & {
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoRequest.
 * Use `create(GetKafkaAuthorizerInfoRequestSchema)` to create a new message.
 */
export const GetKafkaAuthorizerInfoRequestSchema: GenMessage<GetKafkaAuthorizerInfoRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 2);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoResponse
 */
export type GetKafkaAuthorizerInfoResponse = Message<"redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoResponse"> & {
  /**
   * ACLCount is the number of ACLs created.
   *
   * @generated from field: int32 acl_count = 1;
   */
  aclCount: number;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoResponse.
 * Use `create(GetKafkaAuthorizerInfoResponseSchema)` to create a new message.
 */
export const GetKafkaAuthorizerInfoResponseSchema: GenMessage<GetKafkaAuthorizerInfoResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 3);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetRedpandaInfoRequest
 */
export type GetRedpandaInfoRequest = Message<"redpanda.api.console.v1alpha1.GetRedpandaInfoRequest"> & {
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetRedpandaInfoRequest.
 * Use `create(GetRedpandaInfoRequestSchema)` to create a new message.
 */
export const GetRedpandaInfoRequestSchema: GenMessage<GetRedpandaInfoRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 4);

/**
 * RedpandaInfo contains information provided by the Redpanda admin API.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetRedpandaInfoResponse
 */
export type GetRedpandaInfoResponse = Message<"redpanda.api.console.v1alpha1.GetRedpandaInfoResponse"> & {
  /**
   * Version is the Redpanda cluster version.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * UserCount is the number of users.
   *
   * @generated from field: int32 user_count = 2;
   */
  userCount: number;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetRedpandaInfoResponse.
 * Use `create(GetRedpandaInfoResponseSchema)` to create a new message.
 */
export const GetRedpandaInfoResponseSchema: GenMessage<GetRedpandaInfoResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 5);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusRequest
 */
export type GetRedpandaPartitionBalancerStatusRequest = Message<"redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusRequest"> & {
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusRequest.
 * Use `create(GetRedpandaPartitionBalancerStatusRequestSchema)` to create a new message.
 */
export const GetRedpandaPartitionBalancerStatusRequestSchema: GenMessage<GetRedpandaPartitionBalancerStatusRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 6);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse
 */
export type GetRedpandaPartitionBalancerStatusResponse = Message<"redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse"> & {
  /**
   * Status describes the current partition balancer state.
   *
   * @generated from field: redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Status status = 1;
   */
  status: GetRedpandaPartitionBalancerStatusResponse_Status;

  /**
   * Violations are the partition balancer violations.
   *
   * @generated from field: redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Violations violations = 2;
   */
  violations?: GetRedpandaPartitionBalancerStatusResponse_Violations;

  /**
   * SecondsSinceLastTick is the last time the partition balancer ran.
   *
   * @generated from field: int32 seconds_since_last_tick = 3;
   */
  secondsSinceLastTick: number;

  /**
   * CurrentReassignmentsCount is the current number of partition
   * reassignments in progress.
   *
   * @generated from field: int32 current_reassignments_count = 4;
   */
  currentReassignmentsCount: number;

  /**
   * PartitionsPendingForceRecovery specifies the number of partitions that
   * are yet to be force recovered. This is optional because not all Redpanda
   * versions include this parameter.
   *
   * @generated from field: optional int32 partitions_pending_force_recovery_count = 5;
   */
  partitionsPendingForceRecoveryCount?: number;

  /**
   * PartitionsPendingRecoveryList is a sample list of partitions pending
   * force recovery (limit capped to 10).
   *
   * @generated from field: repeated string partitions_pending_recovery_list = 6;
   */
  partitionsPendingRecoveryList: string[];
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.
 * Use `create(GetRedpandaPartitionBalancerStatusResponseSchema)` to create a new message.
 */
export const GetRedpandaPartitionBalancerStatusResponseSchema: GenMessage<GetRedpandaPartitionBalancerStatusResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 7);

/**
 * Violations describes violations for the partition auto balancer.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Violations
 */
export type GetRedpandaPartitionBalancerStatusResponse_Violations = Message<"redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Violations"> & {
  /**
   * UnavailableNodes are the nodes that have been unavailable after a time
   * set by 'partition_autobalancing_node_availability_timeout_sec' property.
   *
   * @generated from field: repeated int32 unavailable_nodes = 1;
   */
  unavailableNodes: number[];

  /**
   * OverDiskLimitNodes are the nodes that surpassed the threshold of used
   * disk percentage set by 'partition_autobalancing_max_disk_usage_percent'
   * property.
   *
   * @generated from field: repeated int32 over_disk_limit_nodes = 2;
   */
  overDiskLimitNodes: number[];
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Violations.
 * Use `create(GetRedpandaPartitionBalancerStatusResponse_ViolationsSchema)` to create a new message.
 */
export const GetRedpandaPartitionBalancerStatusResponse_ViolationsSchema: GenMessage<GetRedpandaPartitionBalancerStatusResponse_Violations> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 7, 0);

/**
 * @generated from enum redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Status
 */
export enum GetRedpandaPartitionBalancerStatusResponse_Status {
  /**
   * STATUS_UNSPECIFIED is the default type.
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The balancer is disabled.
   *
   * @generated from enum value: STATUS_OFF = 1;
   */
  OFF = 1,

  /**
   * The balancer is active but there is nothing to do.
   *
   * @generated from enum value: STATUS_READY = 2;
   */
  READY = 2,

  /**
   * The balancer is starting but has not run yet.
   *
   * @generated from enum value: STATUS_STARTING = 3;
   */
  STARTING = 3,

  /**
   * The balancer is active and is in the process of
   * scheduling partition movements.
   *
   * @generated from enum value: STATUS_IN_PROGRESS = 4;
   */
  IN_PROGRESS = 4,

  /**
   * There are some violations, but for some reason, the
   * balancer cannot make progress in mitigating them.
   *
   * @generated from enum value: STATUS_STALLED = 5;
   */
  STALLED = 5,
}

/**
 * Describes the enum redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Status.
 */
export const GetRedpandaPartitionBalancerStatusResponse_StatusSchema: GenEnum<GetRedpandaPartitionBalancerStatusResponse_Status> = /*@__PURE__*/
  enumDesc(file_redpanda_api_console_v1alpha1_cluster_status, 7, 0);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetConsoleInfoRequest
 */
export type GetConsoleInfoRequest = Message<"redpanda.api.console.v1alpha1.GetConsoleInfoRequest"> & {
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetConsoleInfoRequest.
 * Use `create(GetConsoleInfoRequestSchema)` to create a new message.
 */
export const GetConsoleInfoRequestSchema: GenMessage<GetConsoleInfoRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 8);

/**
 * ConsoleInfo contains version and build information about Redpanda Console.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetConsoleInfoResponse
 */
export type GetConsoleInfoResponse = Message<"redpanda.api.console.v1alpha1.GetConsoleInfoResponse"> & {
  /**
   * Console version.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * BuiltAt indicates the build time.
   *
   * @generated from field: string built_at = 2;
   */
  builtAt: string;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetConsoleInfoResponse.
 * Use `create(GetConsoleInfoResponseSchema)` to create a new message.
 */
export const GetConsoleInfoResponseSchema: GenMessage<GetConsoleInfoResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 9);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetKafkaConnectInfoRequest
 */
export type GetKafkaConnectInfoRequest = Message<"redpanda.api.console.v1alpha1.GetKafkaConnectInfoRequest"> & {
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetKafkaConnectInfoRequest.
 * Use `create(GetKafkaConnectInfoRequestSchema)` to create a new message.
 */
export const GetKafkaConnectInfoRequestSchema: GenMessage<GetKafkaConnectInfoRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 10);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse
 */
export type GetKafkaConnectInfoResponse = Message<"redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse"> & {
  /**
   * Clusters contains details for each Kafka Connect cluster.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse.KafkaConnectCluster clusters = 1;
   */
  clusters: GetKafkaConnectInfoResponse_KafkaConnectCluster[];
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse.
 * Use `create(GetKafkaConnectInfoResponseSchema)` to create a new message.
 */
export const GetKafkaConnectInfoResponseSchema: GenMessage<GetKafkaConnectInfoResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 11);

/**
 * KafkaConnectCluster represents a single Kafka Connect cluster.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse.KafkaConnectCluster
 */
export type GetKafkaConnectInfoResponse_KafkaConnectCluster = Message<"redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse.KafkaConnectCluster"> & {
  /**
   * Name is the Kafka Connect cluster name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Status indicates the health of the cluster.
   *
   * @generated from field: redpanda.api.console.v1alpha1.ComponentStatus status = 2;
   */
  status?: ComponentStatus;

  /**
   * Host is the address of the Kafka Connect cluster.
   *
   * @generated from field: string host = 3;
   */
  host: string;

  /**
   * Version is the version of the Kafka Connect cluster.
   *
   * @generated from field: string version = 4;
   */
  version: string;

  /**
   * InstalledPlugins is the number of plugins installed.
   *
   * @generated from field: int32 installed_plugins_count = 5;
   */
  installedPluginsCount: number;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse.KafkaConnectCluster.
 * Use `create(GetKafkaConnectInfoResponse_KafkaConnectClusterSchema)` to create a new message.
 */
export const GetKafkaConnectInfoResponse_KafkaConnectClusterSchema: GenMessage<GetKafkaConnectInfoResponse_KafkaConnectCluster> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 11, 0);

/**
 * @generated from message redpanda.api.console.v1alpha1.GetSchemaRegistryInfoRequest
 */
export type GetSchemaRegistryInfoRequest = Message<"redpanda.api.console.v1alpha1.GetSchemaRegistryInfoRequest"> & {
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetSchemaRegistryInfoRequest.
 * Use `create(GetSchemaRegistryInfoRequestSchema)` to create a new message.
 */
export const GetSchemaRegistryInfoRequestSchema: GenMessage<GetSchemaRegistryInfoRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 12);

/**
 * SchemaRegistryInfo contains information about the configured Schema Registry.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetSchemaRegistryInfoResponse
 */
export type GetSchemaRegistryInfoResponse = Message<"redpanda.api.console.v1alpha1.GetSchemaRegistryInfoResponse"> & {
  /**
   * Status indicates the health status of the Schema Registry.
   *
   * @generated from field: redpanda.api.console.v1alpha1.ComponentStatus status = 1;
   */
  status?: ComponentStatus;

  /**
   * RegisteredSubjectsCount is the number of subjects registered.
   *
   * @generated from field: int32 registered_subjects_count = 2;
   */
  registeredSubjectsCount: number;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.GetSchemaRegistryInfoResponse.
 * Use `create(GetSchemaRegistryInfoResponseSchema)` to create a new message.
 */
export const GetSchemaRegistryInfoResponseSchema: GenMessage<GetSchemaRegistryInfoResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 13);

/**
 * ComponentStatus provides health status information common to all components.
 *
 * @generated from message redpanda.api.console.v1alpha1.ComponentStatus
 */
export type ComponentStatus = Message<"redpanda.api.console.v1alpha1.ComponentStatus"> & {
  /**
   * Status is the overall health.
   *
   * @generated from field: redpanda.api.console.v1alpha1.StatusType status = 1;
   */
  status: StatusType;

  /**
   * StatusReason provides details if the component is not healthy.
   *
   * @generated from field: string status_reason = 2;
   */
  statusReason: string;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.ComponentStatus.
 * Use `create(ComponentStatusSchema)` to create a new message.
 */
export const ComponentStatusSchema: GenMessage<ComponentStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 14);

/**
 * KafkaBroker represents details about a single Kafka broker.
 *
 * @generated from message redpanda.api.console.v1alpha1.KafkaBroker
 */
export type KafkaBroker = Message<"redpanda.api.console.v1alpha1.KafkaBroker"> & {
  /**
   * BrokerID is the unique identifier of the broker.
   *
   * @generated from field: int32 broker_id = 1;
   */
  brokerId: number;

  /**
   * Host is the address or hostname of the broker.
   *
   * @generated from field: string host = 2;
   */
  host: string;

  /**
   * RackID (availability zone) configured for this broker.
   *
   * @generated from field: optional string rack_id = 3;
   */
  rackId?: string;
};

/**
 * Describes the message redpanda.api.console.v1alpha1.KafkaBroker.
 * Use `create(KafkaBrokerSchema)` to create a new message.
 */
export const KafkaBrokerSchema: GenMessage<KafkaBroker> = /*@__PURE__*/
  messageDesc(file_redpanda_api_console_v1alpha1_cluster_status, 15);

/**
 * StatusType describes the health state of a component.
 *
 * @generated from enum redpanda.api.console.v1alpha1.StatusType
 */
export enum StatusType {
  /**
   * STATUS_TYPE_UNSPECIFIED is the default value.
   *
   * @generated from enum value: STATUS_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * STATUS_TYPE_HEALTHY indicates the component is healthy.
   *
   * @generated from enum value: STATUS_TYPE_HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * STATUS_TYPE_DEGRADED indicates the component is partially impaired.
   *
   * @generated from enum value: STATUS_TYPE_DEGRADED = 2;
   */
  DEGRADED = 2,

  /**
   * STATUS_TYPE_UNHEALTHY indicates the component is unhealthy or unreachable.
   *
   * @generated from enum value: STATUS_TYPE_UNHEALTHY = 3;
   */
  UNHEALTHY = 3,
}

/**
 * Describes the enum redpanda.api.console.v1alpha1.StatusType.
 */
export const StatusTypeSchema: GenEnum<StatusType> = /*@__PURE__*/
  enumDesc(file_redpanda_api_console_v1alpha1_cluster_status, 0);

/**
 * KafkaDistribution describes the Kafka software flavor.
 *
 * @generated from enum redpanda.api.console.v1alpha1.KafkaDistribution
 */
export enum KafkaDistribution {
  /**
   * KAFKA_DISTRIBUTION_UNSPECIFIED is the default value.
   *
   * @generated from enum value: KAFKA_DISTRIBUTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * KAFKA_DISTRIBUTION_UNKNOWN represents a Kafka distribution that is neither Redpanda
   * nor Apache Kafka.
   *
   * @generated from enum value: KAFKA_DISTRIBUTION_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * KAFKA_DISTRIBUTION_APACHE_KAFKA indicates an Apache Kafka implementation.
   *
   * @generated from enum value: KAFKA_DISTRIBUTION_APACHE_KAFKA = 2;
   */
  APACHE_KAFKA = 2,

  /**
   * KAFKA_DISTRIBUTION_REDPANDA indicates a Redpanda implementation.
   *
   * @generated from enum value: KAFKA_DISTRIBUTION_REDPANDA = 3;
   */
  REDPANDA = 3,
}

/**
 * Describes the enum redpanda.api.console.v1alpha1.KafkaDistribution.
 */
export const KafkaDistributionSchema: GenEnum<KafkaDistribution> = /*@__PURE__*/
  enumDesc(file_redpanda_api_console_v1alpha1_cluster_status, 1);

/**
 * @generated from enum redpanda.api.console.v1alpha1.LicenseType
 */
export enum LicenseType {
  /**
   * @generated from enum value: LICENSE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LICENSE_TYPE_COMMUNITY = 1;
   */
  COMMUNITY = 1,

  /**
   * @generated from enum value: LICENSE_TYPE_ENTERPRISE = 2;
   */
  ENTERPRISE = 2,

  /**
   * @generated from enum value: LICENSE_TYPE_TRIAL = 3;
   */
  TRIAL = 3,
}

/**
 * Describes the enum redpanda.api.console.v1alpha1.LicenseType.
 */
export const LicenseTypeSchema: GenEnum<LicenseType> = /*@__PURE__*/
  enumDesc(file_redpanda_api_console_v1alpha1_cluster_status, 2);

/**
 * @generated from enum redpanda.api.console.v1alpha1.LicenseSource
 */
export enum LicenseSource {
  /**
   * @generated from enum value: LICENSE_SOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LICENSE_SOURCE_CLUSTER = 1;
   */
  CLUSTER = 1,

  /**
   * @generated from enum value: LICENSE_SOURCE_CONSOLE = 2;
   */
  CONSOLE = 2,
}

/**
 * Describes the enum redpanda.api.console.v1alpha1.LicenseSource.
 */
export const LicenseSourceSchema: GenEnum<LicenseSource> = /*@__PURE__*/
  enumDesc(file_redpanda_api_console_v1alpha1_cluster_status, 3);

/**
 * ClusterStatusService provides atomic endpoints to retrieve status
 * information for each cluster component. Each RPC returns a complete
 * resource or a proper gRPC error if the underlying check failed.
 *
 * @generated from service redpanda.api.console.v1alpha1.ClusterStatusService
 */
export const ClusterStatusService: GenService<{
  /**
   * GetKafkaInfo returns general Kafka cluster information that can be
   * retrieved via the Kafka API.
   *
   * @generated from rpc redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaInfo
   */
  getKafkaInfo: {
    methodKind: "unary";
    input: typeof GetKafkaInfoRequestSchema;
    output: typeof GetKafkaInfoResponseSchema;
  },
  /**
   * GetKafkaAuthorizerInfo returns information about Kafka's authorizer.
   * If the authorizer cannot be queried (for example due to permission errors),
   * this RPC should return a gRPC error.
   *
   * @generated from rpc redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaAuthorizerInfo
   */
  getKafkaAuthorizerInfo: {
    methodKind: "unary";
    input: typeof GetKafkaAuthorizerInfoRequestSchema;
    output: typeof GetKafkaAuthorizerInfoResponseSchema;
  },
  /**
   * GetRedpandaInfo returns information from the Redpanda admin API.
   *
   * @generated from rpc redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaInfo
   */
  getRedpandaInfo: {
    methodKind: "unary";
    input: typeof GetRedpandaInfoRequestSchema;
    output: typeof GetRedpandaInfoResponseSchema;
  },
  /**
   * @generated from rpc redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaPartitionBalancerStatus
   */
  getRedpandaPartitionBalancerStatus: {
    methodKind: "unary";
    input: typeof GetRedpandaPartitionBalancerStatusRequestSchema;
    output: typeof GetRedpandaPartitionBalancerStatusResponseSchema;
  },
  /**
   * GetConsoleInfo returns version and build information about the Console.
   *
   * @generated from rpc redpanda.api.console.v1alpha1.ClusterStatusService.GetConsoleInfo
   */
  getConsoleInfo: {
    methodKind: "unary";
    input: typeof GetConsoleInfoRequestSchema;
    output: typeof GetConsoleInfoResponseSchema;
  },
  /**
   * GetKafkaConnectInfo returns information about the configured Kafka Connect clusters.
   *
   * @generated from rpc redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaConnectInfo
   */
  getKafkaConnectInfo: {
    methodKind: "unary";
    input: typeof GetKafkaConnectInfoRequestSchema;
    output: typeof GetKafkaConnectInfoResponseSchema;
  },
  /**
   * GetSchemaRegistryInfo returns information about the Schema Registry.
   *
   * @generated from rpc redpanda.api.console.v1alpha1.ClusterStatusService.GetSchemaRegistryInfo
   */
  getSchemaRegistryInfo: {
    methodKind: "unary";
    input: typeof GetSchemaRegistryInfoRequestSchema;
    output: typeof GetSchemaRegistryInfoResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_console_v1alpha1_cluster_status, 0);

