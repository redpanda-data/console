// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/core/admin/v2/shadow_link.proto (package redpanda.core.admin.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_redpanda_pbgen_options } from "../../../pbgen/options_pb";
import { file_redpanda_pbgen_rpc } from "../../../pbgen/rpc_pb";
import type { ACLOperation, ACLPattern, ACLPermissionType, ACLResource } from "../../common/acl_pb";
import { file_redpanda_core_common_acl } from "../../common/acl_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_google_api_field_info } from "../../../../google/api/field_info_pb";
import { file_google_api_resource } from "../../../../google/api/resource_pb";
import type { Duration, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/core/admin/v2/shadow_link.proto.
 */
export const file_redpanda_core_admin_v2_shadow_link: GenFile = /*@__PURE__*/
  fileDesc("", [file_redpanda_pbgen_options, file_redpanda_pbgen_rpc, file_redpanda_core_common_acl, file_google_api_field_behavior, file_google_api_field_info, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_timestamp, file_google_protobuf_field_mask]);

/**
 * A ShadowLink resource
 *
 * @generated from message redpanda.core.admin.v2.ShadowLink
 */
export type ShadowLink = Message<"redpanda.core.admin.v2.ShadowLink"> & {
  /**
   * The name of the shadow link
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The UUID of the shadow link
   *
   * @generated from field: string uid = 2;
   */
  uid: string;

  /**
   * Shadow link configuration
   *
   * @generated from field: redpanda.core.admin.v2.ShadowLinkConfigurations configurations = 3;
   */
  configurations?: ShadowLinkConfigurations;

  /**
   * Status of the shadow link
   *
   * @generated from field: redpanda.core.admin.v2.ShadowLinkStatus status = 4;
   */
  status?: ShadowLinkStatus;
};

/**
 * Describes the message redpanda.core.admin.v2.ShadowLink.
 * Use `create(ShadowLinkSchema)` to create a new message.
 */
export const ShadowLinkSchema: GenMessage<ShadowLink> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 0);

/**
 * Create a new shadow link
 *
 * @generated from message redpanda.core.admin.v2.CreateShadowLinkRequest
 */
export type CreateShadowLinkRequest = Message<"redpanda.core.admin.v2.CreateShadowLinkRequest"> & {
  /**
   * The shadow link to create
   *
   * @generated from field: redpanda.core.admin.v2.ShadowLink shadow_link = 1;
   */
  shadowLink?: ShadowLink;
};

/**
 * Describes the message redpanda.core.admin.v2.CreateShadowLinkRequest.
 * Use `create(CreateShadowLinkRequestSchema)` to create a new message.
 */
export const CreateShadowLinkRequestSchema: GenMessage<CreateShadowLinkRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 1);

/**
 * Response to creating a shadow link
 *
 * @generated from message redpanda.core.admin.v2.CreateShadowLinkResponse
 */
export type CreateShadowLinkResponse = Message<"redpanda.core.admin.v2.CreateShadowLinkResponse"> & {
  /**
   * The shadow link that was created
   *
   * @generated from field: redpanda.core.admin.v2.ShadowLink shadow_link = 1;
   */
  shadowLink?: ShadowLink;
};

/**
 * Describes the message redpanda.core.admin.v2.CreateShadowLinkResponse.
 * Use `create(CreateShadowLinkResponseSchema)` to create a new message.
 */
export const CreateShadowLinkResponseSchema: GenMessage<CreateShadowLinkResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 2);

/**
 * Request to delete a shadow link
 *
 * @generated from message redpanda.core.admin.v2.DeleteShadowLinkRequest
 */
export type DeleteShadowLinkRequest = Message<"redpanda.core.admin.v2.DeleteShadowLinkRequest"> & {
  /**
   * The name of the link to delete
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message redpanda.core.admin.v2.DeleteShadowLinkRequest.
 * Use `create(DeleteShadowLinkRequestSchema)` to create a new message.
 */
export const DeleteShadowLinkRequestSchema: GenMessage<DeleteShadowLinkRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 3);

/**
 * Response to deleting a shadow link
 *
 * @generated from message redpanda.core.admin.v2.DeleteShadowLinkResponse
 */
export type DeleteShadowLinkResponse = Message<"redpanda.core.admin.v2.DeleteShadowLinkResponse"> & {
};

/**
 * Describes the message redpanda.core.admin.v2.DeleteShadowLinkResponse.
 * Use `create(DeleteShadowLinkResponseSchema)` to create a new message.
 */
export const DeleteShadowLinkResponseSchema: GenMessage<DeleteShadowLinkResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 4);

/**
 * Request to get the information about a shadow link
 *
 * @generated from message redpanda.core.admin.v2.GetShadowLinkRequest
 */
export type GetShadowLinkRequest = Message<"redpanda.core.admin.v2.GetShadowLinkRequest"> & {
  /**
   * The name of the shadow link to get
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message redpanda.core.admin.v2.GetShadowLinkRequest.
 * Use `create(GetShadowLinkRequestSchema)` to create a new message.
 */
export const GetShadowLinkRequestSchema: GenMessage<GetShadowLinkRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 5);

/**
 * Response to getting a shadow link
 *
 * @generated from message redpanda.core.admin.v2.GetShadowLinkResponse
 */
export type GetShadowLinkResponse = Message<"redpanda.core.admin.v2.GetShadowLinkResponse"> & {
  /**
   * The shadow link that was retrieved
   *
   * @generated from field: redpanda.core.admin.v2.ShadowLink shadow_link = 1;
   */
  shadowLink?: ShadowLink;
};

/**
 * Describes the message redpanda.core.admin.v2.GetShadowLinkResponse.
 * Use `create(GetShadowLinkResponseSchema)` to create a new message.
 */
export const GetShadowLinkResponseSchema: GenMessage<GetShadowLinkResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 6);

/**
 * Request to list all shadow links
 *
 * @generated from message redpanda.core.admin.v2.ListShadowLinksRequest
 */
export type ListShadowLinksRequest = Message<"redpanda.core.admin.v2.ListShadowLinksRequest"> & {
};

/**
 * Describes the message redpanda.core.admin.v2.ListShadowLinksRequest.
 * Use `create(ListShadowLinksRequestSchema)` to create a new message.
 */
export const ListShadowLinksRequestSchema: GenMessage<ListShadowLinksRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 7);

/**
 * All shadow links on the cluster
 *
 * @generated from message redpanda.core.admin.v2.ListShadowLinksResponse
 */
export type ListShadowLinksResponse = Message<"redpanda.core.admin.v2.ListShadowLinksResponse"> & {
  /**
   * The shadow links
   *
   * @generated from field: repeated redpanda.core.admin.v2.ShadowLink shadow_links = 1;
   */
  shadowLinks: ShadowLink[];
};

/**
 * Describes the message redpanda.core.admin.v2.ListShadowLinksResponse.
 * Use `create(ListShadowLinksResponseSchema)` to create a new message.
 */
export const ListShadowLinksResponseSchema: GenMessage<ListShadowLinksResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 8);

/**
 * Updates a shadow link
 *
 * @generated from message redpanda.core.admin.v2.UpdateShadowLinkRequest
 */
export type UpdateShadowLinkRequest = Message<"redpanda.core.admin.v2.UpdateShadowLinkRequest"> & {
  /**
   * The shadow link to update
   *
   * @generated from field: redpanda.core.admin.v2.ShadowLink shadow_link = 1;
   */
  shadowLink?: ShadowLink;

  /**
   * The list of fields to update
   * See [AIP-134](https://google.aip.dev/134) for how to use `field_mask`
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message redpanda.core.admin.v2.UpdateShadowLinkRequest.
 * Use `create(UpdateShadowLinkRequestSchema)` to create a new message.
 */
export const UpdateShadowLinkRequestSchema: GenMessage<UpdateShadowLinkRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 9);

/**
 * Response to the update shadow link request
 *
 * @generated from message redpanda.core.admin.v2.UpdateShadowLinkResponse
 */
export type UpdateShadowLinkResponse = Message<"redpanda.core.admin.v2.UpdateShadowLinkResponse"> & {
  /**
   * The shadow link that was updated
   *
   * @generated from field: redpanda.core.admin.v2.ShadowLink shadow_link = 1;
   */
  shadowLink?: ShadowLink;
};

/**
 * Describes the message redpanda.core.admin.v2.UpdateShadowLinkResponse.
 * Use `create(UpdateShadowLinkResponseSchema)` to create a new message.
 */
export const UpdateShadowLinkResponseSchema: GenMessage<UpdateShadowLinkResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 10);

/**
 * Request to fail over a shadow link or a single shadow topic
 *
 * @generated from message redpanda.core.admin.v2.FailOverRequest
 */
export type FailOverRequest = Message<"redpanda.core.admin.v2.FailOverRequest"> & {
  /**
   * The name of the shadow link to fail over
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The name of the shadow topic to fail over, if not set will fail over
   * the entire shadow link
   *
   * @generated from field: string shadow_topic_name = 2;
   */
  shadowTopicName: string;
};

/**
 * Describes the message redpanda.core.admin.v2.FailOverRequest.
 * Use `create(FailOverRequestSchema)` to create a new message.
 */
export const FailOverRequestSchema: GenMessage<FailOverRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 11);

/**
 * The response to the FailOverRequest
 *
 * @generated from message redpanda.core.admin.v2.FailOverResponse
 */
export type FailOverResponse = Message<"redpanda.core.admin.v2.FailOverResponse"> & {
  /**
   * The shadow link that was failed over
   *
   * @generated from field: redpanda.core.admin.v2.ShadowLink shadow_link = 1;
   */
  shadowLink?: ShadowLink;
};

/**
 * Describes the message redpanda.core.admin.v2.FailOverResponse.
 * Use `create(FailOverResponseSchema)` to create a new message.
 */
export const FailOverResponseSchema: GenMessage<FailOverResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 12);

/**
 * ShadowLink options
 *
 * @generated from message redpanda.core.admin.v2.ShadowLinkConfigurations
 */
export type ShadowLinkConfigurations = Message<"redpanda.core.admin.v2.ShadowLinkConfigurations"> & {
  /**
   * Configuration for the internal kafka client
   *
   * @generated from field: redpanda.core.admin.v2.ShadowLinkClientOptions client_options = 1;
   */
  clientOptions?: ShadowLinkClientOptions;

  /**
   * Topic metadata sync options
   *
   * @generated from field: redpanda.core.admin.v2.TopicMetadataSyncOptions topic_metadata_sync_options = 2;
   */
  topicMetadataSyncOptions?: TopicMetadataSyncOptions;

  /**
   * Consumer offset sync options
   *
   * @generated from field: redpanda.core.admin.v2.ConsumerOffsetSyncOptions consumer_offset_sync_options = 3;
   */
  consumerOffsetSyncOptions?: ConsumerOffsetSyncOptions;

  /**
   * Security settings sync options
   *
   * @generated from field: redpanda.core.admin.v2.SecuritySettingsSyncOptions security_sync_options = 4;
   */
  securitySyncOptions?: SecuritySettingsSyncOptions;
};

/**
 * Describes the message redpanda.core.admin.v2.ShadowLinkConfigurations.
 * Use `create(ShadowLinkConfigurationsSchema)` to create a new message.
 */
export const ShadowLinkConfigurationsSchema: GenMessage<ShadowLinkConfigurations> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 13);

/**
 * Options for the client link
 *
 * @generated from message redpanda.core.admin.v2.ShadowLinkClientOptions
 */
export type ShadowLinkClientOptions = Message<"redpanda.core.admin.v2.ShadowLinkClientOptions"> & {
  /**
   * The bootstrap servers to use
   *
   * @generated from field: repeated string bootstrap_servers = 1;
   */
  bootstrapServers: string[];

  /**
   * The Client ID for the Kafka RPC requests setn by this cluster to the
   * source cluster
   *
   * @generated from field: string client_id = 2;
   */
  clientId: string;

  /**
   * If provided, this is the expected ID of the source cluster.  If it does
   * not match then the connection will be rejected.  If provided, this value
   * must match the `ClusterId` field returned in the Kafka Metadata response
   * message
   *
   * @generated from field: string source_cluster_id = 3;
   */
  sourceClusterId: string;

  /**
   * TLS settings
   *
   * @generated from field: optional redpanda.core.admin.v2.TLSSettings tls_settings = 4;
   */
  tlsSettings?: TLSSettings;

  /**
   * Authentication settings
   *
   * @generated from field: optional redpanda.core.admin.v2.AuthenticationConfiguration authentication_configuration = 5;
   */
  authenticationConfiguration?: AuthenticationConfiguration;

  /**
   * Max metadata age
   * If 0 is provided, defaults to 10 seconds
   *
   * @generated from field: int32 metadata_max_age_ms = 6;
   */
  metadataMaxAgeMs: number;

  /**
   * Connection timeout
   * If 0 is provided, defaults to 1 second
   *
   * @generated from field: int32 connection_timeout_ms = 7;
   */
  connectionTimeoutMs: number;

  /**
   * Retry base backoff
   * If 0 is provided, defaults to 100ms
   *
   * @generated from field: int32 retry_backoff_ms = 8;
   */
  retryBackoffMs: number;

  /**
   * Fetch request timeout
   * If 0 is provided, defaults to 100ms
   *
   * @generated from field: int32 fetch_wait_max_ms = 9;
   */
  fetchWaitMaxMs: number;

  /**
   * Fetch min bytes
   * If 0 is provided, defaults to 1 byte
   *
   * @generated from field: int32 fetch_min_bytes = 10;
   */
  fetchMinBytes: number;

  /**
   * Fetch max bytes
   * If 0 is provided, defaults to 1MiB
   *
   * @generated from field: int32 fetch_max_bytes = 11;
   */
  fetchMaxBytes: number;
};

/**
 * Describes the message redpanda.core.admin.v2.ShadowLinkClientOptions.
 * Use `create(ShadowLinkClientOptionsSchema)` to create a new message.
 */
export const ShadowLinkClientOptionsSchema: GenMessage<ShadowLinkClientOptions> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 14);

/**
 * Options for syncing topic metadata
 *
 * @generated from message redpanda.core.admin.v2.TopicMetadataSyncOptions
 */
export type TopicMetadataSyncOptions = Message<"redpanda.core.admin.v2.TopicMetadataSyncOptions"> & {
  /**
   * How often to sync metadata
   * If 0 provided, defaults to 30 seconds
   *
   * @generated from field: google.protobuf.Duration interval = 1;
   */
  interval?: Duration;

  /**
   * List of filters that indicate which topics should be automatically
   * created as shadow topics on the shadow cluster.  This only controls
   * automatic creation of shadow topics and does not effect the state of the
   * mirror topic once it is created.
   *
   * @generated from field: repeated redpanda.core.admin.v2.NameFilter auto_create_shadow_topic_filters = 2;
   */
  autoCreateShadowTopicFilters: NameFilter[];

  /**
   * Additional topic properties to shadow
   * Partition count, `max.message.bytes`, `cleanup.policy` and
   * `timestamp.type` will always be replicated
   *
   * @generated from field: repeated string shadowed_topic_properties = 3;
   */
  shadowedTopicProperties: string[];
};

/**
 * Describes the message redpanda.core.admin.v2.TopicMetadataSyncOptions.
 * Use `create(TopicMetadataSyncOptionsSchema)` to create a new message.
 */
export const TopicMetadataSyncOptionsSchema: GenMessage<TopicMetadataSyncOptions> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 15);

/**
 * Options for syncing consumer offsets
 *
 * @generated from message redpanda.core.admin.v2.ConsumerOffsetSyncOptions
 */
export type ConsumerOffsetSyncOptions = Message<"redpanda.core.admin.v2.ConsumerOffsetSyncOptions"> & {
  /**
   * Sync interval
   * If 0 provided, defaults to 30 seconds
   *
   * @generated from field: google.protobuf.Duration interval = 1;
   */
  interval?: Duration;

  /**
   * Whether it's enabled
   *
   * @generated from field: bool enabled = 2;
   */
  enabled: boolean;

  /**
   * The filters
   *
   * @generated from field: repeated redpanda.core.admin.v2.NameFilter group_filters = 3;
   */
  groupFilters: NameFilter[];
};

/**
 * Describes the message redpanda.core.admin.v2.ConsumerOffsetSyncOptions.
 * Use `create(ConsumerOffsetSyncOptionsSchema)` to create a new message.
 */
export const ConsumerOffsetSyncOptionsSchema: GenMessage<ConsumerOffsetSyncOptions> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 16);

/**
 * Options for syncing security settings
 *
 * @generated from message redpanda.core.admin.v2.SecuritySettingsSyncOptions
 */
export type SecuritySettingsSyncOptions = Message<"redpanda.core.admin.v2.SecuritySettingsSyncOptions"> & {
  /**
   * Sync interval
   * If 0 provided, defaults to 30 seconds
   *
   * @generated from field: google.protobuf.Duration interval = 1;
   */
  interval?: Duration;

  /**
   * Whether or not it's enabled
   *
   * @generated from field: bool enabled = 2;
   */
  enabled: boolean;

  /**
   * Role filters
   *
   * @generated from field: repeated redpanda.core.admin.v2.NameFilter role_filters = 3;
   */
  roleFilters: NameFilter[];

  /**
   * SCRAM credential filters
   *
   * @generated from field: repeated redpanda.core.admin.v2.NameFilter scram_cred_filters = 4;
   */
  scramCredFilters: NameFilter[];

  /**
   * ACL filters
   *
   * @generated from field: repeated redpanda.core.admin.v2.ACLFilter acl_filters = 5;
   */
  aclFilters: ACLFilter[];
};

/**
 * Describes the message redpanda.core.admin.v2.SecuritySettingsSyncOptions.
 * Use `create(SecuritySettingsSyncOptionsSchema)` to create a new message.
 */
export const SecuritySettingsSyncOptionsSchema: GenMessage<SecuritySettingsSyncOptions> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 17);

/**
 * TLS settings
 *
 * @generated from message redpanda.core.admin.v2.TLSSettings
 */
export type TLSSettings = Message<"redpanda.core.admin.v2.TLSSettings"> & {
  /**
   * Whether or not TLS is enabled
   *
   * @generated from field: bool enabled = 3;
   */
  enabled: boolean;

  /**
   * May provide TLS as a set of files or PEM values
   *
   * @generated from oneof redpanda.core.admin.v2.TLSSettings.tls_settings
   */
  tlsSettings: {
    /**
     * Certificates and keys are provided as files
     *
     * @generated from field: redpanda.core.admin.v2.TLSFileSettings tls_file_settings = 1;
     */
    value: TLSFileSettings;
    case: "tlsFileSettings";
  } | {
    /**
     * Certificates and keys are provided in PEM format
     *
     * @generated from field: redpanda.core.admin.v2.TLSPEMSettings tls_pem_settings = 2;
     */
    value: TLSPEMSettings;
    case: "tlsPemSettings";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message redpanda.core.admin.v2.TLSSettings.
 * Use `create(TLSSettingsSchema)` to create a new message.
 */
export const TLSSettingsSchema: GenMessage<TLSSettings> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 18);

/**
 * Authentication config.  Currently only supporting SASL/SCRAM,
 * however made as a oneof for expansion
 *
 * @generated from message redpanda.core.admin.v2.AuthenticationConfiguration
 */
export type AuthenticationConfiguration = Message<"redpanda.core.admin.v2.AuthenticationConfiguration"> & {
  /**
   * @generated from oneof redpanda.core.admin.v2.AuthenticationConfiguration.authentication
   */
  authentication: {
    /**
     * SASL/SCRAM configuration
     *
     * @generated from field: redpanda.core.admin.v2.ScramConfig scram_configuration = 1;
     */
    value: ScramConfig;
    case: "scramConfiguration";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message redpanda.core.admin.v2.AuthenticationConfiguration.
 * Use `create(AuthenticationConfigurationSchema)` to create a new message.
 */
export const AuthenticationConfigurationSchema: GenMessage<AuthenticationConfiguration> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 19);

/**
 * TLS file settings
 *
 * @generated from message redpanda.core.admin.v2.TLSFileSettings
 */
export type TLSFileSettings = Message<"redpanda.core.admin.v2.TLSFileSettings"> & {
  /**
   * Path to the CA
   *
   * @generated from field: string ca_path = 1;
   */
  caPath: string;

  /**
   * Key and Cert are optional but if one is provided, then both must be
   * Path to the key
   *
   * @generated from field: string key_path = 2;
   */
  keyPath: string;

  /**
   * Path to the cert
   *
   * @generated from field: string cert_path = 3;
   */
  certPath: string;
};

/**
 * Describes the message redpanda.core.admin.v2.TLSFileSettings.
 * Use `create(TLSFileSettingsSchema)` to create a new message.
 */
export const TLSFileSettingsSchema: GenMessage<TLSFileSettings> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 20);

/**
 * Used when providing the TLS information in PEM format
 *
 * @generated from message redpanda.core.admin.v2.TLSPEMSettings
 */
export type TLSPEMSettings = Message<"redpanda.core.admin.v2.TLSPEMSettings"> & {
  /**
   * The CA
   *
   * @generated from field: string ca = 1;
   */
  ca: string;

  /**
   * Key and Cert are optional but if one is provided, then both must be
   * The key
   *
   * @generated from field: string key = 2;
   */
  key: string;

  /**
   * The SHA-256 of the key, in base64 format
   *
   * @generated from field: string key_fingerprint = 3;
   */
  keyFingerprint: string;

  /**
   * The cert
   *
   * @generated from field: string cert = 4;
   */
  cert: string;
};

/**
 * Describes the message redpanda.core.admin.v2.TLSPEMSettings.
 * Use `create(TLSPEMSettingsSchema)` to create a new message.
 */
export const TLSPEMSettingsSchema: GenMessage<TLSPEMSettings> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 21);

/**
 * SCRAM settings
 *
 * @generated from message redpanda.core.admin.v2.ScramConfig
 */
export type ScramConfig = Message<"redpanda.core.admin.v2.ScramConfig"> & {
  /**
   * SCRAM username
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * Password
   *
   * @generated from field: string password = 2;
   */
  password: string;

  /**
   * Indicates that the password has been set
   *
   * @generated from field: bool password_set = 3;
   */
  passwordSet: boolean;

  /**
   * Timestamp of when the password was last set - only valid if password_set
   * is true
   *
   * @generated from field: google.protobuf.Timestamp password_set_at = 4;
   */
  passwordSetAt?: Timestamp;

  /**
   * The SCRAM mechanism to use
   *
   * @generated from field: redpanda.core.admin.v2.ScramMechanism scram_mechanism = 5;
   */
  scramMechanism: ScramMechanism;
};

/**
 * Describes the message redpanda.core.admin.v2.ScramConfig.
 * Use `create(ScramConfigSchema)` to create a new message.
 */
export const ScramConfigSchema: GenMessage<ScramConfig> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 22);

/**
 * A filter based on the name of a resource
 *
 * @generated from message redpanda.core.admin.v2.NameFilter
 */
export type NameFilter = Message<"redpanda.core.admin.v2.NameFilter"> & {
  /**
   * Literal or prefix
   *
   * @generated from field: redpanda.core.admin.v2.PatternType pattern_type = 1;
   */
  patternType: PatternType;

  /**
   * Include or exclude
   *
   * @generated from field: redpanda.core.admin.v2.FilterType filter_type = 2;
   */
  filterType: FilterType;

  /**
   * The resource name, or "*"
   * Note if "*", must be the _only_ character
   * and `pattern_type` must be `PATTERN_TYPE_LITERAL`
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message redpanda.core.admin.v2.NameFilter.
 * Use `create(NameFilterSchema)` to create a new message.
 */
export const NameFilterSchema: GenMessage<NameFilter> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 23);

/**
 * A filter for ACLs
 *
 * @generated from message redpanda.core.admin.v2.ACLFilter
 */
export type ACLFilter = Message<"redpanda.core.admin.v2.ACLFilter"> & {
  /**
   * The resource filter
   *
   * @generated from field: redpanda.core.admin.v2.ACLResourceFilter resource_filter = 1;
   */
  resourceFilter?: ACLResourceFilter;

  /**
   * The access filter
   *
   * @generated from field: redpanda.core.admin.v2.ACLAccessFilter access_filter = 2;
   */
  accessFilter?: ACLAccessFilter;
};

/**
 * Describes the message redpanda.core.admin.v2.ACLFilter.
 * Use `create(ACLFilterSchema)` to create a new message.
 */
export const ACLFilterSchema: GenMessage<ACLFilter> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 24);

/**
 * A filter to match ACLs for resources
 *
 * @generated from message redpanda.core.admin.v2.ACLResourceFilter
 */
export type ACLResourceFilter = Message<"redpanda.core.admin.v2.ACLResourceFilter"> & {
  /**
   * The ACL resource type to match
   *
   * @generated from field: redpanda.core.common.ACLResource resource_type = 1;
   */
  resourceType: ACLResource;

  /**
   * The pattern to apply to name
   *
   * @generated from field: redpanda.core.common.ACLPattern pattern_type = 2;
   */
  patternType: ACLPattern;

  /**
   * Name, if not given will default to match all items in `resource_type`.
   * Note that asterisk `*` is literal and matches resource ACLs
   * that are named `*`
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message redpanda.core.admin.v2.ACLResourceFilter.
 * Use `create(ACLResourceFilterSchema)` to create a new message.
 */
export const ACLResourceFilterSchema: GenMessage<ACLResourceFilter> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 25);

/**
 * Filter an ACL based on its access
 *
 * @generated from message redpanda.core.admin.v2.ACLAccessFilter
 */
export type ACLAccessFilter = Message<"redpanda.core.admin.v2.ACLAccessFilter"> & {
  /**
   * The name of the principal, if not set will default to match
   * all principals with the specified `operation` and `permission_type`
   *
   * @generated from field: string principal = 1;
   */
  principal: string;

  /**
   * The ACL operation to match
   *
   * @generated from field: redpanda.core.common.ACLOperation operation = 2;
   */
  operation: ACLOperation;

  /**
   * The permission type
   *
   * @generated from field: redpanda.core.common.ACLPermissionType permission_type = 3;
   */
  permissionType: ACLPermissionType;

  /**
   * The host to match.  If not set, will default to match all hosts
   * with the specified `operation` and `permission_type`. Note that
   * the asterisk `*` is literal and matches hosts that are set to `*`
   *
   * @generated from field: string host = 4;
   */
  host: string;
};

/**
 * Describes the message redpanda.core.admin.v2.ACLAccessFilter.
 * Use `create(ACLAccessFilterSchema)` to create a new message.
 */
export const ACLAccessFilterSchema: GenMessage<ACLAccessFilter> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 26);

/**
 * Status of the shadow link
 *
 * @generated from message redpanda.core.admin.v2.ShadowLinkStatus
 */
export type ShadowLinkStatus = Message<"redpanda.core.admin.v2.ShadowLinkStatus"> & {
  /**
   * @generated from field: redpanda.core.admin.v2.ShadowLinkState state = 1;
   */
  state: ShadowLinkState;

  /**
   * Statuses of the running tasks
   *
   * @generated from field: repeated redpanda.core.admin.v2.ShadowLinkTaskStatus task_statuses = 2;
   */
  taskStatuses: ShadowLinkTaskStatus[];

  /**
   * Status of shadow topics
   *
   * @generated from field: repeated redpanda.core.admin.v2.ShadowTopicStatus shadow_topic_statuses = 3;
   */
  shadowTopicStatuses: ShadowTopicStatus[];
};

/**
 * Describes the message redpanda.core.admin.v2.ShadowLinkStatus.
 * Use `create(ShadowLinkStatusSchema)` to create a new message.
 */
export const ShadowLinkStatusSchema: GenMessage<ShadowLinkStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 27);

/**
 * Status of a task
 *
 * @generated from message redpanda.core.admin.v2.ShadowLinkTaskStatus
 */
export type ShadowLinkTaskStatus = Message<"redpanda.core.admin.v2.ShadowLinkTaskStatus"> & {
  /**
   * Name of the task
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * State of the task
   *
   * @generated from field: redpanda.core.admin.v2.TaskState state = 2;
   */
  state: TaskState;

  /**
   * Reason for task being in state
   *
   * @generated from field: string reason = 3;
   */
  reason: string;

  /**
   * The broker the task is running on
   *
   * @generated from field: int32 broker_id = 4;
   */
  brokerId: number;
};

/**
 * Describes the message redpanda.core.admin.v2.ShadowLinkTaskStatus.
 * Use `create(ShadowLinkTaskStatusSchema)` to create a new message.
 */
export const ShadowLinkTaskStatusSchema: GenMessage<ShadowLinkTaskStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 28);

/**
 * Status of a ShadowTopic
 *
 * @generated from message redpanda.core.admin.v2.ShadowTopicStatus
 */
export type ShadowTopicStatus = Message<"redpanda.core.admin.v2.ShadowTopicStatus"> & {
  /**
   * Name of the shadow topic
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Topic ID of the shadow topic
   *
   * @generated from field: string topic_id = 2;
   */
  topicId: string;

  /**
   * State of the shadow topic
   *
   * @generated from field: redpanda.core.admin.v2.ShadowTopicState state = 3;
   */
  state: ShadowTopicState;

  /**
   * List of partition information for the shadow topic
   *
   * @generated from field: repeated redpanda.core.admin.v2.TopicPartitionInformation partition_information = 4;
   */
  partitionInformation: TopicPartitionInformation[];
};

/**
 * Describes the message redpanda.core.admin.v2.ShadowTopicStatus.
 * Use `create(ShadowTopicStatusSchema)` to create a new message.
 */
export const ShadowTopicStatusSchema: GenMessage<ShadowTopicStatus> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 29);

/**
 * Topic partition information
 *
 * @generated from message redpanda.core.admin.v2.TopicPartitionInformation
 */
export type TopicPartitionInformation = Message<"redpanda.core.admin.v2.TopicPartitionInformation"> & {
  /**
   * Partition ID
   *
   * @generated from field: int64 partition_id = 1;
   */
  partitionId: bigint;

  /**
   * Source partition's LSO
   *
   * @generated from field: int64 source_last_stable_offset = 2;
   */
  sourceLastStableOffset: bigint;

  /**
   * Source partition's HWM
   *
   * @generated from field: int64 source_high_watermark = 3;
   */
  sourceHighWatermark: bigint;

  /**
   * Shadowed partition's HWM
   *
   * @generated from field: int64 high_watermark = 4;
   */
  highWatermark: bigint;
};

/**
 * Describes the message redpanda.core.admin.v2.TopicPartitionInformation.
 * Use `create(TopicPartitionInformationSchema)` to create a new message.
 */
export const TopicPartitionInformationSchema: GenMessage<TopicPartitionInformation> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_shadow_link, 30);

/**
 * State of the shadow link
 *
 * @generated from enum redpanda.core.admin.v2.ShadowLinkState
 */
export enum ShadowLinkState {
  /**
   * Unspecified
   *
   * @generated from enum value: SHADOW_LINK_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Shadow link is active
   *
   * @generated from enum value: SHADOW_LINK_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Shadow link was paused
   *
   * @generated from enum value: SHADOW_LINK_STATE_PAUSED = 2;
   */
  PAUSED = 2,
}

/**
 * Describes the enum redpanda.core.admin.v2.ShadowLinkState.
 */
export const ShadowLinkStateSchema: GenEnum<ShadowLinkState> = /*@__PURE__*/
  enumDesc(file_redpanda_core_admin_v2_shadow_link, 0);

/**
 * Valid SCRAM mechanisms
 *
 * @generated from enum redpanda.core.admin.v2.ScramMechanism
 */
export enum ScramMechanism {
  /**
   * @generated from enum value: SCRAM_MECHANISM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * SCRAM-SHA-256
   *
   * @generated from enum value: SCRAM_MECHANISM_SCRAM_SHA_256 = 1;
   */
  SCRAM_SHA_256 = 1,

  /**
   * SCRAM-SHA-512
   *
   * @generated from enum value: SCRAM_MECHANISM_SCRAM_SHA_512 = 2;
   */
  SCRAM_SHA_512 = 2,
}

/**
 * Describes the enum redpanda.core.admin.v2.ScramMechanism.
 */
export const ScramMechanismSchema: GenEnum<ScramMechanism> = /*@__PURE__*/
  enumDesc(file_redpanda_core_admin_v2_shadow_link, 1);

/**
 * The matching pattern type
 *
 * @generated from enum redpanda.core.admin.v2.PatternType
 */
export enum PatternType {
  /**
   * @generated from enum value: PATTERN_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Must match the filter exactly
   *
   * @generated from enum value: PATTERN_TYPE_LITERAL = 1;
   */
  LITERAL = 1,

  /**
   * Will match anything that starts with filter
   *
   * @generated from enum value: PATTERN_TYPE_PREFIX = 2;
   */
  PREFIX = 2,
}

/**
 * Describes the enum redpanda.core.admin.v2.PatternType.
 */
export const PatternTypeSchema: GenEnum<PatternType> = /*@__PURE__*/
  enumDesc(file_redpanda_core_admin_v2_shadow_link, 2);

/**
 * What type of filter this is, include or exclude
 *
 * @generated from enum redpanda.core.admin.v2.FilterType
 */
export enum FilterType {
  /**
   * @generated from enum value: FILTER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Include the items that match the filter
   *
   * @generated from enum value: FILTER_TYPE_INCLUDE = 1;
   */
  INCLUDE = 1,

  /**
   * Exclude the items that match the filter
   *
   * @generated from enum value: FILTER_TYPE_EXCLUDE = 2;
   */
  EXCLUDE = 2,
}

/**
 * Describes the enum redpanda.core.admin.v2.FilterType.
 */
export const FilterTypeSchema: GenEnum<FilterType> = /*@__PURE__*/
  enumDesc(file_redpanda_core_admin_v2_shadow_link, 3);

/**
 * Task states
 *
 * @generated from enum redpanda.core.admin.v2.TaskState
 */
export enum TaskState {
  /**
   * @generated from enum value: TASK_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Task is active
   *
   * @generated from enum value: TASK_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Task was paused
   *
   * @generated from enum value: TASK_STATE_PAUSED = 2;
   */
  PAUSED = 2,

  /**
   * Task is unable to communicate with source cluster
   *
   * @generated from enum value: TASK_STATE_LINK_UNAVAILABLE = 3;
   */
  LINK_UNAVAILABLE = 3,

  /**
   * Task is not running
   *
   * @generated from enum value: TASK_STATE_NOT_RUNNING = 4;
   */
  NOT_RUNNING = 4,

  /**
   * Task is faulted
   *
   * @generated from enum value: TASK_STATE_FAULTED = 5;
   */
  FAULTED = 5,
}

/**
 * Describes the enum redpanda.core.admin.v2.TaskState.
 */
export const TaskStateSchema: GenEnum<TaskState> = /*@__PURE__*/
  enumDesc(file_redpanda_core_admin_v2_shadow_link, 4);

/**
 * State of a shadow topic
 *
 * @generated from enum redpanda.core.admin.v2.ShadowTopicState
 */
export enum ShadowTopicState {
  /**
   * @generated from enum value: SHADOW_TOPIC_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Shadow topic is active
   *
   * @generated from enum value: SHADOW_TOPIC_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Shadow topic has faulted
   *
   * @generated from enum value: SHADOW_TOPIC_STATE_FAULTED = 2;
   */
  FAULTED = 2,

  /**
   * Shadow topic has been paused
   *
   * @generated from enum value: SHADOW_TOPIC_STATE_PAUSED = 3;
   */
  PAUSED = 3,

  /**
   * Shadow topic is in the process of failing over
   *
   * @generated from enum value: SHADOW_TOPIC_STATE_FAILING_OVER = 4;
   */
  FAILING_OVER = 4,

  /**
   * Shadow topic has failed over successfully
   *
   * @generated from enum value: SHADOW_TOPIC_STATE_FAILED_OVER = 5;
   */
  FAILED_OVER = 5,

  /**
   * Shadow topic is in the process of being promoted
   *
   * @generated from enum value: SHADOW_TOPIC_STATE_PROMOTING = 6;
   */
  PROMOTING = 6,

  /**
   * Shadow topic is promoted successfully
   *
   * @generated from enum value: SHADOW_TOPIC_STATE_PROMOTED = 7;
   */
  PROMOTED = 7,
}

/**
 * Describes the enum redpanda.core.admin.v2.ShadowTopicState.
 */
export const ShadowTopicStateSchema: GenEnum<ShadowTopicState> = /*@__PURE__*/
  enumDesc(file_redpanda_core_admin_v2_shadow_link, 5);

/**
 * @generated from service redpanda.core.admin.v2.ShadowLinkService
 */
export const ShadowLinkService: GenService<{
  /**
   * @generated from rpc redpanda.core.admin.v2.ShadowLinkService.CreateShadowLink
   */
  createShadowLink: {
    methodKind: "unary";
    input: typeof CreateShadowLinkRequestSchema;
    output: typeof CreateShadowLinkResponseSchema;
  },
  /**
   * @generated from rpc redpanda.core.admin.v2.ShadowLinkService.DeleteShadowLink
   */
  deleteShadowLink: {
    methodKind: "unary";
    input: typeof DeleteShadowLinkRequestSchema;
    output: typeof DeleteShadowLinkResponseSchema;
  },
  /**
   * @generated from rpc redpanda.core.admin.v2.ShadowLinkService.GetShadowLink
   */
  getShadowLink: {
    methodKind: "unary";
    input: typeof GetShadowLinkRequestSchema;
    output: typeof GetShadowLinkResponseSchema;
  },
  /**
   * @generated from rpc redpanda.core.admin.v2.ShadowLinkService.ListShadowLinks
   */
  listShadowLinks: {
    methodKind: "unary";
    input: typeof ListShadowLinksRequestSchema;
    output: typeof ListShadowLinksResponseSchema;
  },
  /**
   * @generated from rpc redpanda.core.admin.v2.ShadowLinkService.UpdateShadowLink
   */
  updateShadowLink: {
    methodKind: "unary";
    input: typeof UpdateShadowLinkRequestSchema;
    output: typeof UpdateShadowLinkResponseSchema;
  },
  /**
   * Fails over a shadow link or a single shadow topic
   *
   * @generated from rpc redpanda.core.admin.v2.ShadowLinkService.FailOver
   */
  failOver: {
    methodKind: "unary";
    input: typeof FailOverRequestSchema;
    output: typeof FailOverResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_core_admin_v2_shadow_link, 0);

