// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/core/admin/v2/broker.proto (package redpanda.core.admin.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_redpanda_pbgen_options } from "../../../pbgen/options_pb";
import { file_redpanda_pbgen_rpc } from "../../../pbgen/rpc_pb";
import type { KafkaConnection } from "./kafka_connections_pb";
import { file_redpanda_core_admin_v2_kafka_connections } from "./kafka_connections_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/core/admin/v2/broker.proto.
 */
export const file_redpanda_core_admin_v2_broker: GenFile = /*@__PURE__*/
  fileDesc("CiNyZWRwYW5kYS9jb3JlL2FkbWluL3YyL2Jyb2tlci5wcm90bxIWcmVkcGFuZGEuY29yZS5hZG1pbi52MiIjChBHZXRCcm9rZXJSZXF1ZXN0Eg8KB25vZGVfaWQYASABKAUiQwoRR2V0QnJva2VyUmVzcG9uc2USLgoGYnJva2VyGAEgASgLMh4ucmVkcGFuZGEuY29yZS5hZG1pbi52Mi5Ccm9rZXIiFAoSTGlzdEJyb2tlcnNSZXF1ZXN0IkYKE0xpc3RCcm9rZXJzUmVzcG9uc2USLwoHYnJva2VycxgBIAMoCzIeLnJlZHBhbmRhLmNvcmUuYWRtaW4udjIuQnJva2VyImMKG0xpc3RLYWZrYUNvbm5lY3Rpb25zUmVxdWVzdBIPCgdub2RlX2lkGAEgASgFEhEKCXBhZ2Vfc2l6ZRgCIAEoBRIOCgZmaWx0ZXIYAyABKAkSEAoIb3JkZXJfYnkYBCABKAkicAocTGlzdEthZmthQ29ubmVjdGlvbnNSZXNwb25zZRI8Cgtjb25uZWN0aW9ucxgBIAMoCzInLnJlZHBhbmRhLmNvcmUuYWRtaW4udjIuS2Fma2FDb25uZWN0aW9uEhIKCnRvdGFsX3NpemUYAiABKAQiiwEKBkJyb2tlchIPCgdub2RlX2lkGAEgASgFEjUKCmJ1aWxkX2luZm8YAiABKAsyIS5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLkJ1aWxkSW5mbxI5CgxhZG1pbl9zZXJ2ZXIYAyABKAsyIy5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLkFkbWluU2VydmVyIi8KCUJ1aWxkSW5mbxIPCgd2ZXJzaW9uGAEgASgJEhEKCWJ1aWxkX3NoYRgCIAEoCSI/CgtBZG1pblNlcnZlchIwCgZyb3V0ZXMYASADKAsyIC5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLlJQQ1JvdXRlIiwKCFJQQ1JvdXRlEgwKBG5hbWUYASABKAkSEgoKaHR0cF9yb3V0ZRgCIAEoCTL1AgoNQnJva2VyU2VydmljZRJoCglHZXRCcm9rZXISKC5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLkdldEJyb2tlclJlcXVlc3QaKS5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLkdldEJyb2tlclJlc3BvbnNlIgbqkhkCEAMSbgoLTGlzdEJyb2tlcnMSKi5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLkxpc3RCcm9rZXJzUmVxdWVzdBorLnJlZHBhbmRhLmNvcmUuYWRtaW4udjIuTGlzdEJyb2tlcnNSZXNwb25zZSIG6pIZAhADEokBChRMaXN0S2Fma2FDb25uZWN0aW9ucxIzLnJlZHBhbmRhLmNvcmUuYWRtaW4udjIuTGlzdEthZmthQ29ubmVjdGlvbnNSZXF1ZXN0GjQucmVkcGFuZGEuY29yZS5hZG1pbi52Mi5MaXN0S2Fma2FDb25uZWN0aW9uc1Jlc3BvbnNlIgbqkhkCEANCigIKGmNvbS5yZWRwYW5kYS5jb3JlLmFkbWluLnYyQgtCcm9rZXJQcm90b1ABWlRnaXRodWIuY29tL3JlZHBhbmRhLWRhdGEvY29uc29sZS9iYWNrZW5kL3BrZy9wcm90b2dlbi9yZWRwYW5kYS9jb3JlL2FkbWluL3YyO2FkbWludjKiAgNSQ0GqAhZSZWRwYW5kYS5Db3JlLkFkbWluLlYyygIWUmVkcGFuZGFcQ29yZVxBZG1pblxWMuICIlJlZHBhbmRhXENvcmVcQWRtaW5cVjJcR1BCTWV0YWRhdGHqAhlSZWRwYW5kYTo6Q29yZTo6QWRtaW46OlYy6pIZDHByb3RvOjphZG1pbmIGcHJvdG8z", [file_redpanda_pbgen_options, file_redpanda_pbgen_rpc, file_redpanda_core_admin_v2_kafka_connections]);

/**
 * GetBrokerRequest returns information about a single broker in the cluster
 *
 * @generated from message redpanda.core.admin.v2.GetBrokerRequest
 */
export type GetBrokerRequest = Message<"redpanda.core.admin.v2.GetBrokerRequest"> & {
  /**
   * The node ID for the broker. If set to -1, the broker handling the RPC
   * request returns information about itself.
   *
   * @generated from field: int32 node_id = 1;
   */
  nodeId: number;
};

/**
 * Describes the message redpanda.core.admin.v2.GetBrokerRequest.
 * Use `create(GetBrokerRequestSchema)` to create a new message.
 */
export const GetBrokerRequestSchema: GenMessage<GetBrokerRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 0);

/**
 * GetBrokerResponse is the response from the GetBroker RPC.
 *
 * @generated from message redpanda.core.admin.v2.GetBrokerResponse
 */
export type GetBrokerResponse = Message<"redpanda.core.admin.v2.GetBrokerResponse"> & {
  /**
   * The specified broker and it's information.
   *
   * @generated from field: redpanda.core.admin.v2.Broker broker = 1;
   */
  broker?: Broker;
};

/**
 * Describes the message redpanda.core.admin.v2.GetBrokerResponse.
 * Use `create(GetBrokerResponseSchema)` to create a new message.
 */
export const GetBrokerResponseSchema: GenMessage<GetBrokerResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 1);

/**
 * ListBrokersRequest returns information about all the brokers in the cluster
 *
 * @generated from message redpanda.core.admin.v2.ListBrokersRequest
 */
export type ListBrokersRequest = Message<"redpanda.core.admin.v2.ListBrokersRequest"> & {
};

/**
 * Describes the message redpanda.core.admin.v2.ListBrokersRequest.
 * Use `create(ListBrokersRequestSchema)` to create a new message.
 */
export const ListBrokersRequestSchema: GenMessage<ListBrokersRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 2);

/**
 * ListBrokersResponse is the response from the ListBrokers RPC.
 *
 * @generated from message redpanda.core.admin.v2.ListBrokersResponse
 */
export type ListBrokersResponse = Message<"redpanda.core.admin.v2.ListBrokersResponse"> & {
  /**
   * The brokers in the cluster and their information.
   *
   * @generated from field: repeated redpanda.core.admin.v2.Broker brokers = 1;
   */
  brokers: Broker[];
};

/**
 * Describes the message redpanda.core.admin.v2.ListBrokersResponse.
 * Use `create(ListBrokersResponseSchema)` to create a new message.
 */
export const ListBrokersResponseSchema: GenMessage<ListBrokersResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 3);

/**
 * @generated from message redpanda.core.admin.v2.ListKafkaConnectionsRequest
 */
export type ListKafkaConnectionsRequest = Message<"redpanda.core.admin.v2.ListKafkaConnectionsRequest"> & {
  /**
   * The node ID for the broker. If set to -1, the broker handling the RPC
   * request returns information about itself.
   *
   * @generated from field: int32 node_id = 1;
   */
  nodeId: number;

  /**
   * The maximum number of connections to return. If unspecified or 0, a
   * default value may be applied. Note that paging is currently not fully
   * supported, and this field only acts as a limit for the first page of data
   * returned. Subsequent pages of data cannot be requested.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Filter expression to apply to the connection list.
   * Uses a subset of AIP-160 filter syntax supporting:
   * - Field comparisons (`=`, `!=`, `<`, `>`, `<=`, `>=`)
   * - Logical AND chaining: condition1 AND condition2
   * - Nested field access: parent.child = value
   * - Escape sequences: field = "string with \"quotes\""
   * - Enum types
   * - RFC3339 timestamps and ISO-like duration
   *
   * Limitations (not supported):
   * - Logical OR chaining
   * - Parentheses `(` `)` for grouping
   * - Map and repeated types
   * - HAS (:) operator
   * - Negation (-, NOT)
   * - Bare literal matching
   *
   * Example filters:
   * - `state = KAFKA_CONNECTION_STATE_OPEN`
   * - `idle_duration > 30s AND request_count_total > 100`
   * - `authentication_info.user_principal = "my-producer"`
   * - `recent_request_statistics.produce_bytes > 1000 AND
   * client_software_name = "kgo"`
   * - `open_time >= 2025-09-01T10:22:54Z`
   *
   * Reference: https://google.aip.dev/160
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * Field-based ordering specification following AIP-132 syntax.
   * Supports multiple fields with `asc`/`desc` direction indicators.
   * Examples:
   * - `idle_duration desc` - longest idle connections first
   * - `open_time desc, total_request_statistics.request_count desc` - newest
   * connections first, then most active
   * - `recent_request_statistics.produce_bytes desc` - connections with
   * highest current produce throughput first
   *
   * Reference: https://google.aip.dev/132#ordering
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;
};

/**
 * Describes the message redpanda.core.admin.v2.ListKafkaConnectionsRequest.
 * Use `create(ListKafkaConnectionsRequestSchema)` to create a new message.
 */
export const ListKafkaConnectionsRequestSchema: GenMessage<ListKafkaConnectionsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 4);

/**
 * @generated from message redpanda.core.admin.v2.ListKafkaConnectionsResponse
 */
export type ListKafkaConnectionsResponse = Message<"redpanda.core.admin.v2.ListKafkaConnectionsResponse"> & {
  /**
   * The list of connections matching the request.
   * Note that in addition to open connections, some recently-closed
   * connections may also be included here. If you don't want to include
   * closed connections, set the filter in the request to `state =
   * KAFKA_CONNECTION_STATE_OPEN`.
   *
   * @generated from field: repeated redpanda.core.admin.v2.KafkaConnection connections = 1;
   */
  connections: KafkaConnection[];

  /**
   * Total number of connections matching the request.
   * This may be greater than `len(connections)` if some connections were
   * omitted from the response due to the specified (or default) `page_size`.
   * Example:
   *   request.page_size = 10
   *   response.connections = [<10 items>]
   *   response.total_size = 13
   *
   * @generated from field: uint64 total_size = 2;
   */
  totalSize: bigint;
};

/**
 * Describes the message redpanda.core.admin.v2.ListKafkaConnectionsResponse.
 * Use `create(ListKafkaConnectionsResponseSchema)` to create a new message.
 */
export const ListKafkaConnectionsResponseSchema: GenMessage<ListKafkaConnectionsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 5);

/**
 * The resource for an individual broker within the Kafka Cluster.
 *
 * @generated from message redpanda.core.admin.v2.Broker
 */
export type Broker = Message<"redpanda.core.admin.v2.Broker"> & {
  /**
   * This broker's node ID.
   *
   * @generated from field: int32 node_id = 1;
   */
  nodeId: number;

  /**
   * The build this broker is running.
   *
   * @generated from field: redpanda.core.admin.v2.BuildInfo build_info = 2;
   */
  buildInfo?: BuildInfo;

  /**
   * The admin server information.
   *
   * @generated from field: redpanda.core.admin.v2.AdminServer admin_server = 3;
   */
  adminServer?: AdminServer;
};

/**
 * Describes the message redpanda.core.admin.v2.Broker.
 * Use `create(BrokerSchema)` to create a new message.
 */
export const BrokerSchema: GenMessage<Broker> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 6);

/**
 * BuildInfo contains information about the Redpanda build.
 *
 * @generated from message redpanda.core.admin.v2.BuildInfo
 */
export type BuildInfo = Message<"redpanda.core.admin.v2.BuildInfo"> & {
  /**
   * A version string of Redpanda like "v25.2.1"
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The git commit SHA of the build.
   *
   * @generated from field: string build_sha = 2;
   */
  buildSha: string;
};

/**
 * Describes the message redpanda.core.admin.v2.BuildInfo.
 * Use `create(BuildInfoSchema)` to create a new message.
 */
export const BuildInfoSchema: GenMessage<BuildInfo> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 7);

/**
 * AdminServer has information about the admin server within the broker.
 *
 * @generated from message redpanda.core.admin.v2.AdminServer
 */
export type AdminServer = Message<"redpanda.core.admin.v2.AdminServer"> & {
  /**
   * All of the ConnectRPC routes available on this admin server.
   *
   * @generated from field: repeated redpanda.core.admin.v2.RPCRoute routes = 1;
   */
  routes: RPCRoute[];
};

/**
 * Describes the message redpanda.core.admin.v2.AdminServer.
 * Use `create(AdminServerSchema)` to create a new message.
 */
export const AdminServerSchema: GenMessage<AdminServer> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 8);

/**
 * A route in the Admin API RPC server.
 *
 * @generated from message redpanda.core.admin.v2.RPCRoute
 */
export type RPCRoute = Message<"redpanda.core.admin.v2.RPCRoute"> & {
  /**
   * The name of the RPC method.
   *
   * For example `redpanda.core.admin.v2.AdminService.GetVersion`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The HTTP route for this RPC method.
   *
   * For example `/redpanda.core.admin.v2.AdminService/GetVersion`
   *
   * @generated from field: string http_route = 2;
   */
  httpRoute: string;
};

/**
 * Describes the message redpanda.core.admin.v2.RPCRoute.
 * Use `create(RPCRouteSchema)` to create a new message.
 */
export const RPCRouteSchema: GenMessage<RPCRoute> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_broker, 9);

/**
 * The BrokerService gives information about individual brokers within the
 * cluster.
 *
 * @generated from service redpanda.core.admin.v2.BrokerService
 */
export const BrokerService: GenService<{
  /**
   * GetBroker returns information about a single broker in the cluster.
   *
   * @generated from rpc redpanda.core.admin.v2.BrokerService.GetBroker
   */
  getBroker: {
    methodKind: "unary";
    input: typeof GetBrokerRequestSchema;
    output: typeof GetBrokerResponseSchema;
  },
  /**
   * ListBrokers returns information about all brokers in the cluster.
   *
   * @generated from rpc redpanda.core.admin.v2.BrokerService.ListBrokers
   */
  listBrokers: {
    methodKind: "unary";
    input: typeof ListBrokersRequestSchema;
    output: typeof ListBrokersResponseSchema;
  },
  /**
   * ListKafkaConnections returns information about the broker's Kafka
   * connections.
   *
   * @generated from rpc redpanda.core.admin.v2.BrokerService.ListKafkaConnections
   */
  listKafkaConnections: {
    methodKind: "unary";
    input: typeof ListKafkaConnectionsRequestSchema;
    output: typeof ListKafkaConnectionsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_core_admin_v2_broker, 0);

