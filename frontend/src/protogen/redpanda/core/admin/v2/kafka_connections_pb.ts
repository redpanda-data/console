// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/core/admin/v2/kafka_connections.proto (package redpanda.core.admin.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_info } from "../../../../google/api/field_info_pb";
import { file_redpanda_pbgen_options } from "../../../pbgen/options_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/core/admin/v2/kafka_connections.proto.
 */
export const file_redpanda_core_admin_v2_kafka_connections: GenFile = /*@__PURE__*/
  fileDesc("Ci5yZWRwYW5kYS9jb3JlL2FkbWluL3YyL2thZmthX2Nvbm5lY3Rpb25zLnByb3RvEhZyZWRwYW5kYS5jb3JlLmFkbWluLnYyIvMHCg9LYWZrYUNvbm5lY3Rpb24SDwoHbm9kZV9pZBgBIAEoBRIQCghzaGFyZF9pZBgCIAEoDRIVCgN1aWQYAyABKAlCCOKMz9cIAggBEjsKBXN0YXRlGAQgASgOMiwucmVkcGFuZGEuY29yZS5hZG1pbi52Mi5LYWZrYUNvbm5lY3Rpb25TdGF0ZRItCglvcGVuX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCmNsb3NlX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEkcKE2F1dGhlbnRpY2F0aW9uX2luZm8YByABKAsyKi5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLkF1dGhlbnRpY2F0aW9uSW5mbxIVCg1saXN0ZW5lcl9uYW1lGAggASgJEjEKCHRsc19pbmZvGAkgASgLMh8ucmVkcGFuZGEuY29yZS5hZG1pbi52Mi5UTFNJbmZvEi4KBnNvdXJjZRgKIAEoCzIeLnJlZHBhbmRhLmNvcmUuYWRtaW4udjIuU291cmNlEhEKCWNsaWVudF9pZBgLIAEoCRIcChRjbGllbnRfc29mdHdhcmVfbmFtZRgMIAEoCRIfChdjbGllbnRfc29mdHdhcmVfdmVyc2lvbhgNIAEoCRIYChB0cmFuc2FjdGlvbmFsX2lkGA4gASgJEhAKCGdyb3VwX2lkGA8gASgJEhkKEWdyb3VwX2luc3RhbmNlX2lkGBAgASgJEhcKD2dyb3VwX21lbWJlcl9pZBgRIAEoCRJOCgxhcGlfdmVyc2lvbnMYEiADKAsyOC5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLkthZmthQ29ubmVjdGlvbi5BcGlWZXJzaW9uc0VudHJ5EjAKDWlkbGVfZHVyYXRpb24YEyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SRAoSaW5fZmxpZ2h0X3JlcXVlc3RzGBQgASgLMigucmVkcGFuZGEuY29yZS5hZG1pbi52Mi5JbkZsaWdodFJlcXVlc3RzEksKGHRvdGFsX3JlcXVlc3Rfc3RhdGlzdGljcxgVIAEoCzIpLnJlZHBhbmRhLmNvcmUuYWRtaW4udjIuUmVxdWVzdFN0YXRpc3RpY3MSTAoZcmVjZW50X3JlcXVlc3Rfc3RhdGlzdGljcxgWIAEoCzIpLnJlZHBhbmRhLmNvcmUuYWRtaW4udjIuUmVxdWVzdFN0YXRpc3RpY3MaMgoQQXBpVmVyc2lvbnNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIqwBChJBdXRoZW50aWNhdGlvbkluZm8SOgoFc3RhdGUYASABKA4yKy5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLkF1dGhlbnRpY2F0aW9uU3RhdGUSQgoJbWVjaGFuaXNtGAIgASgOMi8ucmVkcGFuZGEuY29yZS5hZG1pbi52Mi5BdXRoZW50aWNhdGlvbk1lY2hhbmlzbRIWCg51c2VyX3ByaW5jaXBhbBgDIAEoCSIaCgdUTFNJbmZvEg8KB2VuYWJsZWQYASABKAgiNAoGU291cmNlEhwKCmlwX2FkZHJlc3MYASABKAlCCOKMz9cIAggEEgwKBHBvcnQYAiABKA0i1gEKEEluRmxpZ2h0UmVxdWVzdHMSVAoac2FtcGxlZF9pbl9mbGlnaHRfcmVxdWVzdHMYASADKAsyMC5yZWRwYW5kYS5jb3JlLmFkbWluLnYyLkluRmxpZ2h0UmVxdWVzdHMuUmVxdWVzdBIZChFoYXNfbW9yZV9yZXF1ZXN0cxgCIAEoCBpRCgdSZXF1ZXN0Eg8KB2FwaV9rZXkYASABKAUSNQoSaW5fZmxpZ2h0X2R1cmF0aW9uGAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uInMKEVJlcXVlc3RTdGF0aXN0aWNzEhUKDXByb2R1Y2VfYnl0ZXMYASABKAQSEwoLZmV0Y2hfYnl0ZXMYAiABKAQSFQoNcmVxdWVzdF9jb3VudBgDIAEoBBIbChNwcm9kdWNlX2JhdGNoX2NvdW50GAQgASgEKqcBChRLYWZrYUNvbm5lY3Rpb25TdGF0ZRImCiJLQUZLQV9DT05ORUNUSU9OX1NUQVRFX1VOU1BFQ0lGSUVEEAASHwobS0FGS0FfQ09OTkVDVElPTl9TVEFURV9PUEVOEAESIwofS0FGS0FfQ09OTkVDVElPTl9TVEFURV9BQk9SVElORxACEiEKHUtBRktBX0NPTk5FQ1RJT05fU1RBVEVfQ0xPU0VEEAMqqQEKE0F1dGhlbnRpY2F0aW9uU3RhdGUSJAogQVVUSEVOVElDQVRJT05fU1RBVEVfVU5TUEVDSUZJRUQQABIoCiRBVVRIRU5USUNBVElPTl9TVEFURV9VTkFVVEhFTlRJQ0FURUQQARIgChxBVVRIRU5USUNBVElPTl9TVEFURV9TVUNDRVNTEAISIAocQVVUSEVOVElDQVRJT05fU1RBVEVfRkFJTFVSRRADKpECChdBdXRoZW50aWNhdGlvbk1lY2hhbmlzbRIoCiRBVVRIRU5USUNBVElPTl9NRUNIQU5JU01fVU5TUEVDSUZJRUQQABIhCh1BVVRIRU5USUNBVElPTl9NRUNIQU5JU01fTVRMUxABEicKI0FVVEhFTlRJQ0FUSU9OX01FQ0hBTklTTV9TQVNMX1NDUkFNEAISLQopQVVUSEVOVElDQVRJT05fTUVDSEFOSVNNX1NBU0xfT0FVVEhCRUFSRVIQAxInCiNBVVRIRU5USUNBVElPTl9NRUNIQU5JU01fU0FTTF9QTEFJThAEEigKJEFVVEhFTlRJQ0FUSU9OX01FQ0hBTklTTV9TQVNMX0dTU0FQSRAFQpQCChpjb20ucmVkcGFuZGEuY29yZS5hZG1pbi52MkIVS2Fma2FDb25uZWN0aW9uc1Byb3RvUAFaVGdpdGh1Yi5jb20vcmVkcGFuZGEtZGF0YS9jb25zb2xlL2JhY2tlbmQvcGtnL3Byb3RvZ2VuL3JlZHBhbmRhL2NvcmUvYWRtaW4vdjI7YWRtaW52MqICA1JDQaoCFlJlZHBhbmRhLkNvcmUuQWRtaW4uVjLKAhZSZWRwYW5kYVxDb3JlXEFkbWluXFYy4gIiUmVkcGFuZGFcQ29yZVxBZG1pblxWMlxHUEJNZXRhZGF0YeoCGVJlZHBhbmRhOjpDb3JlOjpBZG1pbjo6VjLqkhkMcHJvdG86OmFkbWluYgZwcm90bzM", [file_google_api_field_info, file_redpanda_pbgen_options, file_google_protobuf_timestamp, file_google_protobuf_duration]);

/**
 * Kafka connection details for a broker
 *
 * @generated from message redpanda.core.admin.v2.KafkaConnection
 */
export type KafkaConnection = Message<"redpanda.core.admin.v2.KafkaConnection"> & {
  /**
   * Broker node ID
   *
   * @generated from field: int32 node_id = 1;
   */
  nodeId: number;

  /**
   * Broker shard that handles the connection
   *
   * @generated from field: uint32 shard_id = 2;
   */
  shardId: number;

  /**
   * Kafka connection UUID
   *
   * @generated from field: string uid = 3;
   */
  uid: string;

  /**
   * Lifecycle state of the connection (open/aborting/closed)
   *
   * @generated from field: redpanda.core.admin.v2.KafkaConnectionState state = 4;
   */
  state: KafkaConnectionState;

  /**
   * When the broker accepted the connection
   *
   * @generated from field: google.protobuf.Timestamp open_time = 5;
   */
  openTime?: Timestamp;

  /**
   * When the connection was closed. This field is set only when the
   * connection state is "closed".
   *
   * @generated from field: google.protobuf.Timestamp close_time = 6;
   */
  closeTime?: Timestamp;

  /**
   * Information about the authentication state of the connection
   *
   * @generated from field: redpanda.core.admin.v2.AuthenticationInfo authentication_info = 7;
   */
  authenticationInfo?: AuthenticationInfo;

  /**
   * Name of the Kafka listener that accepted this connection.
   * A listener is a named broker endpoint (for example, "internal",
   * "external", or "sasl_tls"). Each listener defines its network address and
   * enforces its protocol and authentication policy.
   *
   * @generated from field: string listener_name = 8;
   */
  listenerName: string;

  /**
   * Information about the TLS state of the connection (e.g., whether TLS
   * encryption is used for this connection)
   *
   * @generated from field: redpanda.core.admin.v2.TLSInfo tls_info = 9;
   */
  tlsInfo?: TLSInfo;

  /**
   * Remote client address of the TCP connection
   *
   * @generated from field: redpanda.core.admin.v2.Source source = 10;
   */
  source?: Source;

  /**
   * Client identifier included in every request sent by the Kafka client.
   * This is typically a configurable property (client.id) set by the
   * application when creating a producer or consumer, and is often used for
   * metrics, quotas, and debugging.
   *
   * @generated from field: string client_id = 11;
   */
  clientId: string;

  /**
   * Name of the client library, reported automatically in ApiVersions v3+
   * requests. This is set by the client implementation and is not typically
   * configurable by applications.
   *
   * @generated from field: string client_software_name = 12;
   */
  clientSoftwareName: string;

  /**
   * Version of the client library, reported automatically in ApiVersions v3+
   * requests. Like client_software_name, this is set by the
   * client and not usually configurable by applications.
   *
   * @generated from field: string client_software_version = 13;
   */
  clientSoftwareVersion: string;

  /**
   * Most recent transactional ID seen in requests sent over this connection
   *
   * @generated from field: string transactional_id = 14;
   */
  transactionalId: string;

  /**
   * Most recent group ID seen in requests sent over this connection. This
   * typically refers to a consumer group, but the Kafka group protocol is
   * more general and may also be used by other types of clients that
   * coordinate membership and assignments through the broker.
   *
   * @generated from field: string group_id = 15;
   */
  groupId: string;

  /**
   * Most recent group instance ID seen in requests sent over this connection.
   * This is used when static membership is enabled, allowing a specific
   * client instance to retain its group membership across restarts.
   *
   * @generated from field: string group_instance_id = 16;
   */
  groupInstanceId: string;

  /**
   * Most recent group member ID seen in requests sent over this connection.
   * This is the unique identifier assigned by the broker to a particular
   * member of the group.
   *
   * @generated from field: string group_member_id = 17;
   */
  groupMemberId: string;

  /**
   * This map records, for each Kafka API, the highest version number observed
   * in requests on this connection. It can be useful for understanding which
   * protocol versions a client supports or has negotiated with the broker.
   * Only APIs that were actually used (i.e. at least one request was seen)
   * are included.
   *
   * Example:
   *   { 0: 11, 1: 13 }
   * means that for API key 0 (Produce), version 11 was the highest seen,
   * and for API key 1 (Fetch), version 13 was the highest seen.
   *
   * Reference:
   * - https://kafka.apache.org/0101/protocol.html#protocol_api_keys
   * - https://kafka.apache.org/0101/protocol.html#protocol_compatibility
   *
   * @generated from field: map<int32, int32> api_versions = 18;
   */
  apiVersions: { [key: number]: number };

  /**
   * How long the connection has been idle (no in-flight requests)
   *
   * @generated from field: google.protobuf.Duration idle_duration = 19;
   */
  idleDuration?: Duration;

  /**
   * Currently in-flight requests
   *
   * @generated from field: redpanda.core.admin.v2.InFlightRequests in_flight_requests = 20;
   */
  inFlightRequests?: InFlightRequests;

  /**
   * Aggregated statistics for the entire connection's lifetime.
   *
   * @generated from field: redpanda.core.admin.v2.RequestStatistics total_request_statistics = 21;
   */
  totalRequestStatistics?: RequestStatistics;

  /**
   * Statistics for previous last one minute window.
   *
   * @generated from field: redpanda.core.admin.v2.RequestStatistics recent_request_statistics = 22;
   */
  recentRequestStatistics?: RequestStatistics;
};

/**
 * Describes the message redpanda.core.admin.v2.KafkaConnection.
 * Use `create(KafkaConnectionSchema)` to create a new message.
 */
export const KafkaConnectionSchema: GenMessage<KafkaConnection> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_kafka_connections, 0);

/**
 * Other Messages 
 *
 * @generated from message redpanda.core.admin.v2.AuthenticationInfo
 */
export type AuthenticationInfo = Message<"redpanda.core.admin.v2.AuthenticationInfo"> & {
  /**
   * Authentication state
   *
   * @generated from field: redpanda.core.admin.v2.AuthenticationState state = 1;
   */
  state: AuthenticationState;

  /**
   * Authentication mechanism
   *
   * @generated from field: redpanda.core.admin.v2.AuthenticationMechanism mechanism = 2;
   */
  mechanism: AuthenticationMechanism;

  /**
   * Authenticated user principal
   *
   * @generated from field: string user_principal = 3;
   */
  userPrincipal: string;
};

/**
 * Describes the message redpanda.core.admin.v2.AuthenticationInfo.
 * Use `create(AuthenticationInfoSchema)` to create a new message.
 */
export const AuthenticationInfoSchema: GenMessage<AuthenticationInfo> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_kafka_connections, 1);

/**
 * @generated from message redpanda.core.admin.v2.TLSInfo
 */
export type TLSInfo = Message<"redpanda.core.admin.v2.TLSInfo"> & {
  /**
   * Whether TLS is in use
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;
};

/**
 * Describes the message redpanda.core.admin.v2.TLSInfo.
 * Use `create(TLSInfoSchema)` to create a new message.
 */
export const TLSInfoSchema: GenMessage<TLSInfo> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_kafka_connections, 2);

/**
 * @generated from message redpanda.core.admin.v2.Source
 */
export type Source = Message<"redpanda.core.admin.v2.Source"> & {
  /**
   * @generated from field: string ip_address = 1;
   */
  ipAddress: string;

  /**
   * @generated from field: uint32 port = 2;
   */
  port: number;
};

/**
 * Describes the message redpanda.core.admin.v2.Source.
 * Use `create(SourceSchema)` to create a new message.
 */
export const SourceSchema: GenMessage<Source> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_kafka_connections, 3);

/**
 * @generated from message redpanda.core.admin.v2.InFlightRequests
 */
export type InFlightRequests = Message<"redpanda.core.admin.v2.InFlightRequests"> & {
  /**
   * A sample (e.g., the 5 latest) of the currently in-flight requests
   *
   * @generated from field: repeated redpanda.core.admin.v2.InFlightRequests.Request sampled_in_flight_requests = 1;
   */
  sampledInFlightRequests: InFlightRequests_Request[];

  /**
   * Whether there are more in-flight requests than those in
   * `sampled_in_flight_requests`.
   *
   * @generated from field: bool has_more_requests = 2;
   */
  hasMoreRequests: boolean;
};

/**
 * Describes the message redpanda.core.admin.v2.InFlightRequests.
 * Use `create(InFlightRequestsSchema)` to create a new message.
 */
export const InFlightRequestsSchema: GenMessage<InFlightRequests> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_kafka_connections, 4);

/**
 * @generated from message redpanda.core.admin.v2.InFlightRequests.Request
 */
export type InFlightRequests_Request = Message<"redpanda.core.admin.v2.InFlightRequests.Request"> & {
  /**
   * API key for the request type (e.g., produce/fetch/metadata/etc)
   * https://kafka.apache.org/0101/protocol.html#protocol_api_keys
   *
   * @generated from field: int32 api_key = 1;
   */
  apiKey: number;

  /**
   * How long the request has been in-flight since it was received
   *
   * @generated from field: google.protobuf.Duration in_flight_duration = 2;
   */
  inFlightDuration?: Duration;
};

/**
 * Describes the message redpanda.core.admin.v2.InFlightRequests.Request.
 * Use `create(InFlightRequests_RequestSchema)` to create a new message.
 */
export const InFlightRequests_RequestSchema: GenMessage<InFlightRequests_Request> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_kafka_connections, 4, 0);

/**
 * @generated from message redpanda.core.admin.v2.RequestStatistics
 */
export type RequestStatistics = Message<"redpanda.core.admin.v2.RequestStatistics"> & {
  /**
   * Sum of bytes produced.
   *
   * @generated from field: uint64 produce_bytes = 1;
   */
  produceBytes: bigint;

  /**
   * Sum of bytes fetched.
   *
   * @generated from field: uint64 fetch_bytes = 2;
   */
  fetchBytes: bigint;

  /**
   * Number of requests the client has made.
   *
   * @generated from field: uint64 request_count = 3;
   */
  requestCount: bigint;

  /**
   * Number of produced batches
   * Average batch size = produce_bytes / produce_batch_count
   *
   * @generated from field: uint64 produce_batch_count = 4;
   */
  produceBatchCount: bigint;
};

/**
 * Describes the message redpanda.core.admin.v2.RequestStatistics.
 * Use `create(RequestStatisticsSchema)` to create a new message.
 */
export const RequestStatisticsSchema: GenMessage<RequestStatistics> = /*@__PURE__*/
  messageDesc(file_redpanda_core_admin_v2_kafka_connections, 5);

/**
 * Enums 
 *
 * @generated from enum redpanda.core.admin.v2.KafkaConnectionState
 */
export enum KafkaConnectionState {
  /**
   * @generated from enum value: KAFKA_CONNECTION_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The connection is accepting requests.
   *
   * @generated from enum value: KAFKA_CONNECTION_STATE_OPEN = 1;
   */
  OPEN = 1,

  /**
   * The connection is aborting ongoing requests and about to be closed.
   * This is a transient state between open and closed that should rarely be
   * observable under normal circumstances.
   *
   * @generated from enum value: KAFKA_CONNECTION_STATE_ABORTING = 2;
   */
  ABORTING = 2,

  /**
   * The connection has been closed.
   *
   * @generated from enum value: KAFKA_CONNECTION_STATE_CLOSED = 3;
   */
  CLOSED = 3,
}

/**
 * Describes the enum redpanda.core.admin.v2.KafkaConnectionState.
 */
export const KafkaConnectionStateSchema: GenEnum<KafkaConnectionState> = /*@__PURE__*/
  enumDesc(file_redpanda_core_admin_v2_kafka_connections, 0);

/**
 * @generated from enum redpanda.core.admin.v2.AuthenticationState
 */
export enum AuthenticationState {
  /**
   * @generated from enum value: AUTHENTICATION_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTHENTICATION_STATE_UNAUTHENTICATED = 1;
   */
  UNAUTHENTICATED = 1,

  /**
   * @generated from enum value: AUTHENTICATION_STATE_SUCCESS = 2;
   */
  SUCCESS = 2,

  /**
   * @generated from enum value: AUTHENTICATION_STATE_FAILURE = 3;
   */
  FAILURE = 3,
}

/**
 * Describes the enum redpanda.core.admin.v2.AuthenticationState.
 */
export const AuthenticationStateSchema: GenEnum<AuthenticationState> = /*@__PURE__*/
  enumDesc(file_redpanda_core_admin_v2_kafka_connections, 1);

/**
 * @generated from enum redpanda.core.admin.v2.AuthenticationMechanism
 */
export enum AuthenticationMechanism {
  /**
   * @generated from enum value: AUTHENTICATION_MECHANISM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Mutual TLS using client certificates
   *
   * @generated from enum value: AUTHENTICATION_MECHANISM_MTLS = 1;
   */
  MTLS = 1,

  /**
   * SASL SCRAM
   *
   * @generated from enum value: AUTHENTICATION_MECHANISM_SASL_SCRAM = 2;
   */
  SASL_SCRAM = 2,

  /**
   * SASL OAUTHBEARER (OAuth 2.0 / OpenID Connect)
   *
   * @generated from enum value: AUTHENTICATION_MECHANISM_SASL_OAUTHBEARER = 3;
   */
  SASL_OAUTHBEARER = 3,

  /**
   * SASL PLAIN (username/password in plaintext)
   *
   * @generated from enum value: AUTHENTICATION_MECHANISM_SASL_PLAIN = 4;
   */
  SASL_PLAIN = 4,

  /**
   * SASL GSSAPI (Kerberos)
   *
   * @generated from enum value: AUTHENTICATION_MECHANISM_SASL_GSSAPI = 5;
   */
  SASL_GSSAPI = 5,
}

/**
 * Describes the enum redpanda.core.admin.v2.AuthenticationMechanism.
 */
export const AuthenticationMechanismSchema: GenEnum<AuthenticationMechanism> = /*@__PURE__*/
  enumDesc(file_redpanda_core_admin_v2_kafka_connections, 2);

