/**
 * Copyright 2022 Redpanda Data, Inc.
 *
 * Use of this software is governed by the Business Source License
 * included in the file https://github.com/redpanda-data/redpanda/blob/dev/licenses/bsl.md
 *
 * As of the Change Date specified in that file, in accordance with
 * the Business Source License, use of this software will be governed
 * by the Apache License, Version 2.0
 */

import type { Table } from 'dexie';
import Dexie from 'dexie';

export type ArtifactPart =
  | { kind: 'text'; text: string }
  | { kind: 'file'; file: { name?: string; mimeType: string; bytes?: string; uri?: string } }
  | { kind: 'data'; data?: unknown };

export type Artifact = {
  id?: string;
  name?: string;
  description?: string;
  text?: string; // Direct text content on artifact
  parts?: ArtifactPart[];
};

export type ToolCall = {
  id: string;
  name: string;
  state: 'input-available' | 'output-available' | 'output-error';
  input?: unknown;
  output?: unknown;
  errorText?: string;
  messageId: string;
  timestamp: Date;
};

export type ChatMessage = {
  id: string;
  agentId: string;
  content: string;
  sender: 'user' | 'system';
  timestamp: Date;
  failure: boolean;
  isStreaming?: boolean;
  taskId?: string; // ID of the associated task
  taskState?: string; // Current state of the task (submitted, working, completed, etc.)
  contextId?: string; // ID used to group related interactions in a conversation
  reasoning?: string; // Accumulated reasoning/thinking steps for tasks
  artifacts?: Artifact[]; // Artifacts generated by the agent (documents, images, structured data)
  toolCalls?: ToolCall[]; // Tool calls made during task execution
};

class ChatDatabase extends Dexie {
  messages!: Table<ChatMessage, string>;

  constructor() {
    super('ChatDatabase');
    this.version(2).stores({
      messages: 'id, agentId, sender, timestamp',
    });
  }

  getAllMessages(agentId: string): Promise<ChatMessage[]> {
    return this.messages.where('agentId').equals(agentId).sortBy('timestamp');
  }

  addMessage(message: ChatMessage): Promise<string> {
    return this.messages.add(message);
  }

  updateMessage(id: string, updates: Partial<ChatMessage>): Promise<number> {
    return this.messages.update(id, updates);
  }

  async clearAllMessages(agentId: string): Promise<void> {
    await this.messages.where('agentId').equals(agentId).delete();
  }
}

export const chatDb = new ChatDatabase();
