input:
  gateway:
    path: /
    sync_response:
      status: '200'
pipeline:
  processors:
    - try:
        - openai_chat_completion:
            api_key: ${secrets.OPENAI_KEY}
            model: gpt-4o
            system_prompt: >
              ${SYSTEM_PROMPT}
            prompt: ${!this.question}
            history: root = this.history | []
            response_format: text
            tools:
              - name: SearchVectorDB
                description: Retrieve documents from the vector database to help answer
                  questions
                parameters:
                  required:
                    - question
                  properties:
                    question:
                      type: string
                      description: the text to compute embeddings for and search for similar vectors
                processors:
                  - try:
                      - openai_embeddings:
                          api_key: ${secrets.OPENAI_KEY}
                          model: text-embedding-3-small
                          text_mapping: this.question
                          dimensions: 768
                      - sql_raw:
                          driver: postgres
                          dsn: ${secrets.POSTGRES_DSN}
                          query: >
                            SELECT (
                              SELECT STRING_AGG(t2.document, '' ORDER BY chunk_id ASC)
                              FROM "${POSTGRES_COMPATIBLE_TOPIC_NAME}" t2
                              WHERE t1.key = t2.key
                              GROUP BY key
                            ) AS document
                            FROM "${POSTGRES_COMPATIBLE_TOPIC_NAME}" t1
                            ORDER BY embeddings <-> $1
                            LIMIT 3
                          args_mapping: '[ this.vector() ]'
                      - mapping: >
                          "Searching the vector database resulted in the following results: \n" +
                          this.map_each(row -> row.document).join("\n\n")
output:
  processors:
    - mutation: |
        if errored() {
          root = {"error": error()}
        }
  sync_response: {}
