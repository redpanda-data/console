// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redpanda-data/console/backend/pkg/kafka (interfaces: IListMessagesProgress)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/kafka.go -package=mocks github.com/redpanda-data/console/backend/pkg/kafka IListMessagesProgress
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	kafka "github.com/redpanda-data/console/backend/pkg/kafka"
)

// MockIListMessagesProgress is a mock of IListMessagesProgress interface.
type MockIListMessagesProgress struct {
	ctrl     *gomock.Controller
	recorder *MockIListMessagesProgressMockRecorder
}

// MockIListMessagesProgressMockRecorder is the mock recorder for MockIListMessagesProgress.
type MockIListMessagesProgressMockRecorder struct {
	mock *MockIListMessagesProgress
}

// NewMockIListMessagesProgress creates a new mock instance.
func NewMockIListMessagesProgress(ctrl *gomock.Controller) *MockIListMessagesProgress {
	mock := &MockIListMessagesProgress{ctrl: ctrl}
	mock.recorder = &MockIListMessagesProgressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIListMessagesProgress) EXPECT() *MockIListMessagesProgressMockRecorder {
	return m.recorder
}

// OnComplete mocks base method.
func (m *MockIListMessagesProgress) OnComplete(arg0 int64, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnComplete", arg0, arg1)
}

// OnComplete indicates an expected call of OnComplete.
func (mr *MockIListMessagesProgressMockRecorder) OnComplete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnComplete", reflect.TypeOf((*MockIListMessagesProgress)(nil).OnComplete), arg0, arg1)
}

// OnError mocks base method.
func (m *MockIListMessagesProgress) OnError(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", arg0)
}

// OnError indicates an expected call of OnError.
func (mr *MockIListMessagesProgressMockRecorder) OnError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockIListMessagesProgress)(nil).OnError), arg0)
}

// OnMessage mocks base method.
func (m *MockIListMessagesProgress) OnMessage(arg0 *kafka.TopicMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnMessage", arg0)
}

// OnMessage indicates an expected call of OnMessage.
func (mr *MockIListMessagesProgressMockRecorder) OnMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMessage", reflect.TypeOf((*MockIListMessagesProgress)(nil).OnMessage), arg0)
}

// OnMessageConsumed mocks base method.
func (m *MockIListMessagesProgress) OnMessageConsumed(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnMessageConsumed", arg0)
}

// OnMessageConsumed indicates an expected call of OnMessageConsumed.
func (mr *MockIListMessagesProgressMockRecorder) OnMessageConsumed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMessageConsumed", reflect.TypeOf((*MockIListMessagesProgress)(nil).OnMessageConsumed), arg0)
}

// OnPhase mocks base method.
func (m *MockIListMessagesProgress) OnPhase(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPhase", arg0)
}

// OnPhase indicates an expected call of OnPhase.
func (mr *MockIListMessagesProgressMockRecorder) OnPhase(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPhase", reflect.TypeOf((*MockIListMessagesProgress)(nil).OnPhase), arg0)
}
