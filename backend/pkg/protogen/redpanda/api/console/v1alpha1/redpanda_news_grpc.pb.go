// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/api/console/v1alpha1/redpanda_news.proto

package consolev1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RedpandaNewsService_GetRedpandaNews_FullMethodName = "/redpanda.api.console.v1alpha1.RedpandaNewsService/GetRedpandaNews"
)

// RedpandaNewsServiceClient is the client API for RedpandaNewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RedpandaNewsService provides Redpanda-specific news and updates functionality to the console
type RedpandaNewsServiceClient interface {
	// GetRedpandaNews retrieves the latest news and updates from Redpanda
	GetRedpandaNews(ctx context.Context, in *GetRedpandaNewsRequest, opts ...grpc.CallOption) (*GetRedpandaNewsResponse, error)
}

type redpandaNewsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedpandaNewsServiceClient(cc grpc.ClientConnInterface) RedpandaNewsServiceClient {
	return &redpandaNewsServiceClient{cc}
}

func (c *redpandaNewsServiceClient) GetRedpandaNews(ctx context.Context, in *GetRedpandaNewsRequest, opts ...grpc.CallOption) (*GetRedpandaNewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRedpandaNewsResponse)
	err := c.cc.Invoke(ctx, RedpandaNewsService_GetRedpandaNews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedpandaNewsServiceServer is the server API for RedpandaNewsService service.
// All implementations must embed UnimplementedRedpandaNewsServiceServer
// for forward compatibility.
//
// RedpandaNewsService provides Redpanda-specific news and updates functionality to the console
type RedpandaNewsServiceServer interface {
	// GetRedpandaNews retrieves the latest news and updates from Redpanda
	GetRedpandaNews(context.Context, *GetRedpandaNewsRequest) (*GetRedpandaNewsResponse, error)
	mustEmbedUnimplementedRedpandaNewsServiceServer()
}

// UnimplementedRedpandaNewsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRedpandaNewsServiceServer struct{}

func (UnimplementedRedpandaNewsServiceServer) GetRedpandaNews(context.Context, *GetRedpandaNewsRequest) (*GetRedpandaNewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedpandaNews not implemented")
}
func (UnimplementedRedpandaNewsServiceServer) mustEmbedUnimplementedRedpandaNewsServiceServer() {}
func (UnimplementedRedpandaNewsServiceServer) testEmbeddedByValue()                             {}

// UnsafeRedpandaNewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedpandaNewsServiceServer will
// result in compilation errors.
type UnsafeRedpandaNewsServiceServer interface {
	mustEmbedUnimplementedRedpandaNewsServiceServer()
}

func RegisterRedpandaNewsServiceServer(s grpc.ServiceRegistrar, srv RedpandaNewsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRedpandaNewsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RedpandaNewsService_ServiceDesc, srv)
}

func _RedpandaNewsService_GetRedpandaNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedpandaNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedpandaNewsServiceServer).GetRedpandaNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedpandaNewsService_GetRedpandaNews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedpandaNewsServiceServer).GetRedpandaNews(ctx, req.(*GetRedpandaNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedpandaNewsService_ServiceDesc is the grpc.ServiceDesc for RedpandaNewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedpandaNewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.console.v1alpha1.RedpandaNewsService",
	HandlerType: (*RedpandaNewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRedpandaNews",
			Handler:    _RedpandaNewsService_GetRedpandaNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/api/console/v1alpha1/redpanda_news.proto",
}
