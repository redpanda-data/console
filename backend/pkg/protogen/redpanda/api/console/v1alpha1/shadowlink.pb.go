// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/shadowlink.proto

package consolev1alpha1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v2 "buf.build/gen/go/redpandadata/core/protocolbuffers/go/redpanda/core/admin/v2"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateShadowLinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShadowLink    *ShadowLink            `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateShadowLinkResponse) Reset() {
	*x = CreateShadowLinkResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShadowLinkResponse) ProtoMessage() {}

func (x *CreateShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*CreateShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{0}
}

func (x *CreateShadowLinkResponse) GetShadowLink() *ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

type GetShadowLinkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShadowLinkRequest) Reset() {
	*x = GetShadowLinkRequest{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShadowLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShadowLinkRequest) ProtoMessage() {}

func (x *GetShadowLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShadowLinkRequest.ProtoReflect.Descriptor instead.
func (*GetShadowLinkRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{1}
}

func (x *GetShadowLinkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetShadowLinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShadowLink    *ShadowLink            `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShadowLinkResponse) Reset() {
	*x = GetShadowLinkResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShadowLinkResponse) ProtoMessage() {}

func (x *GetShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*GetShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{2}
}

func (x *GetShadowLinkResponse) GetShadowLink() *ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

type ShadowLink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Return name, configuration, and overall state
	Name           string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uid            string                       `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Configurations *v2.ShadowLinkConfigurations `protobuf:"bytes,3,opt,name=configurations,proto3" json:"configurations,omitempty"`
	State          v2.ShadowLinkState           `protobuf:"varint,4,opt,name=state,proto3,enum=redpanda.core.admin.v2.ShadowLinkState" json:"state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShadowLink) Reset() {
	*x = ShadowLink{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShadowLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowLink) ProtoMessage() {}

func (x *ShadowLink) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowLink.ProtoReflect.Descriptor instead.
func (*ShadowLink) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{3}
}

func (x *ShadowLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShadowLink) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ShadowLink) GetConfigurations() *v2.ShadowLinkConfigurations {
	if x != nil {
		return x.Configurations
	}
	return nil
}

func (x *ShadowLink) GetState() v2.ShadowLinkState {
	if x != nil {
		return x.State
	}
	return v2.ShadowLinkState(0)
}

type ListShadowLinksRequest struct {
	state    protoimpl.MessageState         `protogen:"open.v1"`
	Filter   *ListShadowLinksRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize int32                          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Value of the next_page_token field returned by the previous response.
	// If not provided, the system assumes the first page is requested.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListShadowLinksRequest) Reset() {
	*x = ListShadowLinksRequest{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinksRequest) ProtoMessage() {}

func (x *ListShadowLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinksRequest.ProtoReflect.Descriptor instead.
func (*ListShadowLinksRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{4}
}

func (x *ListShadowLinksRequest) GetFilter() *ListShadowLinksRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListShadowLinksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListShadowLinksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListShadowLinksResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	ShadowLinks   []*ListShadowLinksResponse_ShadowLink `protobuf:"bytes,1,rep,name=shadow_links,json=shadowLinks,proto3" json:"shadow_links,omitempty"`
	NextPageToken string                                `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListShadowLinksResponse) Reset() {
	*x = ListShadowLinksResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinksResponse) ProtoMessage() {}

func (x *ListShadowLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinksResponse.ProtoReflect.Descriptor instead.
func (*ListShadowLinksResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{5}
}

func (x *ListShadowLinksResponse) GetShadowLinks() []*ListShadowLinksResponse_ShadowLink {
	if x != nil {
		return x.ShadowLinks
	}
	return nil
}

func (x *ListShadowLinksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateShadowLinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateShadowLinkResponse) Reset() {
	*x = UpdateShadowLinkResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShadowLinkResponse) ProtoMessage() {}

func (x *UpdateShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*UpdateShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{6}
}

type DeleteShadowLinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteShadowLinkResponse) Reset() {
	*x = DeleteShadowLinkResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShadowLinkResponse) ProtoMessage() {}

func (x *DeleteShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*DeleteShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{7}
}

type ListShadowLinkTopicsRequest struct {
	state          protoimpl.MessageState              `protogen:"open.v1"`
	ShadowLinkName string                              `protobuf:"bytes,1,opt,name=shadow_link_name,json=shadowLinkName,proto3" json:"shadow_link_name,omitempty"`
	Filter         *ListShadowLinkTopicsRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize       int32                               `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Value of the next_page_token field returned by the previous response.
	// If not provided, the system assumes the first page is requested.
	PageToken     string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListShadowLinkTopicsRequest) Reset() {
	*x = ListShadowLinkTopicsRequest{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinkTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinkTopicsRequest) ProtoMessage() {}

func (x *ListShadowLinkTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinkTopicsRequest.ProtoReflect.Descriptor instead.
func (*ListShadowLinkTopicsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{8}
}

func (x *ListShadowLinkTopicsRequest) GetShadowLinkName() string {
	if x != nil {
		return x.ShadowLinkName
	}
	return ""
}

func (x *ListShadowLinkTopicsRequest) GetFilter() *ListShadowLinkTopicsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListShadowLinkTopicsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListShadowLinkTopicsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ShadowTopic struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TopicName       string                 `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	State           v2.ShadowTopicState    `protobuf:"varint,2,opt,name=state,proto3,enum=redpanda.core.admin.v2.ShadowTopicState" json:"state,omitempty"`
	TotalLag        int64                  `protobuf:"varint,3,opt,name=total_lag,json=totalLag,proto3" json:"total_lag,omitempty"`
	TotalPartitions int32                  `protobuf:"varint,4,opt,name=total_partitions,json=totalPartitions,proto3" json:"total_partitions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShadowTopic) Reset() {
	*x = ShadowTopic{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShadowTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowTopic) ProtoMessage() {}

func (x *ShadowTopic) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowTopic.ProtoReflect.Descriptor instead.
func (*ShadowTopic) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{9}
}

func (x *ShadowTopic) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *ShadowTopic) GetState() v2.ShadowTopicState {
	if x != nil {
		return x.State
	}
	return v2.ShadowTopicState(0)
}

func (x *ShadowTopic) GetTotalLag() int64 {
	if x != nil {
		return x.TotalLag
	}
	return 0
}

func (x *ShadowTopic) GetTotalPartitions() int32 {
	if x != nil {
		return x.TotalPartitions
	}
	return 0
}

type ListShadowLinkTopicsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shadow topic status information
	ShadowTopics []*ShadowTopic `protobuf:"bytes,1,rep,name=shadow_topics,json=shadowTopics,proto3" json:"shadow_topics,omitempty"`
	// Token to retrieve the next page
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListShadowLinkTopicsResponse) Reset() {
	*x = ListShadowLinkTopicsResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinkTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinkTopicsResponse) ProtoMessage() {}

func (x *ListShadowLinkTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinkTopicsResponse.ProtoReflect.Descriptor instead.
func (*ListShadowLinkTopicsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{10}
}

func (x *ListShadowLinkTopicsResponse) GetShadowTopics() []*ShadowTopic {
	if x != nil {
		return x.ShadowTopics
	}
	return nil
}

func (x *ListShadowLinkTopicsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetShadowTopicRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ShadowLinkName string                 `protobuf:"bytes,1,opt,name=shadow_link_name,json=shadowLinkName,proto3" json:"shadow_link_name,omitempty"`
	TopicName      string                 `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetShadowTopicRequest) Reset() {
	*x = GetShadowTopicRequest{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShadowTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShadowTopicRequest) ProtoMessage() {}

func (x *GetShadowTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShadowTopicRequest.ProtoReflect.Descriptor instead.
func (*GetShadowTopicRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{11}
}

func (x *GetShadowTopicRequest) GetShadowLinkName() string {
	if x != nil {
		return x.ShadowLinkName
	}
	return ""
}

func (x *GetShadowTopicRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

type GetShadowTopicResponse struct {
	state           protoimpl.MessageState                  `protogen:"open.v1"`
	TopicName       string                                  `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	State           v2.ShadowTopicState                     `protobuf:"varint,2,opt,name=state,proto3,enum=redpanda.core.admin.v2.ShadowTopicState" json:"state,omitempty"`
	TotalLag        int64                                   `protobuf:"varint,3,opt,name=total_lag,json=totalLag,proto3" json:"total_lag,omitempty"`
	TotalPartitions int64                                   `protobuf:"varint,4,opt,name=total_partitions,json=totalPartitions,proto3" json:"total_partitions,omitempty"`
	Partitions      []*GetShadowTopicResponse_PartitionInfo `protobuf:"bytes,5,rep,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetShadowTopicResponse) Reset() {
	*x = GetShadowTopicResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShadowTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShadowTopicResponse) ProtoMessage() {}

func (x *GetShadowTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShadowTopicResponse.ProtoReflect.Descriptor instead.
func (*GetShadowTopicResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{12}
}

func (x *GetShadowTopicResponse) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *GetShadowTopicResponse) GetState() v2.ShadowTopicState {
	if x != nil {
		return x.State
	}
	return v2.ShadowTopicState(0)
}

func (x *GetShadowTopicResponse) GetTotalLag() int64 {
	if x != nil {
		return x.TotalLag
	}
	return 0
}

func (x *GetShadowTopicResponse) GetTotalPartitions() int64 {
	if x != nil {
		return x.TotalPartitions
	}
	return 0
}

func (x *GetShadowTopicResponse) GetPartitions() []*GetShadowTopicResponse_PartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type ListShadowLinksRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Substring match on shadow link name. Case-sensitive.
	NameContains  string `protobuf:"bytes,1,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListShadowLinksRequest_Filter) Reset() {
	*x = ListShadowLinksRequest_Filter{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinksRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinksRequest_Filter) ProtoMessage() {}

func (x *ListShadowLinksRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinksRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListShadowLinksRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListShadowLinksRequest_Filter) GetNameContains() string {
	if x != nil {
		return x.NameContains
	}
	return ""
}

type ListShadowLinksResponse_ShadowLink struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State            v2.ShadowLinkState     `protobuf:"varint,2,opt,name=state,proto3,enum=redpanda.core.admin.v2.ShadowLinkState" json:"state,omitempty"`
	BootstrapServers []string               `protobuf:"bytes,3,rep,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListShadowLinksResponse_ShadowLink) Reset() {
	*x = ListShadowLinksResponse_ShadowLink{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinksResponse_ShadowLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinksResponse_ShadowLink) ProtoMessage() {}

func (x *ListShadowLinksResponse_ShadowLink) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinksResponse_ShadowLink.ProtoReflect.Descriptor instead.
func (*ListShadowLinksResponse_ShadowLink) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListShadowLinksResponse_ShadowLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListShadowLinksResponse_ShadowLink) GetState() v2.ShadowLinkState {
	if x != nil {
		return x.State
	}
	return v2.ShadowLinkState(0)
}

func (x *ListShadowLinksResponse_ShadowLink) GetBootstrapServers() []string {
	if x != nil {
		return x.BootstrapServers
	}
	return nil
}

type ListShadowLinkTopicsRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Substring match on shadow topic name. Case-sensitive.
	TopicNameContains string `protobuf:"bytes,1,opt,name=topic_name_contains,json=topicNameContains,proto3" json:"topic_name_contains,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListShadowLinkTopicsRequest_Filter) Reset() {
	*x = ListShadowLinkTopicsRequest_Filter{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinkTopicsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinkTopicsRequest_Filter) ProtoMessage() {}

func (x *ListShadowLinkTopicsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinkTopicsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListShadowLinkTopicsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListShadowLinkTopicsRequest_Filter) GetTopicNameContains() string {
	if x != nil {
		return x.TopicNameContains
	}
	return ""
}

// Partition-level information
type GetShadowTopicResponse_PartitionInfo struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	PartitionId                int64                  `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	SourceLastStableOffset     int64                  `protobuf:"varint,2,opt,name=source_last_stable_offset,json=sourceLastStableOffset,proto3" json:"source_last_stable_offset,omitempty"`
	HighWatermark              int64                  `protobuf:"varint,3,opt,name=high_watermark,json=highWatermark,proto3" json:"high_watermark,omitempty"`
	SourceHighWatermark        int64                  `protobuf:"varint,4,opt,name=source_high_watermark,json=sourceHighWatermark,proto3" json:"source_high_watermark,omitempty"`
	Lag                        int64                  `protobuf:"varint,5,opt,name=lag,proto3" json:"lag,omitempty"`
	SourceLastUpdatedTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=source_last_updated_timestamp,json=sourceLastUpdatedTimestamp,proto3" json:"source_last_updated_timestamp,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *GetShadowTopicResponse_PartitionInfo) Reset() {
	*x = GetShadowTopicResponse_PartitionInfo{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShadowTopicResponse_PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShadowTopicResponse_PartitionInfo) ProtoMessage() {}

func (x *GetShadowTopicResponse_PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShadowTopicResponse_PartitionInfo.ProtoReflect.Descriptor instead.
func (*GetShadowTopicResponse_PartitionInfo) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GetShadowTopicResponse_PartitionInfo) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *GetShadowTopicResponse_PartitionInfo) GetSourceLastStableOffset() int64 {
	if x != nil {
		return x.SourceLastStableOffset
	}
	return 0
}

func (x *GetShadowTopicResponse_PartitionInfo) GetHighWatermark() int64 {
	if x != nil {
		return x.HighWatermark
	}
	return 0
}

func (x *GetShadowTopicResponse_PartitionInfo) GetSourceHighWatermark() int64 {
	if x != nil {
		return x.SourceHighWatermark
	}
	return 0
}

func (x *GetShadowTopicResponse_PartitionInfo) GetLag() int64 {
	if x != nil {
		return x.Lag
	}
	return 0
}

func (x *GetShadowTopicResponse_PartitionInfo) GetSourceLastUpdatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SourceLastUpdatedTimestamp
	}
	return nil
}

var File_redpanda_api_console_v1alpha1_shadowlink_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x66, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x63, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xcb, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x8b, 0x01, 0x92, 0x41, 0x75, 0x32, 0x61, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30,
	0x30, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x2d, 0x31, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf0, 0xbf, 0xba, 0x48, 0x10, 0x1a, 0x0e, 0x18, 0xe8, 0x07, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x4b,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0xba, 0x48, 0x19, 0x72, 0x17, 0x18, 0x80, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x5c, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x8c, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0, 0x03, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x10,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x59, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xa9, 0x01, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x8b, 0x01, 0x92, 0x41, 0x75, 0x32, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20,
	0x2d, 0x31, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
	0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf, 0xba, 0x48, 0x10, 0x1a, 0x0e,
	0x18, 0xe8, 0x07, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x56, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x13, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xba, 0x48, 0x19, 0x72, 0x17, 0x18, 0xf9, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x5c, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x11, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x22,
	0xb4, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x10, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x67, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0xb9, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x61, 0x67, 0x12, 0x5d, 0x0a, 0x1d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x1a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0xe7, 0x13, 0x0a, 0x11,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xe8, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe9, 0x01, 0x92, 0x41, 0xb4, 0x01, 0x12, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x43, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61,
	0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x52, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b,
	0x0a, 0x39, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08,
	0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0xb9, 0x02, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x33,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x92, 0x41, 0x8d, 0x01,
	0x12, 0x0f, 0x47, 0x65, 0x74, 0x20, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x4c, 0x69, 0x6e,
	0x6b, 0x1a, 0x33, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x62, 0x79,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x45, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3e, 0x0a,
	0x02, 0x4f, 0x4b, 0x12, 0x38, 0x0a, 0x36, 0x1a, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d,
	0x04, 0x08, 0x01, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e,
	0x6b, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xda, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x35, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x92, 0x41,
	0xaf, 0x01, 0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x51, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69,
	0x6e, 0x6b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x47, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x40, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x3a, 0x0a, 0x38, 0x1a, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0xe5, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x01, 0x92, 0x41, 0x9e, 0x01, 0x12, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x1a,
	0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x59,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x52, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20,
	0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x39,
	0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10,
	0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x32, 0x27, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xfd, 0x01,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x92, 0x41,
	0x51, 0x12, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x62, 0x79, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x1c, 0x0a, 0x03, 0x32, 0x30, 0x34, 0x12, 0x15, 0x0a, 0x13, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa2, 0x03,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x90, 0x02, 0x92, 0x41, 0xcf, 0x01, 0x12, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x4c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x45,
	0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x3f, 0x0a, 0x3d, 0x1a, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0xeb, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xeb, 0x01, 0x92, 0x41, 0x9d, 0x01, 0x12, 0x10, 0x47, 0x65, 0x74, 0x20, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x41, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20,
	0x61, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4a, 0x46,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3f, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x39, 0x0a, 0x37, 0x1a,
	0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x2f, 0x7b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x1a, 0x53, 0x92, 0x41, 0x50, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x40, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x42, 0xb0, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0f, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x63,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescData = file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_redpanda_api_console_v1alpha1_shadowlink_proto_goTypes = []any{
	(*CreateShadowLinkResponse)(nil),             // 0: redpanda.api.console.v1alpha1.CreateShadowLinkResponse
	(*GetShadowLinkRequest)(nil),                 // 1: redpanda.api.console.v1alpha1.GetShadowLinkRequest
	(*GetShadowLinkResponse)(nil),                // 2: redpanda.api.console.v1alpha1.GetShadowLinkResponse
	(*ShadowLink)(nil),                           // 3: redpanda.api.console.v1alpha1.ShadowLink
	(*ListShadowLinksRequest)(nil),               // 4: redpanda.api.console.v1alpha1.ListShadowLinksRequest
	(*ListShadowLinksResponse)(nil),              // 5: redpanda.api.console.v1alpha1.ListShadowLinksResponse
	(*UpdateShadowLinkResponse)(nil),             // 6: redpanda.api.console.v1alpha1.UpdateShadowLinkResponse
	(*DeleteShadowLinkResponse)(nil),             // 7: redpanda.api.console.v1alpha1.DeleteShadowLinkResponse
	(*ListShadowLinkTopicsRequest)(nil),          // 8: redpanda.api.console.v1alpha1.ListShadowLinkTopicsRequest
	(*ShadowTopic)(nil),                          // 9: redpanda.api.console.v1alpha1.ShadowTopic
	(*ListShadowLinkTopicsResponse)(nil),         // 10: redpanda.api.console.v1alpha1.ListShadowLinkTopicsResponse
	(*GetShadowTopicRequest)(nil),                // 11: redpanda.api.console.v1alpha1.GetShadowTopicRequest
	(*GetShadowTopicResponse)(nil),               // 12: redpanda.api.console.v1alpha1.GetShadowTopicResponse
	(*ListShadowLinksRequest_Filter)(nil),        // 13: redpanda.api.console.v1alpha1.ListShadowLinksRequest.Filter
	(*ListShadowLinksResponse_ShadowLink)(nil),   // 14: redpanda.api.console.v1alpha1.ListShadowLinksResponse.ShadowLink
	(*ListShadowLinkTopicsRequest_Filter)(nil),   // 15: redpanda.api.console.v1alpha1.ListShadowLinkTopicsRequest.Filter
	(*GetShadowTopicResponse_PartitionInfo)(nil), // 16: redpanda.api.console.v1alpha1.GetShadowTopicResponse.PartitionInfo
	(*v2.ShadowLinkConfigurations)(nil),          // 17: redpanda.core.admin.v2.ShadowLinkConfigurations
	(v2.ShadowLinkState)(0),                      // 18: redpanda.core.admin.v2.ShadowLinkState
	(v2.ShadowTopicState)(0),                     // 19: redpanda.core.admin.v2.ShadowTopicState
	(*timestamppb.Timestamp)(nil),                // 20: google.protobuf.Timestamp
	(*v2.CreateShadowLinkRequest)(nil),           // 21: redpanda.core.admin.v2.CreateShadowLinkRequest
	(*v2.UpdateShadowLinkRequest)(nil),           // 22: redpanda.core.admin.v2.UpdateShadowLinkRequest
	(*v2.DeleteShadowLinkRequest)(nil),           // 23: redpanda.core.admin.v2.DeleteShadowLinkRequest
}
var file_redpanda_api_console_v1alpha1_shadowlink_proto_depIdxs = []int32{
	3,  // 0: redpanda.api.console.v1alpha1.CreateShadowLinkResponse.shadow_link:type_name -> redpanda.api.console.v1alpha1.ShadowLink
	3,  // 1: redpanda.api.console.v1alpha1.GetShadowLinkResponse.shadow_link:type_name -> redpanda.api.console.v1alpha1.ShadowLink
	17, // 2: redpanda.api.console.v1alpha1.ShadowLink.configurations:type_name -> redpanda.core.admin.v2.ShadowLinkConfigurations
	18, // 3: redpanda.api.console.v1alpha1.ShadowLink.state:type_name -> redpanda.core.admin.v2.ShadowLinkState
	13, // 4: redpanda.api.console.v1alpha1.ListShadowLinksRequest.filter:type_name -> redpanda.api.console.v1alpha1.ListShadowLinksRequest.Filter
	14, // 5: redpanda.api.console.v1alpha1.ListShadowLinksResponse.shadow_links:type_name -> redpanda.api.console.v1alpha1.ListShadowLinksResponse.ShadowLink
	15, // 6: redpanda.api.console.v1alpha1.ListShadowLinkTopicsRequest.filter:type_name -> redpanda.api.console.v1alpha1.ListShadowLinkTopicsRequest.Filter
	19, // 7: redpanda.api.console.v1alpha1.ShadowTopic.state:type_name -> redpanda.core.admin.v2.ShadowTopicState
	9,  // 8: redpanda.api.console.v1alpha1.ListShadowLinkTopicsResponse.shadow_topics:type_name -> redpanda.api.console.v1alpha1.ShadowTopic
	19, // 9: redpanda.api.console.v1alpha1.GetShadowTopicResponse.state:type_name -> redpanda.core.admin.v2.ShadowTopicState
	16, // 10: redpanda.api.console.v1alpha1.GetShadowTopicResponse.partitions:type_name -> redpanda.api.console.v1alpha1.GetShadowTopicResponse.PartitionInfo
	18, // 11: redpanda.api.console.v1alpha1.ListShadowLinksResponse.ShadowLink.state:type_name -> redpanda.core.admin.v2.ShadowLinkState
	20, // 12: redpanda.api.console.v1alpha1.GetShadowTopicResponse.PartitionInfo.source_last_updated_timestamp:type_name -> google.protobuf.Timestamp
	21, // 13: redpanda.api.console.v1alpha1.ShadowLinkService.CreateShadowLink:input_type -> redpanda.core.admin.v2.CreateShadowLinkRequest
	1,  // 14: redpanda.api.console.v1alpha1.ShadowLinkService.GetShadowLink:input_type -> redpanda.api.console.v1alpha1.GetShadowLinkRequest
	4,  // 15: redpanda.api.console.v1alpha1.ShadowLinkService.ListShadowLinks:input_type -> redpanda.api.console.v1alpha1.ListShadowLinksRequest
	22, // 16: redpanda.api.console.v1alpha1.ShadowLinkService.UpdateShadowLink:input_type -> redpanda.core.admin.v2.UpdateShadowLinkRequest
	23, // 17: redpanda.api.console.v1alpha1.ShadowLinkService.DeleteShadowLink:input_type -> redpanda.core.admin.v2.DeleteShadowLinkRequest
	8,  // 18: redpanda.api.console.v1alpha1.ShadowLinkService.ListShadowLinkTopics:input_type -> redpanda.api.console.v1alpha1.ListShadowLinkTopicsRequest
	11, // 19: redpanda.api.console.v1alpha1.ShadowLinkService.GetShadowTopic:input_type -> redpanda.api.console.v1alpha1.GetShadowTopicRequest
	0,  // 20: redpanda.api.console.v1alpha1.ShadowLinkService.CreateShadowLink:output_type -> redpanda.api.console.v1alpha1.CreateShadowLinkResponse
	2,  // 21: redpanda.api.console.v1alpha1.ShadowLinkService.GetShadowLink:output_type -> redpanda.api.console.v1alpha1.GetShadowLinkResponse
	5,  // 22: redpanda.api.console.v1alpha1.ShadowLinkService.ListShadowLinks:output_type -> redpanda.api.console.v1alpha1.ListShadowLinksResponse
	6,  // 23: redpanda.api.console.v1alpha1.ShadowLinkService.UpdateShadowLink:output_type -> redpanda.api.console.v1alpha1.UpdateShadowLinkResponse
	7,  // 24: redpanda.api.console.v1alpha1.ShadowLinkService.DeleteShadowLink:output_type -> redpanda.api.console.v1alpha1.DeleteShadowLinkResponse
	10, // 25: redpanda.api.console.v1alpha1.ShadowLinkService.ListShadowLinkTopics:output_type -> redpanda.api.console.v1alpha1.ListShadowLinkTopicsResponse
	12, // 26: redpanda.api.console.v1alpha1.ShadowLinkService.GetShadowTopic:output_type -> redpanda.api.console.v1alpha1.GetShadowTopicResponse
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_shadowlink_proto_init() }
func file_redpanda_api_console_v1alpha1_shadowlink_proto_init() {
	if File_redpanda_api_console_v1alpha1_shadowlink_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_shadowlink_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_shadowlink_proto_depIdxs,
		MessageInfos:      file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_shadowlink_proto = out.File
	file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_shadowlink_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_shadowlink_proto_depIdxs = nil
}
