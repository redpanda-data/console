// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/shadowlink.proto

package consolev1alpha1

import (
	reflect "reflect"
	sync "sync"

	v2 "buf.build/gen/go/redpandadata/core/protocolbuffers/go/redpanda/core/admin/v2"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateShadowLinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShadowLink    *v2.ShadowLink         `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateShadowLinkResponse) Reset() {
	*x = CreateShadowLinkResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShadowLinkResponse) ProtoMessage() {}

func (x *CreateShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*CreateShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{0}
}

func (x *CreateShadowLinkResponse) GetShadowLink() *v2.ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

type GetShadowLinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShadowLink    *v2.ShadowLink         `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShadowLinkResponse) Reset() {
	*x = GetShadowLinkResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShadowLinkResponse) ProtoMessage() {}

func (x *GetShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*GetShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{1}
}

func (x *GetShadowLinkResponse) GetShadowLink() *v2.ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

type ListShadowLinksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShadowLinks   []*v2.ShadowLink       `protobuf:"bytes,1,rep,name=shadow_links,json=shadowLinks,proto3" json:"shadow_links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListShadowLinksResponse) Reset() {
	*x = ListShadowLinksResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinksResponse) ProtoMessage() {}

func (x *ListShadowLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinksResponse.ProtoReflect.Descriptor instead.
func (*ListShadowLinksResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{2}
}

func (x *ListShadowLinksResponse) GetShadowLinks() []*v2.ShadowLink {
	if x != nil {
		return x.ShadowLinks
	}
	return nil
}

type UpdateShadowLinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateShadowLinkResponse) Reset() {
	*x = UpdateShadowLinkResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShadowLinkResponse) ProtoMessage() {}

func (x *UpdateShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*UpdateShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{3}
}

type DeleteShadowLinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteShadowLinkResponse) Reset() {
	*x = DeleteShadowLinkResponse{}
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShadowLinkResponse) ProtoMessage() {}

func (x *DeleteShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*DeleteShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP(), []int{4}
}

var File_redpanda_api_console_v1alpha1_shadowlink_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5f, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x22, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b,
	0x22, 0x60, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9a, 0x0d, 0x0a, 0x11, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xe8, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xe9, 0x01, 0x92, 0x41, 0xb4, 0x01, 0x12, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x43, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20,
	0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a,
	0x59, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x52, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x39, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0xb2, 0x02, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2c, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xbc, 0x01, 0x92, 0x41, 0x8d, 0x01, 0x12, 0x0f, 0x47, 0x65, 0x74, 0x20, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x33, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x45,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3e, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x38, 0x0a, 0x36, 0x1a,
	0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0xa7, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0x92,
	0x41, 0x83, 0x01, 0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x47, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x40, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x3a, 0x0a, 0x38, 0x1a, 0x36,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0xe5, 0x02, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x01, 0x92, 0x41, 0x9e, 0x01,
	0x12, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20,
	0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20,
	0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x52, 0x0a, 0x13, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x39, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6,
	0x1d, 0x04, 0x08, 0x02, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x0b, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x32, 0x27, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x2f,
	0x7b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0xfd, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7f, 0x92, 0x41, 0x51, 0x12, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x1c, 0x0a, 0x03, 0x32, 0x30, 0x34,
	0x12, 0x15, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x03, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x1a, 0x53, 0x92, 0x41, 0x50, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x40, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x42, 0xb0, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0f, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x63, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescData = file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_redpanda_api_console_v1alpha1_shadowlink_proto_goTypes = []any{
	(*CreateShadowLinkResponse)(nil),   // 0: redpanda.api.console.v1alpha1.CreateShadowLinkResponse
	(*GetShadowLinkResponse)(nil),      // 1: redpanda.api.console.v1alpha1.GetShadowLinkResponse
	(*ListShadowLinksResponse)(nil),    // 2: redpanda.api.console.v1alpha1.ListShadowLinksResponse
	(*UpdateShadowLinkResponse)(nil),   // 3: redpanda.api.console.v1alpha1.UpdateShadowLinkResponse
	(*DeleteShadowLinkResponse)(nil),   // 4: redpanda.api.console.v1alpha1.DeleteShadowLinkResponse
	(*v2.ShadowLink)(nil),              // 5: redpanda.core.admin.v2.ShadowLink
	(*v2.CreateShadowLinkRequest)(nil), // 6: redpanda.core.admin.v2.CreateShadowLinkRequest
	(*v2.GetShadowLinkRequest)(nil),    // 7: redpanda.core.admin.v2.GetShadowLinkRequest
	(*v2.ListShadowLinksRequest)(nil),  // 8: redpanda.core.admin.v2.ListShadowLinksRequest
	(*v2.UpdateShadowLinkRequest)(nil), // 9: redpanda.core.admin.v2.UpdateShadowLinkRequest
	(*v2.DeleteShadowLinkRequest)(nil), // 10: redpanda.core.admin.v2.DeleteShadowLinkRequest
}
var file_redpanda_api_console_v1alpha1_shadowlink_proto_depIdxs = []int32{
	5,  // 0: redpanda.api.console.v1alpha1.CreateShadowLinkResponse.shadow_link:type_name -> redpanda.core.admin.v2.ShadowLink
	5,  // 1: redpanda.api.console.v1alpha1.GetShadowLinkResponse.shadow_link:type_name -> redpanda.core.admin.v2.ShadowLink
	5,  // 2: redpanda.api.console.v1alpha1.ListShadowLinksResponse.shadow_links:type_name -> redpanda.core.admin.v2.ShadowLink
	6,  // 3: redpanda.api.console.v1alpha1.ShadowLinkService.CreateShadowLink:input_type -> redpanda.core.admin.v2.CreateShadowLinkRequest
	7,  // 4: redpanda.api.console.v1alpha1.ShadowLinkService.GetShadowLink:input_type -> redpanda.core.admin.v2.GetShadowLinkRequest
	8,  // 5: redpanda.api.console.v1alpha1.ShadowLinkService.ListShadowLinks:input_type -> redpanda.core.admin.v2.ListShadowLinksRequest
	9,  // 6: redpanda.api.console.v1alpha1.ShadowLinkService.UpdateShadowLink:input_type -> redpanda.core.admin.v2.UpdateShadowLinkRequest
	10, // 7: redpanda.api.console.v1alpha1.ShadowLinkService.DeleteShadowLink:input_type -> redpanda.core.admin.v2.DeleteShadowLinkRequest
	0,  // 8: redpanda.api.console.v1alpha1.ShadowLinkService.CreateShadowLink:output_type -> redpanda.api.console.v1alpha1.CreateShadowLinkResponse
	1,  // 9: redpanda.api.console.v1alpha1.ShadowLinkService.GetShadowLink:output_type -> redpanda.api.console.v1alpha1.GetShadowLinkResponse
	2,  // 10: redpanda.api.console.v1alpha1.ShadowLinkService.ListShadowLinks:output_type -> redpanda.api.console.v1alpha1.ListShadowLinksResponse
	3,  // 11: redpanda.api.console.v1alpha1.ShadowLinkService.UpdateShadowLink:output_type -> redpanda.api.console.v1alpha1.UpdateShadowLinkResponse
	4,  // 12: redpanda.api.console.v1alpha1.ShadowLinkService.DeleteShadowLink:output_type -> redpanda.api.console.v1alpha1.DeleteShadowLinkResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_shadowlink_proto_init() }
func file_redpanda_api_console_v1alpha1_shadowlink_proto_init() {
	if File_redpanda_api_console_v1alpha1_shadowlink_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_shadowlink_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_shadowlink_proto_depIdxs,
		MessageInfos:      file_redpanda_api_console_v1alpha1_shadowlink_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_shadowlink_proto = out.File
	file_redpanda_api_console_v1alpha1_shadowlink_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_shadowlink_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_shadowlink_proto_depIdxs = nil
}
