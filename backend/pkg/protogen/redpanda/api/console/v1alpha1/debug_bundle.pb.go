// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/debug_bundle.proto

package consolev1alpha1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Error code enum.
// https://github.com/redpanda-data/redpanda/blob/dev/src/v/debug_bundle/error.h#L22
type BundleErrorCode int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	// OK. No Error.
	BundleErrorCode_BUNDLE_ERROR_CODE_OK BundleErrorCode = 0
	// Debug bundle process already running
	BundleErrorCode_BUNDLE_ERROR_CODE_PROCESS_ALREADY_RUNNING BundleErrorCode = 1
	// Debug bundle process not running.
	BundleErrorCode_BUNDLE_ERROR_CODE_PROCESS_NOT_RUNNING BundleErrorCode = 2
	// Invalid parameters.
	BundleErrorCode_BUNDLE_ERROR_CODE_INVALID_PARAMETERS BundleErrorCode = 3
	// Internal error.
	BundleErrorCode_BUNDLE_ERROR_CODE_INTERNAL_ERROR BundleErrorCode = 4
	// Debug process failed.
	BundleErrorCode_BUNDLE_ERROR_CODE_PROCESS_FAILED BundleErrorCode = 5
	// Job ID not recognized.
	BundleErrorCode_BUNDLE_ERROR_CODE_INVALID_JOB_ID BundleErrorCode = 6
	// Debug bundle process was never started.
	BundleErrorCode_BUNDLE_ERROR_CODE_PROCESS_NOT_STARTED BundleErrorCode = 7
	// rpk binary not found
	BundleErrorCode_BUNDLE_ERROR_CODE_RPK_BINARY_NOT_PRESENT BundleErrorCode = 8
	// Debug bundle expired.
	BundleErrorCode_BUNDLE_ERROR_CODE_DEBUG_BUNDLE_EXPIRED BundleErrorCode = 9
)

// Enum value maps for BundleErrorCode.
var (
	BundleErrorCode_name = map[int32]string{
		0: "BUNDLE_ERROR_CODE_OK",
		1: "BUNDLE_ERROR_CODE_PROCESS_ALREADY_RUNNING",
		2: "BUNDLE_ERROR_CODE_PROCESS_NOT_RUNNING",
		3: "BUNDLE_ERROR_CODE_INVALID_PARAMETERS",
		4: "BUNDLE_ERROR_CODE_INTERNAL_ERROR",
		5: "BUNDLE_ERROR_CODE_PROCESS_FAILED",
		6: "BUNDLE_ERROR_CODE_INVALID_JOB_ID",
		7: "BUNDLE_ERROR_CODE_PROCESS_NOT_STARTED",
		8: "BUNDLE_ERROR_CODE_RPK_BINARY_NOT_PRESENT",
		9: "BUNDLE_ERROR_CODE_DEBUG_BUNDLE_EXPIRED",
	}
	BundleErrorCode_value = map[string]int32{
		"BUNDLE_ERROR_CODE_OK":                      0,
		"BUNDLE_ERROR_CODE_PROCESS_ALREADY_RUNNING": 1,
		"BUNDLE_ERROR_CODE_PROCESS_NOT_RUNNING":     2,
		"BUNDLE_ERROR_CODE_INVALID_PARAMETERS":      3,
		"BUNDLE_ERROR_CODE_INTERNAL_ERROR":          4,
		"BUNDLE_ERROR_CODE_PROCESS_FAILED":          5,
		"BUNDLE_ERROR_CODE_INVALID_JOB_ID":          6,
		"BUNDLE_ERROR_CODE_PROCESS_NOT_STARTED":     7,
		"BUNDLE_ERROR_CODE_RPK_BINARY_NOT_PRESENT":  8,
		"BUNDLE_ERROR_CODE_DEBUG_BUNDLE_EXPIRED":    9,
	}
)

func (x BundleErrorCode) Enum() *BundleErrorCode {
	p := new(BundleErrorCode)
	*p = x
	return p
}

func (x BundleErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BundleErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[0].Descriptor()
}

func (BundleErrorCode) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[0]
}

func (x BundleErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BundleErrorCode.Descriptor instead.
func (BundleErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{0}
}

type UnhealthyReason int32

const (
	UnhealthyReason_UNHEALTHY_REASON_UNSPECIFIED                 UnhealthyReason = 0
	UnhealthyReason_UNHEALTHY_REASON_NODES_DOWN                  UnhealthyReason = 1
	UnhealthyReason_UNHEALTHY_REASON_LEADERLESS_PARTITIONS       UnhealthyReason = 2
	UnhealthyReason_UNHEALTHY_REASON_UNDER_REPLICATED_PARTITIONS UnhealthyReason = 3
	UnhealthyReason_UNHEALTHY_REASON_NO_ELECTED_CONTROLLER       UnhealthyReason = 4
	UnhealthyReason_UNHEALTHY_REASON_NO_HEALTH_REPORT            UnhealthyReason = 5
)

// Enum value maps for UnhealthyReason.
var (
	UnhealthyReason_name = map[int32]string{
		0: "UNHEALTHY_REASON_UNSPECIFIED",
		1: "UNHEALTHY_REASON_NODES_DOWN",
		2: "UNHEALTHY_REASON_LEADERLESS_PARTITIONS",
		3: "UNHEALTHY_REASON_UNDER_REPLICATED_PARTITIONS",
		4: "UNHEALTHY_REASON_NO_ELECTED_CONTROLLER",
		5: "UNHEALTHY_REASON_NO_HEALTH_REPORT",
	}
	UnhealthyReason_value = map[string]int32{
		"UNHEALTHY_REASON_UNSPECIFIED":                 0,
		"UNHEALTHY_REASON_NODES_DOWN":                  1,
		"UNHEALTHY_REASON_LEADERLESS_PARTITIONS":       2,
		"UNHEALTHY_REASON_UNDER_REPLICATED_PARTITIONS": 3,
		"UNHEALTHY_REASON_NO_ELECTED_CONTROLLER":       4,
		"UNHEALTHY_REASON_NO_HEALTH_REPORT":            5,
	}
)

func (x UnhealthyReason) Enum() *UnhealthyReason {
	p := new(UnhealthyReason)
	*p = x
	return p
}

func (x UnhealthyReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnhealthyReason) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[1].Descriptor()
}

func (UnhealthyReason) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[1]
}

func (x UnhealthyReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnhealthyReason.Descriptor instead.
func (UnhealthyReason) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{1}
}

type SCRAMAuth_Mechanism int32

const (
	SCRAMAuth_MECHANISM_UNSPECIFIED   SCRAMAuth_Mechanism = 0
	SCRAMAuth_MECHANISM_SCRAM_SHA_256 SCRAMAuth_Mechanism = 1
	SCRAMAuth_MECHANISM_SCRAM_SHA_512 SCRAMAuth_Mechanism = 2
)

// Enum value maps for SCRAMAuth_Mechanism.
var (
	SCRAMAuth_Mechanism_name = map[int32]string{
		0: "MECHANISM_UNSPECIFIED",
		1: "MECHANISM_SCRAM_SHA_256",
		2: "MECHANISM_SCRAM_SHA_512",
	}
	SCRAMAuth_Mechanism_value = map[string]int32{
		"MECHANISM_UNSPECIFIED":   0,
		"MECHANISM_SCRAM_SHA_256": 1,
		"MECHANISM_SCRAM_SHA_512": 2,
	}
)

func (x SCRAMAuth_Mechanism) Enum() *SCRAMAuth_Mechanism {
	p := new(SCRAMAuth_Mechanism)
	*p = x
	return p
}

func (x SCRAMAuth_Mechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCRAMAuth_Mechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[2].Descriptor()
}

func (SCRAMAuth_Mechanism) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[2]
}

func (x SCRAMAuth_Mechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCRAMAuth_Mechanism.Descriptor instead.
func (SCRAMAuth_Mechanism) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{0, 0}
}

type DebugBundleStatus_Status int32

const (
	DebugBundleStatus_STATUS_UNSPECIFIED DebugBundleStatus_Status = 0
	DebugBundleStatus_STATUS_RUNNING     DebugBundleStatus_Status = 1
	DebugBundleStatus_STATUS_SUCCESS     DebugBundleStatus_Status = 2
	// There is a cluster config that permits users to set a TTL on the generated bundle.
	// By default there is no expiration, but a user can set it to say "expire 1 day after it's generated" so once that day passes,
	// the service will clean up the bundle from disk and mark that job as expired.
	DebugBundleStatus_STATUS_EXPIRED DebugBundleStatus_Status = 3
	DebugBundleStatus_STATUS_ERROR   DebugBundleStatus_Status = 4
)

// Enum value maps for DebugBundleStatus_Status.
var (
	DebugBundleStatus_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_RUNNING",
		2: "STATUS_SUCCESS",
		3: "STATUS_EXPIRED",
		4: "STATUS_ERROR",
	}
	DebugBundleStatus_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_RUNNING":     1,
		"STATUS_SUCCESS":     2,
		"STATUS_EXPIRED":     3,
		"STATUS_ERROR":       4,
	}
)

func (x DebugBundleStatus_Status) Enum() *DebugBundleStatus_Status {
	p := new(DebugBundleStatus_Status)
	*p = x
	return p
}

func (x DebugBundleStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugBundleStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[3].Descriptor()
}

func (DebugBundleStatus_Status) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[3]
}

func (x DebugBundleStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugBundleStatus_Status.Descriptor instead.
func (DebugBundleStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{5, 0}
}

// SCRAM Auth settings.
type SCRAMAuth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Mechanism     SCRAMAuth_Mechanism    `protobuf:"varint,3,opt,name=mechanism,proto3,enum=redpanda.api.console.v1alpha1.SCRAMAuth_Mechanism" json:"mechanism,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCRAMAuth) Reset() {
	*x = SCRAMAuth{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCRAMAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRAMAuth) ProtoMessage() {}

func (x *SCRAMAuth) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRAMAuth.ProtoReflect.Descriptor instead.
func (*SCRAMAuth) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{0}
}

func (x *SCRAMAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SCRAMAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SCRAMAuth) GetMechanism() SCRAMAuth_Mechanism {
	if x != nil {
		return x.Mechanism
	}
	return SCRAMAuth_MECHANISM_UNSPECIFIED
}

// Request to start the creation of debug bundle process with given configuration parameters.
type CreateDebugBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional authentication settings to use for the request.
	//
	// Types that are valid to be assigned to Authentication:
	//
	//	*CreateDebugBundleRequest_Scram
	Authentication isCreateDebugBundleRequest_Authentication `protobuf_oneof:"authentication"`
	// Optional broker IDs. Do not set / leave empty to create for all.
	BrokerIds []int32 `protobuf:"varint,3,rep,packed,name=broker_ids,json=brokerIds,proto3" json:"broker_ids,omitempty"`
	// The size limit of the controller logs that can be stored in the bundle.
	ControllerLogsSizeLimitBytes int32 `protobuf:"varint,4,opt,name=controller_logs_size_limit_bytes,json=controllerLogsSizeLimitBytes,proto3" json:"controller_logs_size_limit_bytes,omitempty"`
	// For how long to collect samples for the CPU profiler
	CpuProfilerWaitSeconds *int32 `protobuf:"varint,5,opt,name=cpu_profiler_wait_seconds,json=cpuProfilerWaitSeconds,proto3,oneof" json:"cpu_profiler_wait_seconds,omitempty"`
	// Include logs dated from specified date onward.
	LogsSince *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=logs_since,json=logsSince,proto3" json:"logs_since,omitempty"`
	// Read the logs until the given size is reached.
	LogsSizeLimitBytes int32 `protobuf:"varint,7,opt,name=logs_size_limit_bytes,json=logsSizeLimitBytes,proto3" json:"logs_size_limit_bytes,omitempty"`
	// Include logs older than the specified date.
	LogsUntil *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=logs_until,json=logsUntil,proto3" json:"logs_until,omitempty"`
	// Interval between metrics snapshots.
	MetricsIntervalSeconds int32 `protobuf:"varint,9,opt,name=metrics_interval_seconds,json=metricsIntervalSeconds,proto3" json:"metrics_interval_seconds,omitempty"`
	// Interval between metrics snapshots.
	MetricsSamples        int32  `protobuf:"varint,10,opt,name=metrics_samples,json=metricsSamples,proto3" json:"metrics_samples,omitempty"`
	TlsEnabled            bool   `protobuf:"varint,11,opt,name=tls_enabled,json=tlsEnabled,proto3" json:"tls_enabled,omitempty"`
	TlsInsecureSkipVerify bool   `protobuf:"varint,12,opt,name=tls_insecure_skip_verify,json=tlsInsecureSkipVerify,proto3" json:"tls_insecure_skip_verify,omitempty"`
	Namespace             string `protobuf:"bytes,13,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label selector configuration properties.
	LabelSelector []*LabelSelector `protobuf:"bytes,14,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Partitions. When provided, rpk saves extra admin API requests for those partitions.
	// Optional.
	// In format {namespace/}topic/{partition ids} where namespace is optional and will be replaced with "kafka" if not provided.
	// Partition IDs is comma separated numbers.
	// kafka/foo/1,2,3. also there can be multiple of those so
	// ['kafka/foo/1,2,3', 'private/baz/3.4.5']
	Partitions    []string `protobuf:"bytes,15,rep,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDebugBundleRequest) Reset() {
	*x = CreateDebugBundleRequest{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebugBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebugBundleRequest) ProtoMessage() {}

func (x *CreateDebugBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebugBundleRequest.ProtoReflect.Descriptor instead.
func (*CreateDebugBundleRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDebugBundleRequest) GetAuthentication() isCreateDebugBundleRequest_Authentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetScram() *SCRAMAuth {
	if x != nil {
		if x, ok := x.Authentication.(*CreateDebugBundleRequest_Scram); ok {
			return x.Scram
		}
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetBrokerIds() []int32 {
	if x != nil {
		return x.BrokerIds
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetControllerLogsSizeLimitBytes() int32 {
	if x != nil {
		return x.ControllerLogsSizeLimitBytes
	}
	return 0
}

func (x *CreateDebugBundleRequest) GetCpuProfilerWaitSeconds() int32 {
	if x != nil && x.CpuProfilerWaitSeconds != nil {
		return *x.CpuProfilerWaitSeconds
	}
	return 0
}

func (x *CreateDebugBundleRequest) GetLogsSince() *timestamppb.Timestamp {
	if x != nil {
		return x.LogsSince
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetLogsSizeLimitBytes() int32 {
	if x != nil {
		return x.LogsSizeLimitBytes
	}
	return 0
}

func (x *CreateDebugBundleRequest) GetLogsUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.LogsUntil
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetMetricsIntervalSeconds() int32 {
	if x != nil {
		return x.MetricsIntervalSeconds
	}
	return 0
}

func (x *CreateDebugBundleRequest) GetMetricsSamples() int32 {
	if x != nil {
		return x.MetricsSamples
	}
	return 0
}

func (x *CreateDebugBundleRequest) GetTlsEnabled() bool {
	if x != nil {
		return x.TlsEnabled
	}
	return false
}

func (x *CreateDebugBundleRequest) GetTlsInsecureSkipVerify() bool {
	if x != nil {
		return x.TlsInsecureSkipVerify
	}
	return false
}

func (x *CreateDebugBundleRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateDebugBundleRequest) GetLabelSelector() []*LabelSelector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetPartitions() []string {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type isCreateDebugBundleRequest_Authentication interface {
	isCreateDebugBundleRequest_Authentication()
}

type CreateDebugBundleRequest_Scram struct {
	Scram *SCRAMAuth `protobuf:"bytes,1,opt,name=scram,proto3,oneof"`
}

func (*CreateDebugBundleRequest_Scram) isCreateDebugBundleRequest_Authentication() {}

type LabelSelector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{2}
}

func (x *LabelSelector) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelector) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Response to CreateDebugBundle.
type CreateDebugBundleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Job ID. UUID.
	JobId         string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDebugBundleResponse) Reset() {
	*x = CreateDebugBundleResponse{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDebugBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebugBundleResponse) ProtoMessage() {}

func (x *CreateDebugBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebugBundleResponse.ProtoReflect.Descriptor instead.
func (*CreateDebugBundleResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDebugBundleResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// Gets status of debug bundle progress.
type GetDebugBundleStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional broker IDs to get. If not set / empty get all.
	BrokerIds     []int32 `protobuf:"varint,1,rep,packed,name=broker_ids,json=brokerIds,proto3" json:"broker_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDebugBundleStatusRequest) Reset() {
	*x = GetDebugBundleStatusRequest{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebugBundleStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebugBundleStatusRequest) ProtoMessage() {}

func (x *GetDebugBundleStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebugBundleStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDebugBundleStatusRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{4}
}

func (x *GetDebugBundleStatusRequest) GetBrokerIds() []int32 {
	if x != nil {
		return x.BrokerIds
	}
	return nil
}

type DebugBundleStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The broker ID.
	BrokerId int32 `protobuf:"varint,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	// The job UUID of this process.
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The status of the job.
	Status DebugBundleStatus_Status `protobuf:"varint,3,opt,name=status,proto3,enum=redpanda.api.console.v1alpha1.DebugBundleStatus_Status" json:"status,omitempty"`
	// When the job was started.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Path in API to get the file.
	Filename string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	// Size of the debug bundle zip file.
	SizeBytes int64 `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Only filled in once the process completes.  Content of stdout from rpk.
	Stdout []string `protobuf:"bytes,7,rep,name=stdout,proto3" json:"stdout,omitempty"`
	// Only filled in once the process completes.  Content of stderr from rpk.
	Stderr        []string `protobuf:"bytes,8,rep,name=stderr,proto3" json:"stderr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugBundleStatus) Reset() {
	*x = DebugBundleStatus{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugBundleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugBundleStatus) ProtoMessage() {}

func (x *DebugBundleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugBundleStatus.ProtoReflect.Descriptor instead.
func (*DebugBundleStatus) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{5}
}

func (x *DebugBundleStatus) GetBrokerId() int32 {
	if x != nil {
		return x.BrokerId
	}
	return 0
}

func (x *DebugBundleStatus) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *DebugBundleStatus) GetStatus() DebugBundleStatus_Status {
	if x != nil {
		return x.Status
	}
	return DebugBundleStatus_STATUS_UNSPECIFIED
}

func (x *DebugBundleStatus) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DebugBundleStatus) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DebugBundleStatus) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *DebugBundleStatus) GetStdout() []string {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *DebugBundleStatus) GetStderr() []string {
	if x != nil {
		return x.Stderr
	}
	return nil
}

// The response to GetDebugBundleStatus.
type GetDebugBundleStatusResponse struct {
	state          protoimpl.MessageState                                  `protogen:"open.v1"`
	BrokerStatuses []*GetDebugBundleStatusResponse_DebugBundleBrokerStatus `protobuf:"bytes,1,rep,name=broker_statuses,json=brokerStatuses,proto3" json:"broker_statuses,omitempty"`
	// true if any of the brokers have debug bundle process
	// status regardless of error state
	// false if we get "debug bundle process not started" error
	// for all brokers
	HasDebugProcess bool `protobuf:"varint,2,opt,name=has_debug_process,json=hasDebugProcess,proto3" json:"has_debug_process,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetDebugBundleStatusResponse) Reset() {
	*x = GetDebugBundleStatusResponse{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebugBundleStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebugBundleStatusResponse) ProtoMessage() {}

func (x *GetDebugBundleStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebugBundleStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDebugBundleStatusResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{6}
}

func (x *GetDebugBundleStatusResponse) GetBrokerStatuses() []*GetDebugBundleStatusResponse_DebugBundleBrokerStatus {
	if x != nil {
		return x.BrokerStatuses
	}
	return nil
}

func (x *GetDebugBundleStatusResponse) GetHasDebugProcess() bool {
	if x != nil {
		return x.HasDebugProcess
	}
	return false
}

type CancelDebugBundleProcessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	JobId string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Optional broker IDs. Do not set / empty for all.
	BrokerIds     []int32 `protobuf:"varint,2,rep,packed,name=broker_ids,json=brokerIds,proto3" json:"broker_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelDebugBundleProcessRequest) Reset() {
	*x = CancelDebugBundleProcessRequest{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelDebugBundleProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDebugBundleProcessRequest) ProtoMessage() {}

func (x *CancelDebugBundleProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDebugBundleProcessRequest.ProtoReflect.Descriptor instead.
func (*CancelDebugBundleProcessRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{7}
}

func (x *CancelDebugBundleProcessRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *CancelDebugBundleProcessRequest) GetBrokerIds() []int32 {
	if x != nil {
		return x.BrokerIds
	}
	return nil
}

// Response for CancelDebugBundleProcess.
type CancelDebugBundleProcessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Errors        []*BundleError         `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelDebugBundleProcessResponse) Reset() {
	*x = CancelDebugBundleProcessResponse{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelDebugBundleProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDebugBundleProcessResponse) ProtoMessage() {}

func (x *CancelDebugBundleProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDebugBundleProcessResponse.ProtoReflect.Descriptor instead.
func (*CancelDebugBundleProcessResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{8}
}

func (x *CancelDebugBundleProcessResponse) GetErrors() []*BundleError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Request for DeleteDebugBundleFile.
type DeleteDebugBundleFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// optionally delete all
	// overrides individual settings
	DeleteAll     bool                              `protobuf:"varint,1,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
	Files         []*DeleteDebugBundleFileForBroker `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDebugBundleFileRequest) Reset() {
	*x = DeleteDebugBundleFileRequest{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDebugBundleFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDebugBundleFileRequest) ProtoMessage() {}

func (x *DeleteDebugBundleFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDebugBundleFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteDebugBundleFileRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDebugBundleFileRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteDebugBundleFileRequest) GetFiles() []*DeleteDebugBundleFileForBroker {
	if x != nil {
		return x.Files
	}
	return nil
}

// Parameters for DeleteDebugBundleFileRequest.
type DeleteDebugBundleFileForBroker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BrokerId      int32                  `protobuf:"varint,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDebugBundleFileForBroker) Reset() {
	*x = DeleteDebugBundleFileForBroker{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDebugBundleFileForBroker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDebugBundleFileForBroker) ProtoMessage() {}

func (x *DeleteDebugBundleFileForBroker) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDebugBundleFileForBroker.ProtoReflect.Descriptor instead.
func (*DeleteDebugBundleFileForBroker) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteDebugBundleFileForBroker) GetBrokerId() int32 {
	if x != nil {
		return x.BrokerId
	}
	return 0
}

func (x *DeleteDebugBundleFileForBroker) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// Response for DeleteDebugBundleFile.
type DeleteDebugBundleFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Errors        []*BundleError         `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDebugBundleFileResponse) Reset() {
	*x = DeleteDebugBundleFileResponse{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDebugBundleFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDebugBundleFileResponse) ProtoMessage() {}

func (x *DeleteDebugBundleFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDebugBundleFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteDebugBundleFileResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDebugBundleFileResponse) GetErrors() []*BundleError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Error details for various responses and operations.
type BundleError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The broker ID.
	BrokerId int32 `protobuf:"varint,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	// The broker URL used to get the status.
	BrokerUrl string `protobuf:"bytes,2,opt,name=broker_url,json=brokerUrl,proto3" json:"broker_url,omitempty"`
	// Whether the broker URL was determined speculatively.
	Speculative bool `protobuf:"varint,3,opt,name=speculative,proto3" json:"speculative,omitempty"`
	// The error code.
	Code BundleErrorCode `protobuf:"varint,4,opt,name=code,proto3,enum=redpanda.api.console.v1alpha1.BundleErrorCode" json:"code,omitempty"`
	// Additional information
	Message       string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BundleError) Reset() {
	*x = BundleError{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BundleError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleError) ProtoMessage() {}

func (x *BundleError) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleError.ProtoReflect.Descriptor instead.
func (*BundleError) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{12}
}

func (x *BundleError) GetBrokerId() int32 {
	if x != nil {
		return x.BrokerId
	}
	return 0
}

func (x *BundleError) GetBrokerUrl() string {
	if x != nil {
		return x.BrokerUrl
	}
	return ""
}

func (x *BundleError) GetSpeculative() bool {
	if x != nil {
		return x.Speculative
	}
	return false
}

func (x *BundleError) GetCode() BundleErrorCode {
	if x != nil {
		return x.Code
	}
	return BundleErrorCode_BUNDLE_ERROR_CODE_OK
}

func (x *BundleError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request for GetClusterHealth call.
type GetClusterHealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterHealthRequest) Reset() {
	*x = GetClusterHealthRequest{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterHealthRequest) ProtoMessage() {}

func (x *GetClusterHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterHealthRequest.ProtoReflect.Descriptor instead.
func (*GetClusterHealthRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{13}
}

// Response for GetClusterHealth call.
type GetClusterHealthResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// whether cluster is health or not
	IsHealthy        bool              `protobuf:"varint,1,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	UnhealthyReasons []UnhealthyReason `protobuf:"varint,2,rep,packed,name=unhealthy_reasons,json=unhealthyReasons,proto3,enum=redpanda.api.console.v1alpha1.UnhealthyReason" json:"unhealthy_reasons,omitempty"`
	// optional controller ID.
	// if cluster has no controller the property will not be present.
	ControllerId                   *int32             `protobuf:"varint,3,opt,name=controller_id,json=controllerId,proto3,oneof" json:"controller_id,omitempty"`
	AllBrokerIds                   []int32            `protobuf:"varint,4,rep,packed,name=all_broker_ids,json=allBrokerIds,proto3" json:"all_broker_ids,omitempty"`
	OfflineBrokerIds               []int32            `protobuf:"varint,5,rep,packed,name=offline_broker_ids,json=offlineBrokerIds,proto3" json:"offline_broker_ids,omitempty"`
	BrokerIdsInRecoveryMode        []int32            `protobuf:"varint,6,rep,packed,name=broker_ids_in_recovery_mode,json=brokerIdsInRecoveryMode,proto3" json:"broker_ids_in_recovery_mode,omitempty"`
	LeaderlessPartitionsCount      int32              `protobuf:"varint,7,opt,name=leaderless_partitions_count,json=leaderlessPartitionsCount,proto3" json:"leaderless_partitions_count,omitempty"`
	LeaderlessPartitions           []*TopicPartitions `protobuf:"bytes,8,rep,name=leaderless_partitions,json=leaderlessPartitions,proto3" json:"leaderless_partitions,omitempty"`
	UnderReplicatedPartitionsCount int32              `protobuf:"varint,9,opt,name=under_replicated_partitions_count,json=underReplicatedPartitionsCount,proto3" json:"under_replicated_partitions_count,omitempty"`
	UnderReplicatedPartitions      []*TopicPartitions `protobuf:"bytes,10,rep,name=under_replicated_partitions,json=underReplicatedPartitions,proto3" json:"under_replicated_partitions,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *GetClusterHealthResponse) Reset() {
	*x = GetClusterHealthResponse{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterHealthResponse) ProtoMessage() {}

func (x *GetClusterHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterHealthResponse.ProtoReflect.Descriptor instead.
func (*GetClusterHealthResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{14}
}

func (x *GetClusterHealthResponse) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *GetClusterHealthResponse) GetUnhealthyReasons() []UnhealthyReason {
	if x != nil {
		return x.UnhealthyReasons
	}
	return nil
}

func (x *GetClusterHealthResponse) GetControllerId() int32 {
	if x != nil && x.ControllerId != nil {
		return *x.ControllerId
	}
	return 0
}

func (x *GetClusterHealthResponse) GetAllBrokerIds() []int32 {
	if x != nil {
		return x.AllBrokerIds
	}
	return nil
}

func (x *GetClusterHealthResponse) GetOfflineBrokerIds() []int32 {
	if x != nil {
		return x.OfflineBrokerIds
	}
	return nil
}

func (x *GetClusterHealthResponse) GetBrokerIdsInRecoveryMode() []int32 {
	if x != nil {
		return x.BrokerIdsInRecoveryMode
	}
	return nil
}

func (x *GetClusterHealthResponse) GetLeaderlessPartitionsCount() int32 {
	if x != nil {
		return x.LeaderlessPartitionsCount
	}
	return 0
}

func (x *GetClusterHealthResponse) GetLeaderlessPartitions() []*TopicPartitions {
	if x != nil {
		return x.LeaderlessPartitions
	}
	return nil
}

func (x *GetClusterHealthResponse) GetUnderReplicatedPartitionsCount() int32 {
	if x != nil {
		return x.UnderReplicatedPartitionsCount
	}
	return 0
}

func (x *GetClusterHealthResponse) GetUnderReplicatedPartitions() []*TopicPartitions {
	if x != nil {
		return x.UnderReplicatedPartitions
	}
	return nil
}

type TopicPartitions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopicName     string                 `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	PartitionIds  []int32                `protobuf:"varint,2,rep,packed,name=partition_ids,json=partitionIds,proto3" json:"partition_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicPartitions) Reset() {
	*x = TopicPartitions{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicPartitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicPartitions) ProtoMessage() {}

func (x *TopicPartitions) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicPartitions.ProtoReflect.Descriptor instead.
func (*TopicPartitions) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{15}
}

func (x *TopicPartitions) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *TopicPartitions) GetPartitionIds() []int32 {
	if x != nil {
		return x.PartitionIds
	}
	return nil
}

type GetDebugBundleStatusResponse_DebugBundleBrokerStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The broker ID.
	BrokerId int32 `protobuf:"varint,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	// The broker URL used to get the status.
	BrokerUrl string `protobuf:"bytes,2,opt,name=broker_url,json=brokerUrl,proto3" json:"broker_url,omitempty"`
	// Whether the broker URL was determined speculatively.
	Speculative bool `protobuf:"varint,3,opt,name=speculative,proto3" json:"speculative,omitempty"`
	// The value of the status, either Bundle Error or status.
	//
	// Types that are valid to be assigned to Value:
	//
	//	*GetDebugBundleStatusResponse_DebugBundleBrokerStatus_Error
	//	*GetDebugBundleStatusResponse_DebugBundleBrokerStatus_BundleStatus
	Value         isGetDebugBundleStatusResponse_DebugBundleBrokerStatus_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDebugBundleStatusResponse_DebugBundleBrokerStatus) Reset() {
	*x = GetDebugBundleStatusResponse_DebugBundleBrokerStatus{}
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDebugBundleStatusResponse_DebugBundleBrokerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebugBundleStatusResponse_DebugBundleBrokerStatus) ProtoMessage() {}

func (x *GetDebugBundleStatusResponse_DebugBundleBrokerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebugBundleStatusResponse_DebugBundleBrokerStatus.ProtoReflect.Descriptor instead.
func (*GetDebugBundleStatusResponse_DebugBundleBrokerStatus) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetDebugBundleStatusResponse_DebugBundleBrokerStatus) GetBrokerId() int32 {
	if x != nil {
		return x.BrokerId
	}
	return 0
}

func (x *GetDebugBundleStatusResponse_DebugBundleBrokerStatus) GetBrokerUrl() string {
	if x != nil {
		return x.BrokerUrl
	}
	return ""
}

func (x *GetDebugBundleStatusResponse_DebugBundleBrokerStatus) GetSpeculative() bool {
	if x != nil {
		return x.Speculative
	}
	return false
}

func (x *GetDebugBundleStatusResponse_DebugBundleBrokerStatus) GetValue() isGetDebugBundleStatusResponse_DebugBundleBrokerStatus_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetDebugBundleStatusResponse_DebugBundleBrokerStatus) GetError() *BundleError {
	if x != nil {
		if x, ok := x.Value.(*GetDebugBundleStatusResponse_DebugBundleBrokerStatus_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *GetDebugBundleStatusResponse_DebugBundleBrokerStatus) GetBundleStatus() *DebugBundleStatus {
	if x != nil {
		if x, ok := x.Value.(*GetDebugBundleStatusResponse_DebugBundleBrokerStatus_BundleStatus); ok {
			return x.BundleStatus
		}
	}
	return nil
}

type isGetDebugBundleStatusResponse_DebugBundleBrokerStatus_Value interface {
	isGetDebugBundleStatusResponse_DebugBundleBrokerStatus_Value()
}

type GetDebugBundleStatusResponse_DebugBundleBrokerStatus_Error struct {
	Error *BundleError `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type GetDebugBundleStatusResponse_DebugBundleBrokerStatus_BundleStatus struct {
	BundleStatus *DebugBundleStatus `protobuf:"bytes,5,opt,name=bundle_status,json=bundleStatus,proto3,oneof"`
}

func (*GetDebugBundleStatusResponse_DebugBundleBrokerStatus_Error) isGetDebugBundleStatusResponse_DebugBundleBrokerStatus_Value() {
}

func (*GetDebugBundleStatusResponse_DebugBundleBrokerStatus_BundleStatus) isGetDebugBundleStatusResponse_DebugBundleBrokerStatus_Value() {
}

var File_redpanda_api_console_v1alpha1_debug_bundle_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDesc = []byte{
	0x0a, 0x30, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x02, 0x0a, 0x09, 0x53,
	0x43, 0x52, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8,
	0x01, 0x01, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x72, 0x05, 0x10,
	0x01, 0x18, 0x80, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x5f,
	0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22,
	0x60, 0x0a, 0x09, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x19, 0x0a, 0x15,
	0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x43, 0x48, 0x41,
	0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32,
	0x35, 0x36, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53,
	0x4d, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x10,
	0x02, 0x22, 0xf6, 0x06, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x05, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x43,
	0x52, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x72, 0x61, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x4f, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6c, 0x6f,
	0x67, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02,
	0x28, 0x00, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x19, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x0f, 0x48, 0x01, 0x52, 0x16,
	0x63, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67,
	0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x12, 0x6c, 0x6f,
	0x67, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x18, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30,
	0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x74, 0x6c, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba,
	0x48, 0x18, 0x72, 0x16, 0x18, 0xfd, 0x01, 0x32, 0x11, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x74, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0xba, 0x48, 0x5f, 0x72, 0x5d,
	0x18, 0xbd, 0x02, 0x32, 0x58, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5c, 0x2d, 0x5f, 0x2e,
	0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x28,
	0x2f, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5c, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f, 0x24, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x37, 0xba, 0x48, 0x34, 0x72, 0x32, 0x18, 0x3f, 0x32, 0x2e, 0x5e, 0x28, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5c, 0x2d, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f, 0x24, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x32, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0xae, 0x03, 0x0a, 0x11, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x22, 0x6e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x22, 0xe8, 0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x68, 0x61, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a,
	0x9d, 0x02, 0x0a, 0x17, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x70,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x57, 0x0a,
	0x0d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xeb, 0x02, 0x0a, 0x1f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0xa8, 0x02, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x90, 0x02, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0xc2, 0x48, 0x83, 0x02, 0x0a, 0xa5, 0x01, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44,
	0x1a, 0x7a, 0x21, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x20, 0x7c, 0x7c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x27, 0x27, 0x20, 0x7c, 0x7c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x27, 0x29, 0x0a, 0x59, 0x0a, 0x11,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x29, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x19, 0x21, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x66, 0x0a,
	0x20, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x53, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x0b, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xc4, 0x05, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x5b, 0x0a,
	0x11, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x17, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6c, 0x65, 0x73,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x1b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x2a,
	0xa6, 0x03, 0x0a, 0x0f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x2d, 0x0a,
	0x29, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25,
	0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x55, 0x4e, 0x44, 0x4c,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10,
	0x03, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x4e, 0x44, 0x4c,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x24, 0x0a,
	0x20, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x49,
	0x44, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2c,
	0x0a, 0x28, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x50, 0x4b, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26,
	0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x09, 0x2a, 0x85, 0x02, 0x0a, 0x0f, 0x55, 0x6e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c,
	0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x55,
	0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x4e, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x05,
	0x32, 0x9a, 0x06, 0x0a, 0x12, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x36, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a,
	0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x37, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a, 0xa6,
	0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x12, 0xa5, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x12, 0x9c,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x42, 0xb1, 0x02,
	0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x42, 0x10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x63, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52,
	0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70,
	0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70,
	0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescData = file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_redpanda_api_console_v1alpha1_debug_bundle_proto_goTypes = []any{
	(BundleErrorCode)(0),                                         // 0: redpanda.api.console.v1alpha1.BundleErrorCode
	(UnhealthyReason)(0),                                         // 1: redpanda.api.console.v1alpha1.UnhealthyReason
	(SCRAMAuth_Mechanism)(0),                                     // 2: redpanda.api.console.v1alpha1.SCRAMAuth.Mechanism
	(DebugBundleStatus_Status)(0),                                // 3: redpanda.api.console.v1alpha1.DebugBundleStatus.Status
	(*SCRAMAuth)(nil),                                            // 4: redpanda.api.console.v1alpha1.SCRAMAuth
	(*CreateDebugBundleRequest)(nil),                             // 5: redpanda.api.console.v1alpha1.CreateDebugBundleRequest
	(*LabelSelector)(nil),                                        // 6: redpanda.api.console.v1alpha1.LabelSelector
	(*CreateDebugBundleResponse)(nil),                            // 7: redpanda.api.console.v1alpha1.CreateDebugBundleResponse
	(*GetDebugBundleStatusRequest)(nil),                          // 8: redpanda.api.console.v1alpha1.GetDebugBundleStatusRequest
	(*DebugBundleStatus)(nil),                                    // 9: redpanda.api.console.v1alpha1.DebugBundleStatus
	(*GetDebugBundleStatusResponse)(nil),                         // 10: redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse
	(*CancelDebugBundleProcessRequest)(nil),                      // 11: redpanda.api.console.v1alpha1.CancelDebugBundleProcessRequest
	(*CancelDebugBundleProcessResponse)(nil),                     // 12: redpanda.api.console.v1alpha1.CancelDebugBundleProcessResponse
	(*DeleteDebugBundleFileRequest)(nil),                         // 13: redpanda.api.console.v1alpha1.DeleteDebugBundleFileRequest
	(*DeleteDebugBundleFileForBroker)(nil),                       // 14: redpanda.api.console.v1alpha1.DeleteDebugBundleFileForBroker
	(*DeleteDebugBundleFileResponse)(nil),                        // 15: redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse
	(*BundleError)(nil),                                          // 16: redpanda.api.console.v1alpha1.BundleError
	(*GetClusterHealthRequest)(nil),                              // 17: redpanda.api.console.v1alpha1.GetClusterHealthRequest
	(*GetClusterHealthResponse)(nil),                             // 18: redpanda.api.console.v1alpha1.GetClusterHealthResponse
	(*TopicPartitions)(nil),                                      // 19: redpanda.api.console.v1alpha1.TopicPartitions
	(*GetDebugBundleStatusResponse_DebugBundleBrokerStatus)(nil), // 20: redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.DebugBundleBrokerStatus
	(*timestamppb.Timestamp)(nil),                                // 21: google.protobuf.Timestamp
}
var file_redpanda_api_console_v1alpha1_debug_bundle_proto_depIdxs = []int32{
	2,  // 0: redpanda.api.console.v1alpha1.SCRAMAuth.mechanism:type_name -> redpanda.api.console.v1alpha1.SCRAMAuth.Mechanism
	4,  // 1: redpanda.api.console.v1alpha1.CreateDebugBundleRequest.scram:type_name -> redpanda.api.console.v1alpha1.SCRAMAuth
	21, // 2: redpanda.api.console.v1alpha1.CreateDebugBundleRequest.logs_since:type_name -> google.protobuf.Timestamp
	21, // 3: redpanda.api.console.v1alpha1.CreateDebugBundleRequest.logs_until:type_name -> google.protobuf.Timestamp
	6,  // 4: redpanda.api.console.v1alpha1.CreateDebugBundleRequest.label_selector:type_name -> redpanda.api.console.v1alpha1.LabelSelector
	3,  // 5: redpanda.api.console.v1alpha1.DebugBundleStatus.status:type_name -> redpanda.api.console.v1alpha1.DebugBundleStatus.Status
	21, // 6: redpanda.api.console.v1alpha1.DebugBundleStatus.created_at:type_name -> google.protobuf.Timestamp
	20, // 7: redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.broker_statuses:type_name -> redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.DebugBundleBrokerStatus
	16, // 8: redpanda.api.console.v1alpha1.CancelDebugBundleProcessResponse.errors:type_name -> redpanda.api.console.v1alpha1.BundleError
	14, // 9: redpanda.api.console.v1alpha1.DeleteDebugBundleFileRequest.files:type_name -> redpanda.api.console.v1alpha1.DeleteDebugBundleFileForBroker
	16, // 10: redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse.errors:type_name -> redpanda.api.console.v1alpha1.BundleError
	0,  // 11: redpanda.api.console.v1alpha1.BundleError.code:type_name -> redpanda.api.console.v1alpha1.BundleErrorCode
	1,  // 12: redpanda.api.console.v1alpha1.GetClusterHealthResponse.unhealthy_reasons:type_name -> redpanda.api.console.v1alpha1.UnhealthyReason
	19, // 13: redpanda.api.console.v1alpha1.GetClusterHealthResponse.leaderless_partitions:type_name -> redpanda.api.console.v1alpha1.TopicPartitions
	19, // 14: redpanda.api.console.v1alpha1.GetClusterHealthResponse.under_replicated_partitions:type_name -> redpanda.api.console.v1alpha1.TopicPartitions
	16, // 15: redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.DebugBundleBrokerStatus.error:type_name -> redpanda.api.console.v1alpha1.BundleError
	9,  // 16: redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.DebugBundleBrokerStatus.bundle_status:type_name -> redpanda.api.console.v1alpha1.DebugBundleStatus
	17, // 17: redpanda.api.console.v1alpha1.DebugBundleService.GetClusterHealth:input_type -> redpanda.api.console.v1alpha1.GetClusterHealthRequest
	5,  // 18: redpanda.api.console.v1alpha1.DebugBundleService.CreateDebugBundle:input_type -> redpanda.api.console.v1alpha1.CreateDebugBundleRequest
	8,  // 19: redpanda.api.console.v1alpha1.DebugBundleService.GetDebugBundleStatus:input_type -> redpanda.api.console.v1alpha1.GetDebugBundleStatusRequest
	11, // 20: redpanda.api.console.v1alpha1.DebugBundleService.CancelDebugBundleProcess:input_type -> redpanda.api.console.v1alpha1.CancelDebugBundleProcessRequest
	13, // 21: redpanda.api.console.v1alpha1.DebugBundleService.DeleteDebugBundleFile:input_type -> redpanda.api.console.v1alpha1.DeleteDebugBundleFileRequest
	18, // 22: redpanda.api.console.v1alpha1.DebugBundleService.GetClusterHealth:output_type -> redpanda.api.console.v1alpha1.GetClusterHealthResponse
	7,  // 23: redpanda.api.console.v1alpha1.DebugBundleService.CreateDebugBundle:output_type -> redpanda.api.console.v1alpha1.CreateDebugBundleResponse
	10, // 24: redpanda.api.console.v1alpha1.DebugBundleService.GetDebugBundleStatus:output_type -> redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse
	12, // 25: redpanda.api.console.v1alpha1.DebugBundleService.CancelDebugBundleProcess:output_type -> redpanda.api.console.v1alpha1.CancelDebugBundleProcessResponse
	15, // 26: redpanda.api.console.v1alpha1.DebugBundleService.DeleteDebugBundleFile:output_type -> redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_debug_bundle_proto_init() }
func file_redpanda_api_console_v1alpha1_debug_bundle_proto_init() {
	if File_redpanda_api_console_v1alpha1_debug_bundle_proto != nil {
		return
	}
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[1].OneofWrappers = []any{
		(*CreateDebugBundleRequest_Scram)(nil),
	}
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[14].OneofWrappers = []any{}
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[16].OneofWrappers = []any{
		(*GetDebugBundleStatusResponse_DebugBundleBrokerStatus_Error)(nil),
		(*GetDebugBundleStatusResponse_DebugBundleBrokerStatus_BundleStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_debug_bundle_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_debug_bundle_proto_depIdxs,
		EnumInfos:         file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes,
		MessageInfos:      file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_debug_bundle_proto = out.File
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_depIdxs = nil
}
