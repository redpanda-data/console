// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/authentication.proto

package consolev1alpha1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SASLMechanism int32

const (
	// The SASL mechanism is unspecified.
	SASLMechanism_SASL_MECHANISM_UNSPECIFIED SASLMechanism = 0
	// The SASL mechanism using SCRAM-SHA-256.
	SASLMechanism_SASL_MECHANISM_SCRAM_SHA_256 SASLMechanism = 1
	// The SASL mechanism using SCRAM-SHA-512.
	SASLMechanism_SASL_MECHANISM_SCRAM_SHA_512 SASLMechanism = 2
)

// Enum value maps for SASLMechanism.
var (
	SASLMechanism_name = map[int32]string{
		0: "SASL_MECHANISM_UNSPECIFIED",
		1: "SASL_MECHANISM_SCRAM_SHA_256",
		2: "SASL_MECHANISM_SCRAM_SHA_512",
	}
	SASLMechanism_value = map[string]int32{
		"SASL_MECHANISM_UNSPECIFIED":   0,
		"SASL_MECHANISM_SCRAM_SHA_256": 1,
		"SASL_MECHANISM_SCRAM_SHA_512": 2,
	}
)

func (x SASLMechanism) Enum() *SASLMechanism {
	p := new(SASLMechanism)
	*p = x
	return p
}

func (x SASLMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SASLMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[0].Descriptor()
}

func (SASLMechanism) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[0]
}

func (x SASLMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SASLMechanism.Descriptor instead.
func (SASLMechanism) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{0}
}

type AuthenticationMethod int32

const (
	// The authentication method is unspecified.
	AuthenticationMethod_AUTHENTICATION_METHOD_UNSPECIFIED AuthenticationMethod = 0
	// None is returned if authentication is disabled.
	AuthenticationMethod_AUTHENTICATION_METHOD_NONE AuthenticationMethod = 1
	// The authentication method using OpenID Connect.
	AuthenticationMethod_AUTHENTICATION_METHOD_OIDC AuthenticationMethod = 2
	// The authentication method using plain username/password.
	AuthenticationMethod_AUTHENTICATION_METHOD_BASIC AuthenticationMethod = 3
	// The authentication method for Redpanda Cloud.
	AuthenticationMethod_AUTHENTICATION_METHOD_REDPANDA_CLOUD AuthenticationMethod = 4
)

// Enum value maps for AuthenticationMethod.
var (
	AuthenticationMethod_name = map[int32]string{
		0: "AUTHENTICATION_METHOD_UNSPECIFIED",
		1: "AUTHENTICATION_METHOD_NONE",
		2: "AUTHENTICATION_METHOD_OIDC",
		3: "AUTHENTICATION_METHOD_BASIC",
		4: "AUTHENTICATION_METHOD_REDPANDA_CLOUD",
	}
	AuthenticationMethod_value = map[string]int32{
		"AUTHENTICATION_METHOD_UNSPECIFIED":    0,
		"AUTHENTICATION_METHOD_NONE":           1,
		"AUTHENTICATION_METHOD_OIDC":           2,
		"AUTHENTICATION_METHOD_BASIC":          3,
		"AUTHENTICATION_METHOD_REDPANDA_CLOUD": 4,
	}
)

func (x AuthenticationMethod) Enum() *AuthenticationMethod {
	p := new(AuthenticationMethod)
	*p = x
	return p
}

func (x AuthenticationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[1].Descriptor()
}

func (AuthenticationMethod) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[1]
}

func (x AuthenticationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationMethod.Descriptor instead.
func (AuthenticationMethod) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{1}
}

// Kafka ACL operation enumerates actions the user can perform on a Kafka cluster. The capabilties
// can apply globally or for specific resources (such as topics).
type KafkaAclOperation int32

const (
	KafkaAclOperation_KAFKA_ACL_OPERATION_UNSPECIFIED      KafkaAclOperation = 0
	KafkaAclOperation_KAFKA_ACL_OPERATION_READ             KafkaAclOperation = 1
	KafkaAclOperation_KAFKA_ACL_OPERATION_WRITE            KafkaAclOperation = 2
	KafkaAclOperation_KAFKA_ACL_OPERATION_CREATE           KafkaAclOperation = 3
	KafkaAclOperation_KAFKA_ACL_OPERATION_DELETE           KafkaAclOperation = 4
	KafkaAclOperation_KAFKA_ACL_OPERATION_ALTER            KafkaAclOperation = 5
	KafkaAclOperation_KAFKA_ACL_OPERATION_DESCRIBE         KafkaAclOperation = 6
	KafkaAclOperation_KAFKA_ACL_OPERATION_CLUSTER_ACTION   KafkaAclOperation = 7
	KafkaAclOperation_KAFKA_ACL_OPERATION_DESCRIBE_CONFIGS KafkaAclOperation = 8
	KafkaAclOperation_KAFKA_ACL_OPERATION_ALTER_CONFIGS    KafkaAclOperation = 9
	KafkaAclOperation_KAFKA_ACL_OPERATION_IDEMPOTENT_WRITE KafkaAclOperation = 10
	KafkaAclOperation_KAFKA_ACL_OPERATION_CREATE_TOKENS    KafkaAclOperation = 11
	KafkaAclOperation_KAFKA_ACL_OPERATION_DESCRIBE_TOKENS  KafkaAclOperation = 12
)

// Enum value maps for KafkaAclOperation.
var (
	KafkaAclOperation_name = map[int32]string{
		0:  "KAFKA_ACL_OPERATION_UNSPECIFIED",
		1:  "KAFKA_ACL_OPERATION_READ",
		2:  "KAFKA_ACL_OPERATION_WRITE",
		3:  "KAFKA_ACL_OPERATION_CREATE",
		4:  "KAFKA_ACL_OPERATION_DELETE",
		5:  "KAFKA_ACL_OPERATION_ALTER",
		6:  "KAFKA_ACL_OPERATION_DESCRIBE",
		7:  "KAFKA_ACL_OPERATION_CLUSTER_ACTION",
		8:  "KAFKA_ACL_OPERATION_DESCRIBE_CONFIGS",
		9:  "KAFKA_ACL_OPERATION_ALTER_CONFIGS",
		10: "KAFKA_ACL_OPERATION_IDEMPOTENT_WRITE",
		11: "KAFKA_ACL_OPERATION_CREATE_TOKENS",
		12: "KAFKA_ACL_OPERATION_DESCRIBE_TOKENS",
	}
	KafkaAclOperation_value = map[string]int32{
		"KAFKA_ACL_OPERATION_UNSPECIFIED":      0,
		"KAFKA_ACL_OPERATION_READ":             1,
		"KAFKA_ACL_OPERATION_WRITE":            2,
		"KAFKA_ACL_OPERATION_CREATE":           3,
		"KAFKA_ACL_OPERATION_DELETE":           4,
		"KAFKA_ACL_OPERATION_ALTER":            5,
		"KAFKA_ACL_OPERATION_DESCRIBE":         6,
		"KAFKA_ACL_OPERATION_CLUSTER_ACTION":   7,
		"KAFKA_ACL_OPERATION_DESCRIBE_CONFIGS": 8,
		"KAFKA_ACL_OPERATION_ALTER_CONFIGS":    9,
		"KAFKA_ACL_OPERATION_IDEMPOTENT_WRITE": 10,
		"KAFKA_ACL_OPERATION_CREATE_TOKENS":    11,
		"KAFKA_ACL_OPERATION_DESCRIBE_TOKENS":  12,
	}
)

func (x KafkaAclOperation) Enum() *KafkaAclOperation {
	p := new(KafkaAclOperation)
	*p = x
	return p
}

func (x KafkaAclOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KafkaAclOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[2].Descriptor()
}

func (KafkaAclOperation) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[2]
}

func (x KafkaAclOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KafkaAclOperation.Descriptor instead.
func (KafkaAclOperation) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{2}
}

// Schema Registry-specific capabilities.
type SchemaRegistryCapability int32

const (
	SchemaRegistryCapability_SCHEMA_REGISTRY_CAPABILITY_UNSPECIFIED SchemaRegistryCapability = 0
	SchemaRegistryCapability_SCHEMA_REGISTRY_CAPABILITY_READ        SchemaRegistryCapability = 1
	SchemaRegistryCapability_SCHEMA_REGISTRY_CAPABILITY_WRITE       SchemaRegistryCapability = 2
	SchemaRegistryCapability_SCHEMA_REGISTRY_CAPABILITY_DELETE      SchemaRegistryCapability = 3
)

// Enum value maps for SchemaRegistryCapability.
var (
	SchemaRegistryCapability_name = map[int32]string{
		0: "SCHEMA_REGISTRY_CAPABILITY_UNSPECIFIED",
		1: "SCHEMA_REGISTRY_CAPABILITY_READ",
		2: "SCHEMA_REGISTRY_CAPABILITY_WRITE",
		3: "SCHEMA_REGISTRY_CAPABILITY_DELETE",
	}
	SchemaRegistryCapability_value = map[string]int32{
		"SCHEMA_REGISTRY_CAPABILITY_UNSPECIFIED": 0,
		"SCHEMA_REGISTRY_CAPABILITY_READ":        1,
		"SCHEMA_REGISTRY_CAPABILITY_WRITE":       2,
		"SCHEMA_REGISTRY_CAPABILITY_DELETE":      3,
	}
)

func (x SchemaRegistryCapability) Enum() *SchemaRegistryCapability {
	p := new(SchemaRegistryCapability)
	*p = x
	return p
}

func (x SchemaRegistryCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaRegistryCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[3].Descriptor()
}

func (SchemaRegistryCapability) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[3]
}

func (x SchemaRegistryCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaRegistryCapability.Descriptor instead.
func (SchemaRegistryCapability) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{3}
}

// Redpanda cluster-wide capabilities.
type RedpandaCapability int32

const (
	RedpandaCapability_REDPANDA_CAPABILITY_UNSPECIFIED           RedpandaCapability = 0
	RedpandaCapability_REDPANDA_CAPABILITY_MANAGE_TRANSFORMS     RedpandaCapability = 1
	RedpandaCapability_REDPANDA_CAPABILITY_MANAGE_DEBUG_BUNDLE   RedpandaCapability = 2
	RedpandaCapability_REDPANDA_CAPABILITY_MANAGE_REDPANDA_USERS RedpandaCapability = 3
	RedpandaCapability_REDPANDA_CAPABILITY_MANAGE_RBAC           RedpandaCapability = 4
	RedpandaCapability_REDPANDA_CAPABILITY_MANAGE_LICENSE        RedpandaCapability = 5
)

// Enum value maps for RedpandaCapability.
var (
	RedpandaCapability_name = map[int32]string{
		0: "REDPANDA_CAPABILITY_UNSPECIFIED",
		1: "REDPANDA_CAPABILITY_MANAGE_TRANSFORMS",
		2: "REDPANDA_CAPABILITY_MANAGE_DEBUG_BUNDLE",
		3: "REDPANDA_CAPABILITY_MANAGE_REDPANDA_USERS",
		4: "REDPANDA_CAPABILITY_MANAGE_RBAC",
		5: "REDPANDA_CAPABILITY_MANAGE_LICENSE",
	}
	RedpandaCapability_value = map[string]int32{
		"REDPANDA_CAPABILITY_UNSPECIFIED":           0,
		"REDPANDA_CAPABILITY_MANAGE_TRANSFORMS":     1,
		"REDPANDA_CAPABILITY_MANAGE_DEBUG_BUNDLE":   2,
		"REDPANDA_CAPABILITY_MANAGE_REDPANDA_USERS": 3,
		"REDPANDA_CAPABILITY_MANAGE_RBAC":           4,
		"REDPANDA_CAPABILITY_MANAGE_LICENSE":        5,
	}
)

func (x RedpandaCapability) Enum() *RedpandaCapability {
	p := new(RedpandaCapability)
	*p = x
	return p
}

func (x RedpandaCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedpandaCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[4].Descriptor()
}

func (RedpandaCapability) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes[4]
}

func (x RedpandaCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedpandaCapability.Descriptor instead.
func (RedpandaCapability) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{4}
}

type LoginSaslScramRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The username for the login request.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The password for the login request.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// The SASL mechanism to be used for authentication.
	Mechanism SASLMechanism `protobuf:"varint,3,opt,name=mechanism,proto3,enum=redpanda.api.console.v1alpha1.SASLMechanism" json:"mechanism,omitempty"`
	// Whether or not the session token should be returned in the body.
	ReturnToken   bool `protobuf:"varint,4,opt,name=return_token,json=returnToken,proto3" json:"return_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginSaslScramRequest) Reset() {
	*x = LoginSaslScramRequest{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginSaslScramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSaslScramRequest) ProtoMessage() {}

func (x *LoginSaslScramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSaslScramRequest.ProtoReflect.Descriptor instead.
func (*LoginSaslScramRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{0}
}

func (x *LoginSaslScramRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginSaslScramRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginSaslScramRequest) GetMechanism() SASLMechanism {
	if x != nil {
		return x.Mechanism
	}
	return SASLMechanism_SASL_MECHANISM_UNSPECIFIED
}

func (x *LoginSaslScramRequest) GetReturnToken() bool {
	if x != nil {
		return x.ReturnToken
	}
	return false
}

type LoginSaslScramResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SessionToken is only set if return_token is set to true in the request.
	SessionToken  string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginSaslScramResponse) Reset() {
	*x = LoginSaslScramResponse{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginSaslScramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSaslScramResponse) ProtoMessage() {}

func (x *LoginSaslScramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSaslScramResponse.ProtoReflect.Descriptor instead.
func (*LoginSaslScramResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{1}
}

func (x *LoginSaslScramResponse) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

type UserIdentity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	AuthMethod    AuthenticationMethod   `protobuf:"varint,2,opt,name=auth_method,json=authMethod,proto3,enum=redpanda.api.console.v1alpha1.AuthenticationMethod" json:"auth_method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserIdentity) Reset() {
	*x = UserIdentity{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdentity) ProtoMessage() {}

func (x *UserIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdentity.ProtoReflect.Descriptor instead.
func (*UserIdentity) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{2}
}

func (x *UserIdentity) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserIdentity) GetAuthMethod() AuthenticationMethod {
	if x != nil {
		return x.AuthMethod
	}
	return AuthenticationMethod_AUTHENTICATION_METHOD_UNSPECIFIED
}

type ListAuthenticationMethodsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAuthenticationMethodsRequest) Reset() {
	*x = ListAuthenticationMethodsRequest{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthenticationMethodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthenticationMethodsRequest) ProtoMessage() {}

func (x *ListAuthenticationMethodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthenticationMethodsRequest.ProtoReflect.Descriptor instead.
func (*ListAuthenticationMethodsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{3}
}

type ListAuthenticationMethodsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of available authentication methods.
	Methods       []AuthenticationMethod `protobuf:"varint,1,rep,packed,name=methods,proto3,enum=redpanda.api.console.v1alpha1.AuthenticationMethod" json:"methods,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAuthenticationMethodsResponse) Reset() {
	*x = ListAuthenticationMethodsResponse{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthenticationMethodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthenticationMethodsResponse) ProtoMessage() {}

func (x *ListAuthenticationMethodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthenticationMethodsResponse.ProtoReflect.Descriptor instead.
func (*ListAuthenticationMethodsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{4}
}

func (x *ListAuthenticationMethodsResponse) GetMethods() []AuthenticationMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

type GetIdentityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIdentityRequest) Reset() {
	*x = GetIdentityRequest{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentityRequest) ProtoMessage() {}

func (x *GetIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentityRequest.ProtoReflect.Descriptor instead.
func (*GetIdentityRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{5}
}

type GetIdentityResponse struct {
	state                protoimpl.MessageState           `protogen:"open.v1"`
	DisplayName          string                           `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	AuthenticationMethod AuthenticationMethod             `protobuf:"varint,2,opt,name=authentication_method,json=authenticationMethod,proto3,enum=redpanda.api.console.v1alpha1.AuthenticationMethod" json:"authentication_method,omitempty"`
	AvatarUrl            string                           `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Permissions          *GetIdentityResponse_Permissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetIdentityResponse) Reset() {
	*x = GetIdentityResponse{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentityResponse) ProtoMessage() {}

func (x *GetIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentityResponse.ProtoReflect.Descriptor instead.
func (*GetIdentityResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{6}
}

func (x *GetIdentityResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GetIdentityResponse) GetAuthenticationMethod() AuthenticationMethod {
	if x != nil {
		return x.AuthenticationMethod
	}
	return AuthenticationMethod_AUTHENTICATION_METHOD_UNSPECIFIED
}

func (x *GetIdentityResponse) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GetIdentityResponse) GetPermissions() *GetIdentityResponse_Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type ListConsoleUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConsoleUsersRequest) Reset() {
	*x = ListConsoleUsersRequest{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConsoleUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsoleUsersRequest) ProtoMessage() {}

func (x *ListConsoleUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsoleUsersRequest.ProtoReflect.Descriptor instead.
func (*ListConsoleUsersRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{7}
}

type ListConsoleUsersResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Users         []*ListConsoleUsersResponse_User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConsoleUsersResponse) Reset() {
	*x = ListConsoleUsersResponse{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConsoleUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsoleUsersResponse) ProtoMessage() {}

func (x *ListConsoleUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsoleUsersResponse.ProtoReflect.Descriptor instead.
func (*ListConsoleUsersResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{8}
}

func (x *ListConsoleUsersResponse) GetUsers() []*ListConsoleUsersResponse_User {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetIdentityResponse_Permissions struct {
	state                  protoimpl.MessageState     `protogen:"open.v1"`
	KafkaClusterOperations []KafkaAclOperation        `protobuf:"varint,4,rep,packed,name=kafka_cluster_operations,json=kafkaClusterOperations,proto3,enum=redpanda.api.console.v1alpha1.KafkaAclOperation" json:"kafka_cluster_operations,omitempty"`
	SchemaRegistry         []SchemaRegistryCapability `protobuf:"varint,5,rep,packed,name=schema_registry,json=schemaRegistry,proto3,enum=redpanda.api.console.v1alpha1.SchemaRegistryCapability" json:"schema_registry,omitempty"`
	Redpanda               []RedpandaCapability       `protobuf:"varint,6,rep,packed,name=redpanda,proto3,enum=redpanda.api.console.v1alpha1.RedpandaCapability" json:"redpanda,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetIdentityResponse_Permissions) Reset() {
	*x = GetIdentityResponse_Permissions{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIdentityResponse_Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentityResponse_Permissions) ProtoMessage() {}

func (x *GetIdentityResponse_Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentityResponse_Permissions.ProtoReflect.Descriptor instead.
func (*GetIdentityResponse_Permissions) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetIdentityResponse_Permissions) GetKafkaClusterOperations() []KafkaAclOperation {
	if x != nil {
		return x.KafkaClusterOperations
	}
	return nil
}

func (x *GetIdentityResponse_Permissions) GetSchemaRegistry() []SchemaRegistryCapability {
	if x != nil {
		return x.SchemaRegistry
	}
	return nil
}

func (x *GetIdentityResponse_Permissions) GetRedpanda() []RedpandaCapability {
	if x != nil {
		return x.Redpanda
	}
	return nil
}

type ListConsoleUsersResponse_User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AuthMethod    AuthenticationMethod   `protobuf:"varint,2,opt,name=auth_method,json=authMethod,proto3,enum=redpanda.api.console.v1alpha1.AuthenticationMethod" json:"auth_method,omitempty"`
	Role          string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConsoleUsersResponse_User) Reset() {
	*x = ListConsoleUsersResponse_User{}
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConsoleUsersResponse_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsoleUsersResponse_User) ProtoMessage() {}

func (x *ListConsoleUsersResponse_User) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsoleUsersResponse_User.ProtoReflect.Descriptor instead.
func (*ListConsoleUsersResponse_User) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListConsoleUsersResponse_User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListConsoleUsersResponse_User) GetAuthMethod() AuthenticationMethod {
	if x != nil {
		return x.AuthMethod
	}
	return AuthenticationMethod_AUTHENTICATION_METHOD_UNSPECIFIED
}

func (x *ListConsoleUsersResponse_User) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

var File_redpanda_api_console_v1alpha1_authentication_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_authentication_proto_rawDesc = []byte{
	0x0a, 0x32, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x15,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x61, 0x73, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0a, 0xc8,
	0x01, 0x01, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x5c, 0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x41, 0x53, 0x4c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x42, 0x10, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x3d, 0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x61, 0x73, 0x6c, 0x53,
	0x63, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x77, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd0,
	0x04, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x14, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x60, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xaa, 0x02, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x18, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x63, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x60, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf5, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x84, 0x01,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x2a, 0x73, 0x0a, 0x0d, 0x53, 0x41, 0x53, 0x4c, 0x4d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45,
	0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45,
	0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41, 0x53, 0x4c, 0x5f,
	0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x02, 0x2a, 0xc8, 0x01, 0x0a, 0x14, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x4f, 0x49, 0x44, 0x43, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x10, 0x04, 0x2a, 0xe9, 0x03, 0x0a, 0x11, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x63,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x41,
	0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4b,
	0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x06, 0x12, 0x26, 0x0a,
	0x22, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41,
	0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x10, 0x08, 0x12,
	0x25, 0x0a, 0x21, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f,
	0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x45, 0x4d, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x0a,
	0x12, 0x25, 0x0a, 0x21, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x41, 0x46, 0x4b, 0x41,
	0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x0c,
	0x2a, 0xb8, 0x01, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a,
	0x26, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x48,
	0x45, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x8d, 0x02, 0x0a, 0x12,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x44, 0x50, 0x41,
	0x4e, 0x44, 0x41, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x53,
	0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x2d, 0x0a, 0x29, 0x52, 0x45, 0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x23,
	0x0a, 0x1f, 0x52, 0x45, 0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x42, 0x41,
	0x43, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x05, 0x32, 0xc3, 0x04, 0x0a, 0x15,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x61,
	0x73, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x61, 0x73,
	0x6c, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x61, 0x73, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x12, 0x3f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10,
	0x06, 0x42, 0xb4, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x63,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_console_v1alpha1_authentication_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_authentication_proto_rawDescData = file_redpanda_api_console_v1alpha1_authentication_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_authentication_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_authentication_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_authentication_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_authentication_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_authentication_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_redpanda_api_console_v1alpha1_authentication_proto_goTypes = []any{
	(SASLMechanism)(0),                        // 0: redpanda.api.console.v1alpha1.SASLMechanism
	(AuthenticationMethod)(0),                 // 1: redpanda.api.console.v1alpha1.AuthenticationMethod
	(KafkaAclOperation)(0),                    // 2: redpanda.api.console.v1alpha1.KafkaAclOperation
	(SchemaRegistryCapability)(0),             // 3: redpanda.api.console.v1alpha1.SchemaRegistryCapability
	(RedpandaCapability)(0),                   // 4: redpanda.api.console.v1alpha1.RedpandaCapability
	(*LoginSaslScramRequest)(nil),             // 5: redpanda.api.console.v1alpha1.LoginSaslScramRequest
	(*LoginSaslScramResponse)(nil),            // 6: redpanda.api.console.v1alpha1.LoginSaslScramResponse
	(*UserIdentity)(nil),                      // 7: redpanda.api.console.v1alpha1.UserIdentity
	(*ListAuthenticationMethodsRequest)(nil),  // 8: redpanda.api.console.v1alpha1.ListAuthenticationMethodsRequest
	(*ListAuthenticationMethodsResponse)(nil), // 9: redpanda.api.console.v1alpha1.ListAuthenticationMethodsResponse
	(*GetIdentityRequest)(nil),                // 10: redpanda.api.console.v1alpha1.GetIdentityRequest
	(*GetIdentityResponse)(nil),               // 11: redpanda.api.console.v1alpha1.GetIdentityResponse
	(*ListConsoleUsersRequest)(nil),           // 12: redpanda.api.console.v1alpha1.ListConsoleUsersRequest
	(*ListConsoleUsersResponse)(nil),          // 13: redpanda.api.console.v1alpha1.ListConsoleUsersResponse
	(*GetIdentityResponse_Permissions)(nil),   // 14: redpanda.api.console.v1alpha1.GetIdentityResponse.Permissions
	(*ListConsoleUsersResponse_User)(nil),     // 15: redpanda.api.console.v1alpha1.ListConsoleUsersResponse.User
}
var file_redpanda_api_console_v1alpha1_authentication_proto_depIdxs = []int32{
	0,  // 0: redpanda.api.console.v1alpha1.LoginSaslScramRequest.mechanism:type_name -> redpanda.api.console.v1alpha1.SASLMechanism
	1,  // 1: redpanda.api.console.v1alpha1.UserIdentity.auth_method:type_name -> redpanda.api.console.v1alpha1.AuthenticationMethod
	1,  // 2: redpanda.api.console.v1alpha1.ListAuthenticationMethodsResponse.methods:type_name -> redpanda.api.console.v1alpha1.AuthenticationMethod
	1,  // 3: redpanda.api.console.v1alpha1.GetIdentityResponse.authentication_method:type_name -> redpanda.api.console.v1alpha1.AuthenticationMethod
	14, // 4: redpanda.api.console.v1alpha1.GetIdentityResponse.permissions:type_name -> redpanda.api.console.v1alpha1.GetIdentityResponse.Permissions
	15, // 5: redpanda.api.console.v1alpha1.ListConsoleUsersResponse.users:type_name -> redpanda.api.console.v1alpha1.ListConsoleUsersResponse.User
	2,  // 6: redpanda.api.console.v1alpha1.GetIdentityResponse.Permissions.kafka_cluster_operations:type_name -> redpanda.api.console.v1alpha1.KafkaAclOperation
	3,  // 7: redpanda.api.console.v1alpha1.GetIdentityResponse.Permissions.schema_registry:type_name -> redpanda.api.console.v1alpha1.SchemaRegistryCapability
	4,  // 8: redpanda.api.console.v1alpha1.GetIdentityResponse.Permissions.redpanda:type_name -> redpanda.api.console.v1alpha1.RedpandaCapability
	1,  // 9: redpanda.api.console.v1alpha1.ListConsoleUsersResponse.User.auth_method:type_name -> redpanda.api.console.v1alpha1.AuthenticationMethod
	5,  // 10: redpanda.api.console.v1alpha1.AuthenticationService.LoginSaslScram:input_type -> redpanda.api.console.v1alpha1.LoginSaslScramRequest
	8,  // 11: redpanda.api.console.v1alpha1.AuthenticationService.ListAuthenticationMethods:input_type -> redpanda.api.console.v1alpha1.ListAuthenticationMethodsRequest
	10, // 12: redpanda.api.console.v1alpha1.AuthenticationService.GetIdentity:input_type -> redpanda.api.console.v1alpha1.GetIdentityRequest
	12, // 13: redpanda.api.console.v1alpha1.AuthenticationService.ListConsoleUsers:input_type -> redpanda.api.console.v1alpha1.ListConsoleUsersRequest
	6,  // 14: redpanda.api.console.v1alpha1.AuthenticationService.LoginSaslScram:output_type -> redpanda.api.console.v1alpha1.LoginSaslScramResponse
	9,  // 15: redpanda.api.console.v1alpha1.AuthenticationService.ListAuthenticationMethods:output_type -> redpanda.api.console.v1alpha1.ListAuthenticationMethodsResponse
	11, // 16: redpanda.api.console.v1alpha1.AuthenticationService.GetIdentity:output_type -> redpanda.api.console.v1alpha1.GetIdentityResponse
	13, // 17: redpanda.api.console.v1alpha1.AuthenticationService.ListConsoleUsers:output_type -> redpanda.api.console.v1alpha1.ListConsoleUsersResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_authentication_proto_init() }
func file_redpanda_api_console_v1alpha1_authentication_proto_init() {
	if File_redpanda_api_console_v1alpha1_authentication_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_authentication_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_authentication_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_authentication_proto_depIdxs,
		EnumInfos:         file_redpanda_api_console_v1alpha1_authentication_proto_enumTypes,
		MessageInfos:      file_redpanda_api_console_v1alpha1_authentication_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_authentication_proto = out.File
	file_redpanda_api_console_v1alpha1_authentication_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_authentication_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_authentication_proto_depIdxs = nil
}
