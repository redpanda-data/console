// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/cluster_status.proto

package consolev1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/console/v1alpha1"
)

// ClusterStatusServiceGatewayServer implements the gRPC server API for the ClusterStatusService
// service.
type ClusterStatusServiceGatewayServer struct {
	v1alpha1.UnimplementedClusterStatusServiceServer
	getKafkaInfo                       connect_gateway.UnaryHandler[v1alpha1.GetKafkaInfoRequest, v1alpha1.GetKafkaInfoResponse]
	getKafkaAuthorizerInfo             connect_gateway.UnaryHandler[v1alpha1.GetKafkaAuthorizerInfoRequest, v1alpha1.GetKafkaAuthorizerInfoResponse]
	getRedpandaInfo                    connect_gateway.UnaryHandler[v1alpha1.GetRedpandaInfoRequest, v1alpha1.GetRedpandaInfoResponse]
	getRedpandaPartitionBalancerStatus connect_gateway.UnaryHandler[v1alpha1.GetRedpandaPartitionBalancerStatusRequest, v1alpha1.GetRedpandaPartitionBalancerStatusResponse]
	getConsoleInfo                     connect_gateway.UnaryHandler[v1alpha1.GetConsoleInfoRequest, v1alpha1.GetConsoleInfoResponse]
	getKafkaConnectInfo                connect_gateway.UnaryHandler[v1alpha1.GetKafkaConnectInfoRequest, v1alpha1.GetKafkaConnectInfoResponse]
	getSchemaRegistryInfo              connect_gateway.UnaryHandler[v1alpha1.GetSchemaRegistryInfoRequest, v1alpha1.GetSchemaRegistryInfoResponse]
}

// NewClusterStatusServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// ClusterStatusService service.
func NewClusterStatusServiceGatewayServer(svc ClusterStatusServiceHandler, opts ...connect_gateway.HandlerOption) *ClusterStatusServiceGatewayServer {
	return &ClusterStatusServiceGatewayServer{
		getKafkaInfo:                       connect_gateway.NewUnaryHandler(ClusterStatusServiceGetKafkaInfoProcedure, svc.GetKafkaInfo, opts...),
		getKafkaAuthorizerInfo:             connect_gateway.NewUnaryHandler(ClusterStatusServiceGetKafkaAuthorizerInfoProcedure, svc.GetKafkaAuthorizerInfo, opts...),
		getRedpandaInfo:                    connect_gateway.NewUnaryHandler(ClusterStatusServiceGetRedpandaInfoProcedure, svc.GetRedpandaInfo, opts...),
		getRedpandaPartitionBalancerStatus: connect_gateway.NewUnaryHandler(ClusterStatusServiceGetRedpandaPartitionBalancerStatusProcedure, svc.GetRedpandaPartitionBalancerStatus, opts...),
		getConsoleInfo:                     connect_gateway.NewUnaryHandler(ClusterStatusServiceGetConsoleInfoProcedure, svc.GetConsoleInfo, opts...),
		getKafkaConnectInfo:                connect_gateway.NewUnaryHandler(ClusterStatusServiceGetKafkaConnectInfoProcedure, svc.GetKafkaConnectInfo, opts...),
		getSchemaRegistryInfo:              connect_gateway.NewUnaryHandler(ClusterStatusServiceGetSchemaRegistryInfoProcedure, svc.GetSchemaRegistryInfo, opts...),
	}
}

func (s *ClusterStatusServiceGatewayServer) GetKafkaInfo(ctx context.Context, req *v1alpha1.GetKafkaInfoRequest) (*v1alpha1.GetKafkaInfoResponse, error) {
	return s.getKafkaInfo(ctx, req)
}

func (s *ClusterStatusServiceGatewayServer) GetKafkaAuthorizerInfo(ctx context.Context, req *v1alpha1.GetKafkaAuthorizerInfoRequest) (*v1alpha1.GetKafkaAuthorizerInfoResponse, error) {
	return s.getKafkaAuthorizerInfo(ctx, req)
}

func (s *ClusterStatusServiceGatewayServer) GetRedpandaInfo(ctx context.Context, req *v1alpha1.GetRedpandaInfoRequest) (*v1alpha1.GetRedpandaInfoResponse, error) {
	return s.getRedpandaInfo(ctx, req)
}

func (s *ClusterStatusServiceGatewayServer) GetRedpandaPartitionBalancerStatus(ctx context.Context, req *v1alpha1.GetRedpandaPartitionBalancerStatusRequest) (*v1alpha1.GetRedpandaPartitionBalancerStatusResponse, error) {
	return s.getRedpandaPartitionBalancerStatus(ctx, req)
}

func (s *ClusterStatusServiceGatewayServer) GetConsoleInfo(ctx context.Context, req *v1alpha1.GetConsoleInfoRequest) (*v1alpha1.GetConsoleInfoResponse, error) {
	return s.getConsoleInfo(ctx, req)
}

func (s *ClusterStatusServiceGatewayServer) GetKafkaConnectInfo(ctx context.Context, req *v1alpha1.GetKafkaConnectInfoRequest) (*v1alpha1.GetKafkaConnectInfoResponse, error) {
	return s.getKafkaConnectInfo(ctx, req)
}

func (s *ClusterStatusServiceGatewayServer) GetSchemaRegistryInfo(ctx context.Context, req *v1alpha1.GetSchemaRegistryInfoRequest) (*v1alpha1.GetSchemaRegistryInfoResponse, error) {
	return s.getSchemaRegistryInfo(ctx, req)
}

// RegisterClusterStatusServiceHandlerGatewayServer registers the Connect handlers for the
// ClusterStatusService "svc" to "mux".
func RegisterClusterStatusServiceHandlerGatewayServer(mux *runtime.ServeMux, svc ClusterStatusServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterClusterStatusServiceHandlerServer(context.TODO(), mux, NewClusterStatusServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
