// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/shadowlink.proto

package consolev1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	v2 "buf.build/gen/go/redpandadata/core/protocolbuffers/go/redpanda/core/admin/v2"
	connect "connectrpc.com/connect"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/console/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ShadowLinkServiceName is the fully-qualified name of the ShadowLinkService service.
	ShadowLinkServiceName = "redpanda.api.console.v1alpha1.ShadowLinkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShadowLinkServiceCreateShadowLinkProcedure is the fully-qualified name of the ShadowLinkService's
	// CreateShadowLink RPC.
	ShadowLinkServiceCreateShadowLinkProcedure = "/redpanda.api.console.v1alpha1.ShadowLinkService/CreateShadowLink"
	// ShadowLinkServiceGetShadowLinkProcedure is the fully-qualified name of the ShadowLinkService's
	// GetShadowLink RPC.
	ShadowLinkServiceGetShadowLinkProcedure = "/redpanda.api.console.v1alpha1.ShadowLinkService/GetShadowLink"
	// ShadowLinkServiceListShadowLinksProcedure is the fully-qualified name of the ShadowLinkService's
	// ListShadowLinks RPC.
	ShadowLinkServiceListShadowLinksProcedure = "/redpanda.api.console.v1alpha1.ShadowLinkService/ListShadowLinks"
	// ShadowLinkServiceUpdateShadowLinkProcedure is the fully-qualified name of the ShadowLinkService's
	// UpdateShadowLink RPC.
	ShadowLinkServiceUpdateShadowLinkProcedure = "/redpanda.api.console.v1alpha1.ShadowLinkService/UpdateShadowLink"
	// ShadowLinkServiceDeleteShadowLinkProcedure is the fully-qualified name of the ShadowLinkService's
	// DeleteShadowLink RPC.
	ShadowLinkServiceDeleteShadowLinkProcedure = "/redpanda.api.console.v1alpha1.ShadowLinkService/DeleteShadowLink"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	shadowLinkServiceServiceDescriptor                = v1alpha1.File_redpanda_api_console_v1alpha1_shadowlink_proto.Services().ByName("ShadowLinkService")
	shadowLinkServiceCreateShadowLinkMethodDescriptor = shadowLinkServiceServiceDescriptor.Methods().ByName("CreateShadowLink")
	shadowLinkServiceGetShadowLinkMethodDescriptor    = shadowLinkServiceServiceDescriptor.Methods().ByName("GetShadowLink")
	shadowLinkServiceListShadowLinksMethodDescriptor  = shadowLinkServiceServiceDescriptor.Methods().ByName("ListShadowLinks")
	shadowLinkServiceUpdateShadowLinkMethodDescriptor = shadowLinkServiceServiceDescriptor.Methods().ByName("UpdateShadowLink")
	shadowLinkServiceDeleteShadowLinkMethodDescriptor = shadowLinkServiceServiceDescriptor.Methods().ByName("DeleteShadowLink")
)

// ShadowLinkServiceClient is a client for the redpanda.api.console.v1alpha1.ShadowLinkService
// service.
type ShadowLinkServiceClient interface {
	CreateShadowLink(context.Context, *connect.Request[v2.CreateShadowLinkRequest]) (*connect.Response[v1alpha1.CreateShadowLinkResponse], error)
	GetShadowLink(context.Context, *connect.Request[v2.GetShadowLinkRequest]) (*connect.Response[v1alpha1.GetShadowLinkResponse], error)
	ListShadowLinks(context.Context, *connect.Request[v2.ListShadowLinksRequest]) (*connect.Response[v1alpha1.ListShadowLinksResponse], error)
	UpdateShadowLink(context.Context, *connect.Request[v2.UpdateShadowLinkRequest]) (*connect.Response[v1alpha1.UpdateShadowLinkResponse], error)
	DeleteShadowLink(context.Context, *connect.Request[v2.DeleteShadowLinkRequest]) (*connect.Response[v1alpha1.DeleteShadowLinkResponse], error)
}

// NewShadowLinkServiceClient constructs a client for the
// redpanda.api.console.v1alpha1.ShadowLinkService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShadowLinkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ShadowLinkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shadowLinkServiceClient{
		createShadowLink: connect.NewClient[v2.CreateShadowLinkRequest, v1alpha1.CreateShadowLinkResponse](
			httpClient,
			baseURL+ShadowLinkServiceCreateShadowLinkProcedure,
			connect.WithSchema(shadowLinkServiceCreateShadowLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getShadowLink: connect.NewClient[v2.GetShadowLinkRequest, v1alpha1.GetShadowLinkResponse](
			httpClient,
			baseURL+ShadowLinkServiceGetShadowLinkProcedure,
			connect.WithSchema(shadowLinkServiceGetShadowLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listShadowLinks: connect.NewClient[v2.ListShadowLinksRequest, v1alpha1.ListShadowLinksResponse](
			httpClient,
			baseURL+ShadowLinkServiceListShadowLinksProcedure,
			connect.WithSchema(shadowLinkServiceListShadowLinksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateShadowLink: connect.NewClient[v2.UpdateShadowLinkRequest, v1alpha1.UpdateShadowLinkResponse](
			httpClient,
			baseURL+ShadowLinkServiceUpdateShadowLinkProcedure,
			connect.WithSchema(shadowLinkServiceUpdateShadowLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteShadowLink: connect.NewClient[v2.DeleteShadowLinkRequest, v1alpha1.DeleteShadowLinkResponse](
			httpClient,
			baseURL+ShadowLinkServiceDeleteShadowLinkProcedure,
			connect.WithSchema(shadowLinkServiceDeleteShadowLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// shadowLinkServiceClient implements ShadowLinkServiceClient.
type shadowLinkServiceClient struct {
	createShadowLink *connect.Client[v2.CreateShadowLinkRequest, v1alpha1.CreateShadowLinkResponse]
	getShadowLink    *connect.Client[v2.GetShadowLinkRequest, v1alpha1.GetShadowLinkResponse]
	listShadowLinks  *connect.Client[v2.ListShadowLinksRequest, v1alpha1.ListShadowLinksResponse]
	updateShadowLink *connect.Client[v2.UpdateShadowLinkRequest, v1alpha1.UpdateShadowLinkResponse]
	deleteShadowLink *connect.Client[v2.DeleteShadowLinkRequest, v1alpha1.DeleteShadowLinkResponse]
}

// CreateShadowLink calls redpanda.api.console.v1alpha1.ShadowLinkService.CreateShadowLink.
func (c *shadowLinkServiceClient) CreateShadowLink(ctx context.Context, req *connect.Request[v2.CreateShadowLinkRequest]) (*connect.Response[v1alpha1.CreateShadowLinkResponse], error) {
	return c.createShadowLink.CallUnary(ctx, req)
}

// GetShadowLink calls redpanda.api.console.v1alpha1.ShadowLinkService.GetShadowLink.
func (c *shadowLinkServiceClient) GetShadowLink(ctx context.Context, req *connect.Request[v2.GetShadowLinkRequest]) (*connect.Response[v1alpha1.GetShadowLinkResponse], error) {
	return c.getShadowLink.CallUnary(ctx, req)
}

// ListShadowLinks calls redpanda.api.console.v1alpha1.ShadowLinkService.ListShadowLinks.
func (c *shadowLinkServiceClient) ListShadowLinks(ctx context.Context, req *connect.Request[v2.ListShadowLinksRequest]) (*connect.Response[v1alpha1.ListShadowLinksResponse], error) {
	return c.listShadowLinks.CallUnary(ctx, req)
}

// UpdateShadowLink calls redpanda.api.console.v1alpha1.ShadowLinkService.UpdateShadowLink.
func (c *shadowLinkServiceClient) UpdateShadowLink(ctx context.Context, req *connect.Request[v2.UpdateShadowLinkRequest]) (*connect.Response[v1alpha1.UpdateShadowLinkResponse], error) {
	return c.updateShadowLink.CallUnary(ctx, req)
}

// DeleteShadowLink calls redpanda.api.console.v1alpha1.ShadowLinkService.DeleteShadowLink.
func (c *shadowLinkServiceClient) DeleteShadowLink(ctx context.Context, req *connect.Request[v2.DeleteShadowLinkRequest]) (*connect.Response[v1alpha1.DeleteShadowLinkResponse], error) {
	return c.deleteShadowLink.CallUnary(ctx, req)
}

// ShadowLinkServiceHandler is an implementation of the
// redpanda.api.console.v1alpha1.ShadowLinkService service.
type ShadowLinkServiceHandler interface {
	CreateShadowLink(context.Context, *connect.Request[v2.CreateShadowLinkRequest]) (*connect.Response[v1alpha1.CreateShadowLinkResponse], error)
	GetShadowLink(context.Context, *connect.Request[v2.GetShadowLinkRequest]) (*connect.Response[v1alpha1.GetShadowLinkResponse], error)
	ListShadowLinks(context.Context, *connect.Request[v2.ListShadowLinksRequest]) (*connect.Response[v1alpha1.ListShadowLinksResponse], error)
	UpdateShadowLink(context.Context, *connect.Request[v2.UpdateShadowLinkRequest]) (*connect.Response[v1alpha1.UpdateShadowLinkResponse], error)
	DeleteShadowLink(context.Context, *connect.Request[v2.DeleteShadowLinkRequest]) (*connect.Response[v1alpha1.DeleteShadowLinkResponse], error)
}

// NewShadowLinkServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShadowLinkServiceHandler(svc ShadowLinkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	shadowLinkServiceCreateShadowLinkHandler := connect.NewUnaryHandler(
		ShadowLinkServiceCreateShadowLinkProcedure,
		svc.CreateShadowLink,
		connect.WithSchema(shadowLinkServiceCreateShadowLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	shadowLinkServiceGetShadowLinkHandler := connect.NewUnaryHandler(
		ShadowLinkServiceGetShadowLinkProcedure,
		svc.GetShadowLink,
		connect.WithSchema(shadowLinkServiceGetShadowLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	shadowLinkServiceListShadowLinksHandler := connect.NewUnaryHandler(
		ShadowLinkServiceListShadowLinksProcedure,
		svc.ListShadowLinks,
		connect.WithSchema(shadowLinkServiceListShadowLinksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	shadowLinkServiceUpdateShadowLinkHandler := connect.NewUnaryHandler(
		ShadowLinkServiceUpdateShadowLinkProcedure,
		svc.UpdateShadowLink,
		connect.WithSchema(shadowLinkServiceUpdateShadowLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	shadowLinkServiceDeleteShadowLinkHandler := connect.NewUnaryHandler(
		ShadowLinkServiceDeleteShadowLinkProcedure,
		svc.DeleteShadowLink,
		connect.WithSchema(shadowLinkServiceDeleteShadowLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.console.v1alpha1.ShadowLinkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShadowLinkServiceCreateShadowLinkProcedure:
			shadowLinkServiceCreateShadowLinkHandler.ServeHTTP(w, r)
		case ShadowLinkServiceGetShadowLinkProcedure:
			shadowLinkServiceGetShadowLinkHandler.ServeHTTP(w, r)
		case ShadowLinkServiceListShadowLinksProcedure:
			shadowLinkServiceListShadowLinksHandler.ServeHTTP(w, r)
		case ShadowLinkServiceUpdateShadowLinkProcedure:
			shadowLinkServiceUpdateShadowLinkHandler.ServeHTTP(w, r)
		case ShadowLinkServiceDeleteShadowLinkProcedure:
			shadowLinkServiceDeleteShadowLinkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShadowLinkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShadowLinkServiceHandler struct{}

func (UnimplementedShadowLinkServiceHandler) CreateShadowLink(context.Context, *connect.Request[v2.CreateShadowLinkRequest]) (*connect.Response[v1alpha1.CreateShadowLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ShadowLinkService.CreateShadowLink is not implemented"))
}

func (UnimplementedShadowLinkServiceHandler) GetShadowLink(context.Context, *connect.Request[v2.GetShadowLinkRequest]) (*connect.Response[v1alpha1.GetShadowLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ShadowLinkService.GetShadowLink is not implemented"))
}

func (UnimplementedShadowLinkServiceHandler) ListShadowLinks(context.Context, *connect.Request[v2.ListShadowLinksRequest]) (*connect.Response[v1alpha1.ListShadowLinksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ShadowLinkService.ListShadowLinks is not implemented"))
}

func (UnimplementedShadowLinkServiceHandler) UpdateShadowLink(context.Context, *connect.Request[v2.UpdateShadowLinkRequest]) (*connect.Response[v1alpha1.UpdateShadowLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ShadowLinkService.UpdateShadowLink is not implemented"))
}

func (UnimplementedShadowLinkServiceHandler) DeleteShadowLink(context.Context, *connect.Request[v2.DeleteShadowLinkRequest]) (*connect.Response[v1alpha1.DeleteShadowLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ShadowLinkService.DeleteShadowLink is not implemented"))
}
