// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/shadowlink.proto

package consolev1alpha1connect

import (
	context "context"
	fmt "fmt"

	v2 "buf.build/gen/go/redpandadata/core/protocolbuffers/go/redpanda/core/admin/v2"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/console/v1alpha1"
)

// ShadowLinkServiceGatewayServer implements the gRPC server API for the ShadowLinkService service.
type ShadowLinkServiceGatewayServer struct {
	v1alpha1.UnimplementedShadowLinkServiceServer
	createShadowLink     connect_gateway.UnaryHandler[v2.CreateShadowLinkRequest, v1alpha1.CreateShadowLinkResponse]
	getShadowLink        connect_gateway.UnaryHandler[v1alpha1.GetShadowLinkRequest, v1alpha1.GetShadowLinkResponse]
	listShadowLinks      connect_gateway.UnaryHandler[v1alpha1.ListShadowLinksRequest, v1alpha1.ListShadowLinksResponse]
	updateShadowLink     connect_gateway.UnaryHandler[v2.UpdateShadowLinkRequest, v1alpha1.UpdateShadowLinkResponse]
	deleteShadowLink     connect_gateway.UnaryHandler[v2.DeleteShadowLinkRequest, v1alpha1.DeleteShadowLinkResponse]
	listShadowLinkTopics connect_gateway.UnaryHandler[v1alpha1.ListShadowLinkTopicsRequest, v1alpha1.ListShadowLinkTopicsResponse]
}

// NewShadowLinkServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// ShadowLinkService service.
func NewShadowLinkServiceGatewayServer(svc ShadowLinkServiceHandler, opts ...connect_gateway.HandlerOption) *ShadowLinkServiceGatewayServer {
	return &ShadowLinkServiceGatewayServer{
		createShadowLink:     connect_gateway.NewUnaryHandler(ShadowLinkServiceCreateShadowLinkProcedure, svc.CreateShadowLink, opts...),
		getShadowLink:        connect_gateway.NewUnaryHandler(ShadowLinkServiceGetShadowLinkProcedure, svc.GetShadowLink, opts...),
		listShadowLinks:      connect_gateway.NewUnaryHandler(ShadowLinkServiceListShadowLinksProcedure, svc.ListShadowLinks, opts...),
		updateShadowLink:     connect_gateway.NewUnaryHandler(ShadowLinkServiceUpdateShadowLinkProcedure, svc.UpdateShadowLink, opts...),
		deleteShadowLink:     connect_gateway.NewUnaryHandler(ShadowLinkServiceDeleteShadowLinkProcedure, svc.DeleteShadowLink, opts...),
		listShadowLinkTopics: connect_gateway.NewUnaryHandler(ShadowLinkServiceListShadowLinkTopicsProcedure, svc.ListShadowLinkTopics, opts...),
	}
}

func (s *ShadowLinkServiceGatewayServer) CreateShadowLink(ctx context.Context, req *v2.CreateShadowLinkRequest) (*v1alpha1.CreateShadowLinkResponse, error) {
	return s.createShadowLink(ctx, req)
}

func (s *ShadowLinkServiceGatewayServer) GetShadowLink(ctx context.Context, req *v1alpha1.GetShadowLinkRequest) (*v1alpha1.GetShadowLinkResponse, error) {
	return s.getShadowLink(ctx, req)
}

func (s *ShadowLinkServiceGatewayServer) ListShadowLinks(ctx context.Context, req *v1alpha1.ListShadowLinksRequest) (*v1alpha1.ListShadowLinksResponse, error) {
	return s.listShadowLinks(ctx, req)
}

func (s *ShadowLinkServiceGatewayServer) UpdateShadowLink(ctx context.Context, req *v2.UpdateShadowLinkRequest) (*v1alpha1.UpdateShadowLinkResponse, error) {
	return s.updateShadowLink(ctx, req)
}

func (s *ShadowLinkServiceGatewayServer) DeleteShadowLink(ctx context.Context, req *v2.DeleteShadowLinkRequest) (*v1alpha1.DeleteShadowLinkResponse, error) {
	return s.deleteShadowLink(ctx, req)
}

func (s *ShadowLinkServiceGatewayServer) ListShadowLinkTopics(ctx context.Context, req *v1alpha1.ListShadowLinkTopicsRequest) (*v1alpha1.ListShadowLinkTopicsResponse, error) {
	return s.listShadowLinkTopics(ctx, req)
}

// RegisterShadowLinkServiceHandlerGatewayServer registers the Connect handlers for the
// ShadowLinkService "svc" to "mux".
func RegisterShadowLinkServiceHandlerGatewayServer(mux *runtime.ServeMux, svc ShadowLinkServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterShadowLinkServiceHandlerServer(context.TODO(), mux, NewShadowLinkServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
