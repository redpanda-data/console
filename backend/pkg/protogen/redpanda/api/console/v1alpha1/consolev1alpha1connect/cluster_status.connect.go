// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/cluster_status.proto

package consolev1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/console/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterStatusServiceName is the fully-qualified name of the ClusterStatusService service.
	ClusterStatusServiceName = "redpanda.api.console.v1alpha1.ClusterStatusService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterStatusServiceGetKafkaInfoProcedure is the fully-qualified name of the
	// ClusterStatusService's GetKafkaInfo RPC.
	ClusterStatusServiceGetKafkaInfoProcedure = "/redpanda.api.console.v1alpha1.ClusterStatusService/GetKafkaInfo"
	// ClusterStatusServiceGetKafkaAuthorizerInfoProcedure is the fully-qualified name of the
	// ClusterStatusService's GetKafkaAuthorizerInfo RPC.
	ClusterStatusServiceGetKafkaAuthorizerInfoProcedure = "/redpanda.api.console.v1alpha1.ClusterStatusService/GetKafkaAuthorizerInfo"
	// ClusterStatusServiceGetRedpandaInfoProcedure is the fully-qualified name of the
	// ClusterStatusService's GetRedpandaInfo RPC.
	ClusterStatusServiceGetRedpandaInfoProcedure = "/redpanda.api.console.v1alpha1.ClusterStatusService/GetRedpandaInfo"
	// ClusterStatusServiceGetRedpandaPartitionBalancerStatusProcedure is the fully-qualified name of
	// the ClusterStatusService's GetRedpandaPartitionBalancerStatus RPC.
	ClusterStatusServiceGetRedpandaPartitionBalancerStatusProcedure = "/redpanda.api.console.v1alpha1.ClusterStatusService/GetRedpandaPartitionBalancerStatus"
	// ClusterStatusServiceGetConsoleInfoProcedure is the fully-qualified name of the
	// ClusterStatusService's GetConsoleInfo RPC.
	ClusterStatusServiceGetConsoleInfoProcedure = "/redpanda.api.console.v1alpha1.ClusterStatusService/GetConsoleInfo"
	// ClusterStatusServiceGetKafkaConnectInfoProcedure is the fully-qualified name of the
	// ClusterStatusService's GetKafkaConnectInfo RPC.
	ClusterStatusServiceGetKafkaConnectInfoProcedure = "/redpanda.api.console.v1alpha1.ClusterStatusService/GetKafkaConnectInfo"
	// ClusterStatusServiceGetSchemaRegistryInfoProcedure is the fully-qualified name of the
	// ClusterStatusService's GetSchemaRegistryInfo RPC.
	ClusterStatusServiceGetSchemaRegistryInfoProcedure = "/redpanda.api.console.v1alpha1.ClusterStatusService/GetSchemaRegistryInfo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	clusterStatusServiceServiceDescriptor                                  = v1alpha1.File_redpanda_api_console_v1alpha1_cluster_status_proto.Services().ByName("ClusterStatusService")
	clusterStatusServiceGetKafkaInfoMethodDescriptor                       = clusterStatusServiceServiceDescriptor.Methods().ByName("GetKafkaInfo")
	clusterStatusServiceGetKafkaAuthorizerInfoMethodDescriptor             = clusterStatusServiceServiceDescriptor.Methods().ByName("GetKafkaAuthorizerInfo")
	clusterStatusServiceGetRedpandaInfoMethodDescriptor                    = clusterStatusServiceServiceDescriptor.Methods().ByName("GetRedpandaInfo")
	clusterStatusServiceGetRedpandaPartitionBalancerStatusMethodDescriptor = clusterStatusServiceServiceDescriptor.Methods().ByName("GetRedpandaPartitionBalancerStatus")
	clusterStatusServiceGetConsoleInfoMethodDescriptor                     = clusterStatusServiceServiceDescriptor.Methods().ByName("GetConsoleInfo")
	clusterStatusServiceGetKafkaConnectInfoMethodDescriptor                = clusterStatusServiceServiceDescriptor.Methods().ByName("GetKafkaConnectInfo")
	clusterStatusServiceGetSchemaRegistryInfoMethodDescriptor              = clusterStatusServiceServiceDescriptor.Methods().ByName("GetSchemaRegistryInfo")
)

// ClusterStatusServiceClient is a client for the redpanda.api.console.v1alpha1.ClusterStatusService
// service.
type ClusterStatusServiceClient interface {
	// GetKafkaInfo returns general Kafka cluster information that can be
	// retrieved via the Kafka API.
	GetKafkaInfo(context.Context, *connect.Request[v1alpha1.GetKafkaInfoRequest]) (*connect.Response[v1alpha1.GetKafkaInfoResponse], error)
	// GetKafkaAuthorizerInfo returns information about Kafka's authorizer.
	// If the authorizer cannot be queried (for example due to permission errors),
	// this RPC should return a gRPC error.
	GetKafkaAuthorizerInfo(context.Context, *connect.Request[v1alpha1.GetKafkaAuthorizerInfoRequest]) (*connect.Response[v1alpha1.GetKafkaAuthorizerInfoResponse], error)
	// GetRedpandaInfo returns information from the Redpanda admin API.
	GetRedpandaInfo(context.Context, *connect.Request[v1alpha1.GetRedpandaInfoRequest]) (*connect.Response[v1alpha1.GetRedpandaInfoResponse], error)
	GetRedpandaPartitionBalancerStatus(context.Context, *connect.Request[v1alpha1.GetRedpandaPartitionBalancerStatusRequest]) (*connect.Response[v1alpha1.GetRedpandaPartitionBalancerStatusResponse], error)
	// GetConsoleInfo returns version and build information about the Console.
	GetConsoleInfo(context.Context, *connect.Request[v1alpha1.GetConsoleInfoRequest]) (*connect.Response[v1alpha1.GetConsoleInfoResponse], error)
	// GetKafkaConnectInfo returns information about the configured Kafka Connect clusters.
	GetKafkaConnectInfo(context.Context, *connect.Request[v1alpha1.GetKafkaConnectInfoRequest]) (*connect.Response[v1alpha1.GetKafkaConnectInfoResponse], error)
	// GetSchemaRegistryInfo returns information about the Schema Registry.
	GetSchemaRegistryInfo(context.Context, *connect.Request[v1alpha1.GetSchemaRegistryInfoRequest]) (*connect.Response[v1alpha1.GetSchemaRegistryInfoResponse], error)
}

// NewClusterStatusServiceClient constructs a client for the
// redpanda.api.console.v1alpha1.ClusterStatusService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterStatusServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterStatusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterStatusServiceClient{
		getKafkaInfo: connect.NewClient[v1alpha1.GetKafkaInfoRequest, v1alpha1.GetKafkaInfoResponse](
			httpClient,
			baseURL+ClusterStatusServiceGetKafkaInfoProcedure,
			connect.WithSchema(clusterStatusServiceGetKafkaInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getKafkaAuthorizerInfo: connect.NewClient[v1alpha1.GetKafkaAuthorizerInfoRequest, v1alpha1.GetKafkaAuthorizerInfoResponse](
			httpClient,
			baseURL+ClusterStatusServiceGetKafkaAuthorizerInfoProcedure,
			connect.WithSchema(clusterStatusServiceGetKafkaAuthorizerInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRedpandaInfo: connect.NewClient[v1alpha1.GetRedpandaInfoRequest, v1alpha1.GetRedpandaInfoResponse](
			httpClient,
			baseURL+ClusterStatusServiceGetRedpandaInfoProcedure,
			connect.WithSchema(clusterStatusServiceGetRedpandaInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRedpandaPartitionBalancerStatus: connect.NewClient[v1alpha1.GetRedpandaPartitionBalancerStatusRequest, v1alpha1.GetRedpandaPartitionBalancerStatusResponse](
			httpClient,
			baseURL+ClusterStatusServiceGetRedpandaPartitionBalancerStatusProcedure,
			connect.WithSchema(clusterStatusServiceGetRedpandaPartitionBalancerStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getConsoleInfo: connect.NewClient[v1alpha1.GetConsoleInfoRequest, v1alpha1.GetConsoleInfoResponse](
			httpClient,
			baseURL+ClusterStatusServiceGetConsoleInfoProcedure,
			connect.WithSchema(clusterStatusServiceGetConsoleInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getKafkaConnectInfo: connect.NewClient[v1alpha1.GetKafkaConnectInfoRequest, v1alpha1.GetKafkaConnectInfoResponse](
			httpClient,
			baseURL+ClusterStatusServiceGetKafkaConnectInfoProcedure,
			connect.WithSchema(clusterStatusServiceGetKafkaConnectInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSchemaRegistryInfo: connect.NewClient[v1alpha1.GetSchemaRegistryInfoRequest, v1alpha1.GetSchemaRegistryInfoResponse](
			httpClient,
			baseURL+ClusterStatusServiceGetSchemaRegistryInfoProcedure,
			connect.WithSchema(clusterStatusServiceGetSchemaRegistryInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterStatusServiceClient implements ClusterStatusServiceClient.
type clusterStatusServiceClient struct {
	getKafkaInfo                       *connect.Client[v1alpha1.GetKafkaInfoRequest, v1alpha1.GetKafkaInfoResponse]
	getKafkaAuthorizerInfo             *connect.Client[v1alpha1.GetKafkaAuthorizerInfoRequest, v1alpha1.GetKafkaAuthorizerInfoResponse]
	getRedpandaInfo                    *connect.Client[v1alpha1.GetRedpandaInfoRequest, v1alpha1.GetRedpandaInfoResponse]
	getRedpandaPartitionBalancerStatus *connect.Client[v1alpha1.GetRedpandaPartitionBalancerStatusRequest, v1alpha1.GetRedpandaPartitionBalancerStatusResponse]
	getConsoleInfo                     *connect.Client[v1alpha1.GetConsoleInfoRequest, v1alpha1.GetConsoleInfoResponse]
	getKafkaConnectInfo                *connect.Client[v1alpha1.GetKafkaConnectInfoRequest, v1alpha1.GetKafkaConnectInfoResponse]
	getSchemaRegistryInfo              *connect.Client[v1alpha1.GetSchemaRegistryInfoRequest, v1alpha1.GetSchemaRegistryInfoResponse]
}

// GetKafkaInfo calls redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaInfo.
func (c *clusterStatusServiceClient) GetKafkaInfo(ctx context.Context, req *connect.Request[v1alpha1.GetKafkaInfoRequest]) (*connect.Response[v1alpha1.GetKafkaInfoResponse], error) {
	return c.getKafkaInfo.CallUnary(ctx, req)
}

// GetKafkaAuthorizerInfo calls
// redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaAuthorizerInfo.
func (c *clusterStatusServiceClient) GetKafkaAuthorizerInfo(ctx context.Context, req *connect.Request[v1alpha1.GetKafkaAuthorizerInfoRequest]) (*connect.Response[v1alpha1.GetKafkaAuthorizerInfoResponse], error) {
	return c.getKafkaAuthorizerInfo.CallUnary(ctx, req)
}

// GetRedpandaInfo calls redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaInfo.
func (c *clusterStatusServiceClient) GetRedpandaInfo(ctx context.Context, req *connect.Request[v1alpha1.GetRedpandaInfoRequest]) (*connect.Response[v1alpha1.GetRedpandaInfoResponse], error) {
	return c.getRedpandaInfo.CallUnary(ctx, req)
}

// GetRedpandaPartitionBalancerStatus calls
// redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaPartitionBalancerStatus.
func (c *clusterStatusServiceClient) GetRedpandaPartitionBalancerStatus(ctx context.Context, req *connect.Request[v1alpha1.GetRedpandaPartitionBalancerStatusRequest]) (*connect.Response[v1alpha1.GetRedpandaPartitionBalancerStatusResponse], error) {
	return c.getRedpandaPartitionBalancerStatus.CallUnary(ctx, req)
}

// GetConsoleInfo calls redpanda.api.console.v1alpha1.ClusterStatusService.GetConsoleInfo.
func (c *clusterStatusServiceClient) GetConsoleInfo(ctx context.Context, req *connect.Request[v1alpha1.GetConsoleInfoRequest]) (*connect.Response[v1alpha1.GetConsoleInfoResponse], error) {
	return c.getConsoleInfo.CallUnary(ctx, req)
}

// GetKafkaConnectInfo calls redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaConnectInfo.
func (c *clusterStatusServiceClient) GetKafkaConnectInfo(ctx context.Context, req *connect.Request[v1alpha1.GetKafkaConnectInfoRequest]) (*connect.Response[v1alpha1.GetKafkaConnectInfoResponse], error) {
	return c.getKafkaConnectInfo.CallUnary(ctx, req)
}

// GetSchemaRegistryInfo calls
// redpanda.api.console.v1alpha1.ClusterStatusService.GetSchemaRegistryInfo.
func (c *clusterStatusServiceClient) GetSchemaRegistryInfo(ctx context.Context, req *connect.Request[v1alpha1.GetSchemaRegistryInfoRequest]) (*connect.Response[v1alpha1.GetSchemaRegistryInfoResponse], error) {
	return c.getSchemaRegistryInfo.CallUnary(ctx, req)
}

// ClusterStatusServiceHandler is an implementation of the
// redpanda.api.console.v1alpha1.ClusterStatusService service.
type ClusterStatusServiceHandler interface {
	// GetKafkaInfo returns general Kafka cluster information that can be
	// retrieved via the Kafka API.
	GetKafkaInfo(context.Context, *connect.Request[v1alpha1.GetKafkaInfoRequest]) (*connect.Response[v1alpha1.GetKafkaInfoResponse], error)
	// GetKafkaAuthorizerInfo returns information about Kafka's authorizer.
	// If the authorizer cannot be queried (for example due to permission errors),
	// this RPC should return a gRPC error.
	GetKafkaAuthorizerInfo(context.Context, *connect.Request[v1alpha1.GetKafkaAuthorizerInfoRequest]) (*connect.Response[v1alpha1.GetKafkaAuthorizerInfoResponse], error)
	// GetRedpandaInfo returns information from the Redpanda admin API.
	GetRedpandaInfo(context.Context, *connect.Request[v1alpha1.GetRedpandaInfoRequest]) (*connect.Response[v1alpha1.GetRedpandaInfoResponse], error)
	GetRedpandaPartitionBalancerStatus(context.Context, *connect.Request[v1alpha1.GetRedpandaPartitionBalancerStatusRequest]) (*connect.Response[v1alpha1.GetRedpandaPartitionBalancerStatusResponse], error)
	// GetConsoleInfo returns version and build information about the Console.
	GetConsoleInfo(context.Context, *connect.Request[v1alpha1.GetConsoleInfoRequest]) (*connect.Response[v1alpha1.GetConsoleInfoResponse], error)
	// GetKafkaConnectInfo returns information about the configured Kafka Connect clusters.
	GetKafkaConnectInfo(context.Context, *connect.Request[v1alpha1.GetKafkaConnectInfoRequest]) (*connect.Response[v1alpha1.GetKafkaConnectInfoResponse], error)
	// GetSchemaRegistryInfo returns information about the Schema Registry.
	GetSchemaRegistryInfo(context.Context, *connect.Request[v1alpha1.GetSchemaRegistryInfoRequest]) (*connect.Response[v1alpha1.GetSchemaRegistryInfoResponse], error)
}

// NewClusterStatusServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterStatusServiceHandler(svc ClusterStatusServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterStatusServiceGetKafkaInfoHandler := connect.NewUnaryHandler(
		ClusterStatusServiceGetKafkaInfoProcedure,
		svc.GetKafkaInfo,
		connect.WithSchema(clusterStatusServiceGetKafkaInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterStatusServiceGetKafkaAuthorizerInfoHandler := connect.NewUnaryHandler(
		ClusterStatusServiceGetKafkaAuthorizerInfoProcedure,
		svc.GetKafkaAuthorizerInfo,
		connect.WithSchema(clusterStatusServiceGetKafkaAuthorizerInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterStatusServiceGetRedpandaInfoHandler := connect.NewUnaryHandler(
		ClusterStatusServiceGetRedpandaInfoProcedure,
		svc.GetRedpandaInfo,
		connect.WithSchema(clusterStatusServiceGetRedpandaInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterStatusServiceGetRedpandaPartitionBalancerStatusHandler := connect.NewUnaryHandler(
		ClusterStatusServiceGetRedpandaPartitionBalancerStatusProcedure,
		svc.GetRedpandaPartitionBalancerStatus,
		connect.WithSchema(clusterStatusServiceGetRedpandaPartitionBalancerStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterStatusServiceGetConsoleInfoHandler := connect.NewUnaryHandler(
		ClusterStatusServiceGetConsoleInfoProcedure,
		svc.GetConsoleInfo,
		connect.WithSchema(clusterStatusServiceGetConsoleInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterStatusServiceGetKafkaConnectInfoHandler := connect.NewUnaryHandler(
		ClusterStatusServiceGetKafkaConnectInfoProcedure,
		svc.GetKafkaConnectInfo,
		connect.WithSchema(clusterStatusServiceGetKafkaConnectInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterStatusServiceGetSchemaRegistryInfoHandler := connect.NewUnaryHandler(
		ClusterStatusServiceGetSchemaRegistryInfoProcedure,
		svc.GetSchemaRegistryInfo,
		connect.WithSchema(clusterStatusServiceGetSchemaRegistryInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.console.v1alpha1.ClusterStatusService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterStatusServiceGetKafkaInfoProcedure:
			clusterStatusServiceGetKafkaInfoHandler.ServeHTTP(w, r)
		case ClusterStatusServiceGetKafkaAuthorizerInfoProcedure:
			clusterStatusServiceGetKafkaAuthorizerInfoHandler.ServeHTTP(w, r)
		case ClusterStatusServiceGetRedpandaInfoProcedure:
			clusterStatusServiceGetRedpandaInfoHandler.ServeHTTP(w, r)
		case ClusterStatusServiceGetRedpandaPartitionBalancerStatusProcedure:
			clusterStatusServiceGetRedpandaPartitionBalancerStatusHandler.ServeHTTP(w, r)
		case ClusterStatusServiceGetConsoleInfoProcedure:
			clusterStatusServiceGetConsoleInfoHandler.ServeHTTP(w, r)
		case ClusterStatusServiceGetKafkaConnectInfoProcedure:
			clusterStatusServiceGetKafkaConnectInfoHandler.ServeHTTP(w, r)
		case ClusterStatusServiceGetSchemaRegistryInfoProcedure:
			clusterStatusServiceGetSchemaRegistryInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterStatusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterStatusServiceHandler struct{}

func (UnimplementedClusterStatusServiceHandler) GetKafkaInfo(context.Context, *connect.Request[v1alpha1.GetKafkaInfoRequest]) (*connect.Response[v1alpha1.GetKafkaInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaInfo is not implemented"))
}

func (UnimplementedClusterStatusServiceHandler) GetKafkaAuthorizerInfo(context.Context, *connect.Request[v1alpha1.GetKafkaAuthorizerInfoRequest]) (*connect.Response[v1alpha1.GetKafkaAuthorizerInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaAuthorizerInfo is not implemented"))
}

func (UnimplementedClusterStatusServiceHandler) GetRedpandaInfo(context.Context, *connect.Request[v1alpha1.GetRedpandaInfoRequest]) (*connect.Response[v1alpha1.GetRedpandaInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaInfo is not implemented"))
}

func (UnimplementedClusterStatusServiceHandler) GetRedpandaPartitionBalancerStatus(context.Context, *connect.Request[v1alpha1.GetRedpandaPartitionBalancerStatusRequest]) (*connect.Response[v1alpha1.GetRedpandaPartitionBalancerStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaPartitionBalancerStatus is not implemented"))
}

func (UnimplementedClusterStatusServiceHandler) GetConsoleInfo(context.Context, *connect.Request[v1alpha1.GetConsoleInfoRequest]) (*connect.Response[v1alpha1.GetConsoleInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ClusterStatusService.GetConsoleInfo is not implemented"))
}

func (UnimplementedClusterStatusServiceHandler) GetKafkaConnectInfo(context.Context, *connect.Request[v1alpha1.GetKafkaConnectInfoRequest]) (*connect.Response[v1alpha1.GetKafkaConnectInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaConnectInfo is not implemented"))
}

func (UnimplementedClusterStatusServiceHandler) GetSchemaRegistryInfo(context.Context, *connect.Request[v1alpha1.GetSchemaRegistryInfoRequest]) (*connect.Response[v1alpha1.GetSchemaRegistryInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ClusterStatusService.GetSchemaRegistryInfo is not implemented"))
}
