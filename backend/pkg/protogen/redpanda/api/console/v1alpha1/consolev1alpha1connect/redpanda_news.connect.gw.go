// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/redpanda_news.proto

package consolev1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/console/v1alpha1"
)

// RedpandaNewsServiceGatewayServer implements the gRPC server API for the RedpandaNewsService
// service.
type RedpandaNewsServiceGatewayServer struct {
	v1alpha1.UnimplementedRedpandaNewsServiceServer
	listRedpandaNews connect_gateway.UnaryHandler[v1alpha1.ListRedpandaNewsRequest, v1alpha1.ListRedpandaNewsResponse]
}

// NewRedpandaNewsServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// RedpandaNewsService service.
func NewRedpandaNewsServiceGatewayServer(svc RedpandaNewsServiceHandler, opts ...connect_gateway.HandlerOption) *RedpandaNewsServiceGatewayServer {
	return &RedpandaNewsServiceGatewayServer{
		listRedpandaNews: connect_gateway.NewUnaryHandler(RedpandaNewsServiceListRedpandaNewsProcedure, svc.ListRedpandaNews, opts...),
	}
}

func (s *RedpandaNewsServiceGatewayServer) ListRedpandaNews(ctx context.Context, req *v1alpha1.ListRedpandaNewsRequest) (*v1alpha1.ListRedpandaNewsResponse, error) {
	return s.listRedpandaNews(ctx, req)
}

// RegisterRedpandaNewsServiceHandlerGatewayServer registers the Connect handlers for the
// RedpandaNewsService "svc" to "mux".
func RegisterRedpandaNewsServiceHandlerGatewayServer(mux *runtime.ServeMux, svc RedpandaNewsServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterRedpandaNewsServiceHandlerServer(context.TODO(), mux, NewRedpandaNewsServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
