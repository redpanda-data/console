// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/secret.proto

package consolev1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/console/v1alpha1"
)

// SecretServiceGatewayServer implements the gRPC server API for the SecretService service.
type SecretServiceGatewayServer struct {
	v1alpha1.UnimplementedSecretServiceServer
	getSecret        connect_gateway.UnaryHandler[v1alpha1.GetSecretRequest, v1alpha1.GetSecretResponse]
	listSecrets      connect_gateway.UnaryHandler[v1alpha1.ListSecretsRequest, v1alpha1.ListSecretsResponse]
	createSecret     connect_gateway.UnaryHandler[v1alpha1.CreateSecretRequest, v1alpha1.CreateSecretResponse]
	updateSecret     connect_gateway.UnaryHandler[v1alpha1.UpdateSecretRequest, v1alpha1.UpdateSecretResponse]
	deleteSecret     connect_gateway.UnaryHandler[v1alpha1.DeleteSecretRequest, v1alpha1.DeleteSecretResponse]
	listSecretScopes connect_gateway.UnaryHandler[v1alpha1.ListSecretScopesRequest, v1alpha1.ListSecretScopesResponse]
}

// NewSecretServiceGatewayServer constructs a Connect-Gateway gRPC server for the SecretService
// service.
func NewSecretServiceGatewayServer(svc SecretServiceHandler, opts ...connect_gateway.HandlerOption) *SecretServiceGatewayServer {
	return &SecretServiceGatewayServer{
		getSecret:        connect_gateway.NewUnaryHandler(SecretServiceGetSecretProcedure, svc.GetSecret, opts...),
		listSecrets:      connect_gateway.NewUnaryHandler(SecretServiceListSecretsProcedure, svc.ListSecrets, opts...),
		createSecret:     connect_gateway.NewUnaryHandler(SecretServiceCreateSecretProcedure, svc.CreateSecret, opts...),
		updateSecret:     connect_gateway.NewUnaryHandler(SecretServiceUpdateSecretProcedure, svc.UpdateSecret, opts...),
		deleteSecret:     connect_gateway.NewUnaryHandler(SecretServiceDeleteSecretProcedure, svc.DeleteSecret, opts...),
		listSecretScopes: connect_gateway.NewUnaryHandler(SecretServiceListSecretScopesProcedure, svc.ListSecretScopes, opts...),
	}
}

func (s *SecretServiceGatewayServer) GetSecret(ctx context.Context, req *v1alpha1.GetSecretRequest) (*v1alpha1.GetSecretResponse, error) {
	return s.getSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) ListSecrets(ctx context.Context, req *v1alpha1.ListSecretsRequest) (*v1alpha1.ListSecretsResponse, error) {
	return s.listSecrets(ctx, req)
}

func (s *SecretServiceGatewayServer) CreateSecret(ctx context.Context, req *v1alpha1.CreateSecretRequest) (*v1alpha1.CreateSecretResponse, error) {
	return s.createSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) UpdateSecret(ctx context.Context, req *v1alpha1.UpdateSecretRequest) (*v1alpha1.UpdateSecretResponse, error) {
	return s.updateSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) DeleteSecret(ctx context.Context, req *v1alpha1.DeleteSecretRequest) (*v1alpha1.DeleteSecretResponse, error) {
	return s.deleteSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) ListSecretScopes(ctx context.Context, req *v1alpha1.ListSecretScopesRequest) (*v1alpha1.ListSecretScopesResponse, error) {
	return s.listSecretScopes(ctx, req)
}

// RegisterSecretServiceHandlerGatewayServer registers the Connect handlers for the SecretService
// "svc" to "mux".
func RegisterSecretServiceHandlerGatewayServer(mux *runtime.ServeMux, svc SecretServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterSecretServiceHandlerServer(context.TODO(), mux, NewSecretServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
