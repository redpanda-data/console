// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/cluster_status.proto

package consolev1alpha1

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StatusType describes the health state of a component.
type StatusType int32

const (
	// STATUS_TYPE_UNSPECIFIED is the default value.
	StatusType_STATUS_TYPE_UNSPECIFIED StatusType = 0
	// STATUS_TYPE_HEALTHY indicates the component is healthy.
	StatusType_STATUS_TYPE_HEALTHY StatusType = 1
	// STATUS_TYPE_DEGRADED indicates the component is partially impaired.
	StatusType_STATUS_TYPE_DEGRADED StatusType = 2
	// STATUS_TYPE_UNHEALTHY indicates the component is unhealthy or unreachable.
	StatusType_STATUS_TYPE_UNHEALTHY StatusType = 3
)

// Enum value maps for StatusType.
var (
	StatusType_name = map[int32]string{
		0: "STATUS_TYPE_UNSPECIFIED",
		1: "STATUS_TYPE_HEALTHY",
		2: "STATUS_TYPE_DEGRADED",
		3: "STATUS_TYPE_UNHEALTHY",
	}
	StatusType_value = map[string]int32{
		"STATUS_TYPE_UNSPECIFIED": 0,
		"STATUS_TYPE_HEALTHY":     1,
		"STATUS_TYPE_DEGRADED":    2,
		"STATUS_TYPE_UNHEALTHY":   3,
	}
)

func (x StatusType) Enum() *StatusType {
	p := new(StatusType)
	*p = x
	return p
}

func (x StatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[0].Descriptor()
}

func (StatusType) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[0]
}

func (x StatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusType.Descriptor instead.
func (StatusType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{0}
}

// KafkaDistribution describes the Kafka software flavor.
type KafkaDistribution int32

const (
	// KAFKA_DISTRIBUTION_UNSPECIFIED is the default value.
	KafkaDistribution_KAFKA_DISTRIBUTION_UNSPECIFIED KafkaDistribution = 0
	// KAFKA_DISTRIBUTION_UNKNOWN represents a Kafka distribution that is neither Redpanda
	// nor Apache Kafka.
	KafkaDistribution_KAFKA_DISTRIBUTION_UNKNOWN KafkaDistribution = 1
	// KAFKA_DISTRIBUTION_APACHE_KAFKA indicates an Apache Kafka implementation.
	KafkaDistribution_KAFKA_DISTRIBUTION_APACHE_KAFKA KafkaDistribution = 2
	// KAFKA_DISTRIBUTION_REDPANDA indicates a Redpanda implementation.
	KafkaDistribution_KAFKA_DISTRIBUTION_REDPANDA KafkaDistribution = 3
)

// Enum value maps for KafkaDistribution.
var (
	KafkaDistribution_name = map[int32]string{
		0: "KAFKA_DISTRIBUTION_UNSPECIFIED",
		1: "KAFKA_DISTRIBUTION_UNKNOWN",
		2: "KAFKA_DISTRIBUTION_APACHE_KAFKA",
		3: "KAFKA_DISTRIBUTION_REDPANDA",
	}
	KafkaDistribution_value = map[string]int32{
		"KAFKA_DISTRIBUTION_UNSPECIFIED":  0,
		"KAFKA_DISTRIBUTION_UNKNOWN":      1,
		"KAFKA_DISTRIBUTION_APACHE_KAFKA": 2,
		"KAFKA_DISTRIBUTION_REDPANDA":     3,
	}
)

func (x KafkaDistribution) Enum() *KafkaDistribution {
	p := new(KafkaDistribution)
	*p = x
	return p
}

func (x KafkaDistribution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KafkaDistribution) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[1].Descriptor()
}

func (KafkaDistribution) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[1]
}

func (x KafkaDistribution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KafkaDistribution.Descriptor instead.
func (KafkaDistribution) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{1}
}

type LicenseType int32

const (
	LicenseType_LICENSE_TYPE_UNSPECIFIED LicenseType = 0
	LicenseType_LICENSE_TYPE_COMMUNITY   LicenseType = 1
	LicenseType_LICENSE_TYPE_ENTERPRISE  LicenseType = 2
	LicenseType_LICENSE_TYPE_TRIAL       LicenseType = 3
)

// Enum value maps for LicenseType.
var (
	LicenseType_name = map[int32]string{
		0: "LICENSE_TYPE_UNSPECIFIED",
		1: "LICENSE_TYPE_COMMUNITY",
		2: "LICENSE_TYPE_ENTERPRISE",
		3: "LICENSE_TYPE_TRIAL",
	}
	LicenseType_value = map[string]int32{
		"LICENSE_TYPE_UNSPECIFIED": 0,
		"LICENSE_TYPE_COMMUNITY":   1,
		"LICENSE_TYPE_ENTERPRISE":  2,
		"LICENSE_TYPE_TRIAL":       3,
	}
)

func (x LicenseType) Enum() *LicenseType {
	p := new(LicenseType)
	*p = x
	return p
}

func (x LicenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[2].Descriptor()
}

func (LicenseType) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[2]
}

func (x LicenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseType.Descriptor instead.
func (LicenseType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{2}
}

type LicenseSource int32

const (
	LicenseSource_LICENSE_SOURCE_UNSPECIFIED LicenseSource = 0
	LicenseSource_LICENSE_SOURCE_CLUSTER     LicenseSource = 1
	LicenseSource_LICENSE_SOURCE_CONSOLE     LicenseSource = 2
)

// Enum value maps for LicenseSource.
var (
	LicenseSource_name = map[int32]string{
		0: "LICENSE_SOURCE_UNSPECIFIED",
		1: "LICENSE_SOURCE_CLUSTER",
		2: "LICENSE_SOURCE_CONSOLE",
	}
	LicenseSource_value = map[string]int32{
		"LICENSE_SOURCE_UNSPECIFIED": 0,
		"LICENSE_SOURCE_CLUSTER":     1,
		"LICENSE_SOURCE_CONSOLE":     2,
	}
)

func (x LicenseSource) Enum() *LicenseSource {
	p := new(LicenseSource)
	*p = x
	return p
}

func (x LicenseSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseSource) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[3].Descriptor()
}

func (LicenseSource) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[3]
}

func (x LicenseSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseSource.Descriptor instead.
func (LicenseSource) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{3}
}

type GetRedpandaPartitionBalancerStatusResponse_Status int32

const (
	// STATUS_UNSPECIFIED is the default type.
	GetRedpandaPartitionBalancerStatusResponse_STATUS_UNSPECIFIED GetRedpandaPartitionBalancerStatusResponse_Status = 0
	// The balancer is disabled.
	GetRedpandaPartitionBalancerStatusResponse_STATUS_OFF GetRedpandaPartitionBalancerStatusResponse_Status = 1
	// The balancer is active but there is nothing to do.
	GetRedpandaPartitionBalancerStatusResponse_STATUS_READY GetRedpandaPartitionBalancerStatusResponse_Status = 2
	// The balancer is starting but has not run yet.
	GetRedpandaPartitionBalancerStatusResponse_STATUS_STARTING GetRedpandaPartitionBalancerStatusResponse_Status = 3
	// The balancer is active and is in the process of
	// scheduling partition movements.
	GetRedpandaPartitionBalancerStatusResponse_STATUS_IN_PROGRESS GetRedpandaPartitionBalancerStatusResponse_Status = 4
	// There are some violations, but for some reason, the
	// balancer cannot make progress in mitigating them.
	GetRedpandaPartitionBalancerStatusResponse_STATUS_STALLED GetRedpandaPartitionBalancerStatusResponse_Status = 5
)

// Enum value maps for GetRedpandaPartitionBalancerStatusResponse_Status.
var (
	GetRedpandaPartitionBalancerStatusResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_OFF",
		2: "STATUS_READY",
		3: "STATUS_STARTING",
		4: "STATUS_IN_PROGRESS",
		5: "STATUS_STALLED",
	}
	GetRedpandaPartitionBalancerStatusResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_OFF":         1,
		"STATUS_READY":       2,
		"STATUS_STARTING":    3,
		"STATUS_IN_PROGRESS": 4,
		"STATUS_STALLED":     5,
	}
)

func (x GetRedpandaPartitionBalancerStatusResponse_Status) Enum() *GetRedpandaPartitionBalancerStatusResponse_Status {
	p := new(GetRedpandaPartitionBalancerStatusResponse_Status)
	*p = x
	return p
}

func (x GetRedpandaPartitionBalancerStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetRedpandaPartitionBalancerStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[4].Descriptor()
}

func (GetRedpandaPartitionBalancerStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes[4]
}

func (x GetRedpandaPartitionBalancerStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetRedpandaPartitionBalancerStatusResponse_Status.Descriptor instead.
func (GetRedpandaPartitionBalancerStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{7, 0}
}

type GetKafkaInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaInfoRequest) Reset() {
	*x = GetKafkaInfoRequest{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaInfoRequest) ProtoMessage() {}

func (x *GetKafkaInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaInfoRequest.ProtoReflect.Descriptor instead.
func (*GetKafkaInfoRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{0}
}

// KafkaInfo contains general Kafka cluster information.
type GetKafkaInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The health status for Kafka.
	Status *ComponentStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Version is the Kafka API version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Distribution indicates the software flavor (e.g. Apache Kafka, Redpanda).
	Distribution KafkaDistribution `protobuf:"varint,3,opt,name=distribution,proto3,enum=redpanda.api.console.v1alpha1.KafkaDistribution" json:"distribution,omitempty"`
	// BrokersOnline is the number of brokers currently online.
	BrokersOnline int32 `protobuf:"varint,4,opt,name=brokers_online,json=brokersOnline,proto3" json:"brokers_online,omitempty"`
	// BrokersExpected is the number of brokers expected.
	BrokersExpected int32 `protobuf:"varint,5,opt,name=brokers_expected,json=brokersExpected,proto3" json:"brokers_expected,omitempty"`
	// TopicsCount is the total number of topics.
	TopicsCount int32 `protobuf:"varint,6,opt,name=topics_count,json=topicsCount,proto3" json:"topics_count,omitempty"`
	// PartitionsCount is the total number of partitions.
	PartitionsCount int32 `protobuf:"varint,7,opt,name=partitions_count,json=partitionsCount,proto3" json:"partitions_count,omitempty"`
	// ReplicasCount is the total number of replicas.
	ReplicasCount int32 `protobuf:"varint,8,opt,name=replicas_count,json=replicasCount,proto3" json:"replicas_count,omitempty"`
	// ControllerID is the ID of the controller broker.
	ControllerId int32 `protobuf:"varint,9,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	// Brokers lists details of individual Kafka brokers.
	Brokers []*KafkaBroker `protobuf:"bytes,10,rep,name=brokers,proto3" json:"brokers,omitempty"`
	// ClusterID is the unique identifier for the Kafka cluster.
	ClusterId     string `protobuf:"bytes,11,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaInfoResponse) Reset() {
	*x = GetKafkaInfoResponse{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaInfoResponse) ProtoMessage() {}

func (x *GetKafkaInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaInfoResponse.ProtoReflect.Descriptor instead.
func (*GetKafkaInfoResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{1}
}

func (x *GetKafkaInfoResponse) GetStatus() *ComponentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetKafkaInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetKafkaInfoResponse) GetDistribution() KafkaDistribution {
	if x != nil {
		return x.Distribution
	}
	return KafkaDistribution_KAFKA_DISTRIBUTION_UNSPECIFIED
}

func (x *GetKafkaInfoResponse) GetBrokersOnline() int32 {
	if x != nil {
		return x.BrokersOnline
	}
	return 0
}

func (x *GetKafkaInfoResponse) GetBrokersExpected() int32 {
	if x != nil {
		return x.BrokersExpected
	}
	return 0
}

func (x *GetKafkaInfoResponse) GetTopicsCount() int32 {
	if x != nil {
		return x.TopicsCount
	}
	return 0
}

func (x *GetKafkaInfoResponse) GetPartitionsCount() int32 {
	if x != nil {
		return x.PartitionsCount
	}
	return 0
}

func (x *GetKafkaInfoResponse) GetReplicasCount() int32 {
	if x != nil {
		return x.ReplicasCount
	}
	return 0
}

func (x *GetKafkaInfoResponse) GetControllerId() int32 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *GetKafkaInfoResponse) GetBrokers() []*KafkaBroker {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *GetKafkaInfoResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GetKafkaAuthorizerInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaAuthorizerInfoRequest) Reset() {
	*x = GetKafkaAuthorizerInfoRequest{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaAuthorizerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaAuthorizerInfoRequest) ProtoMessage() {}

func (x *GetKafkaAuthorizerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaAuthorizerInfoRequest.ProtoReflect.Descriptor instead.
func (*GetKafkaAuthorizerInfoRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{2}
}

type GetKafkaAuthorizerInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ACLCount is the number of ACLs created.
	AclCount      int32 `protobuf:"varint,1,opt,name=acl_count,json=aclCount,proto3" json:"acl_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaAuthorizerInfoResponse) Reset() {
	*x = GetKafkaAuthorizerInfoResponse{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaAuthorizerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaAuthorizerInfoResponse) ProtoMessage() {}

func (x *GetKafkaAuthorizerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaAuthorizerInfoResponse.ProtoReflect.Descriptor instead.
func (*GetKafkaAuthorizerInfoResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{3}
}

func (x *GetKafkaAuthorizerInfoResponse) GetAclCount() int32 {
	if x != nil {
		return x.AclCount
	}
	return 0
}

type GetRedpandaInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRedpandaInfoRequest) Reset() {
	*x = GetRedpandaInfoRequest{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRedpandaInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedpandaInfoRequest) ProtoMessage() {}

func (x *GetRedpandaInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedpandaInfoRequest.ProtoReflect.Descriptor instead.
func (*GetRedpandaInfoRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{4}
}

// RedpandaInfo contains information provided by the Redpanda admin API.
type GetRedpandaInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version is the Redpanda cluster version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// UserCount is the number of users.
	UserCount     int32 `protobuf:"varint,2,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRedpandaInfoResponse) Reset() {
	*x = GetRedpandaInfoResponse{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRedpandaInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedpandaInfoResponse) ProtoMessage() {}

func (x *GetRedpandaInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedpandaInfoResponse.ProtoReflect.Descriptor instead.
func (*GetRedpandaInfoResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{5}
}

func (x *GetRedpandaInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetRedpandaInfoResponse) GetUserCount() int32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

type GetRedpandaPartitionBalancerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRedpandaPartitionBalancerStatusRequest) Reset() {
	*x = GetRedpandaPartitionBalancerStatusRequest{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRedpandaPartitionBalancerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedpandaPartitionBalancerStatusRequest) ProtoMessage() {}

func (x *GetRedpandaPartitionBalancerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedpandaPartitionBalancerStatusRequest.ProtoReflect.Descriptor instead.
func (*GetRedpandaPartitionBalancerStatusRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{6}
}

type GetRedpandaPartitionBalancerStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status describes the current partition balancer state.
	Status GetRedpandaPartitionBalancerStatusResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse_Status" json:"status,omitempty"`
	// Violations are the partition balancer violations.
	Violations *GetRedpandaPartitionBalancerStatusResponse_Violations `protobuf:"bytes,2,opt,name=violations,proto3" json:"violations,omitempty"`
	// SecondsSinceLastTick is the last time the partition balancer ran.
	SecondsSinceLastTick int32 `protobuf:"varint,3,opt,name=seconds_since_last_tick,json=secondsSinceLastTick,proto3" json:"seconds_since_last_tick,omitempty"`
	// CurrentReassignmentsCount is the current number of partition
	// reassignments in progress.
	CurrentReassignmentsCount int32 `protobuf:"varint,4,opt,name=current_reassignments_count,json=currentReassignmentsCount,proto3" json:"current_reassignments_count,omitempty"`
	// PartitionsPendingForceRecovery specifies the number of partitions that
	// are yet to be force recovered. This is optional because not all Redpanda
	// versions include this parameter.
	PartitionsPendingForceRecoveryCount *int32 `protobuf:"varint,5,opt,name=partitions_pending_force_recovery_count,json=partitionsPendingForceRecoveryCount,proto3,oneof" json:"partitions_pending_force_recovery_count,omitempty"`
	// PartitionsPendingRecoveryList is a sample list of partitions pending
	// force recovery (limit capped to 10).
	PartitionsPendingRecoveryList []string `protobuf:"bytes,6,rep,name=partitions_pending_recovery_list,json=partitionsPendingRecoveryList,proto3" json:"partitions_pending_recovery_list,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *GetRedpandaPartitionBalancerStatusResponse) Reset() {
	*x = GetRedpandaPartitionBalancerStatusResponse{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRedpandaPartitionBalancerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedpandaPartitionBalancerStatusResponse) ProtoMessage() {}

func (x *GetRedpandaPartitionBalancerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedpandaPartitionBalancerStatusResponse.ProtoReflect.Descriptor instead.
func (*GetRedpandaPartitionBalancerStatusResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{7}
}

func (x *GetRedpandaPartitionBalancerStatusResponse) GetStatus() GetRedpandaPartitionBalancerStatusResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetRedpandaPartitionBalancerStatusResponse_STATUS_UNSPECIFIED
}

func (x *GetRedpandaPartitionBalancerStatusResponse) GetViolations() *GetRedpandaPartitionBalancerStatusResponse_Violations {
	if x != nil {
		return x.Violations
	}
	return nil
}

func (x *GetRedpandaPartitionBalancerStatusResponse) GetSecondsSinceLastTick() int32 {
	if x != nil {
		return x.SecondsSinceLastTick
	}
	return 0
}

func (x *GetRedpandaPartitionBalancerStatusResponse) GetCurrentReassignmentsCount() int32 {
	if x != nil {
		return x.CurrentReassignmentsCount
	}
	return 0
}

func (x *GetRedpandaPartitionBalancerStatusResponse) GetPartitionsPendingForceRecoveryCount() int32 {
	if x != nil && x.PartitionsPendingForceRecoveryCount != nil {
		return *x.PartitionsPendingForceRecoveryCount
	}
	return 0
}

func (x *GetRedpandaPartitionBalancerStatusResponse) GetPartitionsPendingRecoveryList() []string {
	if x != nil {
		return x.PartitionsPendingRecoveryList
	}
	return nil
}

type GetConsoleInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsoleInfoRequest) Reset() {
	*x = GetConsoleInfoRequest{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsoleInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsoleInfoRequest) ProtoMessage() {}

func (x *GetConsoleInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsoleInfoRequest.ProtoReflect.Descriptor instead.
func (*GetConsoleInfoRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{8}
}

// ConsoleInfo contains version and build information about Redpanda Console.
type GetConsoleInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Console version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// BuiltAt indicates the build time.
	BuiltAt       string `protobuf:"bytes,2,opt,name=built_at,json=builtAt,proto3" json:"built_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsoleInfoResponse) Reset() {
	*x = GetConsoleInfoResponse{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsoleInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsoleInfoResponse) ProtoMessage() {}

func (x *GetConsoleInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsoleInfoResponse.ProtoReflect.Descriptor instead.
func (*GetConsoleInfoResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{9}
}

func (x *GetConsoleInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetConsoleInfoResponse) GetBuiltAt() string {
	if x != nil {
		return x.BuiltAt
	}
	return ""
}

type GetKafkaConnectInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaConnectInfoRequest) Reset() {
	*x = GetKafkaConnectInfoRequest{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaConnectInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaConnectInfoRequest) ProtoMessage() {}

func (x *GetKafkaConnectInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaConnectInfoRequest.ProtoReflect.Descriptor instead.
func (*GetKafkaConnectInfoRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{10}
}

type GetKafkaConnectInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Clusters contains details for each Kafka Connect cluster.
	Clusters      []*GetKafkaConnectInfoResponse_KafkaConnectCluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaConnectInfoResponse) Reset() {
	*x = GetKafkaConnectInfoResponse{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaConnectInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaConnectInfoResponse) ProtoMessage() {}

func (x *GetKafkaConnectInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaConnectInfoResponse.ProtoReflect.Descriptor instead.
func (*GetKafkaConnectInfoResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{11}
}

func (x *GetKafkaConnectInfoResponse) GetClusters() []*GetKafkaConnectInfoResponse_KafkaConnectCluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type GetSchemaRegistryInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchemaRegistryInfoRequest) Reset() {
	*x = GetSchemaRegistryInfoRequest{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaRegistryInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRegistryInfoRequest) ProtoMessage() {}

func (x *GetSchemaRegistryInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRegistryInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRegistryInfoRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{12}
}

// SchemaRegistryInfo contains information about the configured Schema Registry.
type GetSchemaRegistryInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status indicates the health status of the Schema Registry.
	Status *ComponentStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// RegisteredSubjectsCount is the number of subjects registered.
	RegisteredSubjectsCount int32 `protobuf:"varint,2,opt,name=registered_subjects_count,json=registeredSubjectsCount,proto3" json:"registered_subjects_count,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetSchemaRegistryInfoResponse) Reset() {
	*x = GetSchemaRegistryInfoResponse{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaRegistryInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRegistryInfoResponse) ProtoMessage() {}

func (x *GetSchemaRegistryInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRegistryInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaRegistryInfoResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{13}
}

func (x *GetSchemaRegistryInfoResponse) GetStatus() *ComponentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetSchemaRegistryInfoResponse) GetRegisteredSubjectsCount() int32 {
	if x != nil {
		return x.RegisteredSubjectsCount
	}
	return 0
}

// ComponentStatus provides health status information common to all components.
type ComponentStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status is the overall health.
	Status StatusType `protobuf:"varint,1,opt,name=status,proto3,enum=redpanda.api.console.v1alpha1.StatusType" json:"status,omitempty"`
	// StatusReason provides details if the component is not healthy.
	StatusReason  string `protobuf:"bytes,2,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentStatus) Reset() {
	*x = ComponentStatus{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentStatus) ProtoMessage() {}

func (x *ComponentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentStatus.ProtoReflect.Descriptor instead.
func (*ComponentStatus) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{14}
}

func (x *ComponentStatus) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_STATUS_TYPE_UNSPECIFIED
}

func (x *ComponentStatus) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

// KafkaBroker represents details about a single Kafka broker.
type KafkaBroker struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BrokerID is the unique identifier of the broker.
	BrokerId int32 `protobuf:"varint,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	// Host is the address or hostname of the broker.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// RackID (availability zone) configured for this broker.
	RackId        *string `protobuf:"bytes,3,opt,name=rack_id,json=rackId,proto3,oneof" json:"rack_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaBroker) Reset() {
	*x = KafkaBroker{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaBroker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaBroker) ProtoMessage() {}

func (x *KafkaBroker) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaBroker.ProtoReflect.Descriptor instead.
func (*KafkaBroker) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{15}
}

func (x *KafkaBroker) GetBrokerId() int32 {
	if x != nil {
		return x.BrokerId
	}
	return 0
}

func (x *KafkaBroker) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *KafkaBroker) GetRackId() string {
	if x != nil && x.RackId != nil {
		return *x.RackId
	}
	return ""
}

// Violations describes violations for the partition auto balancer.
type GetRedpandaPartitionBalancerStatusResponse_Violations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UnavailableNodes are the nodes that have been unavailable after a time
	// set by 'partition_autobalancing_node_availability_timeout_sec' property.
	UnavailableNodes []int32 `protobuf:"varint,1,rep,packed,name=unavailable_nodes,json=unavailableNodes,proto3" json:"unavailable_nodes,omitempty"`
	// OverDiskLimitNodes are the nodes that surpassed the threshold of used
	// disk percentage set by 'partition_autobalancing_max_disk_usage_percent'
	// property.
	OverDiskLimitNodes []int32 `protobuf:"varint,2,rep,packed,name=over_disk_limit_nodes,json=overDiskLimitNodes,proto3" json:"over_disk_limit_nodes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetRedpandaPartitionBalancerStatusResponse_Violations) Reset() {
	*x = GetRedpandaPartitionBalancerStatusResponse_Violations{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRedpandaPartitionBalancerStatusResponse_Violations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedpandaPartitionBalancerStatusResponse_Violations) ProtoMessage() {}

func (x *GetRedpandaPartitionBalancerStatusResponse_Violations) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedpandaPartitionBalancerStatusResponse_Violations.ProtoReflect.Descriptor instead.
func (*GetRedpandaPartitionBalancerStatusResponse_Violations) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetRedpandaPartitionBalancerStatusResponse_Violations) GetUnavailableNodes() []int32 {
	if x != nil {
		return x.UnavailableNodes
	}
	return nil
}

func (x *GetRedpandaPartitionBalancerStatusResponse_Violations) GetOverDiskLimitNodes() []int32 {
	if x != nil {
		return x.OverDiskLimitNodes
	}
	return nil
}

// KafkaConnectCluster represents a single Kafka Connect cluster.
type GetKafkaConnectInfoResponse_KafkaConnectCluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the Kafka Connect cluster name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Status indicates the health of the cluster.
	Status *ComponentStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Host is the address of the Kafka Connect cluster.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Version is the version of the Kafka Connect cluster.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// InstalledPlugins is the number of plugins installed.
	InstalledPluginsCount int32 `protobuf:"varint,5,opt,name=installed_plugins_count,json=installedPluginsCount,proto3" json:"installed_plugins_count,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetKafkaConnectInfoResponse_KafkaConnectCluster) Reset() {
	*x = GetKafkaConnectInfoResponse_KafkaConnectCluster{}
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaConnectInfoResponse_KafkaConnectCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaConnectInfoResponse_KafkaConnectCluster) ProtoMessage() {}

func (x *GetKafkaConnectInfoResponse_KafkaConnectCluster) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaConnectInfoResponse_KafkaConnectCluster.ProtoReflect.Descriptor instead.
func (*GetKafkaConnectInfoResponse_KafkaConnectCluster) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetKafkaConnectInfoResponse_KafkaConnectCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetKafkaConnectInfoResponse_KafkaConnectCluster) GetStatus() *ComponentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetKafkaConnectInfoResponse_KafkaConnectCluster) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GetKafkaConnectInfoResponse_KafkaConnectCluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetKafkaConnectInfoResponse_KafkaConnectCluster) GetInstalledPluginsCount() int32 {
	if x != nil {
		return x.InstalledPluginsCount
	}
	return 0
}

var File_redpanda_api_console_v1alpha1_cluster_status_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDesc = []byte{
	0x0a, 0x32, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9f, 0x04, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x52, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xc7, 0x06, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x68, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x50, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x27, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x23, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x6c, 0x0a, 0x0a,
	0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x41, 0x74, 0x22, 0x1c,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe3, 0x02, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xd7, 0x01, 0x0a, 0x13, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x0b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x2a, 0x77, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x59, 0x10, 0x03, 0x2a, 0x9d, 0x01, 0x0a, 0x11, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e,
	0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4b, 0x41,
	0x46, 0x4b, 0x41, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x50,
	0x41, 0x4e, 0x44, 0x41, 0x10, 0x03, 0x2a, 0x7c, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49,
	0x41, 0x4c, 0x10, 0x03, 0x2a, 0x67, 0x0a, 0x0d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x32, 0xd1, 0x08,
	0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x01, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x01, 0x12, 0x8a, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x12, 0xc3, 0x01, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x48, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x12,
	0x87, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x06, 0x12, 0x96, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x39, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01,
	0x10, 0x05, 0x12, 0x9c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x42, 0xb3, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x63, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a,
	0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescData = file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_redpanda_api_console_v1alpha1_cluster_status_proto_goTypes = []any{
	(StatusType)(0),        // 0: redpanda.api.console.v1alpha1.StatusType
	(KafkaDistribution)(0), // 1: redpanda.api.console.v1alpha1.KafkaDistribution
	(LicenseType)(0),       // 2: redpanda.api.console.v1alpha1.LicenseType
	(LicenseSource)(0),     // 3: redpanda.api.console.v1alpha1.LicenseSource
	(GetRedpandaPartitionBalancerStatusResponse_Status)(0),        // 4: redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Status
	(*GetKafkaInfoRequest)(nil),                                   // 5: redpanda.api.console.v1alpha1.GetKafkaInfoRequest
	(*GetKafkaInfoResponse)(nil),                                  // 6: redpanda.api.console.v1alpha1.GetKafkaInfoResponse
	(*GetKafkaAuthorizerInfoRequest)(nil),                         // 7: redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoRequest
	(*GetKafkaAuthorizerInfoResponse)(nil),                        // 8: redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoResponse
	(*GetRedpandaInfoRequest)(nil),                                // 9: redpanda.api.console.v1alpha1.GetRedpandaInfoRequest
	(*GetRedpandaInfoResponse)(nil),                               // 10: redpanda.api.console.v1alpha1.GetRedpandaInfoResponse
	(*GetRedpandaPartitionBalancerStatusRequest)(nil),             // 11: redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusRequest
	(*GetRedpandaPartitionBalancerStatusResponse)(nil),            // 12: redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse
	(*GetConsoleInfoRequest)(nil),                                 // 13: redpanda.api.console.v1alpha1.GetConsoleInfoRequest
	(*GetConsoleInfoResponse)(nil),                                // 14: redpanda.api.console.v1alpha1.GetConsoleInfoResponse
	(*GetKafkaConnectInfoRequest)(nil),                            // 15: redpanda.api.console.v1alpha1.GetKafkaConnectInfoRequest
	(*GetKafkaConnectInfoResponse)(nil),                           // 16: redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse
	(*GetSchemaRegistryInfoRequest)(nil),                          // 17: redpanda.api.console.v1alpha1.GetSchemaRegistryInfoRequest
	(*GetSchemaRegistryInfoResponse)(nil),                         // 18: redpanda.api.console.v1alpha1.GetSchemaRegistryInfoResponse
	(*ComponentStatus)(nil),                                       // 19: redpanda.api.console.v1alpha1.ComponentStatus
	(*KafkaBroker)(nil),                                           // 20: redpanda.api.console.v1alpha1.KafkaBroker
	(*GetRedpandaPartitionBalancerStatusResponse_Violations)(nil), // 21: redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Violations
	(*GetKafkaConnectInfoResponse_KafkaConnectCluster)(nil),       // 22: redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse.KafkaConnectCluster
}
var file_redpanda_api_console_v1alpha1_cluster_status_proto_depIdxs = []int32{
	19, // 0: redpanda.api.console.v1alpha1.GetKafkaInfoResponse.status:type_name -> redpanda.api.console.v1alpha1.ComponentStatus
	1,  // 1: redpanda.api.console.v1alpha1.GetKafkaInfoResponse.distribution:type_name -> redpanda.api.console.v1alpha1.KafkaDistribution
	20, // 2: redpanda.api.console.v1alpha1.GetKafkaInfoResponse.brokers:type_name -> redpanda.api.console.v1alpha1.KafkaBroker
	4,  // 3: redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.status:type_name -> redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Status
	21, // 4: redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.violations:type_name -> redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse.Violations
	22, // 5: redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse.clusters:type_name -> redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse.KafkaConnectCluster
	19, // 6: redpanda.api.console.v1alpha1.GetSchemaRegistryInfoResponse.status:type_name -> redpanda.api.console.v1alpha1.ComponentStatus
	0,  // 7: redpanda.api.console.v1alpha1.ComponentStatus.status:type_name -> redpanda.api.console.v1alpha1.StatusType
	19, // 8: redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse.KafkaConnectCluster.status:type_name -> redpanda.api.console.v1alpha1.ComponentStatus
	5,  // 9: redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaInfo:input_type -> redpanda.api.console.v1alpha1.GetKafkaInfoRequest
	7,  // 10: redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaAuthorizerInfo:input_type -> redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoRequest
	9,  // 11: redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaInfo:input_type -> redpanda.api.console.v1alpha1.GetRedpandaInfoRequest
	11, // 12: redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaPartitionBalancerStatus:input_type -> redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusRequest
	13, // 13: redpanda.api.console.v1alpha1.ClusterStatusService.GetConsoleInfo:input_type -> redpanda.api.console.v1alpha1.GetConsoleInfoRequest
	15, // 14: redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaConnectInfo:input_type -> redpanda.api.console.v1alpha1.GetKafkaConnectInfoRequest
	17, // 15: redpanda.api.console.v1alpha1.ClusterStatusService.GetSchemaRegistryInfo:input_type -> redpanda.api.console.v1alpha1.GetSchemaRegistryInfoRequest
	6,  // 16: redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaInfo:output_type -> redpanda.api.console.v1alpha1.GetKafkaInfoResponse
	8,  // 17: redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaAuthorizerInfo:output_type -> redpanda.api.console.v1alpha1.GetKafkaAuthorizerInfoResponse
	10, // 18: redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaInfo:output_type -> redpanda.api.console.v1alpha1.GetRedpandaInfoResponse
	12, // 19: redpanda.api.console.v1alpha1.ClusterStatusService.GetRedpandaPartitionBalancerStatus:output_type -> redpanda.api.console.v1alpha1.GetRedpandaPartitionBalancerStatusResponse
	14, // 20: redpanda.api.console.v1alpha1.ClusterStatusService.GetConsoleInfo:output_type -> redpanda.api.console.v1alpha1.GetConsoleInfoResponse
	16, // 21: redpanda.api.console.v1alpha1.ClusterStatusService.GetKafkaConnectInfo:output_type -> redpanda.api.console.v1alpha1.GetKafkaConnectInfoResponse
	18, // 22: redpanda.api.console.v1alpha1.ClusterStatusService.GetSchemaRegistryInfo:output_type -> redpanda.api.console.v1alpha1.GetSchemaRegistryInfoResponse
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_cluster_status_proto_init() }
func file_redpanda_api_console_v1alpha1_cluster_status_proto_init() {
	if File_redpanda_api_console_v1alpha1_cluster_status_proto != nil {
		return
	}
	file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[7].OneofWrappers = []any{}
	file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_cluster_status_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_cluster_status_proto_depIdxs,
		EnumInfos:         file_redpanda_api_console_v1alpha1_cluster_status_proto_enumTypes,
		MessageInfos:      file_redpanda_api_console_v1alpha1_cluster_status_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_cluster_status_proto = out.File
	file_redpanda_api_console_v1alpha1_cluster_status_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_cluster_status_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_cluster_status_proto_depIdxs = nil
}
