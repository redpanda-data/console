// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/license.proto

package consolev1alpha1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type License_Source int32

const (
	License_SOURCE_UNSPECIFIED      License_Source = 0
	License_SOURCE_REDPANDA_CONSOLE License_Source = 1
	License_SOURCE_REDPANDA_CORE    License_Source = 2
)

// Enum value maps for License_Source.
var (
	License_Source_name = map[int32]string{
		0: "SOURCE_UNSPECIFIED",
		1: "SOURCE_REDPANDA_CONSOLE",
		2: "SOURCE_REDPANDA_CORE",
	}
	License_Source_value = map[string]int32{
		"SOURCE_UNSPECIFIED":      0,
		"SOURCE_REDPANDA_CONSOLE": 1,
		"SOURCE_REDPANDA_CORE":    2,
	}
)

func (x License_Source) Enum() *License_Source {
	p := new(License_Source)
	*p = x
	return p
}

func (x License_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (License_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_license_proto_enumTypes[0].Descriptor()
}

func (License_Source) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_license_proto_enumTypes[0]
}

func (x License_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use License_Source.Descriptor instead.
func (License_Source) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{0, 0}
}

type License_Type int32

const (
	License_TYPE_UNSPECIFIED License_Type = 0
	License_TYPE_COMMUNITY   License_Type = 1
	License_TYPE_TRIAL       License_Type = 2
	License_TYPE_ENTERPRISE  License_Type = 3
)

// Enum value maps for License_Type.
var (
	License_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_COMMUNITY",
		2: "TYPE_TRIAL",
		3: "TYPE_ENTERPRISE",
	}
	License_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_COMMUNITY":   1,
		"TYPE_TRIAL":       2,
		"TYPE_ENTERPRISE":  3,
	}
)

func (x License_Type) Enum() *License_Type {
	p := new(License_Type)
	*p = x
	return p
}

func (x License_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (License_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_license_proto_enumTypes[1].Descriptor()
}

func (License_Type) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_license_proto_enumTypes[1]
}

func (x License_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use License_Type.Descriptor instead.
func (License_Type) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{0, 1}
}

type ListEnterpriseFeaturesResponse_LicenseStatus int32

const (
	ListEnterpriseFeaturesResponse_LICENSE_STATUS_UNSPECIFIED ListEnterpriseFeaturesResponse_LicenseStatus = 0
	ListEnterpriseFeaturesResponse_LICENSE_STATUS_VALID       ListEnterpriseFeaturesResponse_LicenseStatus = 1
	ListEnterpriseFeaturesResponse_LICENSE_STATUS_EXPIRED     ListEnterpriseFeaturesResponse_LicenseStatus = 2
	ListEnterpriseFeaturesResponse_LICENSE_STATUS_NOT_PRESENT ListEnterpriseFeaturesResponse_LicenseStatus = 3
)

// Enum value maps for ListEnterpriseFeaturesResponse_LicenseStatus.
var (
	ListEnterpriseFeaturesResponse_LicenseStatus_name = map[int32]string{
		0: "LICENSE_STATUS_UNSPECIFIED",
		1: "LICENSE_STATUS_VALID",
		2: "LICENSE_STATUS_EXPIRED",
		3: "LICENSE_STATUS_NOT_PRESENT",
	}
	ListEnterpriseFeaturesResponse_LicenseStatus_value = map[string]int32{
		"LICENSE_STATUS_UNSPECIFIED": 0,
		"LICENSE_STATUS_VALID":       1,
		"LICENSE_STATUS_EXPIRED":     2,
		"LICENSE_STATUS_NOT_PRESENT": 3,
	}
)

func (x ListEnterpriseFeaturesResponse_LicenseStatus) Enum() *ListEnterpriseFeaturesResponse_LicenseStatus {
	p := new(ListEnterpriseFeaturesResponse_LicenseStatus)
	*p = x
	return p
}

func (x ListEnterpriseFeaturesResponse_LicenseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListEnterpriseFeaturesResponse_LicenseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_license_proto_enumTypes[2].Descriptor()
}

func (ListEnterpriseFeaturesResponse_LicenseStatus) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_license_proto_enumTypes[2]
}

func (x ListEnterpriseFeaturesResponse_LicenseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListEnterpriseFeaturesResponse_LicenseStatus.Descriptor instead.
func (ListEnterpriseFeaturesResponse_LicenseStatus) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{6, 0}
}

type License struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source is where the license is used (e.g. Redpanda Cluster, Console).
	Source License_Source `protobuf:"varint,1,opt,name=source,proto3,enum=redpanda.api.console.v1alpha1.License_Source" json:"source,omitempty"`
	// Type is the type of license (community, trial, enterprise).
	Type License_Type `protobuf:"varint,2,opt,name=type,proto3,enum=redpanda.api.console.v1alpha1.License_Type" json:"type,omitempty"`
	// UnixEpochSeconds is the timestamp when the license is going to expire.
	ExpiresAt int64 `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Organization is the organization name of the license.
	Organization  string `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *License) Reset() {
	*x = License{}
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{0}
}

func (x *License) GetSource() License_Source {
	if x != nil {
		return x.Source
	}
	return License_SOURCE_UNSPECIFIED
}

func (x *License) GetType() License_Type {
	if x != nil {
		return x.Type
	}
	return License_TYPE_UNSPECIFIED
}

func (x *License) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *License) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type ListLicensesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLicensesRequest) Reset() {
	*x = ListLicensesRequest{}
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLicensesRequest) ProtoMessage() {}

func (x *ListLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLicensesRequest.ProtoReflect.Descriptor instead.
func (*ListLicensesRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{1}
}

type ListLicensesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Licenses      []*License             `protobuf:"bytes,1,rep,name=licenses,proto3" json:"licenses,omitempty"`
	Violation     bool                   `protobuf:"varint,2,opt,name=violation,proto3" json:"violation,omitempty"`
	RequireGating bool                   `protobuf:"varint,3,opt,name=require_gating,json=requireGating,proto3" json:"require_gating,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLicensesResponse) Reset() {
	*x = ListLicensesResponse{}
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLicensesResponse) ProtoMessage() {}

func (x *ListLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLicensesResponse.ProtoReflect.Descriptor instead.
func (*ListLicensesResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{2}
}

func (x *ListLicensesResponse) GetLicenses() []*License {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *ListLicensesResponse) GetViolation() bool {
	if x != nil {
		return x.Violation
	}
	return false
}

func (x *ListLicensesResponse) GetRequireGating() bool {
	if x != nil {
		return x.RequireGating
	}
	return false
}

type SetLicenseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	License       string                 `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLicenseRequest) Reset() {
	*x = SetLicenseRequest{}
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLicenseRequest) ProtoMessage() {}

func (x *SetLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLicenseRequest.ProtoReflect.Descriptor instead.
func (*SetLicenseRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{3}
}

func (x *SetLicenseRequest) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type SetLicenseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	License       *License               `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLicenseResponse) Reset() {
	*x = SetLicenseResponse{}
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLicenseResponse) ProtoMessage() {}

func (x *SetLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLicenseResponse.ProtoReflect.Descriptor instead.
func (*SetLicenseResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{4}
}

func (x *SetLicenseResponse) GetLicense() *License {
	if x != nil {
		return x.License
	}
	return nil
}

type ListEnterpriseFeaturesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEnterpriseFeaturesRequest) Reset() {
	*x = ListEnterpriseFeaturesRequest{}
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnterpriseFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseFeaturesRequest) ProtoMessage() {}

func (x *ListEnterpriseFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseFeaturesRequest.ProtoReflect.Descriptor instead.
func (*ListEnterpriseFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{5}
}

type ListEnterpriseFeaturesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LicenseStatus reports the status of the installed license in the Redpanda cluster.
	LicenseStatus ListEnterpriseFeaturesResponse_LicenseStatus `protobuf:"varint,1,opt,name=license_status,json=licenseStatus,proto3,enum=redpanda.api.console.v1alpha1.ListEnterpriseFeaturesResponse_LicenseStatus" json:"license_status,omitempty"`
	// Violation is true if license_status is not 'valid' AND one or more enterprise features are enabled
	Violation bool `protobuf:"varint,2,opt,name=violation,proto3" json:"violation,omitempty"`
	// Features is a ist of enterprise features (name and whether in use)
	Features      []*ListEnterpriseFeaturesResponse_Feature `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEnterpriseFeaturesResponse) Reset() {
	*x = ListEnterpriseFeaturesResponse{}
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnterpriseFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseFeaturesResponse) ProtoMessage() {}

func (x *ListEnterpriseFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseFeaturesResponse.ProtoReflect.Descriptor instead.
func (*ListEnterpriseFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{6}
}

func (x *ListEnterpriseFeaturesResponse) GetLicenseStatus() ListEnterpriseFeaturesResponse_LicenseStatus {
	if x != nil {
		return x.LicenseStatus
	}
	return ListEnterpriseFeaturesResponse_LICENSE_STATUS_UNSPECIFIED
}

func (x *ListEnterpriseFeaturesResponse) GetViolation() bool {
	if x != nil {
		return x.Violation
	}
	return false
}

func (x *ListEnterpriseFeaturesResponse) GetFeatures() []*ListEnterpriseFeaturesResponse_Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

// Feature is an enterprise feature and a bool indicating whether it's in use.
type ListEnterpriseFeaturesResponse_Feature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled       bool                   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEnterpriseFeaturesResponse_Feature) Reset() {
	*x = ListEnterpriseFeaturesResponse_Feature{}
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnterpriseFeaturesResponse_Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseFeaturesResponse_Feature) ProtoMessage() {}

func (x *ListEnterpriseFeaturesResponse_Feature) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_license_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseFeaturesResponse_Feature.ProtoReflect.Descriptor instead.
func (*ListEnterpriseFeaturesResponse_Feature) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ListEnterpriseFeaturesResponse_Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEnterpriseFeaturesResponse_Feature) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

var File_redpanda_api_console_v1alpha1_license_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_license_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x84, 0x03, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f, 0x43, 0x4f, 0x52,
	0x45, 0x10, 0x02, 0x22, 0x55, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x03, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x47, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x22, 0x3c, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01,
	0x01, 0x72, 0x05, 0x10, 0x20, 0x18, 0x80, 0x08, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x22, 0x56, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd6, 0x03, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a,
	0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x61, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x1a, 0x37, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x0d,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x1a, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x32, 0xb3, 0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x12, 0x7b, 0x0a, 0x0a, 0x53, 0x65,
	0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a,
	0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x08, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x03, 0x42, 0xad, 0x02, 0x0a, 0x21, 0x63, 0x6f,
	0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x63, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x3a,
	0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_redpanda_api_console_v1alpha1_license_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_license_proto_rawDescData = file_redpanda_api_console_v1alpha1_license_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_license_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_license_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_license_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_license_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_license_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_redpanda_api_console_v1alpha1_license_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_redpanda_api_console_v1alpha1_license_proto_goTypes = []any{
	(License_Source)(0), // 0: redpanda.api.console.v1alpha1.License.Source
	(License_Type)(0),   // 1: redpanda.api.console.v1alpha1.License.Type
	(ListEnterpriseFeaturesResponse_LicenseStatus)(0), // 2: redpanda.api.console.v1alpha1.ListEnterpriseFeaturesResponse.LicenseStatus
	(*License)(nil),                                // 3: redpanda.api.console.v1alpha1.License
	(*ListLicensesRequest)(nil),                    // 4: redpanda.api.console.v1alpha1.ListLicensesRequest
	(*ListLicensesResponse)(nil),                   // 5: redpanda.api.console.v1alpha1.ListLicensesResponse
	(*SetLicenseRequest)(nil),                      // 6: redpanda.api.console.v1alpha1.SetLicenseRequest
	(*SetLicenseResponse)(nil),                     // 7: redpanda.api.console.v1alpha1.SetLicenseResponse
	(*ListEnterpriseFeaturesRequest)(nil),          // 8: redpanda.api.console.v1alpha1.ListEnterpriseFeaturesRequest
	(*ListEnterpriseFeaturesResponse)(nil),         // 9: redpanda.api.console.v1alpha1.ListEnterpriseFeaturesResponse
	(*ListEnterpriseFeaturesResponse_Feature)(nil), // 10: redpanda.api.console.v1alpha1.ListEnterpriseFeaturesResponse.Feature
}
var file_redpanda_api_console_v1alpha1_license_proto_depIdxs = []int32{
	0,  // 0: redpanda.api.console.v1alpha1.License.source:type_name -> redpanda.api.console.v1alpha1.License.Source
	1,  // 1: redpanda.api.console.v1alpha1.License.type:type_name -> redpanda.api.console.v1alpha1.License.Type
	3,  // 2: redpanda.api.console.v1alpha1.ListLicensesResponse.licenses:type_name -> redpanda.api.console.v1alpha1.License
	3,  // 3: redpanda.api.console.v1alpha1.SetLicenseResponse.license:type_name -> redpanda.api.console.v1alpha1.License
	2,  // 4: redpanda.api.console.v1alpha1.ListEnterpriseFeaturesResponse.license_status:type_name -> redpanda.api.console.v1alpha1.ListEnterpriseFeaturesResponse.LicenseStatus
	10, // 5: redpanda.api.console.v1alpha1.ListEnterpriseFeaturesResponse.features:type_name -> redpanda.api.console.v1alpha1.ListEnterpriseFeaturesResponse.Feature
	4,  // 6: redpanda.api.console.v1alpha1.LicenseService.ListLicenses:input_type -> redpanda.api.console.v1alpha1.ListLicensesRequest
	6,  // 7: redpanda.api.console.v1alpha1.LicenseService.SetLicense:input_type -> redpanda.api.console.v1alpha1.SetLicenseRequest
	8,  // 8: redpanda.api.console.v1alpha1.LicenseService.ListEnterpriseFeatures:input_type -> redpanda.api.console.v1alpha1.ListEnterpriseFeaturesRequest
	5,  // 9: redpanda.api.console.v1alpha1.LicenseService.ListLicenses:output_type -> redpanda.api.console.v1alpha1.ListLicensesResponse
	7,  // 10: redpanda.api.console.v1alpha1.LicenseService.SetLicense:output_type -> redpanda.api.console.v1alpha1.SetLicenseResponse
	9,  // 11: redpanda.api.console.v1alpha1.LicenseService.ListEnterpriseFeatures:output_type -> redpanda.api.console.v1alpha1.ListEnterpriseFeaturesResponse
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_license_proto_init() }
func file_redpanda_api_console_v1alpha1_license_proto_init() {
	if File_redpanda_api_console_v1alpha1_license_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_license_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_license_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_license_proto_depIdxs,
		EnumInfos:         file_redpanda_api_console_v1alpha1_license_proto_enumTypes,
		MessageInfos:      file_redpanda_api_console_v1alpha1_license_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_license_proto = out.File
	file_redpanda_api_console_v1alpha1_license_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_license_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_license_proto_depIdxs = nil
}
