// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/api/dataplane/v1/cloud_storage.proto

package dataplanev1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudStorageService_MountTopics_FullMethodName         = "/redpanda.api.dataplane.v1.CloudStorageService/MountTopics"
	CloudStorageService_UnmountTopics_FullMethodName       = "/redpanda.api.dataplane.v1.CloudStorageService/UnmountTopics"
	CloudStorageService_ListMountableTopics_FullMethodName = "/redpanda.api.dataplane.v1.CloudStorageService/ListMountableTopics"
	CloudStorageService_ListMountTasks_FullMethodName      = "/redpanda.api.dataplane.v1.CloudStorageService/ListMountTasks"
	CloudStorageService_GetMountTask_FullMethodName        = "/redpanda.api.dataplane.v1.CloudStorageService/GetMountTask"
	CloudStorageService_DeleteMountTask_FullMethodName     = "/redpanda.api.dataplane.v1.CloudStorageService/DeleteMountTask"
	CloudStorageService_UpdateMountTask_FullMethodName     = "/redpanda.api.dataplane.v1.CloudStorageService/UpdateMountTask"
)

// CloudStorageServiceClient is the client API for CloudStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CloudStorageService implements endpoints for mounting and unmounting topics in Redpanda clusters.
// Requires that you have tiered storage enabled.
type CloudStorageServiceClient interface {
	MountTopics(ctx context.Context, in *MountTopicsRequest, opts ...grpc.CallOption) (*MountTopicsResponse, error)
	UnmountTopics(ctx context.Context, in *UnmountTopicsRequest, opts ...grpc.CallOption) (*UnmountTopicsResponse, error)
	ListMountableTopics(ctx context.Context, in *ListMountableTopicsRequest, opts ...grpc.CallOption) (*ListMountableTopicsResponse, error)
	ListMountTasks(ctx context.Context, in *ListMountTasksRequest, opts ...grpc.CallOption) (*ListMountTasksResponse, error)
	GetMountTask(ctx context.Context, in *GetMountTaskRequest, opts ...grpc.CallOption) (*GetMountTaskResponse, error)
	DeleteMountTask(ctx context.Context, in *DeleteMountTaskRequest, opts ...grpc.CallOption) (*DeleteMountTaskResponse, error)
	UpdateMountTask(ctx context.Context, in *UpdateMountTaskRequest, opts ...grpc.CallOption) (*UpdateMountTaskResponse, error)
}

type cloudStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudStorageServiceClient(cc grpc.ClientConnInterface) CloudStorageServiceClient {
	return &cloudStorageServiceClient{cc}
}

func (c *cloudStorageServiceClient) MountTopics(ctx context.Context, in *MountTopicsRequest, opts ...grpc.CallOption) (*MountTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountTopicsResponse)
	err := c.cc.Invoke(ctx, CloudStorageService_MountTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStorageServiceClient) UnmountTopics(ctx context.Context, in *UnmountTopicsRequest, opts ...grpc.CallOption) (*UnmountTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmountTopicsResponse)
	err := c.cc.Invoke(ctx, CloudStorageService_UnmountTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStorageServiceClient) ListMountableTopics(ctx context.Context, in *ListMountableTopicsRequest, opts ...grpc.CallOption) (*ListMountableTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMountableTopicsResponse)
	err := c.cc.Invoke(ctx, CloudStorageService_ListMountableTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStorageServiceClient) ListMountTasks(ctx context.Context, in *ListMountTasksRequest, opts ...grpc.CallOption) (*ListMountTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMountTasksResponse)
	err := c.cc.Invoke(ctx, CloudStorageService_ListMountTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStorageServiceClient) GetMountTask(ctx context.Context, in *GetMountTaskRequest, opts ...grpc.CallOption) (*GetMountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMountTaskResponse)
	err := c.cc.Invoke(ctx, CloudStorageService_GetMountTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStorageServiceClient) DeleteMountTask(ctx context.Context, in *DeleteMountTaskRequest, opts ...grpc.CallOption) (*DeleteMountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMountTaskResponse)
	err := c.cc.Invoke(ctx, CloudStorageService_DeleteMountTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStorageServiceClient) UpdateMountTask(ctx context.Context, in *UpdateMountTaskRequest, opts ...grpc.CallOption) (*UpdateMountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMountTaskResponse)
	err := c.cc.Invoke(ctx, CloudStorageService_UpdateMountTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudStorageServiceServer is the server API for CloudStorageService service.
// All implementations must embed UnimplementedCloudStorageServiceServer
// for forward compatibility.
//
// CloudStorageService implements endpoints for mounting and unmounting topics in Redpanda clusters.
// Requires that you have tiered storage enabled.
type CloudStorageServiceServer interface {
	MountTopics(context.Context, *MountTopicsRequest) (*MountTopicsResponse, error)
	UnmountTopics(context.Context, *UnmountTopicsRequest) (*UnmountTopicsResponse, error)
	ListMountableTopics(context.Context, *ListMountableTopicsRequest) (*ListMountableTopicsResponse, error)
	ListMountTasks(context.Context, *ListMountTasksRequest) (*ListMountTasksResponse, error)
	GetMountTask(context.Context, *GetMountTaskRequest) (*GetMountTaskResponse, error)
	DeleteMountTask(context.Context, *DeleteMountTaskRequest) (*DeleteMountTaskResponse, error)
	UpdateMountTask(context.Context, *UpdateMountTaskRequest) (*UpdateMountTaskResponse, error)
	mustEmbedUnimplementedCloudStorageServiceServer()
}

// UnimplementedCloudStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudStorageServiceServer struct{}

func (UnimplementedCloudStorageServiceServer) MountTopics(context.Context, *MountTopicsRequest) (*MountTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountTopics not implemented")
}
func (UnimplementedCloudStorageServiceServer) UnmountTopics(context.Context, *UnmountTopicsRequest) (*UnmountTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountTopics not implemented")
}
func (UnimplementedCloudStorageServiceServer) ListMountableTopics(context.Context, *ListMountableTopicsRequest) (*ListMountableTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMountableTopics not implemented")
}
func (UnimplementedCloudStorageServiceServer) ListMountTasks(context.Context, *ListMountTasksRequest) (*ListMountTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMountTasks not implemented")
}
func (UnimplementedCloudStorageServiceServer) GetMountTask(context.Context, *GetMountTaskRequest) (*GetMountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMountTask not implemented")
}
func (UnimplementedCloudStorageServiceServer) DeleteMountTask(context.Context, *DeleteMountTaskRequest) (*DeleteMountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMountTask not implemented")
}
func (UnimplementedCloudStorageServiceServer) UpdateMountTask(context.Context, *UpdateMountTaskRequest) (*UpdateMountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMountTask not implemented")
}
func (UnimplementedCloudStorageServiceServer) mustEmbedUnimplementedCloudStorageServiceServer() {}
func (UnimplementedCloudStorageServiceServer) testEmbeddedByValue()                             {}

// UnsafeCloudStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudStorageServiceServer will
// result in compilation errors.
type UnsafeCloudStorageServiceServer interface {
	mustEmbedUnimplementedCloudStorageServiceServer()
}

func RegisterCloudStorageServiceServer(s grpc.ServiceRegistrar, srv CloudStorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedCloudStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudStorageService_ServiceDesc, srv)
}

func _CloudStorageService_MountTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStorageServiceServer).MountTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudStorageService_MountTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStorageServiceServer).MountTopics(ctx, req.(*MountTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStorageService_UnmountTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStorageServiceServer).UnmountTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudStorageService_UnmountTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStorageServiceServer).UnmountTopics(ctx, req.(*UnmountTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStorageService_ListMountableTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMountableTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStorageServiceServer).ListMountableTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudStorageService_ListMountableTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStorageServiceServer).ListMountableTopics(ctx, req.(*ListMountableTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStorageService_ListMountTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMountTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStorageServiceServer).ListMountTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudStorageService_ListMountTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStorageServiceServer).ListMountTasks(ctx, req.(*ListMountTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStorageService_GetMountTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMountTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStorageServiceServer).GetMountTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudStorageService_GetMountTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStorageServiceServer).GetMountTask(ctx, req.(*GetMountTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStorageService_DeleteMountTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMountTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStorageServiceServer).DeleteMountTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudStorageService_DeleteMountTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStorageServiceServer).DeleteMountTask(ctx, req.(*DeleteMountTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStorageService_UpdateMountTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMountTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStorageServiceServer).UpdateMountTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudStorageService_UpdateMountTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStorageServiceServer).UpdateMountTask(ctx, req.(*UpdateMountTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudStorageService_ServiceDesc is the grpc.ServiceDesc for CloudStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.dataplane.v1.CloudStorageService",
	HandlerType: (*CloudStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MountTopics",
			Handler:    _CloudStorageService_MountTopics_Handler,
		},
		{
			MethodName: "UnmountTopics",
			Handler:    _CloudStorageService_UnmountTopics_Handler,
		},
		{
			MethodName: "ListMountableTopics",
			Handler:    _CloudStorageService_ListMountableTopics_Handler,
		},
		{
			MethodName: "ListMountTasks",
			Handler:    _CloudStorageService_ListMountTasks_Handler,
		},
		{
			MethodName: "GetMountTask",
			Handler:    _CloudStorageService_GetMountTask_Handler,
		},
		{
			MethodName: "DeleteMountTask",
			Handler:    _CloudStorageService_DeleteMountTask_Handler,
		},
		{
			MethodName: "UpdateMountTask",
			Handler:    _CloudStorageService_UpdateMountTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/api/dataplane/v1/cloud_storage.proto",
}
