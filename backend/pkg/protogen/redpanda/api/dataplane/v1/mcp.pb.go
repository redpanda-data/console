// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1/mcp.proto

package dataplanev1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State of the MCP server.
type MCPServer_State int32

const (
	MCPServer_STATE_UNSPECIFIED MCPServer_State = 0
	// The MCP server is starting.
	MCPServer_STATE_STARTING MCPServer_State = 1
	// The MCP server is running.
	MCPServer_STATE_RUNNING MCPServer_State = 2
	// The MCP server is in the process of stopping.
	MCPServer_STATE_STOPPING MCPServer_State = 3
	// The MCP server is stopped and in paused state.
	MCPServer_STATE_STOPPED MCPServer_State = 4
	// The MCP server encountered an error.
	MCPServer_STATE_ERROR MCPServer_State = 5
)

// Enum value maps for MCPServer_State.
var (
	MCPServer_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_STARTING",
		2: "STATE_RUNNING",
		3: "STATE_STOPPING",
		4: "STATE_STOPPED",
		5: "STATE_ERROR",
	}
	MCPServer_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_STARTING":    1,
		"STATE_RUNNING":     2,
		"STATE_STOPPING":    3,
		"STATE_STOPPED":     4,
		"STATE_ERROR":       5,
	}
)

func (x MCPServer_State) Enum() *MCPServer_State {
	p := new(MCPServer_State)
	*p = x
	return p
}

func (x MCPServer_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MCPServer_State) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_mcp_proto_enumTypes[0].Descriptor()
}

func (MCPServer_State) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_mcp_proto_enumTypes[0]
}

func (x MCPServer_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MCPServer_State.Descriptor instead.
func (MCPServer_State) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{0, 0}
}

// Defines the MCP server resource.
type MCPServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MCP Server ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User-friendly MCP server name.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional MCP server description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// All the configuration files for the MCP server.
	// The key in the map is the path to the configuration file, this path must be relative and also valid in to layout in a filesystem,
	// when considering many paths in a full configuration (so it's not valid to have both entries for `foo/bar` and `foo/bar/baz`).
	ConfigFiles map[string]*MCPServer_Configuration `protobuf:"bytes,4,rep,name=config_files,json=configFiles,proto3" json:"config_files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The number of resources that are guaranteed to be assigned to the MCP server.
	Resources *Pipeline_Resources `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"`
	// Tags are key-value pairs that can be assigned to a MCP server resource.
	// They help organize MCP servers and enable filtering when listing them.
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The current MCP server state.
	State  MCPServer_State   `protobuf:"varint,7,opt,name=state,proto3,enum=redpanda.api.dataplane.v1.MCPServer_State" json:"state,omitempty"`
	Status *MCPServer_Status `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// URL to connect to the MCP server
	Url           string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServer) Reset() {
	*x = MCPServer{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServer) ProtoMessage() {}

func (x *MCPServer) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServer.ProtoReflect.Descriptor instead.
func (*MCPServer) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{0}
}

func (x *MCPServer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MCPServer) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MCPServer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MCPServer) GetConfigFiles() map[string]*MCPServer_Configuration {
	if x != nil {
		return x.ConfigFiles
	}
	return nil
}

func (x *MCPServer) GetResources() *Pipeline_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MCPServer) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MCPServer) GetState() MCPServer_State {
	if x != nil {
		return x.State
	}
	return MCPServer_STATE_UNSPECIFIED
}

func (x *MCPServer) GetStatus() *MCPServer_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MCPServer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// MCPServerCreate contains the details for the MCP Server creation request.
type MCPServerCreate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User-friendly MCP server name.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// MCP server description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// All the configuration files for the MCP server.
	// The key in the map is the path to the configuration file, this path must be relative and also valid in to layout in a filesystem,
	// when considering many paths in a full configuration (so it's not valid to have both entries for `foo/bar` and `foo/bar/baz`).
	ConfigFiles map[string]*MCPServer_Configuration `protobuf:"bytes,3,rep,name=config_files,json=configFiles,proto3" json:"config_files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The number of resources that are guaranteed to be assigned to the MCP server.
	Resources *Pipeline_Resources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	// Optional list of tags to attach to a MCP server.
	Tags          map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServerCreate) Reset() {
	*x = MCPServerCreate{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServerCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServerCreate) ProtoMessage() {}

func (x *MCPServerCreate) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServerCreate.ProtoReflect.Descriptor instead.
func (*MCPServerCreate) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{1}
}

func (x *MCPServerCreate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MCPServerCreate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MCPServerCreate) GetConfigFiles() map[string]*MCPServer_Configuration {
	if x != nil {
		return x.ConfigFiles
	}
	return nil
}

func (x *MCPServerCreate) GetResources() *Pipeline_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MCPServerCreate) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// CreateMCPServerRequest is the request of CreateMCPServer.
type CreateMCPServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServerCreate       `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMCPServerRequest) Reset() {
	*x = CreateMCPServerRequest{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMCPServerRequest) ProtoMessage() {}

func (x *CreateMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMCPServerRequest.ProtoReflect.Descriptor instead.
func (*CreateMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{2}
}

func (x *CreateMCPServerRequest) GetMcpServer() *MCPServerCreate {
	if x != nil {
		return x.McpServer
	}
	return nil
}

type CreateMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServer             `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMCPServerResponse) Reset() {
	*x = CreateMCPServerResponse{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMCPServerResponse) ProtoMessage() {}

func (x *CreateMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMCPServerResponse.ProtoReflect.Descriptor instead.
func (*CreateMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{3}
}

func (x *CreateMCPServerResponse) GetMcpServer() *MCPServer {
	if x != nil {
		return x.McpServer
	}
	return nil
}

type GetMCPServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MCP server ID.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMCPServerRequest) Reset() {
	*x = GetMCPServerRequest{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMCPServerRequest) ProtoMessage() {}

func (x *GetMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMCPServerRequest.ProtoReflect.Descriptor instead.
func (*GetMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{4}
}

func (x *GetMCPServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServer             `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMCPServerResponse) Reset() {
	*x = GetMCPServerResponse{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMCPServerResponse) ProtoMessage() {}

func (x *GetMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMCPServerResponse.ProtoReflect.Descriptor instead.
func (*GetMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{5}
}

func (x *GetMCPServerResponse) GetMcpServer() *MCPServer {
	if x != nil {
		return x.McpServer
	}
	return nil
}

type ListMCPServersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List filter.
	Filter *ListMCPServersRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Limit the paginated response to a number of items.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Value of the next_page_token field returned by the previous response.
	// If not provided, the system assumes the first page is requested.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMCPServersRequest) Reset() {
	*x = ListMCPServersRequest{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMCPServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMCPServersRequest) ProtoMessage() {}

func (x *ListMCPServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMCPServersRequest.ProtoReflect.Descriptor instead.
func (*ListMCPServersRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{6}
}

func (x *ListMCPServersRequest) GetFilter() *ListMCPServersRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListMCPServersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMCPServersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListMCPServersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServers    []*MCPServer           `protobuf:"bytes,1,rep,name=mcp_servers,json=mcpServers,proto3" json:"mcp_servers,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMCPServersResponse) Reset() {
	*x = ListMCPServersResponse{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMCPServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMCPServersResponse) ProtoMessage() {}

func (x *ListMCPServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMCPServersResponse.ProtoReflect.Descriptor instead.
func (*ListMCPServersResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{7}
}

func (x *ListMCPServersResponse) GetMcpServers() []*MCPServer {
	if x != nil {
		return x.McpServers
	}
	return nil
}

func (x *ListMCPServersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type MCPServerUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User-friendly MCP servers name.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// MCP server description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// All the configuration files for the MCP server.
	ConfigFiles map[string]*MCPServer_Configuration `protobuf:"bytes,3,rep,name=config_files,json=configFiles,proto3" json:"config_files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The number of resources that are guaranteed to be assigned to the MCP server.
	Resources *Pipeline_Resources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	// A map of tags to add, update or delete.
	// If a tag's value is empty, the server interprets that as a deletion.
	Tags          map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServerUpdate) Reset() {
	*x = MCPServerUpdate{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServerUpdate) ProtoMessage() {}

func (x *MCPServerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServerUpdate.ProtoReflect.Descriptor instead.
func (*MCPServerUpdate) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{8}
}

func (x *MCPServerUpdate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MCPServerUpdate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MCPServerUpdate) GetConfigFiles() map[string]*MCPServer_Configuration {
	if x != nil {
		return x.ConfigFiles
	}
	return nil
}

func (x *MCPServerUpdate) GetResources() *Pipeline_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MCPServerUpdate) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateMCPServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MCP Server ID.
	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	McpServer *MCPServerUpdate `protobuf:"bytes,2,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	// Specifies which fields should be updated. If not provided,
	// all fields will be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMCPServerRequest) Reset() {
	*x = UpdateMCPServerRequest{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMCPServerRequest) ProtoMessage() {}

func (x *UpdateMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMCPServerRequest.ProtoReflect.Descriptor instead.
func (*UpdateMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateMCPServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateMCPServerRequest) GetMcpServer() *MCPServerUpdate {
	if x != nil {
		return x.McpServer
	}
	return nil
}

func (x *UpdateMCPServerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServer             `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMCPServerResponse) Reset() {
	*x = UpdateMCPServerResponse{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMCPServerResponse) ProtoMessage() {}

func (x *UpdateMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMCPServerResponse.ProtoReflect.Descriptor instead.
func (*UpdateMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateMCPServerResponse) GetMcpServer() *MCPServer {
	if x != nil {
		return x.McpServer
	}
	return nil
}

type DeleteMCPServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MCP Server ID.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMCPServerRequest) Reset() {
	*x = DeleteMCPServerRequest{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMCPServerRequest) ProtoMessage() {}

func (x *DeleteMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMCPServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteMCPServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMCPServerResponse) Reset() {
	*x = DeleteMCPServerResponse{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMCPServerResponse) ProtoMessage() {}

func (x *DeleteMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMCPServerResponse.ProtoReflect.Descriptor instead.
func (*DeleteMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{12}
}

type StopMCPServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MCP Server ID.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopMCPServerRequest) Reset() {
	*x = StopMCPServerRequest{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMCPServerRequest) ProtoMessage() {}

func (x *StopMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMCPServerRequest.ProtoReflect.Descriptor instead.
func (*StopMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{13}
}

func (x *StopMCPServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServer             `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopMCPServerResponse) Reset() {
	*x = StopMCPServerResponse{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMCPServerResponse) ProtoMessage() {}

func (x *StopMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMCPServerResponse.ProtoReflect.Descriptor instead.
func (*StopMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{14}
}

func (x *StopMCPServerResponse) GetMcpServer() *MCPServer {
	if x != nil {
		return x.McpServer
	}
	return nil
}

type StartMCPServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MCP Server ID.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartMCPServerRequest) Reset() {
	*x = StartMCPServerRequest{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMCPServerRequest) ProtoMessage() {}

func (x *StartMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMCPServerRequest.ProtoReflect.Descriptor instead.
func (*StartMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{15}
}

func (x *StartMCPServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServer             `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartMCPServerResponse) Reset() {
	*x = StartMCPServerResponse{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMCPServerResponse) ProtoMessage() {}

func (x *StartMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMCPServerResponse.ProtoReflect.Descriptor instead.
func (*StartMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{16}
}

func (x *StartMCPServerResponse) GetMcpServer() *MCPServer {
	if x != nil {
		return x.McpServer
	}
	return nil
}

type GetMCPServerServiceConfigSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMCPServerServiceConfigSchemaRequest) Reset() {
	*x = GetMCPServerServiceConfigSchemaRequest{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMCPServerServiceConfigSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMCPServerServiceConfigSchemaRequest) ProtoMessage() {}

func (x *GetMCPServerServiceConfigSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMCPServerServiceConfigSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetMCPServerServiceConfigSchemaRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{17}
}

type GetMCPServerServiceConfigSchemaResponse struct {
	state              protoimpl.MessageState                                             `protogen:"open.v1"`
	ConfigurationFiles []*GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema `protobuf:"bytes,1,rep,name=configuration_files,json=configurationFiles,proto3" json:"configuration_files,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetMCPServerServiceConfigSchemaResponse) Reset() {
	*x = GetMCPServerServiceConfigSchemaResponse{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMCPServerServiceConfigSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMCPServerServiceConfigSchemaResponse) ProtoMessage() {}

func (x *GetMCPServerServiceConfigSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMCPServerServiceConfigSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetMCPServerServiceConfigSchemaResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{18}
}

func (x *GetMCPServerServiceConfigSchemaResponse) GetConfigurationFiles() []*GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema {
	if x != nil {
		return x.ConfigurationFiles
	}
	return nil
}

// A configuration file for the MCP server.
type MCPServer_Configuration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The contents of the configuration file in YAML format.
	Contents      string `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServer_Configuration) Reset() {
	*x = MCPServer_Configuration{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServer_Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServer_Configuration) ProtoMessage() {}

func (x *MCPServer_Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServer_Configuration.ProtoReflect.Descriptor instead.
func (*MCPServer_Configuration) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MCPServer_Configuration) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

// MCP server status may contain an error message.
type MCPServer_Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServer_Status) Reset() {
	*x = MCPServer_Status{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServer_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServer_Status) ProtoMessage() {}

func (x *MCPServer_Status) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServer_Status.ProtoReflect.Descriptor instead.
func (*MCPServer_Status) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MCPServer_Status) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListMCPServersRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Substring match on MCP server name. Case-sensitive.
	DisplayNameContains string `protobuf:"bytes,1,opt,name=display_name_contains,json=displayNameContains,proto3" json:"display_name_contains,omitempty"`
	// Match MCP servers that contain all of these key/value pairs.
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Match MCP servers that use this secret ID.
	SecretId      string `protobuf:"bytes,3,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMCPServersRequest_Filter) Reset() {
	*x = ListMCPServersRequest_Filter{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMCPServersRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMCPServersRequest_Filter) ProtoMessage() {}

func (x *ListMCPServersRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMCPServersRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListMCPServersRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ListMCPServersRequest_Filter) GetDisplayNameContains() string {
	if x != nil {
		return x.DisplayNameContains
	}
	return ""
}

func (x *ListMCPServersRequest_Filter) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListMCPServersRequest_Filter) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

type GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The glob pattern that matches the configuration file paths.
	//
	// Example: "o11y/*.yaml" or "processors/*.yaml"
	//
	// Single and double asterisks are supported.
	PathPattern string `protobuf:"bytes,1,opt,name=path_pattern,json=pathPattern,proto3" json:"path_pattern,omitempty"`
	// JSON schema of the configuration components that are allowed for MCP Servers.
	ConfigSchema  string `protobuf:"bytes,2,opt,name=config_schema,json=configSchema,proto3" json:"config_schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema) Reset() {
	*x = GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema{}
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema) ProtoMessage() {}

func (x *GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_mcp_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema.ProtoReflect.Descriptor instead.
func (*GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema) GetPathPattern() string {
	if x != nil {
		return x.PathPattern
	}
	return ""
}

func (x *GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema) GetConfigSchema() string {
	if x != nil {
		return x.ConfigSchema
	}
	return ""
}

var File_redpanda_api_dataplane_v1_mcp_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1_mcp_proto_rawDesc = []byte{
	0x0a, 0x23, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x63, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x0a,
	0x0a, 0x09, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x18, 0xc8,
	0x01, 0x01, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x03,
	0x18, 0x80, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x20, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0x18, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xa4, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x4a,
	0x92, 0x41, 0x39, 0x32, 0x37, 0x54, 0x68, 0x65, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0xe0, 0x41, 0x02, 0xba,
	0x48, 0x08, 0xc8, 0x01, 0x01, 0x9a, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x87, 0x02, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0xb9, 0x01, 0x92, 0x41, 0xb5,
	0x01, 0x32, 0xb2, 0x01, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x43,
	0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x20, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x20, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x65, 0x20, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x65, 0x64, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x71, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x2d, 0xba, 0x48, 0x2a, 0x9a, 0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e,
	0x28, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70, 0x7b, 0x4e,
	0x7d, 0x5f, 0x2e, 0x3a, 0x2f, 0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x3a, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x72, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x3a, 0x41, 0xea, 0x41, 0x3e, 0x0a, 0x23, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2a, 0x0b,
	0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x32, 0x0a, 0x6d, 0x63, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xf0, 0x05, 0x0a, 0x0f, 0x4d, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x03,
	0x18, 0x80, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x20, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0x18, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xab, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x4b, 0x92, 0x41, 0x3a, 0x32, 0x38, 0x54, 0x68, 0x65, 0x20, 0x52,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20,
	0x4d, 0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x2e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x9a, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x2d, 0xba, 0x48, 0x2a, 0x9a, 0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e,
	0x28, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70, 0x7b, 0x4e,
	0x7d, 0x5f, 0x2e, 0x3a, 0x2f, 0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x72, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x47, 0xea, 0x41, 0x44, 0x0a, 0x29, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2f, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2a, 0x0b, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x32, 0x0a,
	0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22,
	0x5e, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22,
	0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x18, 0xc8, 0x01, 0x01, 0x72, 0x13, 0x32,
	0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2f, 0x5d,
	0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0x94, 0x06, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x43,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xa8,
	0x01, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x8a, 0x01, 0x92, 0x41, 0x75, 0x32, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x20, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x2e, 0x20, 0x55, 0x73,
	0x65, 0x20, 0x2d, 0x31, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x59, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x49, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf, 0xba, 0x48, 0x0f,
	0x1a, 0x0d, 0x18, 0x32, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xdf, 0x03, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x63, 0x92, 0x41, 0x41, 0x32, 0x3f, 0x41, 0x6e, 0x79, 0x20, 0x4d, 0x43,
	0x50, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0xba, 0x48, 0x1c, 0xd8, 0x01, 0x01, 0x72,
	0x17, 0x18, 0x80, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x20, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0xc7, 0x01,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x70, 0x92, 0x41, 0x40, 0x32, 0x3e, 0x4d, 0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x61,
	0x67, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x2e, 0xba, 0x48, 0x2a, 0x9a, 0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21,
	0x32, 0x1f, 0x5e, 0x28, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c,
	0x70, 0x7b, 0x4e, 0x7d, 0x5f, 0x2e, 0x3a, 0x2f, 0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29,
	0x24, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0xd8,
	0x01, 0x01, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x64, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x0a, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xde, 0x05, 0x0a, 0x0f, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xba, 0x48, 0x1e, 0xd8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x03, 0x18, 0x80, 0x01, 0x32, 0x12, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x20, 0x2f, 0x5d, 0x2b,
	0x24, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3c,
	0x92, 0x41, 0x39, 0x32, 0x37, 0x54, 0x68, 0x65, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2d, 0xba, 0x48, 0x2a, 0x9a,
	0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e, 0x28, 0x5b, 0x5c, 0x70, 0x7b,
	0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x5f, 0x2e, 0x3a, 0x2f,
	0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0x72, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x47, 0xea, 0x41,
	0x44, 0x0a, 0x29, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4d, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x0b, 0x6d, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x32, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xdb, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x18, 0xc8, 0x01, 0x01, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x54, 0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x6d, 0x63, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x5e, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x02, 0xba, 0x48,
	0x18, 0xc8, 0x01, 0x01, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70,
	0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x18, 0xc8, 0x01, 0x01, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x5c, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x63, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x47,
	0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x18, 0xc8, 0x01, 0x01, 0x72, 0x13,
	0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2f,
	0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x63, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xd5, 0x02, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc6, 0x01, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x39, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x54, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x43,
	0x50, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x32, 0x8e, 0x18, 0x0a, 0x10, 0x4d, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc1, 0x02,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x92, 0x41, 0x86, 0x01, 0x12,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65,
	0x77, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x35,
	0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x28, 0x0a, 0x26, 0x1a,
	0x24, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x3a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22,
	0x20, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0xdc, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xea, 0x01, 0x92, 0x41, 0xb1, 0x01, 0x12, 0x1f, 0x47, 0x65, 0x74, 0x20,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x20, 0x4d, 0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x2b, 0x47, 0x65, 0x74,
	0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x35, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x2e, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x28, 0x0a, 0x26, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4a,
	0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a, 0xa6, 0x1d, 0x04, 0x08,
	0x01, 0x10, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xe2, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea, 0x01, 0x92, 0x41, 0xb6, 0x01, 0x12,
	0x21, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x1a, 0x4d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e,
	0x20, 0x4d, 0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x2e, 0x4a, 0x42, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3b, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x35,
	0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x07, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0xd9, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xde, 0x01, 0x92, 0x41, 0x99, 0x01, 0x12, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x3a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43,
	0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x35, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x2e, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x28, 0x0a, 0x26, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x0a,
	0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x25, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2f, 0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xc1, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x43, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x92,
	0x41, 0x8d, 0x01, 0x12, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d,
	0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4a, 0x12, 0x0a, 0x03, 0x32, 0x30, 0x34, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x00, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e,
	0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xed, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x43,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x01, 0x92, 0x41, 0xba,
	0x01, 0x12, 0x23, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x20, 0x61, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x2b, 0x53, 0x74, 0x6f, 0x70, 0x20, 0x61, 0x20, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4a, 0x3a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x33, 0x0a, 0x07, 0x53, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x26, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4a,
	0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a, 0xa6, 0x1d, 0x04, 0x08,
	0x02, 0x10, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x3a, 0x73, 0x74, 0x6f, 0x70, 0x12, 0xf2, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01,
	0x92, 0x41, 0xbb, 0x01, 0x12, 0x23, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x20, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d,
	0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x2c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x20, 0x61, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x3a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x33,
	0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x26, 0x1a, 0x24, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f,
	0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a,
	0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x2b, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2f, 0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xff, 0x03, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x41,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x43,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x42, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x02, 0x92, 0x41, 0x90, 0x02, 0x12, 0x44, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x1a, 0x73, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4a, 0x53, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4c,
	0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x46, 0x0a, 0x44, 0x1a, 0x42, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04,
	0x08, 0x01, 0x10, 0x07, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2f, 0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x6b, 0x92, 0x41,
	0x68, 0x0a, 0x1c, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x48, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x20, 0x4d, 0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x8d, 0x02, 0x0a, 0x1d, 0x63, 0x6f,
	0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x4d, 0x63, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x44, 0xaa, 0x02, 0x19, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x25, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70,
	0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_redpanda_api_dataplane_v1_mcp_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1_mcp_proto_rawDescData = file_redpanda_api_dataplane_v1_mcp_proto_rawDesc
)

func file_redpanda_api_dataplane_v1_mcp_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1_mcp_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1_mcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1_mcp_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1_mcp_proto_rawDescData
}

var file_redpanda_api_dataplane_v1_mcp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_redpanda_api_dataplane_v1_mcp_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_redpanda_api_dataplane_v1_mcp_proto_goTypes = []any{
	(MCPServer_State)(0),                            // 0: redpanda.api.dataplane.v1.MCPServer.State
	(*MCPServer)(nil),                               // 1: redpanda.api.dataplane.v1.MCPServer
	(*MCPServerCreate)(nil),                         // 2: redpanda.api.dataplane.v1.MCPServerCreate
	(*CreateMCPServerRequest)(nil),                  // 3: redpanda.api.dataplane.v1.CreateMCPServerRequest
	(*CreateMCPServerResponse)(nil),                 // 4: redpanda.api.dataplane.v1.CreateMCPServerResponse
	(*GetMCPServerRequest)(nil),                     // 5: redpanda.api.dataplane.v1.GetMCPServerRequest
	(*GetMCPServerResponse)(nil),                    // 6: redpanda.api.dataplane.v1.GetMCPServerResponse
	(*ListMCPServersRequest)(nil),                   // 7: redpanda.api.dataplane.v1.ListMCPServersRequest
	(*ListMCPServersResponse)(nil),                  // 8: redpanda.api.dataplane.v1.ListMCPServersResponse
	(*MCPServerUpdate)(nil),                         // 9: redpanda.api.dataplane.v1.MCPServerUpdate
	(*UpdateMCPServerRequest)(nil),                  // 10: redpanda.api.dataplane.v1.UpdateMCPServerRequest
	(*UpdateMCPServerResponse)(nil),                 // 11: redpanda.api.dataplane.v1.UpdateMCPServerResponse
	(*DeleteMCPServerRequest)(nil),                  // 12: redpanda.api.dataplane.v1.DeleteMCPServerRequest
	(*DeleteMCPServerResponse)(nil),                 // 13: redpanda.api.dataplane.v1.DeleteMCPServerResponse
	(*StopMCPServerRequest)(nil),                    // 14: redpanda.api.dataplane.v1.StopMCPServerRequest
	(*StopMCPServerResponse)(nil),                   // 15: redpanda.api.dataplane.v1.StopMCPServerResponse
	(*StartMCPServerRequest)(nil),                   // 16: redpanda.api.dataplane.v1.StartMCPServerRequest
	(*StartMCPServerResponse)(nil),                  // 17: redpanda.api.dataplane.v1.StartMCPServerResponse
	(*GetMCPServerServiceConfigSchemaRequest)(nil),  // 18: redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaRequest
	(*GetMCPServerServiceConfigSchemaResponse)(nil), // 19: redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse
	(*MCPServer_Configuration)(nil),                 // 20: redpanda.api.dataplane.v1.MCPServer.Configuration
	nil,                                             // 21: redpanda.api.dataplane.v1.MCPServer.ConfigFilesEntry
	nil,                                             // 22: redpanda.api.dataplane.v1.MCPServer.TagsEntry
	(*MCPServer_Status)(nil),                        // 23: redpanda.api.dataplane.v1.MCPServer.Status
	nil,                                             // 24: redpanda.api.dataplane.v1.MCPServerCreate.ConfigFilesEntry
	nil,                                             // 25: redpanda.api.dataplane.v1.MCPServerCreate.TagsEntry
	(*ListMCPServersRequest_Filter)(nil),            // 26: redpanda.api.dataplane.v1.ListMCPServersRequest.Filter
	nil,                                             // 27: redpanda.api.dataplane.v1.ListMCPServersRequest.Filter.TagsEntry
	nil,                                             // 28: redpanda.api.dataplane.v1.MCPServerUpdate.ConfigFilesEntry
	nil,                                             // 29: redpanda.api.dataplane.v1.MCPServerUpdate.TagsEntry
	(*GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema)(nil), // 30: redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse.ConfigurationFileSchema
	(*Pipeline_Resources)(nil),    // 31: redpanda.api.dataplane.v1.Pipeline.Resources
	(*fieldmaskpb.FieldMask)(nil), // 32: google.protobuf.FieldMask
}
var file_redpanda_api_dataplane_v1_mcp_proto_depIdxs = []int32{
	21, // 0: redpanda.api.dataplane.v1.MCPServer.config_files:type_name -> redpanda.api.dataplane.v1.MCPServer.ConfigFilesEntry
	31, // 1: redpanda.api.dataplane.v1.MCPServer.resources:type_name -> redpanda.api.dataplane.v1.Pipeline.Resources
	22, // 2: redpanda.api.dataplane.v1.MCPServer.tags:type_name -> redpanda.api.dataplane.v1.MCPServer.TagsEntry
	0,  // 3: redpanda.api.dataplane.v1.MCPServer.state:type_name -> redpanda.api.dataplane.v1.MCPServer.State
	23, // 4: redpanda.api.dataplane.v1.MCPServer.status:type_name -> redpanda.api.dataplane.v1.MCPServer.Status
	24, // 5: redpanda.api.dataplane.v1.MCPServerCreate.config_files:type_name -> redpanda.api.dataplane.v1.MCPServerCreate.ConfigFilesEntry
	31, // 6: redpanda.api.dataplane.v1.MCPServerCreate.resources:type_name -> redpanda.api.dataplane.v1.Pipeline.Resources
	25, // 7: redpanda.api.dataplane.v1.MCPServerCreate.tags:type_name -> redpanda.api.dataplane.v1.MCPServerCreate.TagsEntry
	2,  // 8: redpanda.api.dataplane.v1.CreateMCPServerRequest.mcp_server:type_name -> redpanda.api.dataplane.v1.MCPServerCreate
	1,  // 9: redpanda.api.dataplane.v1.CreateMCPServerResponse.mcp_server:type_name -> redpanda.api.dataplane.v1.MCPServer
	1,  // 10: redpanda.api.dataplane.v1.GetMCPServerResponse.mcp_server:type_name -> redpanda.api.dataplane.v1.MCPServer
	26, // 11: redpanda.api.dataplane.v1.ListMCPServersRequest.filter:type_name -> redpanda.api.dataplane.v1.ListMCPServersRequest.Filter
	1,  // 12: redpanda.api.dataplane.v1.ListMCPServersResponse.mcp_servers:type_name -> redpanda.api.dataplane.v1.MCPServer
	28, // 13: redpanda.api.dataplane.v1.MCPServerUpdate.config_files:type_name -> redpanda.api.dataplane.v1.MCPServerUpdate.ConfigFilesEntry
	31, // 14: redpanda.api.dataplane.v1.MCPServerUpdate.resources:type_name -> redpanda.api.dataplane.v1.Pipeline.Resources
	29, // 15: redpanda.api.dataplane.v1.MCPServerUpdate.tags:type_name -> redpanda.api.dataplane.v1.MCPServerUpdate.TagsEntry
	9,  // 16: redpanda.api.dataplane.v1.UpdateMCPServerRequest.mcp_server:type_name -> redpanda.api.dataplane.v1.MCPServerUpdate
	32, // 17: redpanda.api.dataplane.v1.UpdateMCPServerRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 18: redpanda.api.dataplane.v1.UpdateMCPServerResponse.mcp_server:type_name -> redpanda.api.dataplane.v1.MCPServer
	1,  // 19: redpanda.api.dataplane.v1.StopMCPServerResponse.mcp_server:type_name -> redpanda.api.dataplane.v1.MCPServer
	1,  // 20: redpanda.api.dataplane.v1.StartMCPServerResponse.mcp_server:type_name -> redpanda.api.dataplane.v1.MCPServer
	30, // 21: redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse.configuration_files:type_name -> redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse.ConfigurationFileSchema
	20, // 22: redpanda.api.dataplane.v1.MCPServer.ConfigFilesEntry.value:type_name -> redpanda.api.dataplane.v1.MCPServer.Configuration
	20, // 23: redpanda.api.dataplane.v1.MCPServerCreate.ConfigFilesEntry.value:type_name -> redpanda.api.dataplane.v1.MCPServer.Configuration
	27, // 24: redpanda.api.dataplane.v1.ListMCPServersRequest.Filter.tags:type_name -> redpanda.api.dataplane.v1.ListMCPServersRequest.Filter.TagsEntry
	20, // 25: redpanda.api.dataplane.v1.MCPServerUpdate.ConfigFilesEntry.value:type_name -> redpanda.api.dataplane.v1.MCPServer.Configuration
	3,  // 26: redpanda.api.dataplane.v1.MCPServerService.CreateMCPServer:input_type -> redpanda.api.dataplane.v1.CreateMCPServerRequest
	5,  // 27: redpanda.api.dataplane.v1.MCPServerService.GetMCPServer:input_type -> redpanda.api.dataplane.v1.GetMCPServerRequest
	7,  // 28: redpanda.api.dataplane.v1.MCPServerService.ListMCPServers:input_type -> redpanda.api.dataplane.v1.ListMCPServersRequest
	10, // 29: redpanda.api.dataplane.v1.MCPServerService.UpdateMCPServer:input_type -> redpanda.api.dataplane.v1.UpdateMCPServerRequest
	12, // 30: redpanda.api.dataplane.v1.MCPServerService.DeleteMCPServer:input_type -> redpanda.api.dataplane.v1.DeleteMCPServerRequest
	14, // 31: redpanda.api.dataplane.v1.MCPServerService.StopMCPServer:input_type -> redpanda.api.dataplane.v1.StopMCPServerRequest
	16, // 32: redpanda.api.dataplane.v1.MCPServerService.StartMCPServer:input_type -> redpanda.api.dataplane.v1.StartMCPServerRequest
	18, // 33: redpanda.api.dataplane.v1.MCPServerService.GetMCPServerServiceConfigSchema:input_type -> redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaRequest
	4,  // 34: redpanda.api.dataplane.v1.MCPServerService.CreateMCPServer:output_type -> redpanda.api.dataplane.v1.CreateMCPServerResponse
	6,  // 35: redpanda.api.dataplane.v1.MCPServerService.GetMCPServer:output_type -> redpanda.api.dataplane.v1.GetMCPServerResponse
	8,  // 36: redpanda.api.dataplane.v1.MCPServerService.ListMCPServers:output_type -> redpanda.api.dataplane.v1.ListMCPServersResponse
	11, // 37: redpanda.api.dataplane.v1.MCPServerService.UpdateMCPServer:output_type -> redpanda.api.dataplane.v1.UpdateMCPServerResponse
	13, // 38: redpanda.api.dataplane.v1.MCPServerService.DeleteMCPServer:output_type -> redpanda.api.dataplane.v1.DeleteMCPServerResponse
	15, // 39: redpanda.api.dataplane.v1.MCPServerService.StopMCPServer:output_type -> redpanda.api.dataplane.v1.StopMCPServerResponse
	17, // 40: redpanda.api.dataplane.v1.MCPServerService.StartMCPServer:output_type -> redpanda.api.dataplane.v1.StartMCPServerResponse
	19, // 41: redpanda.api.dataplane.v1.MCPServerService.GetMCPServerServiceConfigSchema:output_type -> redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse
	34, // [34:42] is the sub-list for method output_type
	26, // [26:34] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1_mcp_proto_init() }
func file_redpanda_api_dataplane_v1_mcp_proto_init() {
	if File_redpanda_api_dataplane_v1_mcp_proto != nil {
		return
	}
	file_redpanda_api_dataplane_v1_pipeline_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1_mcp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1_mcp_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1_mcp_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1_mcp_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1_mcp_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1_mcp_proto = out.File
	file_redpanda_api_dataplane_v1_mcp_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1_mcp_proto_goTypes = nil
	file_redpanda_api_dataplane_v1_mcp_proto_depIdxs = nil
}
