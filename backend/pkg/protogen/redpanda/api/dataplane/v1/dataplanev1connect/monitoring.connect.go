// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/monitoring.proto

package dataplanev1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MonitoringServiceName is the fully-qualified name of the MonitoringService service.
	MonitoringServiceName = "redpanda.api.dataplane.v1.MonitoringService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonitoringServiceListConnectionsProcedure is the fully-qualified name of the MonitoringService's
	// ListConnections RPC.
	MonitoringServiceListConnectionsProcedure = "/redpanda.api.dataplane.v1.MonitoringService/ListConnections"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	monitoringServiceServiceDescriptor               = v1.File_redpanda_api_dataplane_v1_monitoring_proto.Services().ByName("MonitoringService")
	monitoringServiceListConnectionsMethodDescriptor = monitoringServiceServiceDescriptor.Methods().ByName("ListConnections")
)

// MonitoringServiceClient is a client for the redpanda.api.dataplane.v1.MonitoringService service.
type MonitoringServiceClient interface {
	ListConnections(context.Context, *connect.Request[v1.ListConnectionsRequest]) (*connect.Response[v1.ListConnectionsResponse], error)
}

// NewMonitoringServiceClient constructs a client for the
// redpanda.api.dataplane.v1.MonitoringService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonitoringServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonitoringServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &monitoringServiceClient{
		listConnections: connect.NewClient[v1.ListConnectionsRequest, v1.ListConnectionsResponse](
			httpClient,
			baseURL+MonitoringServiceListConnectionsProcedure,
			connect.WithSchema(monitoringServiceListConnectionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// monitoringServiceClient implements MonitoringServiceClient.
type monitoringServiceClient struct {
	listConnections *connect.Client[v1.ListConnectionsRequest, v1.ListConnectionsResponse]
}

// ListConnections calls redpanda.api.dataplane.v1.MonitoringService.ListConnections.
func (c *monitoringServiceClient) ListConnections(ctx context.Context, req *connect.Request[v1.ListConnectionsRequest]) (*connect.Response[v1.ListConnectionsResponse], error) {
	return c.listConnections.CallUnary(ctx, req)
}

// MonitoringServiceHandler is an implementation of the redpanda.api.dataplane.v1.MonitoringService
// service.
type MonitoringServiceHandler interface {
	ListConnections(context.Context, *connect.Request[v1.ListConnectionsRequest]) (*connect.Response[v1.ListConnectionsResponse], error)
}

// NewMonitoringServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonitoringServiceHandler(svc MonitoringServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monitoringServiceListConnectionsHandler := connect.NewUnaryHandler(
		MonitoringServiceListConnectionsProcedure,
		svc.ListConnections,
		connect.WithSchema(monitoringServiceListConnectionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.dataplane.v1.MonitoringService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonitoringServiceListConnectionsProcedure:
			monitoringServiceListConnectionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonitoringServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonitoringServiceHandler struct{}

func (UnimplementedMonitoringServiceHandler) ListConnections(context.Context, *connect.Request[v1.ListConnectionsRequest]) (*connect.Response[v1.ListConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.MonitoringService.ListConnections is not implemented"))
}
