// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/quota.proto

package dataplanev1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// QuotaServiceGatewayServer implements the gRPC server API for the QuotaService service.
type QuotaServiceGatewayServer struct {
	v1.UnimplementedQuotaServiceServer
	listQuotas  connect_gateway.UnaryHandler[v1.ListQuotasRequest, v1.ListQuotasResponse]
	createQuota connect_gateway.UnaryHandler[v1.CreateQuotaRequest, v1.CreateQuotaResponse]
	deleteQuota connect_gateway.UnaryHandler[v1.DeleteQuotaRequest, v1.DeleteQuotaResponse]
}

// NewQuotaServiceGatewayServer constructs a Connect-Gateway gRPC server for the QuotaService
// service.
func NewQuotaServiceGatewayServer(svc QuotaServiceHandler, opts ...connect_gateway.HandlerOption) *QuotaServiceGatewayServer {
	return &QuotaServiceGatewayServer{
		listQuotas:  connect_gateway.NewUnaryHandler(QuotaServiceListQuotasProcedure, svc.ListQuotas, opts...),
		createQuota: connect_gateway.NewUnaryHandler(QuotaServiceCreateQuotaProcedure, svc.CreateQuota, opts...),
		deleteQuota: connect_gateway.NewUnaryHandler(QuotaServiceDeleteQuotaProcedure, svc.DeleteQuota, opts...),
	}
}

func (s *QuotaServiceGatewayServer) ListQuotas(ctx context.Context, req *v1.ListQuotasRequest) (*v1.ListQuotasResponse, error) {
	return s.listQuotas(ctx, req)
}

func (s *QuotaServiceGatewayServer) CreateQuota(ctx context.Context, req *v1.CreateQuotaRequest) (*v1.CreateQuotaResponse, error) {
	return s.createQuota(ctx, req)
}

func (s *QuotaServiceGatewayServer) DeleteQuota(ctx context.Context, req *v1.DeleteQuotaRequest) (*v1.DeleteQuotaResponse, error) {
	return s.deleteQuota(ctx, req)
}

// RegisterQuotaServiceHandlerGatewayServer registers the Connect handlers for the QuotaService
// "svc" to "mux".
func RegisterQuotaServiceHandlerGatewayServer(mux *runtime.ServeMux, svc QuotaServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1.RegisterQuotaServiceHandlerServer(context.TODO(), mux, NewQuotaServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
