// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/secret.proto

package dataplanev1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// SecretServiceGatewayServer implements the gRPC server API for the SecretService service.
type SecretServiceGatewayServer struct {
	v1.UnimplementedSecretServiceServer
	getSecret                connect_gateway.UnaryHandler[v1.GetSecretRequest, v1.GetSecretResponse]
	listSecrets              connect_gateway.UnaryHandler[v1.ListSecretsRequest, v1.ListSecretsResponse]
	createSecret             connect_gateway.UnaryHandler[v1.CreateSecretRequest, v1.CreateSecretResponse]
	updateSecret             connect_gateway.UnaryHandler[v1.UpdateSecretRequest, v1.UpdateSecretResponse]
	deleteSecret             connect_gateway.UnaryHandler[v1.DeleteSecretRequest, v1.DeleteSecretResponse]
	listSecretScopes         connect_gateway.UnaryHandler[v1.ListSecretScopesRequest, v1.ListSecretScopesResponse]
	getKafkaConnectSecret    connect_gateway.UnaryHandler[v1.GetKafkaConnectSecretRequest, v1.GetKafkaConnectSecretResponse]
	listKafkaConnectSecrets  connect_gateway.UnaryHandler[v1.ListKafkaConnectSecretsRequest, v1.ListKafkaConnectSecretsResponse]
	createKafkaConnectSecret connect_gateway.UnaryHandler[v1.CreateKafkaConnectSecretRequest, v1.CreateKafkaConnectSecretResponse]
	updateKafkaConnectSecret connect_gateway.UnaryHandler[v1.UpdateKafkaConnectSecretRequest, v1.UpdateKafkaConnectSecretResponse]
	deleteKafkaConnectSecret connect_gateway.UnaryHandler[v1.DeleteKafkaConnectSecretRequest, v1.DeleteKafkaConnectSecretResponse]
}

// NewSecretServiceGatewayServer constructs a Connect-Gateway gRPC server for the SecretService
// service.
func NewSecretServiceGatewayServer(svc SecretServiceHandler, opts ...connect_gateway.HandlerOption) *SecretServiceGatewayServer {
	return &SecretServiceGatewayServer{
		getSecret:                connect_gateway.NewUnaryHandler(SecretServiceGetSecretProcedure, svc.GetSecret, opts...),
		listSecrets:              connect_gateway.NewUnaryHandler(SecretServiceListSecretsProcedure, svc.ListSecrets, opts...),
		createSecret:             connect_gateway.NewUnaryHandler(SecretServiceCreateSecretProcedure, svc.CreateSecret, opts...),
		updateSecret:             connect_gateway.NewUnaryHandler(SecretServiceUpdateSecretProcedure, svc.UpdateSecret, opts...),
		deleteSecret:             connect_gateway.NewUnaryHandler(SecretServiceDeleteSecretProcedure, svc.DeleteSecret, opts...),
		listSecretScopes:         connect_gateway.NewUnaryHandler(SecretServiceListSecretScopesProcedure, svc.ListSecretScopes, opts...),
		getKafkaConnectSecret:    connect_gateway.NewUnaryHandler(SecretServiceGetKafkaConnectSecretProcedure, svc.GetKafkaConnectSecret, opts...),
		listKafkaConnectSecrets:  connect_gateway.NewUnaryHandler(SecretServiceListKafkaConnectSecretsProcedure, svc.ListKafkaConnectSecrets, opts...),
		createKafkaConnectSecret: connect_gateway.NewUnaryHandler(SecretServiceCreateKafkaConnectSecretProcedure, svc.CreateKafkaConnectSecret, opts...),
		updateKafkaConnectSecret: connect_gateway.NewUnaryHandler(SecretServiceUpdateKafkaConnectSecretProcedure, svc.UpdateKafkaConnectSecret, opts...),
		deleteKafkaConnectSecret: connect_gateway.NewUnaryHandler(SecretServiceDeleteKafkaConnectSecretProcedure, svc.DeleteKafkaConnectSecret, opts...),
	}
}

func (s *SecretServiceGatewayServer) GetSecret(ctx context.Context, req *v1.GetSecretRequest) (*v1.GetSecretResponse, error) {
	return s.getSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) ListSecrets(ctx context.Context, req *v1.ListSecretsRequest) (*v1.ListSecretsResponse, error) {
	return s.listSecrets(ctx, req)
}

func (s *SecretServiceGatewayServer) CreateSecret(ctx context.Context, req *v1.CreateSecretRequest) (*v1.CreateSecretResponse, error) {
	return s.createSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) UpdateSecret(ctx context.Context, req *v1.UpdateSecretRequest) (*v1.UpdateSecretResponse, error) {
	return s.updateSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) DeleteSecret(ctx context.Context, req *v1.DeleteSecretRequest) (*v1.DeleteSecretResponse, error) {
	return s.deleteSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) ListSecretScopes(ctx context.Context, req *v1.ListSecretScopesRequest) (*v1.ListSecretScopesResponse, error) {
	return s.listSecretScopes(ctx, req)
}

func (s *SecretServiceGatewayServer) GetKafkaConnectSecret(ctx context.Context, req *v1.GetKafkaConnectSecretRequest) (*v1.GetKafkaConnectSecretResponse, error) {
	return s.getKafkaConnectSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) ListKafkaConnectSecrets(ctx context.Context, req *v1.ListKafkaConnectSecretsRequest) (*v1.ListKafkaConnectSecretsResponse, error) {
	return s.listKafkaConnectSecrets(ctx, req)
}

func (s *SecretServiceGatewayServer) CreateKafkaConnectSecret(ctx context.Context, req *v1.CreateKafkaConnectSecretRequest) (*v1.CreateKafkaConnectSecretResponse, error) {
	return s.createKafkaConnectSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) UpdateKafkaConnectSecret(ctx context.Context, req *v1.UpdateKafkaConnectSecretRequest) (*v1.UpdateKafkaConnectSecretResponse, error) {
	return s.updateKafkaConnectSecret(ctx, req)
}

func (s *SecretServiceGatewayServer) DeleteKafkaConnectSecret(ctx context.Context, req *v1.DeleteKafkaConnectSecretRequest) (*v1.DeleteKafkaConnectSecretResponse, error) {
	return s.deleteKafkaConnectSecret(ctx, req)
}

// RegisterSecretServiceHandlerGatewayServer registers the Connect handlers for the SecretService
// "svc" to "mux".
func RegisterSecretServiceHandlerGatewayServer(mux *runtime.ServeMux, svc SecretServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1.RegisterSecretServiceHandlerServer(context.TODO(), mux, NewSecretServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
