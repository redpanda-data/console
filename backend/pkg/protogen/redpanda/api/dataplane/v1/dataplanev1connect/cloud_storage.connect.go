// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/cloud_storage.proto

package dataplanev1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CloudStorageServiceName is the fully-qualified name of the CloudStorageService service.
	CloudStorageServiceName = "redpanda.api.dataplane.v1.CloudStorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CloudStorageServiceMountTopicsProcedure is the fully-qualified name of the CloudStorageService's
	// MountTopics RPC.
	CloudStorageServiceMountTopicsProcedure = "/redpanda.api.dataplane.v1.CloudStorageService/MountTopics"
	// CloudStorageServiceUnmountTopicsProcedure is the fully-qualified name of the
	// CloudStorageService's UnmountTopics RPC.
	CloudStorageServiceUnmountTopicsProcedure = "/redpanda.api.dataplane.v1.CloudStorageService/UnmountTopics"
	// CloudStorageServiceListMountableTopicsProcedure is the fully-qualified name of the
	// CloudStorageService's ListMountableTopics RPC.
	CloudStorageServiceListMountableTopicsProcedure = "/redpanda.api.dataplane.v1.CloudStorageService/ListMountableTopics"
	// CloudStorageServiceListMountTasksProcedure is the fully-qualified name of the
	// CloudStorageService's ListMountTasks RPC.
	CloudStorageServiceListMountTasksProcedure = "/redpanda.api.dataplane.v1.CloudStorageService/ListMountTasks"
	// CloudStorageServiceGetMountTaskProcedure is the fully-qualified name of the CloudStorageService's
	// GetMountTask RPC.
	CloudStorageServiceGetMountTaskProcedure = "/redpanda.api.dataplane.v1.CloudStorageService/GetMountTask"
	// CloudStorageServiceDeleteMountTaskProcedure is the fully-qualified name of the
	// CloudStorageService's DeleteMountTask RPC.
	CloudStorageServiceDeleteMountTaskProcedure = "/redpanda.api.dataplane.v1.CloudStorageService/DeleteMountTask"
	// CloudStorageServiceUpdateMountTaskProcedure is the fully-qualified name of the
	// CloudStorageService's UpdateMountTask RPC.
	CloudStorageServiceUpdateMountTaskProcedure = "/redpanda.api.dataplane.v1.CloudStorageService/UpdateMountTask"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cloudStorageServiceServiceDescriptor                   = v1.File_redpanda_api_dataplane_v1_cloud_storage_proto.Services().ByName("CloudStorageService")
	cloudStorageServiceMountTopicsMethodDescriptor         = cloudStorageServiceServiceDescriptor.Methods().ByName("MountTopics")
	cloudStorageServiceUnmountTopicsMethodDescriptor       = cloudStorageServiceServiceDescriptor.Methods().ByName("UnmountTopics")
	cloudStorageServiceListMountableTopicsMethodDescriptor = cloudStorageServiceServiceDescriptor.Methods().ByName("ListMountableTopics")
	cloudStorageServiceListMountTasksMethodDescriptor      = cloudStorageServiceServiceDescriptor.Methods().ByName("ListMountTasks")
	cloudStorageServiceGetMountTaskMethodDescriptor        = cloudStorageServiceServiceDescriptor.Methods().ByName("GetMountTask")
	cloudStorageServiceDeleteMountTaskMethodDescriptor     = cloudStorageServiceServiceDescriptor.Methods().ByName("DeleteMountTask")
	cloudStorageServiceUpdateMountTaskMethodDescriptor     = cloudStorageServiceServiceDescriptor.Methods().ByName("UpdateMountTask")
)

// CloudStorageServiceClient is a client for the redpanda.api.dataplane.v1.CloudStorageService
// service.
type CloudStorageServiceClient interface {
	MountTopics(context.Context, *connect.Request[v1.MountTopicsRequest]) (*connect.Response[v1.MountTopicsResponse], error)
	UnmountTopics(context.Context, *connect.Request[v1.UnmountTopicsRequest]) (*connect.Response[v1.UnmountTopicsResponse], error)
	ListMountableTopics(context.Context, *connect.Request[v1.ListMountableTopicsRequest]) (*connect.Response[v1.ListMountableTopicsResponse], error)
	ListMountTasks(context.Context, *connect.Request[v1.ListMountTasksRequest]) (*connect.Response[v1.ListMountTasksResponse], error)
	GetMountTask(context.Context, *connect.Request[v1.GetMountTaskRequest]) (*connect.Response[v1.GetMountTaskResponse], error)
	DeleteMountTask(context.Context, *connect.Request[v1.DeleteMountTaskRequest]) (*connect.Response[v1.DeleteMountTaskResponse], error)
	UpdateMountTask(context.Context, *connect.Request[v1.UpdateMountTaskRequest]) (*connect.Response[v1.UpdateMountTaskResponse], error)
}

// NewCloudStorageServiceClient constructs a client for the
// redpanda.api.dataplane.v1.CloudStorageService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCloudStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CloudStorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cloudStorageServiceClient{
		mountTopics: connect.NewClient[v1.MountTopicsRequest, v1.MountTopicsResponse](
			httpClient,
			baseURL+CloudStorageServiceMountTopicsProcedure,
			connect.WithSchema(cloudStorageServiceMountTopicsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unmountTopics: connect.NewClient[v1.UnmountTopicsRequest, v1.UnmountTopicsResponse](
			httpClient,
			baseURL+CloudStorageServiceUnmountTopicsProcedure,
			connect.WithSchema(cloudStorageServiceUnmountTopicsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMountableTopics: connect.NewClient[v1.ListMountableTopicsRequest, v1.ListMountableTopicsResponse](
			httpClient,
			baseURL+CloudStorageServiceListMountableTopicsProcedure,
			connect.WithSchema(cloudStorageServiceListMountableTopicsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMountTasks: connect.NewClient[v1.ListMountTasksRequest, v1.ListMountTasksResponse](
			httpClient,
			baseURL+CloudStorageServiceListMountTasksProcedure,
			connect.WithSchema(cloudStorageServiceListMountTasksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMountTask: connect.NewClient[v1.GetMountTaskRequest, v1.GetMountTaskResponse](
			httpClient,
			baseURL+CloudStorageServiceGetMountTaskProcedure,
			connect.WithSchema(cloudStorageServiceGetMountTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteMountTask: connect.NewClient[v1.DeleteMountTaskRequest, v1.DeleteMountTaskResponse](
			httpClient,
			baseURL+CloudStorageServiceDeleteMountTaskProcedure,
			connect.WithSchema(cloudStorageServiceDeleteMountTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMountTask: connect.NewClient[v1.UpdateMountTaskRequest, v1.UpdateMountTaskResponse](
			httpClient,
			baseURL+CloudStorageServiceUpdateMountTaskProcedure,
			connect.WithSchema(cloudStorageServiceUpdateMountTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cloudStorageServiceClient implements CloudStorageServiceClient.
type cloudStorageServiceClient struct {
	mountTopics         *connect.Client[v1.MountTopicsRequest, v1.MountTopicsResponse]
	unmountTopics       *connect.Client[v1.UnmountTopicsRequest, v1.UnmountTopicsResponse]
	listMountableTopics *connect.Client[v1.ListMountableTopicsRequest, v1.ListMountableTopicsResponse]
	listMountTasks      *connect.Client[v1.ListMountTasksRequest, v1.ListMountTasksResponse]
	getMountTask        *connect.Client[v1.GetMountTaskRequest, v1.GetMountTaskResponse]
	deleteMountTask     *connect.Client[v1.DeleteMountTaskRequest, v1.DeleteMountTaskResponse]
	updateMountTask     *connect.Client[v1.UpdateMountTaskRequest, v1.UpdateMountTaskResponse]
}

// MountTopics calls redpanda.api.dataplane.v1.CloudStorageService.MountTopics.
func (c *cloudStorageServiceClient) MountTopics(ctx context.Context, req *connect.Request[v1.MountTopicsRequest]) (*connect.Response[v1.MountTopicsResponse], error) {
	return c.mountTopics.CallUnary(ctx, req)
}

// UnmountTopics calls redpanda.api.dataplane.v1.CloudStorageService.UnmountTopics.
func (c *cloudStorageServiceClient) UnmountTopics(ctx context.Context, req *connect.Request[v1.UnmountTopicsRequest]) (*connect.Response[v1.UnmountTopicsResponse], error) {
	return c.unmountTopics.CallUnary(ctx, req)
}

// ListMountableTopics calls redpanda.api.dataplane.v1.CloudStorageService.ListMountableTopics.
func (c *cloudStorageServiceClient) ListMountableTopics(ctx context.Context, req *connect.Request[v1.ListMountableTopicsRequest]) (*connect.Response[v1.ListMountableTopicsResponse], error) {
	return c.listMountableTopics.CallUnary(ctx, req)
}

// ListMountTasks calls redpanda.api.dataplane.v1.CloudStorageService.ListMountTasks.
func (c *cloudStorageServiceClient) ListMountTasks(ctx context.Context, req *connect.Request[v1.ListMountTasksRequest]) (*connect.Response[v1.ListMountTasksResponse], error) {
	return c.listMountTasks.CallUnary(ctx, req)
}

// GetMountTask calls redpanda.api.dataplane.v1.CloudStorageService.GetMountTask.
func (c *cloudStorageServiceClient) GetMountTask(ctx context.Context, req *connect.Request[v1.GetMountTaskRequest]) (*connect.Response[v1.GetMountTaskResponse], error) {
	return c.getMountTask.CallUnary(ctx, req)
}

// DeleteMountTask calls redpanda.api.dataplane.v1.CloudStorageService.DeleteMountTask.
func (c *cloudStorageServiceClient) DeleteMountTask(ctx context.Context, req *connect.Request[v1.DeleteMountTaskRequest]) (*connect.Response[v1.DeleteMountTaskResponse], error) {
	return c.deleteMountTask.CallUnary(ctx, req)
}

// UpdateMountTask calls redpanda.api.dataplane.v1.CloudStorageService.UpdateMountTask.
func (c *cloudStorageServiceClient) UpdateMountTask(ctx context.Context, req *connect.Request[v1.UpdateMountTaskRequest]) (*connect.Response[v1.UpdateMountTaskResponse], error) {
	return c.updateMountTask.CallUnary(ctx, req)
}

// CloudStorageServiceHandler is an implementation of the
// redpanda.api.dataplane.v1.CloudStorageService service.
type CloudStorageServiceHandler interface {
	MountTopics(context.Context, *connect.Request[v1.MountTopicsRequest]) (*connect.Response[v1.MountTopicsResponse], error)
	UnmountTopics(context.Context, *connect.Request[v1.UnmountTopicsRequest]) (*connect.Response[v1.UnmountTopicsResponse], error)
	ListMountableTopics(context.Context, *connect.Request[v1.ListMountableTopicsRequest]) (*connect.Response[v1.ListMountableTopicsResponse], error)
	ListMountTasks(context.Context, *connect.Request[v1.ListMountTasksRequest]) (*connect.Response[v1.ListMountTasksResponse], error)
	GetMountTask(context.Context, *connect.Request[v1.GetMountTaskRequest]) (*connect.Response[v1.GetMountTaskResponse], error)
	DeleteMountTask(context.Context, *connect.Request[v1.DeleteMountTaskRequest]) (*connect.Response[v1.DeleteMountTaskResponse], error)
	UpdateMountTask(context.Context, *connect.Request[v1.UpdateMountTaskRequest]) (*connect.Response[v1.UpdateMountTaskResponse], error)
}

// NewCloudStorageServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCloudStorageServiceHandler(svc CloudStorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cloudStorageServiceMountTopicsHandler := connect.NewUnaryHandler(
		CloudStorageServiceMountTopicsProcedure,
		svc.MountTopics,
		connect.WithSchema(cloudStorageServiceMountTopicsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cloudStorageServiceUnmountTopicsHandler := connect.NewUnaryHandler(
		CloudStorageServiceUnmountTopicsProcedure,
		svc.UnmountTopics,
		connect.WithSchema(cloudStorageServiceUnmountTopicsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cloudStorageServiceListMountableTopicsHandler := connect.NewUnaryHandler(
		CloudStorageServiceListMountableTopicsProcedure,
		svc.ListMountableTopics,
		connect.WithSchema(cloudStorageServiceListMountableTopicsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cloudStorageServiceListMountTasksHandler := connect.NewUnaryHandler(
		CloudStorageServiceListMountTasksProcedure,
		svc.ListMountTasks,
		connect.WithSchema(cloudStorageServiceListMountTasksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cloudStorageServiceGetMountTaskHandler := connect.NewUnaryHandler(
		CloudStorageServiceGetMountTaskProcedure,
		svc.GetMountTask,
		connect.WithSchema(cloudStorageServiceGetMountTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cloudStorageServiceDeleteMountTaskHandler := connect.NewUnaryHandler(
		CloudStorageServiceDeleteMountTaskProcedure,
		svc.DeleteMountTask,
		connect.WithSchema(cloudStorageServiceDeleteMountTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cloudStorageServiceUpdateMountTaskHandler := connect.NewUnaryHandler(
		CloudStorageServiceUpdateMountTaskProcedure,
		svc.UpdateMountTask,
		connect.WithSchema(cloudStorageServiceUpdateMountTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.dataplane.v1.CloudStorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CloudStorageServiceMountTopicsProcedure:
			cloudStorageServiceMountTopicsHandler.ServeHTTP(w, r)
		case CloudStorageServiceUnmountTopicsProcedure:
			cloudStorageServiceUnmountTopicsHandler.ServeHTTP(w, r)
		case CloudStorageServiceListMountableTopicsProcedure:
			cloudStorageServiceListMountableTopicsHandler.ServeHTTP(w, r)
		case CloudStorageServiceListMountTasksProcedure:
			cloudStorageServiceListMountTasksHandler.ServeHTTP(w, r)
		case CloudStorageServiceGetMountTaskProcedure:
			cloudStorageServiceGetMountTaskHandler.ServeHTTP(w, r)
		case CloudStorageServiceDeleteMountTaskProcedure:
			cloudStorageServiceDeleteMountTaskHandler.ServeHTTP(w, r)
		case CloudStorageServiceUpdateMountTaskProcedure:
			cloudStorageServiceUpdateMountTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCloudStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCloudStorageServiceHandler struct{}

func (UnimplementedCloudStorageServiceHandler) MountTopics(context.Context, *connect.Request[v1.MountTopicsRequest]) (*connect.Response[v1.MountTopicsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.CloudStorageService.MountTopics is not implemented"))
}

func (UnimplementedCloudStorageServiceHandler) UnmountTopics(context.Context, *connect.Request[v1.UnmountTopicsRequest]) (*connect.Response[v1.UnmountTopicsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.CloudStorageService.UnmountTopics is not implemented"))
}

func (UnimplementedCloudStorageServiceHandler) ListMountableTopics(context.Context, *connect.Request[v1.ListMountableTopicsRequest]) (*connect.Response[v1.ListMountableTopicsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.CloudStorageService.ListMountableTopics is not implemented"))
}

func (UnimplementedCloudStorageServiceHandler) ListMountTasks(context.Context, *connect.Request[v1.ListMountTasksRequest]) (*connect.Response[v1.ListMountTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.CloudStorageService.ListMountTasks is not implemented"))
}

func (UnimplementedCloudStorageServiceHandler) GetMountTask(context.Context, *connect.Request[v1.GetMountTaskRequest]) (*connect.Response[v1.GetMountTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.CloudStorageService.GetMountTask is not implemented"))
}

func (UnimplementedCloudStorageServiceHandler) DeleteMountTask(context.Context, *connect.Request[v1.DeleteMountTaskRequest]) (*connect.Response[v1.DeleteMountTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.CloudStorageService.DeleteMountTask is not implemented"))
}

func (UnimplementedCloudStorageServiceHandler) UpdateMountTask(context.Context, *connect.Request[v1.UpdateMountTaskRequest]) (*connect.Response[v1.UpdateMountTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.CloudStorageService.UpdateMountTask is not implemented"))
}
