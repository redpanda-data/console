// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/pipeline.proto

package dataplanev1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PipelineServiceName is the fully-qualified name of the PipelineService service.
	PipelineServiceName = "redpanda.api.dataplane.v1.PipelineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PipelineServiceCreatePipelineProcedure is the fully-qualified name of the PipelineService's
	// CreatePipeline RPC.
	PipelineServiceCreatePipelineProcedure = "/redpanda.api.dataplane.v1.PipelineService/CreatePipeline"
	// PipelineServiceGetPipelineProcedure is the fully-qualified name of the PipelineService's
	// GetPipeline RPC.
	PipelineServiceGetPipelineProcedure = "/redpanda.api.dataplane.v1.PipelineService/GetPipeline"
	// PipelineServiceListPipelinesProcedure is the fully-qualified name of the PipelineService's
	// ListPipelines RPC.
	PipelineServiceListPipelinesProcedure = "/redpanda.api.dataplane.v1.PipelineService/ListPipelines"
	// PipelineServiceUpdatePipelineProcedure is the fully-qualified name of the PipelineService's
	// UpdatePipeline RPC.
	PipelineServiceUpdatePipelineProcedure = "/redpanda.api.dataplane.v1.PipelineService/UpdatePipeline"
	// PipelineServiceDeletePipelineProcedure is the fully-qualified name of the PipelineService's
	// DeletePipeline RPC.
	PipelineServiceDeletePipelineProcedure = "/redpanda.api.dataplane.v1.PipelineService/DeletePipeline"
	// PipelineServiceStopPipelineProcedure is the fully-qualified name of the PipelineService's
	// StopPipeline RPC.
	PipelineServiceStopPipelineProcedure = "/redpanda.api.dataplane.v1.PipelineService/StopPipeline"
	// PipelineServiceStartPipelineProcedure is the fully-qualified name of the PipelineService's
	// StartPipeline RPC.
	PipelineServiceStartPipelineProcedure = "/redpanda.api.dataplane.v1.PipelineService/StartPipeline"
	// PipelineServiceGetPipelineServiceConfigSchemaProcedure is the fully-qualified name of the
	// PipelineService's GetPipelineServiceConfigSchema RPC.
	PipelineServiceGetPipelineServiceConfigSchemaProcedure = "/redpanda.api.dataplane.v1.PipelineService/GetPipelineServiceConfigSchema"
	// PipelineServiceGetPipelinesForSecretProcedure is the fully-qualified name of the
	// PipelineService's GetPipelinesForSecret RPC.
	PipelineServiceGetPipelinesForSecretProcedure = "/redpanda.api.dataplane.v1.PipelineService/GetPipelinesForSecret"
	// PipelineServiceGetPipelinesBySecretsProcedure is the fully-qualified name of the
	// PipelineService's GetPipelinesBySecrets RPC.
	PipelineServiceGetPipelinesBySecretsProcedure = "/redpanda.api.dataplane.v1.PipelineService/GetPipelinesBySecrets"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pipelineServiceServiceDescriptor                              = v1.File_redpanda_api_dataplane_v1_pipeline_proto.Services().ByName("PipelineService")
	pipelineServiceCreatePipelineMethodDescriptor                 = pipelineServiceServiceDescriptor.Methods().ByName("CreatePipeline")
	pipelineServiceGetPipelineMethodDescriptor                    = pipelineServiceServiceDescriptor.Methods().ByName("GetPipeline")
	pipelineServiceListPipelinesMethodDescriptor                  = pipelineServiceServiceDescriptor.Methods().ByName("ListPipelines")
	pipelineServiceUpdatePipelineMethodDescriptor                 = pipelineServiceServiceDescriptor.Methods().ByName("UpdatePipeline")
	pipelineServiceDeletePipelineMethodDescriptor                 = pipelineServiceServiceDescriptor.Methods().ByName("DeletePipeline")
	pipelineServiceStopPipelineMethodDescriptor                   = pipelineServiceServiceDescriptor.Methods().ByName("StopPipeline")
	pipelineServiceStartPipelineMethodDescriptor                  = pipelineServiceServiceDescriptor.Methods().ByName("StartPipeline")
	pipelineServiceGetPipelineServiceConfigSchemaMethodDescriptor = pipelineServiceServiceDescriptor.Methods().ByName("GetPipelineServiceConfigSchema")
	pipelineServiceGetPipelinesForSecretMethodDescriptor          = pipelineServiceServiceDescriptor.Methods().ByName("GetPipelinesForSecret")
	pipelineServiceGetPipelinesBySecretsMethodDescriptor          = pipelineServiceServiceDescriptor.Methods().ByName("GetPipelinesBySecrets")
)

// PipelineServiceClient is a client for the redpanda.api.dataplane.v1.PipelineService service.
type PipelineServiceClient interface {
	// CreatePipeline creates a Redpanda Connect pipeline in the Redpanda cluster.
	CreatePipeline(context.Context, *connect.Request[v1.CreatePipelineRequest]) (*connect.Response[v1.CreatePipelineResponse], error)
	// GetPipeline gets a specific Redpanda Connect pipeline.
	GetPipeline(context.Context, *connect.Request[v1.GetPipelineRequest]) (*connect.Response[v1.GetPipelineResponse], error)
	// ListPipelines implements the list pipelines method which lists the pipelines
	// in the Redpanda cluster.
	ListPipelines(context.Context, *connect.Request[v1.ListPipelinesRequest]) (*connect.Response[v1.ListPipelinesResponse], error)
	// UpdatePipeline updates a specific Redpanda Connect pipeline configuration.
	UpdatePipeline(context.Context, *connect.Request[v1.UpdatePipelineRequest]) (*connect.Response[v1.UpdatePipelineResponse], error)
	// DeletePipeline deletes a specific Redpanda Connect pipeline.
	DeletePipeline(context.Context, *connect.Request[v1.DeletePipelineRequest]) (*connect.Response[v1.DeletePipelineResponse], error)
	// StopPipeline stops a specific Redpanda Connect pipeline.
	StopPipeline(context.Context, *connect.Request[v1.StopPipelineRequest]) (*connect.Response[v1.StopPipelineResponse], error)
	// StartPipeline starts a specific Redpanda Connect pipeline that has been previously stopped.
	StartPipeline(context.Context, *connect.Request[v1.StartPipelineRequest]) (*connect.Response[v1.StartPipelineResponse], error)
	// The configuration schema includes available [components and processors](https://docs.redpanda.com/redpanda-cloud/develop/connect/components/about) in this Redpanda Connect instance.
	GetPipelineServiceConfigSchema(context.Context, *connect.Request[v1.GetPipelineServiceConfigSchemaRequest]) (*connect.Response[v1.GetPipelineServiceConfigSchemaResponse], error)
	// GetPipelinesForSecret implements the get pipelines for secret method which lists the pipelines
	// in the Redpanda cluster for the given secret.
	GetPipelinesForSecret(context.Context, *connect.Request[v1.GetPipelinesForSecretRequest]) (*connect.Response[v1.GetPipelinesForSecretResponse], error)
	// GetPipelinesBySecrets implements the get pipelines by secrets method which lists the pipelines
	// in the Redpanda cluster for all secrets.
	GetPipelinesBySecrets(context.Context, *connect.Request[v1.GetPipelinesBySecretsRequest]) (*connect.Response[v1.GetPipelinesBySecretsResponse], error)
}

// NewPipelineServiceClient constructs a client for the redpanda.api.dataplane.v1.PipelineService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPipelineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PipelineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pipelineServiceClient{
		createPipeline: connect.NewClient[v1.CreatePipelineRequest, v1.CreatePipelineResponse](
			httpClient,
			baseURL+PipelineServiceCreatePipelineProcedure,
			connect.WithSchema(pipelineServiceCreatePipelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPipeline: connect.NewClient[v1.GetPipelineRequest, v1.GetPipelineResponse](
			httpClient,
			baseURL+PipelineServiceGetPipelineProcedure,
			connect.WithSchema(pipelineServiceGetPipelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPipelines: connect.NewClient[v1.ListPipelinesRequest, v1.ListPipelinesResponse](
			httpClient,
			baseURL+PipelineServiceListPipelinesProcedure,
			connect.WithSchema(pipelineServiceListPipelinesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePipeline: connect.NewClient[v1.UpdatePipelineRequest, v1.UpdatePipelineResponse](
			httpClient,
			baseURL+PipelineServiceUpdatePipelineProcedure,
			connect.WithSchema(pipelineServiceUpdatePipelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePipeline: connect.NewClient[v1.DeletePipelineRequest, v1.DeletePipelineResponse](
			httpClient,
			baseURL+PipelineServiceDeletePipelineProcedure,
			connect.WithSchema(pipelineServiceDeletePipelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopPipeline: connect.NewClient[v1.StopPipelineRequest, v1.StopPipelineResponse](
			httpClient,
			baseURL+PipelineServiceStopPipelineProcedure,
			connect.WithSchema(pipelineServiceStopPipelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startPipeline: connect.NewClient[v1.StartPipelineRequest, v1.StartPipelineResponse](
			httpClient,
			baseURL+PipelineServiceStartPipelineProcedure,
			connect.WithSchema(pipelineServiceStartPipelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPipelineServiceConfigSchema: connect.NewClient[v1.GetPipelineServiceConfigSchemaRequest, v1.GetPipelineServiceConfigSchemaResponse](
			httpClient,
			baseURL+PipelineServiceGetPipelineServiceConfigSchemaProcedure,
			connect.WithSchema(pipelineServiceGetPipelineServiceConfigSchemaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPipelinesForSecret: connect.NewClient[v1.GetPipelinesForSecretRequest, v1.GetPipelinesForSecretResponse](
			httpClient,
			baseURL+PipelineServiceGetPipelinesForSecretProcedure,
			connect.WithSchema(pipelineServiceGetPipelinesForSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPipelinesBySecrets: connect.NewClient[v1.GetPipelinesBySecretsRequest, v1.GetPipelinesBySecretsResponse](
			httpClient,
			baseURL+PipelineServiceGetPipelinesBySecretsProcedure,
			connect.WithSchema(pipelineServiceGetPipelinesBySecretsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pipelineServiceClient implements PipelineServiceClient.
type pipelineServiceClient struct {
	createPipeline                 *connect.Client[v1.CreatePipelineRequest, v1.CreatePipelineResponse]
	getPipeline                    *connect.Client[v1.GetPipelineRequest, v1.GetPipelineResponse]
	listPipelines                  *connect.Client[v1.ListPipelinesRequest, v1.ListPipelinesResponse]
	updatePipeline                 *connect.Client[v1.UpdatePipelineRequest, v1.UpdatePipelineResponse]
	deletePipeline                 *connect.Client[v1.DeletePipelineRequest, v1.DeletePipelineResponse]
	stopPipeline                   *connect.Client[v1.StopPipelineRequest, v1.StopPipelineResponse]
	startPipeline                  *connect.Client[v1.StartPipelineRequest, v1.StartPipelineResponse]
	getPipelineServiceConfigSchema *connect.Client[v1.GetPipelineServiceConfigSchemaRequest, v1.GetPipelineServiceConfigSchemaResponse]
	getPipelinesForSecret          *connect.Client[v1.GetPipelinesForSecretRequest, v1.GetPipelinesForSecretResponse]
	getPipelinesBySecrets          *connect.Client[v1.GetPipelinesBySecretsRequest, v1.GetPipelinesBySecretsResponse]
}

// CreatePipeline calls redpanda.api.dataplane.v1.PipelineService.CreatePipeline.
func (c *pipelineServiceClient) CreatePipeline(ctx context.Context, req *connect.Request[v1.CreatePipelineRequest]) (*connect.Response[v1.CreatePipelineResponse], error) {
	return c.createPipeline.CallUnary(ctx, req)
}

// GetPipeline calls redpanda.api.dataplane.v1.PipelineService.GetPipeline.
func (c *pipelineServiceClient) GetPipeline(ctx context.Context, req *connect.Request[v1.GetPipelineRequest]) (*connect.Response[v1.GetPipelineResponse], error) {
	return c.getPipeline.CallUnary(ctx, req)
}

// ListPipelines calls redpanda.api.dataplane.v1.PipelineService.ListPipelines.
func (c *pipelineServiceClient) ListPipelines(ctx context.Context, req *connect.Request[v1.ListPipelinesRequest]) (*connect.Response[v1.ListPipelinesResponse], error) {
	return c.listPipelines.CallUnary(ctx, req)
}

// UpdatePipeline calls redpanda.api.dataplane.v1.PipelineService.UpdatePipeline.
func (c *pipelineServiceClient) UpdatePipeline(ctx context.Context, req *connect.Request[v1.UpdatePipelineRequest]) (*connect.Response[v1.UpdatePipelineResponse], error) {
	return c.updatePipeline.CallUnary(ctx, req)
}

// DeletePipeline calls redpanda.api.dataplane.v1.PipelineService.DeletePipeline.
func (c *pipelineServiceClient) DeletePipeline(ctx context.Context, req *connect.Request[v1.DeletePipelineRequest]) (*connect.Response[v1.DeletePipelineResponse], error) {
	return c.deletePipeline.CallUnary(ctx, req)
}

// StopPipeline calls redpanda.api.dataplane.v1.PipelineService.StopPipeline.
func (c *pipelineServiceClient) StopPipeline(ctx context.Context, req *connect.Request[v1.StopPipelineRequest]) (*connect.Response[v1.StopPipelineResponse], error) {
	return c.stopPipeline.CallUnary(ctx, req)
}

// StartPipeline calls redpanda.api.dataplane.v1.PipelineService.StartPipeline.
func (c *pipelineServiceClient) StartPipeline(ctx context.Context, req *connect.Request[v1.StartPipelineRequest]) (*connect.Response[v1.StartPipelineResponse], error) {
	return c.startPipeline.CallUnary(ctx, req)
}

// GetPipelineServiceConfigSchema calls
// redpanda.api.dataplane.v1.PipelineService.GetPipelineServiceConfigSchema.
func (c *pipelineServiceClient) GetPipelineServiceConfigSchema(ctx context.Context, req *connect.Request[v1.GetPipelineServiceConfigSchemaRequest]) (*connect.Response[v1.GetPipelineServiceConfigSchemaResponse], error) {
	return c.getPipelineServiceConfigSchema.CallUnary(ctx, req)
}

// GetPipelinesForSecret calls redpanda.api.dataplane.v1.PipelineService.GetPipelinesForSecret.
func (c *pipelineServiceClient) GetPipelinesForSecret(ctx context.Context, req *connect.Request[v1.GetPipelinesForSecretRequest]) (*connect.Response[v1.GetPipelinesForSecretResponse], error) {
	return c.getPipelinesForSecret.CallUnary(ctx, req)
}

// GetPipelinesBySecrets calls redpanda.api.dataplane.v1.PipelineService.GetPipelinesBySecrets.
func (c *pipelineServiceClient) GetPipelinesBySecrets(ctx context.Context, req *connect.Request[v1.GetPipelinesBySecretsRequest]) (*connect.Response[v1.GetPipelinesBySecretsResponse], error) {
	return c.getPipelinesBySecrets.CallUnary(ctx, req)
}

// PipelineServiceHandler is an implementation of the redpanda.api.dataplane.v1.PipelineService
// service.
type PipelineServiceHandler interface {
	// CreatePipeline creates a Redpanda Connect pipeline in the Redpanda cluster.
	CreatePipeline(context.Context, *connect.Request[v1.CreatePipelineRequest]) (*connect.Response[v1.CreatePipelineResponse], error)
	// GetPipeline gets a specific Redpanda Connect pipeline.
	GetPipeline(context.Context, *connect.Request[v1.GetPipelineRequest]) (*connect.Response[v1.GetPipelineResponse], error)
	// ListPipelines implements the list pipelines method which lists the pipelines
	// in the Redpanda cluster.
	ListPipelines(context.Context, *connect.Request[v1.ListPipelinesRequest]) (*connect.Response[v1.ListPipelinesResponse], error)
	// UpdatePipeline updates a specific Redpanda Connect pipeline configuration.
	UpdatePipeline(context.Context, *connect.Request[v1.UpdatePipelineRequest]) (*connect.Response[v1.UpdatePipelineResponse], error)
	// DeletePipeline deletes a specific Redpanda Connect pipeline.
	DeletePipeline(context.Context, *connect.Request[v1.DeletePipelineRequest]) (*connect.Response[v1.DeletePipelineResponse], error)
	// StopPipeline stops a specific Redpanda Connect pipeline.
	StopPipeline(context.Context, *connect.Request[v1.StopPipelineRequest]) (*connect.Response[v1.StopPipelineResponse], error)
	// StartPipeline starts a specific Redpanda Connect pipeline that has been previously stopped.
	StartPipeline(context.Context, *connect.Request[v1.StartPipelineRequest]) (*connect.Response[v1.StartPipelineResponse], error)
	// The configuration schema includes available [components and processors](https://docs.redpanda.com/redpanda-cloud/develop/connect/components/about) in this Redpanda Connect instance.
	GetPipelineServiceConfigSchema(context.Context, *connect.Request[v1.GetPipelineServiceConfigSchemaRequest]) (*connect.Response[v1.GetPipelineServiceConfigSchemaResponse], error)
	// GetPipelinesForSecret implements the get pipelines for secret method which lists the pipelines
	// in the Redpanda cluster for the given secret.
	GetPipelinesForSecret(context.Context, *connect.Request[v1.GetPipelinesForSecretRequest]) (*connect.Response[v1.GetPipelinesForSecretResponse], error)
	// GetPipelinesBySecrets implements the get pipelines by secrets method which lists the pipelines
	// in the Redpanda cluster for all secrets.
	GetPipelinesBySecrets(context.Context, *connect.Request[v1.GetPipelinesBySecretsRequest]) (*connect.Response[v1.GetPipelinesBySecretsResponse], error)
}

// NewPipelineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPipelineServiceHandler(svc PipelineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pipelineServiceCreatePipelineHandler := connect.NewUnaryHandler(
		PipelineServiceCreatePipelineProcedure,
		svc.CreatePipeline,
		connect.WithSchema(pipelineServiceCreatePipelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pipelineServiceGetPipelineHandler := connect.NewUnaryHandler(
		PipelineServiceGetPipelineProcedure,
		svc.GetPipeline,
		connect.WithSchema(pipelineServiceGetPipelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pipelineServiceListPipelinesHandler := connect.NewUnaryHandler(
		PipelineServiceListPipelinesProcedure,
		svc.ListPipelines,
		connect.WithSchema(pipelineServiceListPipelinesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pipelineServiceUpdatePipelineHandler := connect.NewUnaryHandler(
		PipelineServiceUpdatePipelineProcedure,
		svc.UpdatePipeline,
		connect.WithSchema(pipelineServiceUpdatePipelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pipelineServiceDeletePipelineHandler := connect.NewUnaryHandler(
		PipelineServiceDeletePipelineProcedure,
		svc.DeletePipeline,
		connect.WithSchema(pipelineServiceDeletePipelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pipelineServiceStopPipelineHandler := connect.NewUnaryHandler(
		PipelineServiceStopPipelineProcedure,
		svc.StopPipeline,
		connect.WithSchema(pipelineServiceStopPipelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pipelineServiceStartPipelineHandler := connect.NewUnaryHandler(
		PipelineServiceStartPipelineProcedure,
		svc.StartPipeline,
		connect.WithSchema(pipelineServiceStartPipelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pipelineServiceGetPipelineServiceConfigSchemaHandler := connect.NewUnaryHandler(
		PipelineServiceGetPipelineServiceConfigSchemaProcedure,
		svc.GetPipelineServiceConfigSchema,
		connect.WithSchema(pipelineServiceGetPipelineServiceConfigSchemaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pipelineServiceGetPipelinesForSecretHandler := connect.NewUnaryHandler(
		PipelineServiceGetPipelinesForSecretProcedure,
		svc.GetPipelinesForSecret,
		connect.WithSchema(pipelineServiceGetPipelinesForSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pipelineServiceGetPipelinesBySecretsHandler := connect.NewUnaryHandler(
		PipelineServiceGetPipelinesBySecretsProcedure,
		svc.GetPipelinesBySecrets,
		connect.WithSchema(pipelineServiceGetPipelinesBySecretsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.dataplane.v1.PipelineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PipelineServiceCreatePipelineProcedure:
			pipelineServiceCreatePipelineHandler.ServeHTTP(w, r)
		case PipelineServiceGetPipelineProcedure:
			pipelineServiceGetPipelineHandler.ServeHTTP(w, r)
		case PipelineServiceListPipelinesProcedure:
			pipelineServiceListPipelinesHandler.ServeHTTP(w, r)
		case PipelineServiceUpdatePipelineProcedure:
			pipelineServiceUpdatePipelineHandler.ServeHTTP(w, r)
		case PipelineServiceDeletePipelineProcedure:
			pipelineServiceDeletePipelineHandler.ServeHTTP(w, r)
		case PipelineServiceStopPipelineProcedure:
			pipelineServiceStopPipelineHandler.ServeHTTP(w, r)
		case PipelineServiceStartPipelineProcedure:
			pipelineServiceStartPipelineHandler.ServeHTTP(w, r)
		case PipelineServiceGetPipelineServiceConfigSchemaProcedure:
			pipelineServiceGetPipelineServiceConfigSchemaHandler.ServeHTTP(w, r)
		case PipelineServiceGetPipelinesForSecretProcedure:
			pipelineServiceGetPipelinesForSecretHandler.ServeHTTP(w, r)
		case PipelineServiceGetPipelinesBySecretsProcedure:
			pipelineServiceGetPipelinesBySecretsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPipelineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPipelineServiceHandler struct{}

func (UnimplementedPipelineServiceHandler) CreatePipeline(context.Context, *connect.Request[v1.CreatePipelineRequest]) (*connect.Response[v1.CreatePipelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.CreatePipeline is not implemented"))
}

func (UnimplementedPipelineServiceHandler) GetPipeline(context.Context, *connect.Request[v1.GetPipelineRequest]) (*connect.Response[v1.GetPipelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.GetPipeline is not implemented"))
}

func (UnimplementedPipelineServiceHandler) ListPipelines(context.Context, *connect.Request[v1.ListPipelinesRequest]) (*connect.Response[v1.ListPipelinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.ListPipelines is not implemented"))
}

func (UnimplementedPipelineServiceHandler) UpdatePipeline(context.Context, *connect.Request[v1.UpdatePipelineRequest]) (*connect.Response[v1.UpdatePipelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.UpdatePipeline is not implemented"))
}

func (UnimplementedPipelineServiceHandler) DeletePipeline(context.Context, *connect.Request[v1.DeletePipelineRequest]) (*connect.Response[v1.DeletePipelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.DeletePipeline is not implemented"))
}

func (UnimplementedPipelineServiceHandler) StopPipeline(context.Context, *connect.Request[v1.StopPipelineRequest]) (*connect.Response[v1.StopPipelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.StopPipeline is not implemented"))
}

func (UnimplementedPipelineServiceHandler) StartPipeline(context.Context, *connect.Request[v1.StartPipelineRequest]) (*connect.Response[v1.StartPipelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.StartPipeline is not implemented"))
}

func (UnimplementedPipelineServiceHandler) GetPipelineServiceConfigSchema(context.Context, *connect.Request[v1.GetPipelineServiceConfigSchemaRequest]) (*connect.Response[v1.GetPipelineServiceConfigSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.GetPipelineServiceConfigSchema is not implemented"))
}

func (UnimplementedPipelineServiceHandler) GetPipelinesForSecret(context.Context, *connect.Request[v1.GetPipelinesForSecretRequest]) (*connect.Response[v1.GetPipelinesForSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.GetPipelinesForSecret is not implemented"))
}

func (UnimplementedPipelineServiceHandler) GetPipelinesBySecrets(context.Context, *connect.Request[v1.GetPipelinesBySecretsRequest]) (*connect.Response[v1.GetPipelinesBySecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.PipelineService.GetPipelinesBySecrets is not implemented"))
}
