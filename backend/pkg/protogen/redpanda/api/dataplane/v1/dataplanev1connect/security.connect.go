// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/security.proto

package dataplanev1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SecurityServiceName is the fully-qualified name of the SecurityService service.
	SecurityServiceName = "redpanda.api.dataplane.v1.SecurityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SecurityServiceListRolesProcedure is the fully-qualified name of the SecurityService's ListRoles
	// RPC.
	SecurityServiceListRolesProcedure = "/redpanda.api.dataplane.v1.SecurityService/ListRoles"
	// SecurityServiceCreateRoleProcedure is the fully-qualified name of the SecurityService's
	// CreateRole RPC.
	SecurityServiceCreateRoleProcedure = "/redpanda.api.dataplane.v1.SecurityService/CreateRole"
	// SecurityServiceGetRoleProcedure is the fully-qualified name of the SecurityService's GetRole RPC.
	SecurityServiceGetRoleProcedure = "/redpanda.api.dataplane.v1.SecurityService/GetRole"
	// SecurityServiceDeleteRoleProcedure is the fully-qualified name of the SecurityService's
	// DeleteRole RPC.
	SecurityServiceDeleteRoleProcedure = "/redpanda.api.dataplane.v1.SecurityService/DeleteRole"
	// SecurityServiceListRoleMembersProcedure is the fully-qualified name of the SecurityService's
	// ListRoleMembers RPC.
	SecurityServiceListRoleMembersProcedure = "/redpanda.api.dataplane.v1.SecurityService/ListRoleMembers"
	// SecurityServiceUpdateRoleMembershipProcedure is the fully-qualified name of the SecurityService's
	// UpdateRoleMembership RPC.
	SecurityServiceUpdateRoleMembershipProcedure = "/redpanda.api.dataplane.v1.SecurityService/UpdateRoleMembership"
	// SecurityServiceListSchemaRegistryACLsProcedure is the fully-qualified name of the
	// SecurityService's ListSchemaRegistryACLs RPC.
	SecurityServiceListSchemaRegistryACLsProcedure = "/redpanda.api.dataplane.v1.SecurityService/ListSchemaRegistryACLs"
	// SecurityServiceCreateSchemaRegistryACLsProcedure is the fully-qualified name of the
	// SecurityService's CreateSchemaRegistryACLs RPC.
	SecurityServiceCreateSchemaRegistryACLsProcedure = "/redpanda.api.dataplane.v1.SecurityService/CreateSchemaRegistryACLs"
	// SecurityServiceDeleteSchemaRegistryACLsProcedure is the fully-qualified name of the
	// SecurityService's DeleteSchemaRegistryACLs RPC.
	SecurityServiceDeleteSchemaRegistryACLsProcedure = "/redpanda.api.dataplane.v1.SecurityService/DeleteSchemaRegistryACLs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	securityServiceServiceDescriptor                        = v1.File_redpanda_api_dataplane_v1_security_proto.Services().ByName("SecurityService")
	securityServiceListRolesMethodDescriptor                = securityServiceServiceDescriptor.Methods().ByName("ListRoles")
	securityServiceCreateRoleMethodDescriptor               = securityServiceServiceDescriptor.Methods().ByName("CreateRole")
	securityServiceGetRoleMethodDescriptor                  = securityServiceServiceDescriptor.Methods().ByName("GetRole")
	securityServiceDeleteRoleMethodDescriptor               = securityServiceServiceDescriptor.Methods().ByName("DeleteRole")
	securityServiceListRoleMembersMethodDescriptor          = securityServiceServiceDescriptor.Methods().ByName("ListRoleMembers")
	securityServiceUpdateRoleMembershipMethodDescriptor     = securityServiceServiceDescriptor.Methods().ByName("UpdateRoleMembership")
	securityServiceListSchemaRegistryACLsMethodDescriptor   = securityServiceServiceDescriptor.Methods().ByName("ListSchemaRegistryACLs")
	securityServiceCreateSchemaRegistryACLsMethodDescriptor = securityServiceServiceDescriptor.Methods().ByName("CreateSchemaRegistryACLs")
	securityServiceDeleteSchemaRegistryACLsMethodDescriptor = securityServiceServiceDescriptor.Methods().ByName("DeleteSchemaRegistryACLs")
)

// SecurityServiceClient is a client for the redpanda.api.dataplane.v1.SecurityService service.
type SecurityServiceClient interface {
	// ListRoles lists all the roles based on optional filter.
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// GetRole retrieves the specific role.
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error)
	// DeleteRole deletes the role from the system.
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// ListRoleMembership lists all the members assigned to a role based on optional filter.
	ListRoleMembers(context.Context, *connect.Request[v1.ListRoleMembersRequest]) (*connect.Response[v1.ListRoleMembersResponse], error)
	// UpdateRoleMembership updates role membership.
	// Partially update role membership, adding or removing from a role
	// ONLY those members listed in the “add” or “remove” fields, respectively.
	// Adding a member that is already assigned to the role (or removing one that is not) is a no-op,
	// and the rest of the members will be added and removed and reported.
	UpdateRoleMembership(context.Context, *connect.Request[v1.UpdateRoleMembershipRequest]) (*connect.Response[v1.UpdateRoleMembershipResponse], error)
	// ListSchemaRegistryACLs lists Schema Registry ACLs based on optional filters.
	ListSchemaRegistryACLs(context.Context, *connect.Request[v1.ListSchemaRegistryACLsRequest]) (*connect.Response[v1.ListSchemaRegistryACLsResponse], error)
	// CreateSchemaRegistryACLs creates new Schema Registry ACL entries.
	CreateSchemaRegistryACLs(context.Context, *connect.Request[v1.CreateSchemaRegistryACLsRequest]) (*connect.Response[v1.CreateSchemaRegistryACLsResponse], error)
	// DeleteSchemaRegistryACLs deletes existing Schema Registry ACL entries.
	DeleteSchemaRegistryACLs(context.Context, *connect.Request[v1.DeleteSchemaRegistryACLsRequest]) (*connect.Response[v1.DeleteSchemaRegistryACLsResponse], error)
}

// NewSecurityServiceClient constructs a client for the redpanda.api.dataplane.v1.SecurityService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSecurityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SecurityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &securityServiceClient{
		listRoles: connect.NewClient[v1.ListRolesRequest, v1.ListRolesResponse](
			httpClient,
			baseURL+SecurityServiceListRolesProcedure,
			connect.WithSchema(securityServiceListRolesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRole: connect.NewClient[v1.CreateRoleRequest, v1.CreateRoleResponse](
			httpClient,
			baseURL+SecurityServiceCreateRoleProcedure,
			connect.WithSchema(securityServiceCreateRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRole: connect.NewClient[v1.GetRoleRequest, v1.GetRoleResponse](
			httpClient,
			baseURL+SecurityServiceGetRoleProcedure,
			connect.WithSchema(securityServiceGetRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[v1.DeleteRoleRequest, v1.DeleteRoleResponse](
			httpClient,
			baseURL+SecurityServiceDeleteRoleProcedure,
			connect.WithSchema(securityServiceDeleteRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRoleMembers: connect.NewClient[v1.ListRoleMembersRequest, v1.ListRoleMembersResponse](
			httpClient,
			baseURL+SecurityServiceListRoleMembersProcedure,
			connect.WithSchema(securityServiceListRoleMembersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRoleMembership: connect.NewClient[v1.UpdateRoleMembershipRequest, v1.UpdateRoleMembershipResponse](
			httpClient,
			baseURL+SecurityServiceUpdateRoleMembershipProcedure,
			connect.WithSchema(securityServiceUpdateRoleMembershipMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSchemaRegistryACLs: connect.NewClient[v1.ListSchemaRegistryACLsRequest, v1.ListSchemaRegistryACLsResponse](
			httpClient,
			baseURL+SecurityServiceListSchemaRegistryACLsProcedure,
			connect.WithSchema(securityServiceListSchemaRegistryACLsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createSchemaRegistryACLs: connect.NewClient[v1.CreateSchemaRegistryACLsRequest, v1.CreateSchemaRegistryACLsResponse](
			httpClient,
			baseURL+SecurityServiceCreateSchemaRegistryACLsProcedure,
			connect.WithSchema(securityServiceCreateSchemaRegistryACLsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSchemaRegistryACLs: connect.NewClient[v1.DeleteSchemaRegistryACLsRequest, v1.DeleteSchemaRegistryACLsResponse](
			httpClient,
			baseURL+SecurityServiceDeleteSchemaRegistryACLsProcedure,
			connect.WithSchema(securityServiceDeleteSchemaRegistryACLsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// securityServiceClient implements SecurityServiceClient.
type securityServiceClient struct {
	listRoles                *connect.Client[v1.ListRolesRequest, v1.ListRolesResponse]
	createRole               *connect.Client[v1.CreateRoleRequest, v1.CreateRoleResponse]
	getRole                  *connect.Client[v1.GetRoleRequest, v1.GetRoleResponse]
	deleteRole               *connect.Client[v1.DeleteRoleRequest, v1.DeleteRoleResponse]
	listRoleMembers          *connect.Client[v1.ListRoleMembersRequest, v1.ListRoleMembersResponse]
	updateRoleMembership     *connect.Client[v1.UpdateRoleMembershipRequest, v1.UpdateRoleMembershipResponse]
	listSchemaRegistryACLs   *connect.Client[v1.ListSchemaRegistryACLsRequest, v1.ListSchemaRegistryACLsResponse]
	createSchemaRegistryACLs *connect.Client[v1.CreateSchemaRegistryACLsRequest, v1.CreateSchemaRegistryACLsResponse]
	deleteSchemaRegistryACLs *connect.Client[v1.DeleteSchemaRegistryACLsRequest, v1.DeleteSchemaRegistryACLsResponse]
}

// ListRoles calls redpanda.api.dataplane.v1.SecurityService.ListRoles.
func (c *securityServiceClient) ListRoles(ctx context.Context, req *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// CreateRole calls redpanda.api.dataplane.v1.SecurityService.CreateRole.
func (c *securityServiceClient) CreateRole(ctx context.Context, req *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// GetRole calls redpanda.api.dataplane.v1.SecurityService.GetRole.
func (c *securityServiceClient) GetRole(ctx context.Context, req *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error) {
	return c.getRole.CallUnary(ctx, req)
}

// DeleteRole calls redpanda.api.dataplane.v1.SecurityService.DeleteRole.
func (c *securityServiceClient) DeleteRole(ctx context.Context, req *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// ListRoleMembers calls redpanda.api.dataplane.v1.SecurityService.ListRoleMembers.
func (c *securityServiceClient) ListRoleMembers(ctx context.Context, req *connect.Request[v1.ListRoleMembersRequest]) (*connect.Response[v1.ListRoleMembersResponse], error) {
	return c.listRoleMembers.CallUnary(ctx, req)
}

// UpdateRoleMembership calls redpanda.api.dataplane.v1.SecurityService.UpdateRoleMembership.
func (c *securityServiceClient) UpdateRoleMembership(ctx context.Context, req *connect.Request[v1.UpdateRoleMembershipRequest]) (*connect.Response[v1.UpdateRoleMembershipResponse], error) {
	return c.updateRoleMembership.CallUnary(ctx, req)
}

// ListSchemaRegistryACLs calls redpanda.api.dataplane.v1.SecurityService.ListSchemaRegistryACLs.
func (c *securityServiceClient) ListSchemaRegistryACLs(ctx context.Context, req *connect.Request[v1.ListSchemaRegistryACLsRequest]) (*connect.Response[v1.ListSchemaRegistryACLsResponse], error) {
	return c.listSchemaRegistryACLs.CallUnary(ctx, req)
}

// CreateSchemaRegistryACLs calls
// redpanda.api.dataplane.v1.SecurityService.CreateSchemaRegistryACLs.
func (c *securityServiceClient) CreateSchemaRegistryACLs(ctx context.Context, req *connect.Request[v1.CreateSchemaRegistryACLsRequest]) (*connect.Response[v1.CreateSchemaRegistryACLsResponse], error) {
	return c.createSchemaRegistryACLs.CallUnary(ctx, req)
}

// DeleteSchemaRegistryACLs calls
// redpanda.api.dataplane.v1.SecurityService.DeleteSchemaRegistryACLs.
func (c *securityServiceClient) DeleteSchemaRegistryACLs(ctx context.Context, req *connect.Request[v1.DeleteSchemaRegistryACLsRequest]) (*connect.Response[v1.DeleteSchemaRegistryACLsResponse], error) {
	return c.deleteSchemaRegistryACLs.CallUnary(ctx, req)
}

// SecurityServiceHandler is an implementation of the redpanda.api.dataplane.v1.SecurityService
// service.
type SecurityServiceHandler interface {
	// ListRoles lists all the roles based on optional filter.
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// GetRole retrieves the specific role.
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error)
	// DeleteRole deletes the role from the system.
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// ListRoleMembership lists all the members assigned to a role based on optional filter.
	ListRoleMembers(context.Context, *connect.Request[v1.ListRoleMembersRequest]) (*connect.Response[v1.ListRoleMembersResponse], error)
	// UpdateRoleMembership updates role membership.
	// Partially update role membership, adding or removing from a role
	// ONLY those members listed in the “add” or “remove” fields, respectively.
	// Adding a member that is already assigned to the role (or removing one that is not) is a no-op,
	// and the rest of the members will be added and removed and reported.
	UpdateRoleMembership(context.Context, *connect.Request[v1.UpdateRoleMembershipRequest]) (*connect.Response[v1.UpdateRoleMembershipResponse], error)
	// ListSchemaRegistryACLs lists Schema Registry ACLs based on optional filters.
	ListSchemaRegistryACLs(context.Context, *connect.Request[v1.ListSchemaRegistryACLsRequest]) (*connect.Response[v1.ListSchemaRegistryACLsResponse], error)
	// CreateSchemaRegistryACLs creates new Schema Registry ACL entries.
	CreateSchemaRegistryACLs(context.Context, *connect.Request[v1.CreateSchemaRegistryACLsRequest]) (*connect.Response[v1.CreateSchemaRegistryACLsResponse], error)
	// DeleteSchemaRegistryACLs deletes existing Schema Registry ACL entries.
	DeleteSchemaRegistryACLs(context.Context, *connect.Request[v1.DeleteSchemaRegistryACLsRequest]) (*connect.Response[v1.DeleteSchemaRegistryACLsResponse], error)
}

// NewSecurityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSecurityServiceHandler(svc SecurityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	securityServiceListRolesHandler := connect.NewUnaryHandler(
		SecurityServiceListRolesProcedure,
		svc.ListRoles,
		connect.WithSchema(securityServiceListRolesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	securityServiceCreateRoleHandler := connect.NewUnaryHandler(
		SecurityServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(securityServiceCreateRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	securityServiceGetRoleHandler := connect.NewUnaryHandler(
		SecurityServiceGetRoleProcedure,
		svc.GetRole,
		connect.WithSchema(securityServiceGetRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	securityServiceDeleteRoleHandler := connect.NewUnaryHandler(
		SecurityServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(securityServiceDeleteRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	securityServiceListRoleMembersHandler := connect.NewUnaryHandler(
		SecurityServiceListRoleMembersProcedure,
		svc.ListRoleMembers,
		connect.WithSchema(securityServiceListRoleMembersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	securityServiceUpdateRoleMembershipHandler := connect.NewUnaryHandler(
		SecurityServiceUpdateRoleMembershipProcedure,
		svc.UpdateRoleMembership,
		connect.WithSchema(securityServiceUpdateRoleMembershipMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	securityServiceListSchemaRegistryACLsHandler := connect.NewUnaryHandler(
		SecurityServiceListSchemaRegistryACLsProcedure,
		svc.ListSchemaRegistryACLs,
		connect.WithSchema(securityServiceListSchemaRegistryACLsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	securityServiceCreateSchemaRegistryACLsHandler := connect.NewUnaryHandler(
		SecurityServiceCreateSchemaRegistryACLsProcedure,
		svc.CreateSchemaRegistryACLs,
		connect.WithSchema(securityServiceCreateSchemaRegistryACLsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	securityServiceDeleteSchemaRegistryACLsHandler := connect.NewUnaryHandler(
		SecurityServiceDeleteSchemaRegistryACLsProcedure,
		svc.DeleteSchemaRegistryACLs,
		connect.WithSchema(securityServiceDeleteSchemaRegistryACLsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.dataplane.v1.SecurityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SecurityServiceListRolesProcedure:
			securityServiceListRolesHandler.ServeHTTP(w, r)
		case SecurityServiceCreateRoleProcedure:
			securityServiceCreateRoleHandler.ServeHTTP(w, r)
		case SecurityServiceGetRoleProcedure:
			securityServiceGetRoleHandler.ServeHTTP(w, r)
		case SecurityServiceDeleteRoleProcedure:
			securityServiceDeleteRoleHandler.ServeHTTP(w, r)
		case SecurityServiceListRoleMembersProcedure:
			securityServiceListRoleMembersHandler.ServeHTTP(w, r)
		case SecurityServiceUpdateRoleMembershipProcedure:
			securityServiceUpdateRoleMembershipHandler.ServeHTTP(w, r)
		case SecurityServiceListSchemaRegistryACLsProcedure:
			securityServiceListSchemaRegistryACLsHandler.ServeHTTP(w, r)
		case SecurityServiceCreateSchemaRegistryACLsProcedure:
			securityServiceCreateSchemaRegistryACLsHandler.ServeHTTP(w, r)
		case SecurityServiceDeleteSchemaRegistryACLsProcedure:
			securityServiceDeleteSchemaRegistryACLsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSecurityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSecurityServiceHandler struct{}

func (UnimplementedSecurityServiceHandler) ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.SecurityService.ListRoles is not implemented"))
}

func (UnimplementedSecurityServiceHandler) CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.SecurityService.CreateRole is not implemented"))
}

func (UnimplementedSecurityServiceHandler) GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.SecurityService.GetRole is not implemented"))
}

func (UnimplementedSecurityServiceHandler) DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.SecurityService.DeleteRole is not implemented"))
}

func (UnimplementedSecurityServiceHandler) ListRoleMembers(context.Context, *connect.Request[v1.ListRoleMembersRequest]) (*connect.Response[v1.ListRoleMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.SecurityService.ListRoleMembers is not implemented"))
}

func (UnimplementedSecurityServiceHandler) UpdateRoleMembership(context.Context, *connect.Request[v1.UpdateRoleMembershipRequest]) (*connect.Response[v1.UpdateRoleMembershipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.SecurityService.UpdateRoleMembership is not implemented"))
}

func (UnimplementedSecurityServiceHandler) ListSchemaRegistryACLs(context.Context, *connect.Request[v1.ListSchemaRegistryACLsRequest]) (*connect.Response[v1.ListSchemaRegistryACLsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.SecurityService.ListSchemaRegistryACLs is not implemented"))
}

func (UnimplementedSecurityServiceHandler) CreateSchemaRegistryACLs(context.Context, *connect.Request[v1.CreateSchemaRegistryACLsRequest]) (*connect.Response[v1.CreateSchemaRegistryACLsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.SecurityService.CreateSchemaRegistryACLs is not implemented"))
}

func (UnimplementedSecurityServiceHandler) DeleteSchemaRegistryACLs(context.Context, *connect.Request[v1.DeleteSchemaRegistryACLsRequest]) (*connect.Response[v1.DeleteSchemaRegistryACLsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1.SecurityService.DeleteSchemaRegistryACLs is not implemented"))
}
