// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/mcp.proto

package dataplanev1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// MCPServerServiceGatewayServer implements the gRPC server API for the MCPServerService service.
type MCPServerServiceGatewayServer struct {
	v1.UnimplementedMCPServerServiceServer
	createMCPServer                 connect_gateway.UnaryHandler[v1.CreateMCPServerRequest, v1.CreateMCPServerResponse]
	getMCPServer                    connect_gateway.UnaryHandler[v1.GetMCPServerRequest, v1.GetMCPServerResponse]
	listMCPServers                  connect_gateway.UnaryHandler[v1.ListMCPServersRequest, v1.ListMCPServersResponse]
	updateMCPServer                 connect_gateway.UnaryHandler[v1.UpdateMCPServerRequest, v1.UpdateMCPServerResponse]
	deleteMCPServer                 connect_gateway.UnaryHandler[v1.DeleteMCPServerRequest, v1.DeleteMCPServerResponse]
	stopMCPServer                   connect_gateway.UnaryHandler[v1.StopMCPServerRequest, v1.StopMCPServerResponse]
	startMCPServer                  connect_gateway.UnaryHandler[v1.StartMCPServerRequest, v1.StartMCPServerResponse]
	getMCPServerServiceConfigSchema connect_gateway.UnaryHandler[v1.GetMCPServerServiceConfigSchemaRequest, v1.GetMCPServerServiceConfigSchemaResponse]
}

// NewMCPServerServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// MCPServerService service.
func NewMCPServerServiceGatewayServer(svc MCPServerServiceHandler, opts ...connect_gateway.HandlerOption) *MCPServerServiceGatewayServer {
	return &MCPServerServiceGatewayServer{
		createMCPServer:                 connect_gateway.NewUnaryHandler(MCPServerServiceCreateMCPServerProcedure, svc.CreateMCPServer, opts...),
		getMCPServer:                    connect_gateway.NewUnaryHandler(MCPServerServiceGetMCPServerProcedure, svc.GetMCPServer, opts...),
		listMCPServers:                  connect_gateway.NewUnaryHandler(MCPServerServiceListMCPServersProcedure, svc.ListMCPServers, opts...),
		updateMCPServer:                 connect_gateway.NewUnaryHandler(MCPServerServiceUpdateMCPServerProcedure, svc.UpdateMCPServer, opts...),
		deleteMCPServer:                 connect_gateway.NewUnaryHandler(MCPServerServiceDeleteMCPServerProcedure, svc.DeleteMCPServer, opts...),
		stopMCPServer:                   connect_gateway.NewUnaryHandler(MCPServerServiceStopMCPServerProcedure, svc.StopMCPServer, opts...),
		startMCPServer:                  connect_gateway.NewUnaryHandler(MCPServerServiceStartMCPServerProcedure, svc.StartMCPServer, opts...),
		getMCPServerServiceConfigSchema: connect_gateway.NewUnaryHandler(MCPServerServiceGetMCPServerServiceConfigSchemaProcedure, svc.GetMCPServerServiceConfigSchema, opts...),
	}
}

func (s *MCPServerServiceGatewayServer) CreateMCPServer(ctx context.Context, req *v1.CreateMCPServerRequest) (*v1.CreateMCPServerResponse, error) {
	return s.createMCPServer(ctx, req)
}

func (s *MCPServerServiceGatewayServer) GetMCPServer(ctx context.Context, req *v1.GetMCPServerRequest) (*v1.GetMCPServerResponse, error) {
	return s.getMCPServer(ctx, req)
}

func (s *MCPServerServiceGatewayServer) ListMCPServers(ctx context.Context, req *v1.ListMCPServersRequest) (*v1.ListMCPServersResponse, error) {
	return s.listMCPServers(ctx, req)
}

func (s *MCPServerServiceGatewayServer) UpdateMCPServer(ctx context.Context, req *v1.UpdateMCPServerRequest) (*v1.UpdateMCPServerResponse, error) {
	return s.updateMCPServer(ctx, req)
}

func (s *MCPServerServiceGatewayServer) DeleteMCPServer(ctx context.Context, req *v1.DeleteMCPServerRequest) (*v1.DeleteMCPServerResponse, error) {
	return s.deleteMCPServer(ctx, req)
}

func (s *MCPServerServiceGatewayServer) StopMCPServer(ctx context.Context, req *v1.StopMCPServerRequest) (*v1.StopMCPServerResponse, error) {
	return s.stopMCPServer(ctx, req)
}

func (s *MCPServerServiceGatewayServer) StartMCPServer(ctx context.Context, req *v1.StartMCPServerRequest) (*v1.StartMCPServerResponse, error) {
	return s.startMCPServer(ctx, req)
}

func (s *MCPServerServiceGatewayServer) GetMCPServerServiceConfigSchema(ctx context.Context, req *v1.GetMCPServerServiceConfigSchemaRequest) (*v1.GetMCPServerServiceConfigSchemaResponse, error) {
	return s.getMCPServerServiceConfigSchema(ctx, req)
}

// RegisterMCPServerServiceHandlerGatewayServer registers the Connect handlers for the
// MCPServerService "svc" to "mux".
func RegisterMCPServerServiceHandlerGatewayServer(mux *runtime.ServeMux, svc MCPServerServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1.RegisterMCPServerServiceHandlerServer(context.TODO(), mux, NewMCPServerServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
