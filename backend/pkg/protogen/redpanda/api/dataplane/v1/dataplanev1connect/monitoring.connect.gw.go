// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/monitoring.proto

package dataplanev1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// MonitoringServiceGatewayServer implements the gRPC server API for the MonitoringService service.
type MonitoringServiceGatewayServer struct {
	v1.UnimplementedMonitoringServiceServer
	listConnections connect_gateway.UnaryHandler[v1.ListConnectionsRequest, v1.ListConnectionsResponse]
}

// NewMonitoringServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// MonitoringService service.
func NewMonitoringServiceGatewayServer(svc MonitoringServiceHandler, opts ...connect_gateway.HandlerOption) *MonitoringServiceGatewayServer {
	return &MonitoringServiceGatewayServer{
		listConnections: connect_gateway.NewUnaryHandler(MonitoringServiceListConnectionsProcedure, svc.ListConnections, opts...),
	}
}

func (s *MonitoringServiceGatewayServer) ListConnections(ctx context.Context, req *v1.ListConnectionsRequest) (*v1.ListConnectionsResponse, error) {
	return s.listConnections(ctx, req)
}

// RegisterMonitoringServiceHandlerGatewayServer registers the Connect handlers for the
// MonitoringService "svc" to "mux".
func RegisterMonitoringServiceHandlerGatewayServer(mux *runtime.ServeMux, svc MonitoringServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1.RegisterMonitoringServiceHandlerServer(context.TODO(), mux, NewMonitoringServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
