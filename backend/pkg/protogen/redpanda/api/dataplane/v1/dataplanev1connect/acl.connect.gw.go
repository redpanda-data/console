// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/acl.proto

package dataplanev1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// ACLServiceGatewayServer implements the gRPC server API for the ACLService service.
type ACLServiceGatewayServer struct {
	v1.UnimplementedACLServiceServer
	listACLs   connect_gateway.UnaryHandler[v1.ListACLsRequest, v1.ListACLsResponse]
	createACL  connect_gateway.UnaryHandler[v1.CreateACLRequest, v1.CreateACLResponse]
	deleteACLs connect_gateway.UnaryHandler[v1.DeleteACLsRequest, v1.DeleteACLsResponse]
}

// NewACLServiceGatewayServer constructs a Connect-Gateway gRPC server for the ACLService service.
func NewACLServiceGatewayServer(svc ACLServiceHandler, opts ...connect_gateway.HandlerOption) *ACLServiceGatewayServer {
	return &ACLServiceGatewayServer{
		listACLs:   connect_gateway.NewUnaryHandler(ACLServiceListACLsProcedure, svc.ListACLs, opts...),
		createACL:  connect_gateway.NewUnaryHandler(ACLServiceCreateACLProcedure, svc.CreateACL, opts...),
		deleteACLs: connect_gateway.NewUnaryHandler(ACLServiceDeleteACLsProcedure, svc.DeleteACLs, opts...),
	}
}

func (s *ACLServiceGatewayServer) ListACLs(ctx context.Context, req *v1.ListACLsRequest) (*v1.ListACLsResponse, error) {
	return s.listACLs(ctx, req)
}

func (s *ACLServiceGatewayServer) CreateACL(ctx context.Context, req *v1.CreateACLRequest) (*v1.CreateACLResponse, error) {
	return s.createACL(ctx, req)
}

func (s *ACLServiceGatewayServer) DeleteACLs(ctx context.Context, req *v1.DeleteACLsRequest) (*v1.DeleteACLsResponse, error) {
	return s.deleteACLs(ctx, req)
}

// RegisterACLServiceHandlerGatewayServer registers the Connect handlers for the ACLService "svc" to
// "mux".
func RegisterACLServiceHandlerGatewayServer(mux *runtime.ServeMux, svc ACLServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1.RegisterACLServiceHandlerServer(context.TODO(), mux, NewACLServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
