// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1/pipeline.proto

package dataplanev1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

// PipelineServiceGatewayServer implements the gRPC server API for the PipelineService service.
type PipelineServiceGatewayServer struct {
	v1.UnimplementedPipelineServiceServer
	createPipeline                 connect_gateway.UnaryHandler[v1.CreatePipelineRequest, v1.CreatePipelineResponse]
	getPipeline                    connect_gateway.UnaryHandler[v1.GetPipelineRequest, v1.GetPipelineResponse]
	listPipelines                  connect_gateway.UnaryHandler[v1.ListPipelinesRequest, v1.ListPipelinesResponse]
	updatePipeline                 connect_gateway.UnaryHandler[v1.UpdatePipelineRequest, v1.UpdatePipelineResponse]
	deletePipeline                 connect_gateway.UnaryHandler[v1.DeletePipelineRequest, v1.DeletePipelineResponse]
	stopPipeline                   connect_gateway.UnaryHandler[v1.StopPipelineRequest, v1.StopPipelineResponse]
	startPipeline                  connect_gateway.UnaryHandler[v1.StartPipelineRequest, v1.StartPipelineResponse]
	getPipelineServiceConfigSchema connect_gateway.UnaryHandler[v1.GetPipelineServiceConfigSchemaRequest, v1.GetPipelineServiceConfigSchemaResponse]
	getPipelinesForSecret          connect_gateway.UnaryHandler[v1.GetPipelinesForSecretRequest, v1.GetPipelinesForSecretResponse]
	getPipelinesBySecrets          connect_gateway.UnaryHandler[v1.GetPipelinesBySecretsRequest, v1.GetPipelinesBySecretsResponse]
}

// NewPipelineServiceGatewayServer constructs a Connect-Gateway gRPC server for the PipelineService
// service.
func NewPipelineServiceGatewayServer(svc PipelineServiceHandler, opts ...connect_gateway.HandlerOption) *PipelineServiceGatewayServer {
	return &PipelineServiceGatewayServer{
		createPipeline:                 connect_gateway.NewUnaryHandler(PipelineServiceCreatePipelineProcedure, svc.CreatePipeline, opts...),
		getPipeline:                    connect_gateway.NewUnaryHandler(PipelineServiceGetPipelineProcedure, svc.GetPipeline, opts...),
		listPipelines:                  connect_gateway.NewUnaryHandler(PipelineServiceListPipelinesProcedure, svc.ListPipelines, opts...),
		updatePipeline:                 connect_gateway.NewUnaryHandler(PipelineServiceUpdatePipelineProcedure, svc.UpdatePipeline, opts...),
		deletePipeline:                 connect_gateway.NewUnaryHandler(PipelineServiceDeletePipelineProcedure, svc.DeletePipeline, opts...),
		stopPipeline:                   connect_gateway.NewUnaryHandler(PipelineServiceStopPipelineProcedure, svc.StopPipeline, opts...),
		startPipeline:                  connect_gateway.NewUnaryHandler(PipelineServiceStartPipelineProcedure, svc.StartPipeline, opts...),
		getPipelineServiceConfigSchema: connect_gateway.NewUnaryHandler(PipelineServiceGetPipelineServiceConfigSchemaProcedure, svc.GetPipelineServiceConfigSchema, opts...),
		getPipelinesForSecret:          connect_gateway.NewUnaryHandler(PipelineServiceGetPipelinesForSecretProcedure, svc.GetPipelinesForSecret, opts...),
		getPipelinesBySecrets:          connect_gateway.NewUnaryHandler(PipelineServiceGetPipelinesBySecretsProcedure, svc.GetPipelinesBySecrets, opts...),
	}
}

func (s *PipelineServiceGatewayServer) CreatePipeline(ctx context.Context, req *v1.CreatePipelineRequest) (*v1.CreatePipelineResponse, error) {
	return s.createPipeline(ctx, req)
}

func (s *PipelineServiceGatewayServer) GetPipeline(ctx context.Context, req *v1.GetPipelineRequest) (*v1.GetPipelineResponse, error) {
	return s.getPipeline(ctx, req)
}

func (s *PipelineServiceGatewayServer) ListPipelines(ctx context.Context, req *v1.ListPipelinesRequest) (*v1.ListPipelinesResponse, error) {
	return s.listPipelines(ctx, req)
}

func (s *PipelineServiceGatewayServer) UpdatePipeline(ctx context.Context, req *v1.UpdatePipelineRequest) (*v1.UpdatePipelineResponse, error) {
	return s.updatePipeline(ctx, req)
}

func (s *PipelineServiceGatewayServer) DeletePipeline(ctx context.Context, req *v1.DeletePipelineRequest) (*v1.DeletePipelineResponse, error) {
	return s.deletePipeline(ctx, req)
}

func (s *PipelineServiceGatewayServer) StopPipeline(ctx context.Context, req *v1.StopPipelineRequest) (*v1.StopPipelineResponse, error) {
	return s.stopPipeline(ctx, req)
}

func (s *PipelineServiceGatewayServer) StartPipeline(ctx context.Context, req *v1.StartPipelineRequest) (*v1.StartPipelineResponse, error) {
	return s.startPipeline(ctx, req)
}

func (s *PipelineServiceGatewayServer) GetPipelineServiceConfigSchema(ctx context.Context, req *v1.GetPipelineServiceConfigSchemaRequest) (*v1.GetPipelineServiceConfigSchemaResponse, error) {
	return s.getPipelineServiceConfigSchema(ctx, req)
}

func (s *PipelineServiceGatewayServer) GetPipelinesForSecret(ctx context.Context, req *v1.GetPipelinesForSecretRequest) (*v1.GetPipelinesForSecretResponse, error) {
	return s.getPipelinesForSecret(ctx, req)
}

func (s *PipelineServiceGatewayServer) GetPipelinesBySecrets(ctx context.Context, req *v1.GetPipelinesBySecretsRequest) (*v1.GetPipelinesBySecretsResponse, error) {
	return s.getPipelinesBySecrets(ctx, req)
}

// RegisterPipelineServiceHandlerGatewayServer registers the Connect handlers for the
// PipelineService "svc" to "mux".
func RegisterPipelineServiceHandlerGatewayServer(mux *runtime.ServeMux, svc PipelineServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1.RegisterPipelineServiceHandlerServer(context.TODO(), mux, NewPipelineServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
