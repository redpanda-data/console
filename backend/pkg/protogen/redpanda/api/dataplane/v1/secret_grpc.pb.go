// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/api/dataplane/v1/secret.proto

package dataplanev1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretService_GetSecret_FullMethodName                = "/redpanda.api.dataplane.v1.SecretService/GetSecret"
	SecretService_ListSecrets_FullMethodName              = "/redpanda.api.dataplane.v1.SecretService/ListSecrets"
	SecretService_CreateSecret_FullMethodName             = "/redpanda.api.dataplane.v1.SecretService/CreateSecret"
	SecretService_UpdateSecret_FullMethodName             = "/redpanda.api.dataplane.v1.SecretService/UpdateSecret"
	SecretService_DeleteSecret_FullMethodName             = "/redpanda.api.dataplane.v1.SecretService/DeleteSecret"
	SecretService_ListSecretScopes_FullMethodName         = "/redpanda.api.dataplane.v1.SecretService/ListSecretScopes"
	SecretService_GetKafkaConnectSecret_FullMethodName    = "/redpanda.api.dataplane.v1.SecretService/GetKafkaConnectSecret"
	SecretService_ListKafkaConnectSecrets_FullMethodName  = "/redpanda.api.dataplane.v1.SecretService/ListKafkaConnectSecrets"
	SecretService_CreateKafkaConnectSecret_FullMethodName = "/redpanda.api.dataplane.v1.SecretService/CreateKafkaConnectSecret"
	SecretService_UpdateKafkaConnectSecret_FullMethodName = "/redpanda.api.dataplane.v1.SecretService/UpdateKafkaConnectSecret"
	SecretService_DeleteKafkaConnectSecret_FullMethodName = "/redpanda.api.dataplane.v1.SecretService/DeleteKafkaConnectSecret"
)

// SecretServiceClient is the client API for SecretService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretServiceClient interface {
	// GetSecret retrieves the specific secret.
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	// ListSecrets lists the secrets based on optional filter.
	ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
	// CreateSecret creates the secret.
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	// UpdateSecret updates the secret.
	UpdateSecret(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error)
	// DeleteSecret deletes the secret.
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	// ListSecretScopes lists the supported secret scopes.
	ListSecretScopes(ctx context.Context, in *ListSecretScopesRequest, opts ...grpc.CallOption) (*ListSecretScopesResponse, error)
	// GetKafkaConnectSecret retrieves the specific secret for a specific Connect.
	GetKafkaConnectSecret(ctx context.Context, in *GetKafkaConnectSecretRequest, opts ...grpc.CallOption) (*GetKafkaConnectSecretResponse, error)
	// ListKafkaConnectSecrets lists the Connect secrets based on optional filter.
	ListKafkaConnectSecrets(ctx context.Context, in *ListKafkaConnectSecretsRequest, opts ...grpc.CallOption) (*ListKafkaConnectSecretsResponse, error)
	// CreateKafkaConnectSecret creates the secret for a Connect.
	CreateKafkaConnectSecret(ctx context.Context, in *CreateKafkaConnectSecretRequest, opts ...grpc.CallOption) (*CreateKafkaConnectSecretResponse, error)
	// UpdateKafkaConnectSecret updates the Connect secret.
	UpdateKafkaConnectSecret(ctx context.Context, in *UpdateKafkaConnectSecretRequest, opts ...grpc.CallOption) (*UpdateKafkaConnectSecretResponse, error)
	// DeleteKafkaConnectSecret deletes the secret.
	DeleteKafkaConnectSecret(ctx context.Context, in *DeleteKafkaConnectSecretRequest, opts ...grpc.CallOption) (*DeleteKafkaConnectSecretResponse, error)
}

type secretServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretServiceClient(cc grpc.ClientConnInterface) SecretServiceClient {
	return &secretServiceClient{cc}
}

func (c *secretServiceClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretsResponse)
	err := c.cc.Invoke(ctx, SecretService_ListSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_CreateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) UpdateSecret(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_UpdateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) ListSecretScopes(ctx context.Context, in *ListSecretScopesRequest, opts ...grpc.CallOption) (*ListSecretScopesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretScopesResponse)
	err := c.cc.Invoke(ctx, SecretService_ListSecretScopes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) GetKafkaConnectSecret(ctx context.Context, in *GetKafkaConnectSecretRequest, opts ...grpc.CallOption) (*GetKafkaConnectSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKafkaConnectSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_GetKafkaConnectSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) ListKafkaConnectSecrets(ctx context.Context, in *ListKafkaConnectSecretsRequest, opts ...grpc.CallOption) (*ListKafkaConnectSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKafkaConnectSecretsResponse)
	err := c.cc.Invoke(ctx, SecretService_ListKafkaConnectSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) CreateKafkaConnectSecret(ctx context.Context, in *CreateKafkaConnectSecretRequest, opts ...grpc.CallOption) (*CreateKafkaConnectSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKafkaConnectSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_CreateKafkaConnectSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) UpdateKafkaConnectSecret(ctx context.Context, in *UpdateKafkaConnectSecretRequest, opts ...grpc.CallOption) (*UpdateKafkaConnectSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKafkaConnectSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_UpdateKafkaConnectSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) DeleteKafkaConnectSecret(ctx context.Context, in *DeleteKafkaConnectSecretRequest, opts ...grpc.CallOption) (*DeleteKafkaConnectSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKafkaConnectSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_DeleteKafkaConnectSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretServiceServer is the server API for SecretService service.
// All implementations must embed UnimplementedSecretServiceServer
// for forward compatibility.
type SecretServiceServer interface {
	// GetSecret retrieves the specific secret.
	GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error)
	// ListSecrets lists the secrets based on optional filter.
	ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	// CreateSecret creates the secret.
	CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	// UpdateSecret updates the secret.
	UpdateSecret(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error)
	// DeleteSecret deletes the secret.
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	// ListSecretScopes lists the supported secret scopes.
	ListSecretScopes(context.Context, *ListSecretScopesRequest) (*ListSecretScopesResponse, error)
	// GetKafkaConnectSecret retrieves the specific secret for a specific Connect.
	GetKafkaConnectSecret(context.Context, *GetKafkaConnectSecretRequest) (*GetKafkaConnectSecretResponse, error)
	// ListKafkaConnectSecrets lists the Connect secrets based on optional filter.
	ListKafkaConnectSecrets(context.Context, *ListKafkaConnectSecretsRequest) (*ListKafkaConnectSecretsResponse, error)
	// CreateKafkaConnectSecret creates the secret for a Connect.
	CreateKafkaConnectSecret(context.Context, *CreateKafkaConnectSecretRequest) (*CreateKafkaConnectSecretResponse, error)
	// UpdateKafkaConnectSecret updates the Connect secret.
	UpdateKafkaConnectSecret(context.Context, *UpdateKafkaConnectSecretRequest) (*UpdateKafkaConnectSecretResponse, error)
	// DeleteKafkaConnectSecret deletes the secret.
	DeleteKafkaConnectSecret(context.Context, *DeleteKafkaConnectSecretRequest) (*DeleteKafkaConnectSecretResponse, error)
	mustEmbedUnimplementedSecretServiceServer()
}

// UnimplementedSecretServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretServiceServer struct{}

func (UnimplementedSecretServiceServer) GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedSecretServiceServer) ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedSecretServiceServer) CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedSecretServiceServer) UpdateSecret(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedSecretServiceServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSecretServiceServer) ListSecretScopes(context.Context, *ListSecretScopesRequest) (*ListSecretScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecretScopes not implemented")
}
func (UnimplementedSecretServiceServer) GetKafkaConnectSecret(context.Context, *GetKafkaConnectSecretRequest) (*GetKafkaConnectSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKafkaConnectSecret not implemented")
}
func (UnimplementedSecretServiceServer) ListKafkaConnectSecrets(context.Context, *ListKafkaConnectSecretsRequest) (*ListKafkaConnectSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKafkaConnectSecrets not implemented")
}
func (UnimplementedSecretServiceServer) CreateKafkaConnectSecret(context.Context, *CreateKafkaConnectSecretRequest) (*CreateKafkaConnectSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKafkaConnectSecret not implemented")
}
func (UnimplementedSecretServiceServer) UpdateKafkaConnectSecret(context.Context, *UpdateKafkaConnectSecretRequest) (*UpdateKafkaConnectSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKafkaConnectSecret not implemented")
}
func (UnimplementedSecretServiceServer) DeleteKafkaConnectSecret(context.Context, *DeleteKafkaConnectSecretRequest) (*DeleteKafkaConnectSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKafkaConnectSecret not implemented")
}
func (UnimplementedSecretServiceServer) mustEmbedUnimplementedSecretServiceServer() {}
func (UnimplementedSecretServiceServer) testEmbeddedByValue()                       {}

// UnsafeSecretServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretServiceServer will
// result in compilation errors.
type UnsafeSecretServiceServer interface {
	mustEmbedUnimplementedSecretServiceServer()
}

func RegisterSecretServiceServer(s grpc.ServiceRegistrar, srv SecretServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretService_ServiceDesc, srv)
}

func _SecretService_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).ListSecrets(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_UpdateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).UpdateSecret(ctx, req.(*UpdateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_ListSecretScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).ListSecretScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_ListSecretScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).ListSecretScopes(ctx, req.(*ListSecretScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_GetKafkaConnectSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKafkaConnectSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).GetKafkaConnectSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_GetKafkaConnectSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).GetKafkaConnectSecret(ctx, req.(*GetKafkaConnectSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_ListKafkaConnectSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKafkaConnectSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).ListKafkaConnectSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_ListKafkaConnectSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).ListKafkaConnectSecrets(ctx, req.(*ListKafkaConnectSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_CreateKafkaConnectSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKafkaConnectSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).CreateKafkaConnectSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_CreateKafkaConnectSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).CreateKafkaConnectSecret(ctx, req.(*CreateKafkaConnectSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_UpdateKafkaConnectSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKafkaConnectSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).UpdateKafkaConnectSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_UpdateKafkaConnectSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).UpdateKafkaConnectSecret(ctx, req.(*UpdateKafkaConnectSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_DeleteKafkaConnectSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKafkaConnectSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).DeleteKafkaConnectSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_DeleteKafkaConnectSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).DeleteKafkaConnectSecret(ctx, req.(*DeleteKafkaConnectSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretService_ServiceDesc is the grpc.ServiceDesc for SecretService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.dataplane.v1.SecretService",
	HandlerType: (*SecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecret",
			Handler:    _SecretService_GetSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _SecretService_ListSecrets_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _SecretService_CreateSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _SecretService_UpdateSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _SecretService_DeleteSecret_Handler,
		},
		{
			MethodName: "ListSecretScopes",
			Handler:    _SecretService_ListSecretScopes_Handler,
		},
		{
			MethodName: "GetKafkaConnectSecret",
			Handler:    _SecretService_GetKafkaConnectSecret_Handler,
		},
		{
			MethodName: "ListKafkaConnectSecrets",
			Handler:    _SecretService_ListKafkaConnectSecrets_Handler,
		},
		{
			MethodName: "CreateKafkaConnectSecret",
			Handler:    _SecretService_CreateKafkaConnectSecret_Handler,
		},
		{
			MethodName: "UpdateKafkaConnectSecret",
			Handler:    _SecretService_UpdateKafkaConnectSecret_Handler,
		},
		{
			MethodName: "DeleteKafkaConnectSecret",
			Handler:    _SecretService_DeleteKafkaConnectSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/api/dataplane/v1/secret.proto",
}
