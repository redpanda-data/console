// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1/quota.proto

package dataplanev1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of entity that the quota applies to.
type Quota_EntityType int32

const (
	Quota_ENTITY_TYPE_UNSPECIFIED      Quota_EntityType = 0
	Quota_ENTITY_TYPE_CLIENT_ID        Quota_EntityType = 1
	Quota_ENTITY_TYPE_CLIENT_ID_PREFIX Quota_EntityType = 2
	Quota_ENTITY_TYPE_USER             Quota_EntityType = 3 // Not supported in Redpanda
	Quota_ENTITY_TYPE_IP               Quota_EntityType = 4 // Not supported in Redpanda
)

// Enum value maps for Quota_EntityType.
var (
	Quota_EntityType_name = map[int32]string{
		0: "ENTITY_TYPE_UNSPECIFIED",
		1: "ENTITY_TYPE_CLIENT_ID",
		2: "ENTITY_TYPE_CLIENT_ID_PREFIX",
		3: "ENTITY_TYPE_USER",
		4: "ENTITY_TYPE_IP",
	}
	Quota_EntityType_value = map[string]int32{
		"ENTITY_TYPE_UNSPECIFIED":      0,
		"ENTITY_TYPE_CLIENT_ID":        1,
		"ENTITY_TYPE_CLIENT_ID_PREFIX": 2,
		"ENTITY_TYPE_USER":             3,
		"ENTITY_TYPE_IP":               4,
	}
)

func (x Quota_EntityType) Enum() *Quota_EntityType {
	p := new(Quota_EntityType)
	*p = x
	return p
}

func (x Quota_EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quota_EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_quota_proto_enumTypes[0].Descriptor()
}

func (Quota_EntityType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_quota_proto_enumTypes[0]
}

func (x Quota_EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Quota_EntityType.Descriptor instead.
func (Quota_EntityType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0, 0}
}

// The type of value that the quota represents.
type Quota_ValueType int32

const (
	Quota_VALUE_TYPE_UNSPECIFIED Quota_ValueType = 0
	// The rate at which producers can send data.
	Quota_VALUE_TYPE_PRODUCER_BYTE_RATE Quota_ValueType = 1
	// The rate at which consumers can fetch data.
	Quota_VALUE_TYPE_CONSUMER_BYTE_RATE Quota_ValueType = 2
	// The rate at which topic mutation requests can be made.
	Quota_VALUE_TYPE_CONTROLLER_MUTATION_RATE Quota_ValueType = 3
	// The percentage of the total throughput that can be used by the entity.
	Quota_VALUE_TYPE_REQUEST_PERCENTAGE Quota_ValueType = 4 // Not supported in Redpanda
)

// Enum value maps for Quota_ValueType.
var (
	Quota_ValueType_name = map[int32]string{
		0: "VALUE_TYPE_UNSPECIFIED",
		1: "VALUE_TYPE_PRODUCER_BYTE_RATE",
		2: "VALUE_TYPE_CONSUMER_BYTE_RATE",
		3: "VALUE_TYPE_CONTROLLER_MUTATION_RATE",
		4: "VALUE_TYPE_REQUEST_PERCENTAGE",
	}
	Quota_ValueType_value = map[string]int32{
		"VALUE_TYPE_UNSPECIFIED":              0,
		"VALUE_TYPE_PRODUCER_BYTE_RATE":       1,
		"VALUE_TYPE_CONSUMER_BYTE_RATE":       2,
		"VALUE_TYPE_CONTROLLER_MUTATION_RATE": 3,
		"VALUE_TYPE_REQUEST_PERCENTAGE":       4,
	}
)

func (x Quota_ValueType) Enum() *Quota_ValueType {
	p := new(Quota_ValueType)
	*p = x
	return p
}

func (x Quota_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quota_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_quota_proto_enumTypes[1].Descriptor()
}

func (Quota_ValueType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_quota_proto_enumTypes[1]
}

func (x Quota_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Quota_ValueType.Descriptor instead.
func (Quota_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0, 1}
}

type Quota struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quota) Reset() {
	*x = Quota{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0}
}

type ListQuotasRequest struct {
	state    protoimpl.MessageState    `protogen:"open.v1"`
	Filter   *ListQuotasRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize int32                     `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuotasRequest) Reset() {
	*x = ListQuotasRequest{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuotasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotasRequest) ProtoMessage() {}

func (x *ListQuotasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotasRequest.ProtoReflect.Descriptor instead.
func (*ListQuotasRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{1}
}

func (x *ListQuotasRequest) GetFilter() *ListQuotasRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListQuotasRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListQuotasRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListQuotasResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Quotas        []*ListQuotasResponse_QuotaEntry `protobuf:"bytes,1,rep,name=quotas,proto3" json:"quotas,omitempty"`
	PageToken     string                           `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuotasResponse) Reset() {
	*x = ListQuotasResponse{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuotasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotasResponse) ProtoMessage() {}

func (x *ListQuotasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotasResponse.ProtoReflect.Descriptor instead.
func (*ListQuotasResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{2}
}

func (x *ListQuotasResponse) GetQuotas() []*ListQuotasResponse_QuotaEntry {
	if x != nil {
		return x.Quotas
	}
	return nil
}

func (x *ListQuotasResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type RequestQuotaEntity struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	EntityType Quota_EntityType       `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=redpanda.api.dataplane.v1.Quota_EntityType" json:"entity_type,omitempty"`
	// Entity name is the name of the entity type specified.
	// If left empty, the entity will be treated as a default entity (e.g., all clients).
	// If entity_type is ENTITY_TYPE_CLIENT_ID_PREFIX, this field must be set.
	EntityName    string `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestQuotaEntity) Reset() {
	*x = RequestQuotaEntity{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestQuotaEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuotaEntity) ProtoMessage() {}

func (x *RequestQuotaEntity) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuotaEntity.ProtoReflect.Descriptor instead.
func (*RequestQuotaEntity) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{3}
}

func (x *RequestQuotaEntity) GetEntityType() Quota_EntityType {
	if x != nil {
		return x.EntityType
	}
	return Quota_ENTITY_TYPE_UNSPECIFIED
}

func (x *RequestQuotaEntity) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

type RequestQuotaValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValueType     Quota_ValueType        `protobuf:"varint,1,opt,name=value_type,json=valueType,proto3,enum=redpanda.api.dataplane.v1.Quota_ValueType" json:"value_type,omitempty"`
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestQuotaValue) Reset() {
	*x = RequestQuotaValue{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestQuotaValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuotaValue) ProtoMessage() {}

func (x *RequestQuotaValue) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuotaValue.ProtoReflect.Descriptor instead.
func (*RequestQuotaValue) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{4}
}

func (x *RequestQuotaValue) GetValueType() Quota_ValueType {
	if x != nil {
		return x.ValueType
	}
	return Quota_VALUE_TYPE_UNSPECIFIED
}

func (x *RequestQuotaValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type BatchSetQuotaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of quota settings to apply. Each setting pairs an entity
	// with the specific values to be set for it.
	Settings      []*BatchSetQuotaRequest_QuotaSetting `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSetQuotaRequest) Reset() {
	*x = BatchSetQuotaRequest{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSetQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetQuotaRequest) ProtoMessage() {}

func (x *BatchSetQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetQuotaRequest.ProtoReflect.Descriptor instead.
func (*BatchSetQuotaRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{5}
}

func (x *BatchSetQuotaRequest) GetSettings() []*BatchSetQuotaRequest_QuotaSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type QuotaOperationResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuotaOperationResult) Reset() {
	*x = QuotaOperationResult{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaOperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaOperationResult) ProtoMessage() {}

func (x *QuotaOperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaOperationResult.ProtoReflect.Descriptor instead.
func (*QuotaOperationResult) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{6}
}

type BatchSetQuotaResponse struct {
	state              protoimpl.MessageState                   `protogen:"open.v1"`
	SuccessfulEntities []*QuotaOperationResult_SuccessfulEntity `protobuf:"bytes,1,rep,name=successful_entities,json=successfulEntities,proto3" json:"successful_entities,omitempty"`
	FailedEntities     []*QuotaOperationResult_FailedEntity     `protobuf:"bytes,2,rep,name=failed_entities,json=failedEntities,proto3" json:"failed_entities,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BatchSetQuotaResponse) Reset() {
	*x = BatchSetQuotaResponse{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSetQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetQuotaResponse) ProtoMessage() {}

func (x *BatchSetQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetQuotaResponse.ProtoReflect.Descriptor instead.
func (*BatchSetQuotaResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{7}
}

func (x *BatchSetQuotaResponse) GetSuccessfulEntities() []*QuotaOperationResult_SuccessfulEntity {
	if x != nil {
		return x.SuccessfulEntities
	}
	return nil
}

func (x *BatchSetQuotaResponse) GetFailedEntities() []*QuotaOperationResult_FailedEntity {
	if x != nil {
		return x.FailedEntities
	}
	return nil
}

type SetQuotaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The entity for which the quota is being set.
	Entity *RequestQuotaEntity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	// The value that should be set for the specified entity.
	Value         *RequestQuotaValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetQuotaRequest) Reset() {
	*x = SetQuotaRequest{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuotaRequest) ProtoMessage() {}

func (x *SetQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuotaRequest.ProtoReflect.Descriptor instead.
func (*SetQuotaRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{8}
}

func (x *SetQuotaRequest) GetEntity() *RequestQuotaEntity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SetQuotaRequest) GetValue() *RequestQuotaValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type SetQuotaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetQuotaResponse) Reset() {
	*x = SetQuotaResponse{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuotaResponse) ProtoMessage() {}

func (x *SetQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuotaResponse.ProtoReflect.Descriptor instead.
func (*SetQuotaResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{9}
}

type BatchDeleteQuotaRequest struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Deletions     []*BatchDeleteQuotaRequest_QuotaDeletion `protobuf:"bytes,1,rep,name=deletions,proto3" json:"deletions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteQuotaRequest) Reset() {
	*x = BatchDeleteQuotaRequest{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteQuotaRequest) ProtoMessage() {}

func (x *BatchDeleteQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteQuotaRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteQuotaRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{10}
}

func (x *BatchDeleteQuotaRequest) GetDeletions() []*BatchDeleteQuotaRequest_QuotaDeletion {
	if x != nil {
		return x.Deletions
	}
	return nil
}

type BatchDeleteQuotaResponse struct {
	state              protoimpl.MessageState                   `protogen:"open.v1"`
	SuccessfulEntities []*QuotaOperationResult_SuccessfulEntity `protobuf:"bytes,1,rep,name=successful_entities,json=successfulEntities,proto3" json:"successful_entities,omitempty"`
	FailedEntities     []*QuotaOperationResult_FailedEntity     `protobuf:"bytes,2,rep,name=failed_entities,json=failedEntities,proto3" json:"failed_entities,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BatchDeleteQuotaResponse) Reset() {
	*x = BatchDeleteQuotaResponse{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteQuotaResponse) ProtoMessage() {}

func (x *BatchDeleteQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteQuotaResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteQuotaResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{11}
}

func (x *BatchDeleteQuotaResponse) GetSuccessfulEntities() []*QuotaOperationResult_SuccessfulEntity {
	if x != nil {
		return x.SuccessfulEntities
	}
	return nil
}

func (x *BatchDeleteQuotaResponse) GetFailedEntities() []*QuotaOperationResult_FailedEntity {
	if x != nil {
		return x.FailedEntities
	}
	return nil
}

type DeleteQuotaRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Entity *RequestQuotaEntity    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	// Value that should be deleted for the specified entity
	ValueType     Quota_ValueType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=redpanda.api.dataplane.v1.Quota_ValueType" json:"value_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuotaRequest) Reset() {
	*x = DeleteQuotaRequest{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuotaRequest) ProtoMessage() {}

func (x *DeleteQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuotaRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuotaRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteQuotaRequest) GetEntity() *RequestQuotaEntity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *DeleteQuotaRequest) GetValueType() Quota_ValueType {
	if x != nil {
		return x.ValueType
	}
	return Quota_VALUE_TYPE_UNSPECIFIED
}

type DeleteQuotaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuotaResponse) Reset() {
	*x = DeleteQuotaResponse{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuotaResponse) ProtoMessage() {}

func (x *DeleteQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuotaResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuotaResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{13}
}

type Quota_Entity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityType    Quota_EntityType       `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=redpanda.api.dataplane.v1.Quota_EntityType" json:"entity_type,omitempty"`
	EntityName    string                 `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quota_Entity) Reset() {
	*x = Quota_Entity{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quota_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota_Entity) ProtoMessage() {}

func (x *Quota_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota_Entity.ProtoReflect.Descriptor instead.
func (*Quota_Entity) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Quota_Entity) GetEntityType() Quota_EntityType {
	if x != nil {
		return x.EntityType
	}
	return Quota_ENTITY_TYPE_UNSPECIFIED
}

func (x *Quota_Entity) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

type Quota_Value struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValueType     Quota_ValueType        `protobuf:"varint,1,opt,name=value_type,json=valueType,proto3,enum=redpanda.api.dataplane.v1.Quota_ValueType" json:"value_type,omitempty"`
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quota_Value) Reset() {
	*x = Quota_Value{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quota_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota_Value) ProtoMessage() {}

func (x *Quota_Value) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota_Value.ProtoReflect.Descriptor instead.
func (*Quota_Value) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Quota_Value) GetValueType() Quota_ValueType {
	if x != nil {
		return x.ValueType
	}
	return Quota_VALUE_TYPE_UNSPECIFIED
}

func (x *Quota_Value) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ListQuotasRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of entity to filter by. If  unspecified, all entities will be returned.
	EntityType Quota_EntityType `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=redpanda.api.dataplane.v1.Quota_EntityType" json:"entity_type,omitempty"`
	// Optional: The exact name of the entity to filter by. If not specified, all entities of the specified type will be returned.
	// Defaults to returning all entities of the specified type. To return default entity (e.g., default client-id), use "<default>".
	EntityName    string `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	MatchDefault  bool   `protobuf:"varint,3,opt,name=match_default,json=matchDefault,proto3" json:"match_default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuotasRequest_Filter) Reset() {
	*x = ListQuotasRequest_Filter{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuotasRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotasRequest_Filter) ProtoMessage() {}

func (x *ListQuotasRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotasRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListQuotasRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListQuotasRequest_Filter) GetEntityType() Quota_EntityType {
	if x != nil {
		return x.EntityType
	}
	return Quota_ENTITY_TYPE_UNSPECIFIED
}

func (x *ListQuotasRequest_Filter) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

func (x *ListQuotasRequest_Filter) GetMatchDefault() bool {
	if x != nil {
		return x.MatchDefault
	}
	return false
}

// QuotaEntry represents the quota for a specific entity type.
type ListQuotasResponse_QuotaEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *Quota_Entity          `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Values        []*Quota_Value         `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuotasResponse_QuotaEntry) Reset() {
	*x = ListQuotasResponse_QuotaEntry{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuotasResponse_QuotaEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotasResponse_QuotaEntry) ProtoMessage() {}

func (x *ListQuotasResponse_QuotaEntry) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotasResponse_QuotaEntry.ProtoReflect.Descriptor instead.
func (*ListQuotasResponse_QuotaEntry) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ListQuotasResponse_QuotaEntry) GetEntity() *Quota_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListQuotasResponse_QuotaEntry) GetValues() []*Quota_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type BatchSetQuotaRequest_QuotaSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *RequestQuotaEntity    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Values        []*RequestQuotaValue   `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSetQuotaRequest_QuotaSetting) Reset() {
	*x = BatchSetQuotaRequest_QuotaSetting{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSetQuotaRequest_QuotaSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetQuotaRequest_QuotaSetting) ProtoMessage() {}

func (x *BatchSetQuotaRequest_QuotaSetting) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetQuotaRequest_QuotaSetting.ProtoReflect.Descriptor instead.
func (*BatchSetQuotaRequest_QuotaSetting) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BatchSetQuotaRequest_QuotaSetting) GetEntity() *RequestQuotaEntity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *BatchSetQuotaRequest_QuotaSetting) GetValues() []*RequestQuotaValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type QuotaOperationResult_SuccessfulEntity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityType    Quota_EntityType       `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=redpanda.api.dataplane.v1.Quota_EntityType" json:"entity_type,omitempty"`
	EntityName    string                 `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuotaOperationResult_SuccessfulEntity) Reset() {
	*x = QuotaOperationResult_SuccessfulEntity{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaOperationResult_SuccessfulEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaOperationResult_SuccessfulEntity) ProtoMessage() {}

func (x *QuotaOperationResult_SuccessfulEntity) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaOperationResult_SuccessfulEntity.ProtoReflect.Descriptor instead.
func (*QuotaOperationResult_SuccessfulEntity) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{6, 0}
}

func (x *QuotaOperationResult_SuccessfulEntity) GetEntityType() Quota_EntityType {
	if x != nil {
		return x.EntityType
	}
	return Quota_ENTITY_TYPE_UNSPECIFIED
}

func (x *QuotaOperationResult_SuccessfulEntity) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

type QuotaOperationResult_FailedEntity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityType    Quota_EntityType       `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=redpanda.api.dataplane.v1.Quota_EntityType" json:"entity_type,omitempty"`
	EntityName    string                 `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	ErrorCode     int32                  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuotaOperationResult_FailedEntity) Reset() {
	*x = QuotaOperationResult_FailedEntity{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaOperationResult_FailedEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaOperationResult_FailedEntity) ProtoMessage() {}

func (x *QuotaOperationResult_FailedEntity) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaOperationResult_FailedEntity.ProtoReflect.Descriptor instead.
func (*QuotaOperationResult_FailedEntity) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{6, 1}
}

func (x *QuotaOperationResult_FailedEntity) GetEntityType() Quota_EntityType {
	if x != nil {
		return x.EntityType
	}
	return Quota_ENTITY_TYPE_UNSPECIFIED
}

func (x *QuotaOperationResult_FailedEntity) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

func (x *QuotaOperationResult_FailedEntity) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *QuotaOperationResult_FailedEntity) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type BatchDeleteQuotaRequest_QuotaDeletion struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Entity *RequestQuotaEntity    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	// Value that should be deleted for the specified entity
	ValueTypes    []Quota_ValueType `protobuf:"varint,2,rep,packed,name=value_types,json=valueTypes,proto3,enum=redpanda.api.dataplane.v1.Quota_ValueType" json:"value_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteQuotaRequest_QuotaDeletion) Reset() {
	*x = BatchDeleteQuotaRequest_QuotaDeletion{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteQuotaRequest_QuotaDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteQuotaRequest_QuotaDeletion) ProtoMessage() {}

func (x *BatchDeleteQuotaRequest_QuotaDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteQuotaRequest_QuotaDeletion.ProtoReflect.Descriptor instead.
func (*BatchDeleteQuotaRequest_QuotaDeletion) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{10, 0}
}

func (x *BatchDeleteQuotaRequest_QuotaDeletion) GetEntity() *RequestQuotaEntity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *BatchDeleteQuotaRequest_QuotaDeletion) GetValueTypes() []Quota_ValueType {
	if x != nil {
		return x.ValueTypes
	}
	return nil
}

var File_redpanda_api_dataplane_v1_quota_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1_quota_proto_rawDesc = []byte{
	0x0a, 0x25, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x04, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x1a, 0x77, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x68, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x04, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52,
	0x5f, 0x4d, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x04, 0x22, 0x9f, 0x05, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x8b, 0x01, 0x92, 0x41, 0x75,
	0x32, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x31, 0x30, 0x30, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x2d, 0x31, 0x20, 0x74, 0x6f, 0x20,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xf0, 0xbf, 0xba, 0x48, 0x10, 0x1a, 0x0e, 0x18, 0xe8, 0x07, 0x28, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0xf1, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x7a, 0x92, 0x41, 0x5b, 0x32, 0x59, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79,
	0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x20, 0x49, 0x66,
	0x20, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0xba, 0x48, 0x19, 0x72, 0x17, 0x18, 0xf9, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x5c, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x28, 0x65, 0x2e,
	0x67, 0x2e, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2d, 0x69, 0x64, 0x29, 0x2e, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xec, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12, 0x74,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x55, 0x92, 0x41, 0x52, 0x32, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x74,
	0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
	0x65, 0x78, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2c, 0x20, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x8d, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xba,
	0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x9d, 0x01, 0xba, 0x48, 0x99, 0x01,
	0x1a, 0x96, 0x01, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x1a, 0x2f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x32, 0x20,
	0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x58, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xa6, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x0c, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x14, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xac, 0x01,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x12, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc3, 0x02, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0xba, 0x48, 0x0f, 0xc8, 0x01, 0x01, 0x92, 0x01,
	0x09, 0x22, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xb6, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xaa, 0x0e,
	0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb8,
	0x02, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12, 0x2c, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x01, 0x92, 0x41, 0xae,
	0x01, 0x12, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x1a, 0x5f,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x73, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x4a,
	0x3e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x37, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x31, 0x0a, 0x2f,
	0x1a, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a,
	0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12, 0xb6, 0x02, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd0, 0x01, 0x92, 0x41, 0xaf, 0x01, 0x12, 0x0b, 0x53, 0x65, 0x74, 0x20, 0x61, 0x20, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x1a, 0x5b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x2e,
	0x4a, 0x43, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x3c, 0x0a, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x20, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x2d, 0x1a, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x73, 0x12, 0xd5, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe0, 0x01, 0x92, 0x41, 0xb6, 0x01, 0x12, 0x13,
	0x53, 0x65, 0x74, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x73, 0x1a, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x49, 0x0a, 0x03, 0x32, 0x30, 0x31,
	0x12, 0x42, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x20, 0x53, 0x65, 0x74, 0x12, 0x34,
	0x0a, 0x32, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x12, 0x9b, 0x02, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x92, 0x41, 0x84, 0x01,
	0x12, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x1a, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x4a, 0x3f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x38, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0x32, 0x0a, 0x30, 0x1a, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xd5, 0x02, 0x0a, 0x10, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x32, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x92, 0x41, 0xaa, 0x01, 0x12, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x73, 0x1a, 0x4a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4a, 0x44, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3d, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x37,
	0x0a, 0x35, 0x1a, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x1a, 0xd7, 0x01, 0x92, 0x41, 0xd3, 0x01, 0x0a, 0x06, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12,
	0xc8, 0x01, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x5b, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x20, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2d, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x2f, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2d, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x29, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x8f, 0x02, 0x0a, 0x1d, 0x63,
	0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x44, 0xaa, 0x02, 0x19,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x25, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1_quota_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1_quota_proto_rawDescData = file_redpanda_api_dataplane_v1_quota_proto_rawDesc
)

func file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1_quota_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1_quota_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1_quota_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescData
}

var file_redpanda_api_dataplane_v1_quota_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_redpanda_api_dataplane_v1_quota_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_redpanda_api_dataplane_v1_quota_proto_goTypes = []any{
	(Quota_EntityType)(0),                         // 0: redpanda.api.dataplane.v1.Quota.EntityType
	(Quota_ValueType)(0),                          // 1: redpanda.api.dataplane.v1.Quota.ValueType
	(*Quota)(nil),                                 // 2: redpanda.api.dataplane.v1.Quota
	(*ListQuotasRequest)(nil),                     // 3: redpanda.api.dataplane.v1.ListQuotasRequest
	(*ListQuotasResponse)(nil),                    // 4: redpanda.api.dataplane.v1.ListQuotasResponse
	(*RequestQuotaEntity)(nil),                    // 5: redpanda.api.dataplane.v1.RequestQuotaEntity
	(*RequestQuotaValue)(nil),                     // 6: redpanda.api.dataplane.v1.RequestQuotaValue
	(*BatchSetQuotaRequest)(nil),                  // 7: redpanda.api.dataplane.v1.BatchSetQuotaRequest
	(*QuotaOperationResult)(nil),                  // 8: redpanda.api.dataplane.v1.QuotaOperationResult
	(*BatchSetQuotaResponse)(nil),                 // 9: redpanda.api.dataplane.v1.BatchSetQuotaResponse
	(*SetQuotaRequest)(nil),                       // 10: redpanda.api.dataplane.v1.SetQuotaRequest
	(*SetQuotaResponse)(nil),                      // 11: redpanda.api.dataplane.v1.SetQuotaResponse
	(*BatchDeleteQuotaRequest)(nil),               // 12: redpanda.api.dataplane.v1.BatchDeleteQuotaRequest
	(*BatchDeleteQuotaResponse)(nil),              // 13: redpanda.api.dataplane.v1.BatchDeleteQuotaResponse
	(*DeleteQuotaRequest)(nil),                    // 14: redpanda.api.dataplane.v1.DeleteQuotaRequest
	(*DeleteQuotaResponse)(nil),                   // 15: redpanda.api.dataplane.v1.DeleteQuotaResponse
	(*Quota_Entity)(nil),                          // 16: redpanda.api.dataplane.v1.Quota.Entity
	(*Quota_Value)(nil),                           // 17: redpanda.api.dataplane.v1.Quota.Value
	(*ListQuotasRequest_Filter)(nil),              // 18: redpanda.api.dataplane.v1.ListQuotasRequest.Filter
	(*ListQuotasResponse_QuotaEntry)(nil),         // 19: redpanda.api.dataplane.v1.ListQuotasResponse.QuotaEntry
	(*BatchSetQuotaRequest_QuotaSetting)(nil),     // 20: redpanda.api.dataplane.v1.BatchSetQuotaRequest.QuotaSetting
	(*QuotaOperationResult_SuccessfulEntity)(nil), // 21: redpanda.api.dataplane.v1.QuotaOperationResult.SuccessfulEntity
	(*QuotaOperationResult_FailedEntity)(nil),     // 22: redpanda.api.dataplane.v1.QuotaOperationResult.FailedEntity
	(*BatchDeleteQuotaRequest_QuotaDeletion)(nil), // 23: redpanda.api.dataplane.v1.BatchDeleteQuotaRequest.QuotaDeletion
}
var file_redpanda_api_dataplane_v1_quota_proto_depIdxs = []int32{
	18, // 0: redpanda.api.dataplane.v1.ListQuotasRequest.filter:type_name -> redpanda.api.dataplane.v1.ListQuotasRequest.Filter
	19, // 1: redpanda.api.dataplane.v1.ListQuotasResponse.quotas:type_name -> redpanda.api.dataplane.v1.ListQuotasResponse.QuotaEntry
	0,  // 2: redpanda.api.dataplane.v1.RequestQuotaEntity.entity_type:type_name -> redpanda.api.dataplane.v1.Quota.EntityType
	1,  // 3: redpanda.api.dataplane.v1.RequestQuotaValue.value_type:type_name -> redpanda.api.dataplane.v1.Quota.ValueType
	20, // 4: redpanda.api.dataplane.v1.BatchSetQuotaRequest.settings:type_name -> redpanda.api.dataplane.v1.BatchSetQuotaRequest.QuotaSetting
	21, // 5: redpanda.api.dataplane.v1.BatchSetQuotaResponse.successful_entities:type_name -> redpanda.api.dataplane.v1.QuotaOperationResult.SuccessfulEntity
	22, // 6: redpanda.api.dataplane.v1.BatchSetQuotaResponse.failed_entities:type_name -> redpanda.api.dataplane.v1.QuotaOperationResult.FailedEntity
	5,  // 7: redpanda.api.dataplane.v1.SetQuotaRequest.entity:type_name -> redpanda.api.dataplane.v1.RequestQuotaEntity
	6,  // 8: redpanda.api.dataplane.v1.SetQuotaRequest.value:type_name -> redpanda.api.dataplane.v1.RequestQuotaValue
	23, // 9: redpanda.api.dataplane.v1.BatchDeleteQuotaRequest.deletions:type_name -> redpanda.api.dataplane.v1.BatchDeleteQuotaRequest.QuotaDeletion
	21, // 10: redpanda.api.dataplane.v1.BatchDeleteQuotaResponse.successful_entities:type_name -> redpanda.api.dataplane.v1.QuotaOperationResult.SuccessfulEntity
	22, // 11: redpanda.api.dataplane.v1.BatchDeleteQuotaResponse.failed_entities:type_name -> redpanda.api.dataplane.v1.QuotaOperationResult.FailedEntity
	5,  // 12: redpanda.api.dataplane.v1.DeleteQuotaRequest.entity:type_name -> redpanda.api.dataplane.v1.RequestQuotaEntity
	1,  // 13: redpanda.api.dataplane.v1.DeleteQuotaRequest.value_type:type_name -> redpanda.api.dataplane.v1.Quota.ValueType
	0,  // 14: redpanda.api.dataplane.v1.Quota.Entity.entity_type:type_name -> redpanda.api.dataplane.v1.Quota.EntityType
	1,  // 15: redpanda.api.dataplane.v1.Quota.Value.value_type:type_name -> redpanda.api.dataplane.v1.Quota.ValueType
	0,  // 16: redpanda.api.dataplane.v1.ListQuotasRequest.Filter.entity_type:type_name -> redpanda.api.dataplane.v1.Quota.EntityType
	16, // 17: redpanda.api.dataplane.v1.ListQuotasResponse.QuotaEntry.entity:type_name -> redpanda.api.dataplane.v1.Quota.Entity
	17, // 18: redpanda.api.dataplane.v1.ListQuotasResponse.QuotaEntry.values:type_name -> redpanda.api.dataplane.v1.Quota.Value
	5,  // 19: redpanda.api.dataplane.v1.BatchSetQuotaRequest.QuotaSetting.entity:type_name -> redpanda.api.dataplane.v1.RequestQuotaEntity
	6,  // 20: redpanda.api.dataplane.v1.BatchSetQuotaRequest.QuotaSetting.values:type_name -> redpanda.api.dataplane.v1.RequestQuotaValue
	0,  // 21: redpanda.api.dataplane.v1.QuotaOperationResult.SuccessfulEntity.entity_type:type_name -> redpanda.api.dataplane.v1.Quota.EntityType
	0,  // 22: redpanda.api.dataplane.v1.QuotaOperationResult.FailedEntity.entity_type:type_name -> redpanda.api.dataplane.v1.Quota.EntityType
	5,  // 23: redpanda.api.dataplane.v1.BatchDeleteQuotaRequest.QuotaDeletion.entity:type_name -> redpanda.api.dataplane.v1.RequestQuotaEntity
	1,  // 24: redpanda.api.dataplane.v1.BatchDeleteQuotaRequest.QuotaDeletion.value_types:type_name -> redpanda.api.dataplane.v1.Quota.ValueType
	3,  // 25: redpanda.api.dataplane.v1.QuotaService.ListQuotas:input_type -> redpanda.api.dataplane.v1.ListQuotasRequest
	10, // 26: redpanda.api.dataplane.v1.QuotaService.SetQuota:input_type -> redpanda.api.dataplane.v1.SetQuotaRequest
	7,  // 27: redpanda.api.dataplane.v1.QuotaService.BatchSetQuota:input_type -> redpanda.api.dataplane.v1.BatchSetQuotaRequest
	14, // 28: redpanda.api.dataplane.v1.QuotaService.DeleteQuota:input_type -> redpanda.api.dataplane.v1.DeleteQuotaRequest
	12, // 29: redpanda.api.dataplane.v1.QuotaService.BatchDeleteQuota:input_type -> redpanda.api.dataplane.v1.BatchDeleteQuotaRequest
	4,  // 30: redpanda.api.dataplane.v1.QuotaService.ListQuotas:output_type -> redpanda.api.dataplane.v1.ListQuotasResponse
	11, // 31: redpanda.api.dataplane.v1.QuotaService.SetQuota:output_type -> redpanda.api.dataplane.v1.SetQuotaResponse
	9,  // 32: redpanda.api.dataplane.v1.QuotaService.BatchSetQuota:output_type -> redpanda.api.dataplane.v1.BatchSetQuotaResponse
	15, // 33: redpanda.api.dataplane.v1.QuotaService.DeleteQuota:output_type -> redpanda.api.dataplane.v1.DeleteQuotaResponse
	13, // 34: redpanda.api.dataplane.v1.QuotaService.BatchDeleteQuota:output_type -> redpanda.api.dataplane.v1.BatchDeleteQuotaResponse
	30, // [30:35] is the sub-list for method output_type
	25, // [25:30] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1_quota_proto_init() }
func file_redpanda_api_dataplane_v1_quota_proto_init() {
	if File_redpanda_api_dataplane_v1_quota_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1_quota_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1_quota_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1_quota_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1_quota_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1_quota_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1_quota_proto = out.File
	file_redpanda_api_dataplane_v1_quota_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1_quota_proto_goTypes = nil
	file_redpanda_api_dataplane_v1_quota_proto_depIdxs = nil
}
