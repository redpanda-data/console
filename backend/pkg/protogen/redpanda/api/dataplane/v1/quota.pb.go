// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1/quota.proto

package dataplanev1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of entity that the quota applies to.
type Quota_EntityType int32

const (
	Quota_ENTITY_TYPE_UNSPECIFIED      Quota_EntityType = 0
	Quota_ENTITY_TYPE_ANY              Quota_EntityType = 1
	Quota_ENTITY_TYPE_CLIENT_ID        Quota_EntityType = 2
	Quota_ENTITY_TYPE_CLIENT_ID_PREFIX Quota_EntityType = 3
	Quota_ENTITY_TYPE_USER             Quota_EntityType = 4 // Not supported in Redpanda
	Quota_ENTITY_TYPE_IP               Quota_EntityType = 5 // Not supported in Redpanda
)

// Enum value maps for Quota_EntityType.
var (
	Quota_EntityType_name = map[int32]string{
		0: "ENTITY_TYPE_UNSPECIFIED",
		1: "ENTITY_TYPE_ANY",
		2: "ENTITY_TYPE_CLIENT_ID",
		3: "ENTITY_TYPE_CLIENT_ID_PREFIX",
		4: "ENTITY_TYPE_USER",
		5: "ENTITY_TYPE_IP",
	}
	Quota_EntityType_value = map[string]int32{
		"ENTITY_TYPE_UNSPECIFIED":      0,
		"ENTITY_TYPE_ANY":              1,
		"ENTITY_TYPE_CLIENT_ID":        2,
		"ENTITY_TYPE_CLIENT_ID_PREFIX": 3,
		"ENTITY_TYPE_USER":             4,
		"ENTITY_TYPE_IP":               5,
	}
)

func (x Quota_EntityType) Enum() *Quota_EntityType {
	p := new(Quota_EntityType)
	*p = x
	return p
}

func (x Quota_EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quota_EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_quota_proto_enumTypes[0].Descriptor()
}

func (Quota_EntityType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_quota_proto_enumTypes[0]
}

func (x Quota_EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Quota_EntityType.Descriptor instead.
func (Quota_EntityType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0, 0}
}

// The type of value that the quota represents.
type Quota_ValueType int32

const (
	Quota_VALUE_TYPE_UNSPECIFIED        Quota_ValueType = 0
	Quota_VALUE_TYPE_ANY                Quota_ValueType = 1
	Quota_VALUE_TYPE_PRODUCER_BYTE_RATE Quota_ValueType = 2
	Quota_VALUE_TYPE_CONSUMER_BYTE_RATE Quota_ValueType = 3
)

// Enum value maps for Quota_ValueType.
var (
	Quota_ValueType_name = map[int32]string{
		0: "VALUE_TYPE_UNSPECIFIED",
		1: "VALUE_TYPE_ANY",
		2: "VALUE_TYPE_PRODUCER_BYTE_RATE",
		3: "VALUE_TYPE_CONSUMER_BYTE_RATE",
	}
	Quota_ValueType_value = map[string]int32{
		"VALUE_TYPE_UNSPECIFIED":        0,
		"VALUE_TYPE_ANY":                1,
		"VALUE_TYPE_PRODUCER_BYTE_RATE": 2,
		"VALUE_TYPE_CONSUMER_BYTE_RATE": 3,
	}
)

func (x Quota_ValueType) Enum() *Quota_ValueType {
	p := new(Quota_ValueType)
	*p = x
	return p
}

func (x Quota_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quota_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_quota_proto_enumTypes[1].Descriptor()
}

func (Quota_ValueType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_quota_proto_enumTypes[1]
}

func (x Quota_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Quota_ValueType.Descriptor instead.
func (Quota_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0, 1}
}

// FilterType defines the type of filter to apply when listing quotas.
type ListQuotasRequest_FilterType int32

const (
	ListQuotasRequest_FILTER_TYPE_UNSPECIFIED ListQuotasRequest_FilterType = 0
	// The filter type any will return quotas for all entities.
	ListQuotasRequest_FILTER_TYPE_ANY ListQuotasRequest_FilterType = 1
	// The filter type name when specified with name
	// will return quotas for the specified client id.
	ListQuotasRequest_FILTER_TYPE_NAME ListQuotasRequest_FilterType = 2
	// The filter type default returns the default client id
	ListQuotasRequest_FILTER_TYPE_DEFAULT ListQuotasRequest_FilterType = 3
)

// Enum value maps for ListQuotasRequest_FilterType.
var (
	ListQuotasRequest_FilterType_name = map[int32]string{
		0: "FILTER_TYPE_UNSPECIFIED",
		1: "FILTER_TYPE_ANY",
		2: "FILTER_TYPE_NAME",
		3: "FILTER_TYPE_DEFAULT",
	}
	ListQuotasRequest_FilterType_value = map[string]int32{
		"FILTER_TYPE_UNSPECIFIED": 0,
		"FILTER_TYPE_ANY":         1,
		"FILTER_TYPE_NAME":        2,
		"FILTER_TYPE_DEFAULT":     3,
	}
)

func (x ListQuotasRequest_FilterType) Enum() *ListQuotasRequest_FilterType {
	p := new(ListQuotasRequest_FilterType)
	*p = x
	return p
}

func (x ListQuotasRequest_FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListQuotasRequest_FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_quota_proto_enumTypes[2].Descriptor()
}

func (ListQuotasRequest_FilterType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_quota_proto_enumTypes[2]
}

func (x ListQuotasRequest_FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListQuotasRequest_FilterType.Descriptor instead.
func (ListQuotasRequest_FilterType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{1, 0}
}

// Entity can be defined by its name or use the default value.
type RequestEntity_EntityRequestType int32

const (
	RequestEntity_ENTITY_REQUEST_TYPE_UNSPECIFIED RequestEntity_EntityRequestType = 0
	RequestEntity_ENTITY_REQUEST_TYPE_NAME        RequestEntity_EntityRequestType = 1
	RequestEntity_ENTITY_REQUEST_TYPE_DEFAULT     RequestEntity_EntityRequestType = 2
)

// Enum value maps for RequestEntity_EntityRequestType.
var (
	RequestEntity_EntityRequestType_name = map[int32]string{
		0: "ENTITY_REQUEST_TYPE_UNSPECIFIED",
		1: "ENTITY_REQUEST_TYPE_NAME",
		2: "ENTITY_REQUEST_TYPE_DEFAULT",
	}
	RequestEntity_EntityRequestType_value = map[string]int32{
		"ENTITY_REQUEST_TYPE_UNSPECIFIED": 0,
		"ENTITY_REQUEST_TYPE_NAME":        1,
		"ENTITY_REQUEST_TYPE_DEFAULT":     2,
	}
)

func (x RequestEntity_EntityRequestType) Enum() *RequestEntity_EntityRequestType {
	p := new(RequestEntity_EntityRequestType)
	*p = x
	return p
}

func (x RequestEntity_EntityRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestEntity_EntityRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_quota_proto_enumTypes[3].Descriptor()
}

func (RequestEntity_EntityRequestType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_quota_proto_enumTypes[3]
}

func (x RequestEntity_EntityRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestEntity_EntityRequestType.Descriptor instead.
func (RequestEntity_EntityRequestType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{3, 0}
}

type Quota struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quota) Reset() {
	*x = Quota{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0}
}

type ListQuotasRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	EntityType    Quota_EntityType             `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=redpanda.api.dataplane.v1.Quota_EntityType" json:"entity_type,omitempty"`
	FilterType    ListQuotasRequest_FilterType `protobuf:"varint,2,opt,name=filter_type,json=filterType,proto3,enum=redpanda.api.dataplane.v1.ListQuotasRequest_FilterType" json:"filter_type,omitempty"`
	Name          string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuotasRequest) Reset() {
	*x = ListQuotasRequest{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuotasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotasRequest) ProtoMessage() {}

func (x *ListQuotasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotasRequest.ProtoReflect.Descriptor instead.
func (*ListQuotasRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{1}
}

func (x *ListQuotasRequest) GetEntityType() Quota_EntityType {
	if x != nil {
		return x.EntityType
	}
	return Quota_ENTITY_TYPE_UNSPECIFIED
}

func (x *ListQuotasRequest) GetFilterType() ListQuotasRequest_FilterType {
	if x != nil {
		return x.FilterType
	}
	return ListQuotasRequest_FILTER_TYPE_UNSPECIFIED
}

func (x *ListQuotasRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListQuotasResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Quotas        []*ListQuotasResponse_QuotaEntry `protobuf:"bytes,1,rep,name=quotas,proto3" json:"quotas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuotasResponse) Reset() {
	*x = ListQuotasResponse{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuotasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotasResponse) ProtoMessage() {}

func (x *ListQuotasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotasResponse.ProtoReflect.Descriptor instead.
func (*ListQuotasResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{2}
}

func (x *ListQuotasResponse) GetQuotas() []*ListQuotasResponse_QuotaEntry {
	if x != nil {
		return x.Quotas
	}
	return nil
}

type RequestEntity struct {
	state             protoimpl.MessageState          `protogen:"open.v1"`
	EntityType        Quota_EntityType                `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=redpanda.api.dataplane.v1.Quota_EntityType" json:"entity_type,omitempty"`
	EntityRequestType RequestEntity_EntityRequestType `protobuf:"varint,2,opt,name=entity_request_type,json=entityRequestType,proto3,enum=redpanda.api.dataplane.v1.RequestEntity_EntityRequestType" json:"entity_request_type,omitempty"`
	// Either the client ID or the client ID prefix, depending on the entity_request_type
	// If entity_request_type is ENTITY_REQUEST_TYPE_DEFAULT, this field can be empty
	EntityName    string `protobuf:"bytes,3,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestEntity) Reset() {
	*x = RequestEntity{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEntity) ProtoMessage() {}

func (x *RequestEntity) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEntity.ProtoReflect.Descriptor instead.
func (*RequestEntity) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{3}
}

func (x *RequestEntity) GetEntityType() Quota_EntityType {
	if x != nil {
		return x.EntityType
	}
	return Quota_ENTITY_TYPE_UNSPECIFIED
}

func (x *RequestEntity) GetEntityRequestType() RequestEntity_EntityRequestType {
	if x != nil {
		return x.EntityRequestType
	}
	return RequestEntity_ENTITY_REQUEST_TYPE_UNSPECIFIED
}

func (x *RequestEntity) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

type CreateQuotaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// To specify multiple entities to apply the same quota
	Entities      []*RequestEntity                   `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	Values        []*CreateQuotaRequest_RequestValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQuotaRequest) Reset() {
	*x = CreateQuotaRequest{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuotaRequest) ProtoMessage() {}

func (x *CreateQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuotaRequest.ProtoReflect.Descriptor instead.
func (*CreateQuotaRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{4}
}

func (x *CreateQuotaRequest) GetEntities() []*RequestEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *CreateQuotaRequest) GetValues() []*CreateQuotaRequest_RequestValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type CreateQuotaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQuotaResponse) Reset() {
	*x = CreateQuotaResponse{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuotaResponse) ProtoMessage() {}

func (x *CreateQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuotaResponse.ProtoReflect.Descriptor instead.
func (*CreateQuotaResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{5}
}

type DeleteQuotaRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Entities []*RequestEntity       `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	// List of values that should be deleted for the specified entities
	ValueType     []Quota_ValueType `protobuf:"varint,2,rep,packed,name=value_type,json=valueType,proto3,enum=redpanda.api.dataplane.v1.Quota_ValueType" json:"value_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuotaRequest) Reset() {
	*x = DeleteQuotaRequest{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuotaRequest) ProtoMessage() {}

func (x *DeleteQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuotaRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuotaRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteQuotaRequest) GetEntities() []*RequestEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *DeleteQuotaRequest) GetValueType() []Quota_ValueType {
	if x != nil {
		return x.ValueType
	}
	return nil
}

// todo: Add a response message for DeleteQuotaResponse
type DeleteQuotaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuotaResponse) Reset() {
	*x = DeleteQuotaResponse{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuotaResponse) ProtoMessage() {}

func (x *DeleteQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuotaResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuotaResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{7}
}

type Quota_Entity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityType    Quota_EntityType       `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=redpanda.api.dataplane.v1.Quota_EntityType" json:"entity_type,omitempty"`
	EntityName    string                 `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quota_Entity) Reset() {
	*x = Quota_Entity{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quota_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota_Entity) ProtoMessage() {}

func (x *Quota_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota_Entity.ProtoReflect.Descriptor instead.
func (*Quota_Entity) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Quota_Entity) GetEntityType() Quota_EntityType {
	if x != nil {
		return x.EntityType
	}
	return Quota_ENTITY_TYPE_UNSPECIFIED
}

func (x *Quota_Entity) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

type Quota_Value struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValueType     Quota_ValueType        `protobuf:"varint,1,opt,name=value_type,json=valueType,proto3,enum=redpanda.api.dataplane.v1.Quota_ValueType" json:"value_type,omitempty"`
	Value         int64                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quota_Value) Reset() {
	*x = Quota_Value{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quota_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota_Value) ProtoMessage() {}

func (x *Quota_Value) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota_Value.ProtoReflect.Descriptor instead.
func (*Quota_Value) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Quota_Value) GetValueType() Quota_ValueType {
	if x != nil {
		return x.ValueType
	}
	return Quota_VALUE_TYPE_UNSPECIFIED
}

func (x *Quota_Value) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// QuotaEntry represents the quota for a specific entity type.
type ListQuotasResponse_QuotaEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *Quota_Entity          `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Values        []*Quota_Value         `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuotasResponse_QuotaEntry) Reset() {
	*x = ListQuotasResponse_QuotaEntry{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuotasResponse_QuotaEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotasResponse_QuotaEntry) ProtoMessage() {}

func (x *ListQuotasResponse_QuotaEntry) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotasResponse_QuotaEntry.ProtoReflect.Descriptor instead.
func (*ListQuotasResponse_QuotaEntry) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ListQuotasResponse_QuotaEntry) GetEntity() *Quota_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ListQuotasResponse_QuotaEntry) GetValues() []*Quota_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type CreateQuotaRequest_RequestValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValueType     Quota_ValueType        `protobuf:"varint,1,opt,name=value_type,json=valueType,proto3,enum=redpanda.api.dataplane.v1.Quota_ValueType" json:"value_type,omitempty"`
	Value         int64                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQuotaRequest_RequestValue) Reset() {
	*x = CreateQuotaRequest_RequestValue{}
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuotaRequest_RequestValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuotaRequest_RequestValue) ProtoMessage() {}

func (x *CreateQuotaRequest_RequestValue) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_quota_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuotaRequest_RequestValue.ProtoReflect.Descriptor instead.
func (*CreateQuotaRequest_RequestValue) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CreateQuotaRequest_RequestValue) GetValueType() Quota_ValueType {
	if x != nil {
		return x.ValueType
	}
	return Quota_VALUE_TYPE_UNSPECIFIED
}

func (x *CreateQuotaRequest_RequestValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_redpanda_api_dataplane_v1_quota_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1_quota_proto_rawDesc = []byte{
	0x0a, 0x25, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x04, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x1a, 0x77, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x68, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x22, 0x81, 0x01, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45,
	0x52, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x55, 0x4d, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x22, 0xcd, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x03, 0x3a, 0x8c, 0x01, 0xba, 0x48, 0x88, 0x01, 0x1a, 0x85, 0x01, 0x0a, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x1a, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x32, 0x20, 0x7c, 0x7c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27,
	0x22, 0xf6, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x0a, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xbd, 0x04, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x13, 0xba,
	0x48, 0x10, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x0a, 0x10, 0x01, 0x20, 0x00, 0x20, 0x01, 0x20, 0x04,
	0x20, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x72,
	0x0a, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x3a, 0xba, 0x01, 0xba,
	0x48, 0xb6, 0x01, 0x1a, 0xb3, 0x01, 0x0a, 0x2a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x1a, 0x37, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x31, 0x20,
	0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27, 0x22, 0xc1, 0x02, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4c, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5a,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0xba, 0x48, 0x0c,
	0xc8, 0x01, 0x01, 0x82, 0x01, 0x06, 0x10, 0x01, 0x20, 0x00, 0x20, 0x01, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x15, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0xa4, 0x01, 0xba,
	0x48, 0xa0, 0x01, 0x1a, 0x9d, 0x01, 0x0a, 0x22, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x6e, 0x79, 0x12, 0x4d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x63,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x20,
	0x28, 0x30, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4e, 0x59, 0x20, 0x28, 0x31, 0x29, 0x1a, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x76,
	0x2c, 0x20, 0x76, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x76, 0x20, 0x21, 0x3d,
	0x20, 0x31, 0x29, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe1, 0x08, 0x0a, 0x0c, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb8, 0x02, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12, 0x2c, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x01, 0x92, 0x41, 0xae, 0x01, 0x12, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x1a, 0x5f, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e,
	0x20, 0x55, 0x73, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x4a, 0x3e, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x37, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x31, 0x0a, 0x2f, 0x1a, 0x2d, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04,
	0x08, 0x01, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12, 0x9d, 0x02, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x92, 0x41, 0x8d, 0x01, 0x12, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x1a, 0x37, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x4a, 0x44, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x3d, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x30, 0x1a, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12, 0x9b, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x92, 0x41, 0x8e, 0x01, 0x12, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x1a, 0x3c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4a, 0x3f, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x38, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x32, 0x0a, 0x30, 0x1a, 0x2e, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03,
	0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x2a, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x73, 0x1a, 0xd7, 0x01, 0x92, 0x41, 0xd3, 0x01, 0x0a, 0x06, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x73, 0x12, 0xc8, 0x01, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x20, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x5b, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x20, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5d, 0x28, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x2f, 0x23, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x29, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72,
	0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x8f,
	0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x42, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x3b,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41,
	0x44, 0xaa, 0x02, 0x19, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x25, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x1c, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1_quota_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1_quota_proto_rawDescData = file_redpanda_api_dataplane_v1_quota_proto_rawDesc
)

func file_redpanda_api_dataplane_v1_quota_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1_quota_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1_quota_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1_quota_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1_quota_proto_rawDescData
}

var file_redpanda_api_dataplane_v1_quota_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_redpanda_api_dataplane_v1_quota_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_redpanda_api_dataplane_v1_quota_proto_goTypes = []any{
	(Quota_EntityType)(0),                   // 0: redpanda.api.dataplane.v1.Quota.EntityType
	(Quota_ValueType)(0),                    // 1: redpanda.api.dataplane.v1.Quota.ValueType
	(ListQuotasRequest_FilterType)(0),       // 2: redpanda.api.dataplane.v1.ListQuotasRequest.FilterType
	(RequestEntity_EntityRequestType)(0),    // 3: redpanda.api.dataplane.v1.RequestEntity.EntityRequestType
	(*Quota)(nil),                           // 4: redpanda.api.dataplane.v1.Quota
	(*ListQuotasRequest)(nil),               // 5: redpanda.api.dataplane.v1.ListQuotasRequest
	(*ListQuotasResponse)(nil),              // 6: redpanda.api.dataplane.v1.ListQuotasResponse
	(*RequestEntity)(nil),                   // 7: redpanda.api.dataplane.v1.RequestEntity
	(*CreateQuotaRequest)(nil),              // 8: redpanda.api.dataplane.v1.CreateQuotaRequest
	(*CreateQuotaResponse)(nil),             // 9: redpanda.api.dataplane.v1.CreateQuotaResponse
	(*DeleteQuotaRequest)(nil),              // 10: redpanda.api.dataplane.v1.DeleteQuotaRequest
	(*DeleteQuotaResponse)(nil),             // 11: redpanda.api.dataplane.v1.DeleteQuotaResponse
	(*Quota_Entity)(nil),                    // 12: redpanda.api.dataplane.v1.Quota.Entity
	(*Quota_Value)(nil),                     // 13: redpanda.api.dataplane.v1.Quota.Value
	(*ListQuotasResponse_QuotaEntry)(nil),   // 14: redpanda.api.dataplane.v1.ListQuotasResponse.QuotaEntry
	(*CreateQuotaRequest_RequestValue)(nil), // 15: redpanda.api.dataplane.v1.CreateQuotaRequest.RequestValue
}
var file_redpanda_api_dataplane_v1_quota_proto_depIdxs = []int32{
	0,  // 0: redpanda.api.dataplane.v1.ListQuotasRequest.entity_type:type_name -> redpanda.api.dataplane.v1.Quota.EntityType
	2,  // 1: redpanda.api.dataplane.v1.ListQuotasRequest.filter_type:type_name -> redpanda.api.dataplane.v1.ListQuotasRequest.FilterType
	14, // 2: redpanda.api.dataplane.v1.ListQuotasResponse.quotas:type_name -> redpanda.api.dataplane.v1.ListQuotasResponse.QuotaEntry
	0,  // 3: redpanda.api.dataplane.v1.RequestEntity.entity_type:type_name -> redpanda.api.dataplane.v1.Quota.EntityType
	3,  // 4: redpanda.api.dataplane.v1.RequestEntity.entity_request_type:type_name -> redpanda.api.dataplane.v1.RequestEntity.EntityRequestType
	7,  // 5: redpanda.api.dataplane.v1.CreateQuotaRequest.entities:type_name -> redpanda.api.dataplane.v1.RequestEntity
	15, // 6: redpanda.api.dataplane.v1.CreateQuotaRequest.values:type_name -> redpanda.api.dataplane.v1.CreateQuotaRequest.RequestValue
	7,  // 7: redpanda.api.dataplane.v1.DeleteQuotaRequest.entities:type_name -> redpanda.api.dataplane.v1.RequestEntity
	1,  // 8: redpanda.api.dataplane.v1.DeleteQuotaRequest.value_type:type_name -> redpanda.api.dataplane.v1.Quota.ValueType
	0,  // 9: redpanda.api.dataplane.v1.Quota.Entity.entity_type:type_name -> redpanda.api.dataplane.v1.Quota.EntityType
	1,  // 10: redpanda.api.dataplane.v1.Quota.Value.value_type:type_name -> redpanda.api.dataplane.v1.Quota.ValueType
	12, // 11: redpanda.api.dataplane.v1.ListQuotasResponse.QuotaEntry.entity:type_name -> redpanda.api.dataplane.v1.Quota.Entity
	13, // 12: redpanda.api.dataplane.v1.ListQuotasResponse.QuotaEntry.values:type_name -> redpanda.api.dataplane.v1.Quota.Value
	1,  // 13: redpanda.api.dataplane.v1.CreateQuotaRequest.RequestValue.value_type:type_name -> redpanda.api.dataplane.v1.Quota.ValueType
	5,  // 14: redpanda.api.dataplane.v1.QuotaService.ListQuotas:input_type -> redpanda.api.dataplane.v1.ListQuotasRequest
	8,  // 15: redpanda.api.dataplane.v1.QuotaService.CreateQuota:input_type -> redpanda.api.dataplane.v1.CreateQuotaRequest
	10, // 16: redpanda.api.dataplane.v1.QuotaService.DeleteQuota:input_type -> redpanda.api.dataplane.v1.DeleteQuotaRequest
	6,  // 17: redpanda.api.dataplane.v1.QuotaService.ListQuotas:output_type -> redpanda.api.dataplane.v1.ListQuotasResponse
	9,  // 18: redpanda.api.dataplane.v1.QuotaService.CreateQuota:output_type -> redpanda.api.dataplane.v1.CreateQuotaResponse
	11, // 19: redpanda.api.dataplane.v1.QuotaService.DeleteQuota:output_type -> redpanda.api.dataplane.v1.DeleteQuotaResponse
	17, // [17:20] is the sub-list for method output_type
	14, // [14:17] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1_quota_proto_init() }
func file_redpanda_api_dataplane_v1_quota_proto_init() {
	if File_redpanda_api_dataplane_v1_quota_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1_quota_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1_quota_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1_quota_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1_quota_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1_quota_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1_quota_proto = out.File
	file_redpanda_api_dataplane_v1_quota_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1_quota_proto_goTypes = nil
	file_redpanda_api_dataplane_v1_quota_proto_depIdxs = nil
}
