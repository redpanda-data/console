// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1/security.proto

package dataplanev1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Schema Registry ACLs
// ResourceType defines the type of resource an ACL applies to.
type ResourceType int32

const (
	// Unspecified resource type.
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0
	// Registry resource type.
	ResourceType_RESOURCE_TYPE_REGISTRY ResourceType = 1
	// Subject (schema) resource type.
	ResourceType_RESOURCE_TYPE_SUBJECT ResourceType = 2
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_REGISTRY",
		2: "RESOURCE_TYPE_SUBJECT",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"RESOURCE_TYPE_REGISTRY":    1,
		"RESOURCE_TYPE_SUBJECT":     2,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_security_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_security_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{0}
}

// PatternType defines how the resource name is matched.
type PatternType int32

const (
	// Unspecified pattern type.
	PatternType_PATTERN_TYPE_UNSPECIFIED PatternType = 0
	// Literal pattern matches a resource name exactly.
	PatternType_PATTERN_TYPE_LITERAL PatternType = 1
	// Prefixed pattern matches resource names by prefix.
	PatternType_PATTERN_TYPE_PREFIXED PatternType = 2
)

// Enum value maps for PatternType.
var (
	PatternType_name = map[int32]string{
		0: "PATTERN_TYPE_UNSPECIFIED",
		1: "PATTERN_TYPE_LITERAL",
		2: "PATTERN_TYPE_PREFIXED",
	}
	PatternType_value = map[string]int32{
		"PATTERN_TYPE_UNSPECIFIED": 0,
		"PATTERN_TYPE_LITERAL":     1,
		"PATTERN_TYPE_PREFIXED":    2,
	}
)

func (x PatternType) Enum() *PatternType {
	p := new(PatternType)
	*p = x
	return p
}

func (x PatternType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_security_proto_enumTypes[1].Descriptor()
}

func (PatternType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_security_proto_enumTypes[1]
}

func (x PatternType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternType.Descriptor instead.
func (PatternType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{1}
}

// Operation defines the action allowed or denied by an ACL.
type Operation int32

const (
	// Unspecified operation.
	Operation_OPERATION_UNSPECIFIED Operation = 0
	// ALL operations.
	Operation_OPERATION_ALL Operation = 1
	// READ operation.
	Operation_OPERATION_READ Operation = 2
	// WRITE operation.
	Operation_OPERATION_WRITE Operation = 3
	// REMOVE operation.
	Operation_OPERATION_REMOVE Operation = 4
	// DESCRIBE operation.
	Operation_OPERATION_DESCRIBE Operation = 5
	// DESCRIBE_CONFIGS operation.
	Operation_OPERATION_DESCRIBE_CONFIGS Operation = 6
	// ALTER operation.
	Operation_OPERATION_ALTER Operation = 7
	// ALTER_CONFIGS operation.
	Operation_OPERATION_ALTER_CONFIGS Operation = 8
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "OPERATION_UNSPECIFIED",
		1: "OPERATION_ALL",
		2: "OPERATION_READ",
		3: "OPERATION_WRITE",
		4: "OPERATION_REMOVE",
		5: "OPERATION_DESCRIBE",
		6: "OPERATION_DESCRIBE_CONFIGS",
		7: "OPERATION_ALTER",
		8: "OPERATION_ALTER_CONFIGS",
	}
	Operation_value = map[string]int32{
		"OPERATION_UNSPECIFIED":      0,
		"OPERATION_ALL":              1,
		"OPERATION_READ":             2,
		"OPERATION_WRITE":            3,
		"OPERATION_REMOVE":           4,
		"OPERATION_DESCRIBE":         5,
		"OPERATION_DESCRIBE_CONFIGS": 6,
		"OPERATION_ALTER":            7,
		"OPERATION_ALTER_CONFIGS":    8,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_security_proto_enumTypes[2].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_security_proto_enumTypes[2]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{2}
}

// Permission defines whether an ACL allows or denies an operation.
type Permission int32

const (
	// Unspecified permission.
	Permission_PERMISSION_UNSPECIFIED Permission = 0
	// ALLOW permission permits the operation.
	Permission_PERMISSION_ALLOW Permission = 1
	// DENY permission denies the operation.
	Permission_PERMISSION_DENY Permission = 2
)

// Enum value maps for Permission.
var (
	Permission_name = map[int32]string{
		0: "PERMISSION_UNSPECIFIED",
		1: "PERMISSION_ALLOW",
		2: "PERMISSION_DENY",
	}
	Permission_value = map[string]int32{
		"PERMISSION_UNSPECIFIED": 0,
		"PERMISSION_ALLOW":       1,
		"PERMISSION_DENY":        2,
	}
)

func (x Permission) Enum() *Permission {
	p := new(Permission)
	*p = x
	return p
}

func (x Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_security_proto_enumTypes[3].Descriptor()
}

func (Permission) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_security_proto_enumTypes[3]
}

func (x Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Permission.Descriptor instead.
func (Permission) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{3}
}

// Role defines a role in the system.
type Role struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the role.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Role) Reset() {
	*x = Role{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{0}
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ListRolesRequest is the request for ListRoles.
type ListRolesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional filter.
	Filter *ListRolesRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Page size.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Value of the next_page_token field returned by the previous response.
	// If not provided, the system assumes the first page is requested.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolesRequest) Reset() {
	*x = ListRolesRequest{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesRequest) ProtoMessage() {}

func (x *ListRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesRequest.ProtoReflect.Descriptor instead.
func (*ListRolesRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{1}
}

func (x *ListRolesRequest) GetFilter() *ListRolesRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListRolesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRolesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListRolesResponse is the response for ListRoles.
type ListRolesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The roles in the system.
	Roles []*Role `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	// Token to retrieve the next page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolesResponse) Reset() {
	*x = ListRolesResponse{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesResponse) ProtoMessage() {}

func (x *ListRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesResponse.ProtoReflect.Descriptor instead.
func (*ListRolesResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{2}
}

func (x *ListRolesResponse) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ListRolesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// CreateRoleRequest is the request for CreateRole.
type CreateRoleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role to create.
	Role          *Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRoleRequest) Reset() {
	*x = CreateRoleRequest{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoleRequest) ProtoMessage() {}

func (x *CreateRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoleRequest.ProtoReflect.Descriptor instead.
func (*CreateRoleRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRoleRequest) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

// CreateRoleResponse is the response for CreateRole.
type CreateRoleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role.
	Role          *Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRoleResponse) Reset() {
	*x = CreateRoleResponse{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoleResponse) ProtoMessage() {}

func (x *CreateRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoleResponse.ProtoReflect.Descriptor instead.
func (*CreateRoleResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRoleResponse) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

// CreateRoleRequest is the request for CreateRole.
type GetRoleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role name.
	RoleName      string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoleRequest) Reset() {
	*x = GetRoleRequest{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleRequest) ProtoMessage() {}

func (x *GetRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleRequest.ProtoReflect.Descriptor instead.
func (*GetRoleRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{5}
}

func (x *GetRoleRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

// GetRoleResponse is the response to GetRole.
type GetRoleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Role.
	Role *Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// Members assigned to the role.
	Members       []*RoleMembership `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoleResponse) Reset() {
	*x = GetRoleResponse{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleResponse) ProtoMessage() {}

func (x *GetRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleResponse.ProtoReflect.Descriptor instead.
func (*GetRoleResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{6}
}

func (x *GetRoleResponse) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *GetRoleResponse) GetMembers() []*RoleMembership {
	if x != nil {
		return x.Members
	}
	return nil
}

// DeleteRoleRequest is the request for DeleteRole.
type DeleteRoleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role name.
	RoleName string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	// Whether to delete the ACLs bound to the role.
	DeleteAcls    bool `protobuf:"varint,2,opt,name=delete_acls,json=deleteAcls,proto3" json:"delete_acls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRoleRequest) Reset() {
	*x = DeleteRoleRequest{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoleRequest) ProtoMessage() {}

func (x *DeleteRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoleRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteRoleRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *DeleteRoleRequest) GetDeleteAcls() bool {
	if x != nil {
		return x.DeleteAcls
	}
	return false
}

// DeleteRoleResponse is the response for DeleteRole.
type DeleteRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRoleResponse) Reset() {
	*x = DeleteRoleResponse{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoleResponse) ProtoMessage() {}

func (x *DeleteRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoleResponse.ProtoReflect.Descriptor instead.
func (*DeleteRoleResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{8}
}

// List role members for a role. That is user principals assigned to that role.
type ListRoleMembersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role name.
	RoleName string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	// Optional filter.
	Filter *ListRoleMembersRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Page size.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Value of the next_page_token field returned by the previous response.
	// If not provided, the system assumes the first page is requested.
	PageToken     string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRoleMembersRequest) Reset() {
	*x = ListRoleMembersRequest{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoleMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoleMembersRequest) ProtoMessage() {}

func (x *ListRoleMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoleMembersRequest.ProtoReflect.Descriptor instead.
func (*ListRoleMembersRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{9}
}

func (x *ListRoleMembersRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *ListRoleMembersRequest) GetFilter() *ListRoleMembersRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListRoleMembersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRoleMembersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListRoleMembersResponse is the response for ListRoleMembers.
type ListRoleMembersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role name.
	RoleName string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	// Members assigned to the role.
	Members []*RoleMembership `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	// Token to retrieve the next page.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRoleMembersResponse) Reset() {
	*x = ListRoleMembersResponse{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoleMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoleMembersResponse) ProtoMessage() {}

func (x *ListRoleMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoleMembersResponse.ProtoReflect.Descriptor instead.
func (*ListRoleMembersResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{10}
}

func (x *ListRoleMembersResponse) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *ListRoleMembersResponse) GetMembers() []*RoleMembership {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ListRoleMembersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// RoleMembership is the role membership.
type RoleMembership struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the principal assigned to the role.
	Principal     string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleMembership) Reset() {
	*x = RoleMembership{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleMembership) ProtoMessage() {}

func (x *RoleMembership) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleMembership.ProtoReflect.Descriptor instead.
func (*RoleMembership) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{11}
}

func (x *RoleMembership) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

// UpdateRoleMembershipRequest is the request to UpdateRoleMembership.
type UpdateRoleMembershipRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role name.
	RoleName string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	// Create the role if it doesn't already exist.
	// If the role is created in this way, the “add” list will be respected, but the “remove” list will be ignored.
	Create bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	// Members to assign to the role.
	Add []*RoleMembership `protobuf:"bytes,3,rep,name=add,proto3" json:"add,omitempty"`
	// Members to remove from the role.
	Remove        []*RoleMembership `protobuf:"bytes,4,rep,name=remove,proto3" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRoleMembershipRequest) Reset() {
	*x = UpdateRoleMembershipRequest{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRoleMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleMembershipRequest) ProtoMessage() {}

func (x *UpdateRoleMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleMembershipRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoleMembershipRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateRoleMembershipRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *UpdateRoleMembershipRequest) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *UpdateRoleMembershipRequest) GetAdd() []*RoleMembership {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *UpdateRoleMembershipRequest) GetRemove() []*RoleMembership {
	if x != nil {
		return x.Remove
	}
	return nil
}

// UpdateRoleMembershipResponse is the response for UpdateRoleMembership.
type UpdateRoleMembershipResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role name.
	RoleName string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	// Members assigned to the role.
	Added []*RoleMembership `protobuf:"bytes,2,rep,name=added,proto3" json:"added,omitempty"`
	// Members removed from the role.
	Removed       []*RoleMembership `protobuf:"bytes,3,rep,name=removed,proto3" json:"removed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRoleMembershipResponse) Reset() {
	*x = UpdateRoleMembershipResponse{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRoleMembershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleMembershipResponse) ProtoMessage() {}

func (x *UpdateRoleMembershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleMembershipResponse.ProtoReflect.Descriptor instead.
func (*UpdateRoleMembershipResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateRoleMembershipResponse) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *UpdateRoleMembershipResponse) GetAdded() []*RoleMembership {
	if x != nil {
		return x.Added
	}
	return nil
}

func (x *UpdateRoleMembershipResponse) GetRemoved() []*RoleMembership {
	if x != nil {
		return x.Removed
	}
	return nil
}

// ACL represents an individual access control rule.
type SchemaRegistryACL struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The principal (user/service) this ACL applies to.
	Principal string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// The resource name this ACL applies to.
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// The type of resource this ACL applies to.
	ResourceType ResourceType `protobuf:"varint,3,opt,name=resource_type,json=resourceType,proto3,enum=redpanda.api.dataplane.v1.ResourceType" json:"resource_type,omitempty"`
	// How the resource name should be matched.
	PatternType PatternType `protobuf:"varint,4,opt,name=pattern_type,json=patternType,proto3,enum=redpanda.api.dataplane.v1.PatternType" json:"pattern_type,omitempty"`
	// The host this ACL applies to.
	Host string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// The operation this ACL controls.
	Operation Operation `protobuf:"varint,6,opt,name=operation,proto3,enum=redpanda.api.dataplane.v1.Operation" json:"operation,omitempty"`
	// Whether this ACL allows or denies the operation.
	Permission    Permission `protobuf:"varint,7,opt,name=permission,proto3,enum=redpanda.api.dataplane.v1.Permission" json:"permission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaRegistryACL) Reset() {
	*x = SchemaRegistryACL{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaRegistryACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRegistryACL) ProtoMessage() {}

func (x *SchemaRegistryACL) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRegistryACL.ProtoReflect.Descriptor instead.
func (*SchemaRegistryACL) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{14}
}

func (x *SchemaRegistryACL) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *SchemaRegistryACL) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *SchemaRegistryACL) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *SchemaRegistryACL) GetPatternType() PatternType {
	if x != nil {
		return x.PatternType
	}
	return PatternType_PATTERN_TYPE_UNSPECIFIED
}

func (x *SchemaRegistryACL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SchemaRegistryACL) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_OPERATION_UNSPECIFIED
}

func (x *SchemaRegistryACL) GetPermission() Permission {
	if x != nil {
		return x.Permission
	}
	return Permission_PERMISSION_UNSPECIFIED
}

// ListSchemaRegistryACLsRequest is the request for ListSchemaRegistryACLs.
type ListSchemaRegistryACLsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional filter.
	Filter        []*ListSchemaRegistryACLsRequest_Filter `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSchemaRegistryACLsRequest) Reset() {
	*x = ListSchemaRegistryACLsRequest{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSchemaRegistryACLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemaRegistryACLsRequest) ProtoMessage() {}

func (x *ListSchemaRegistryACLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemaRegistryACLsRequest.ProtoReflect.Descriptor instead.
func (*ListSchemaRegistryACLsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{15}
}

func (x *ListSchemaRegistryACLsRequest) GetFilter() []*ListSchemaRegistryACLsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// ListSchemaRegistryACLsResponse is the response for ListSchemaRegistryACLs.
type ListSchemaRegistryACLsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Schema Registry ACLs.
	Acls          []*SchemaRegistryACL `protobuf:"bytes,1,rep,name=acls,proto3" json:"acls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSchemaRegistryACLsResponse) Reset() {
	*x = ListSchemaRegistryACLsResponse{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSchemaRegistryACLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemaRegistryACLsResponse) ProtoMessage() {}

func (x *ListSchemaRegistryACLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemaRegistryACLsResponse.ProtoReflect.Descriptor instead.
func (*ListSchemaRegistryACLsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{16}
}

func (x *ListSchemaRegistryACLsResponse) GetAcls() []*SchemaRegistryACL {
	if x != nil {
		return x.Acls
	}
	return nil
}

// CreateSchemaRegistryACLsRequest is the request for CreateSchemaRegistryACLs.
type CreateSchemaRegistryACLsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ACLs to create.
	Acls          []*SchemaRegistryACL `protobuf:"bytes,1,rep,name=acls,proto3" json:"acls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSchemaRegistryACLsRequest) Reset() {
	*x = CreateSchemaRegistryACLsRequest{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSchemaRegistryACLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchemaRegistryACLsRequest) ProtoMessage() {}

func (x *CreateSchemaRegistryACLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchemaRegistryACLsRequest.ProtoReflect.Descriptor instead.
func (*CreateSchemaRegistryACLsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{17}
}

func (x *CreateSchemaRegistryACLsRequest) GetAcls() []*SchemaRegistryACL {
	if x != nil {
		return x.Acls
	}
	return nil
}

// CreateSchemaRegistryACLsResponse is the response for CreateSchemaRegistryACLs.
type CreateSchemaRegistryACLsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSchemaRegistryACLsResponse) Reset() {
	*x = CreateSchemaRegistryACLsResponse{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSchemaRegistryACLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchemaRegistryACLsResponse) ProtoMessage() {}

func (x *CreateSchemaRegistryACLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchemaRegistryACLsResponse.ProtoReflect.Descriptor instead.
func (*CreateSchemaRegistryACLsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{18}
}

// DeleteSchemaRegistryACLsRequest is the request for DeleteSchemaRegistryACLs.
type DeleteSchemaRegistryACLsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ACLs to delete. Only exact matches will be deleted.
	Acls          []*SchemaRegistryACL `protobuf:"bytes,1,rep,name=acls,proto3" json:"acls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSchemaRegistryACLsRequest) Reset() {
	*x = DeleteSchemaRegistryACLsRequest{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSchemaRegistryACLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchemaRegistryACLsRequest) ProtoMessage() {}

func (x *DeleteSchemaRegistryACLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchemaRegistryACLsRequest.ProtoReflect.Descriptor instead.
func (*DeleteSchemaRegistryACLsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteSchemaRegistryACLsRequest) GetAcls() []*SchemaRegistryACL {
	if x != nil {
		return x.Acls
	}
	return nil
}

// DeleteSchemaRegistryACLsResponse is the response for DeleteSchemaRegistryACLs.
type DeleteSchemaRegistryACLsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSchemaRegistryACLsResponse) Reset() {
	*x = DeleteSchemaRegistryACLsResponse{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSchemaRegistryACLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchemaRegistryACLsResponse) ProtoMessage() {}

func (x *DeleteSchemaRegistryACLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchemaRegistryACLsResponse.ProtoReflect.Descriptor instead.
func (*DeleteSchemaRegistryACLsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{20}
}

// Filter options.
type ListRolesRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter results only roles named with the prefix.
	NamePrefix string `protobuf:"bytes,1,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	// Filter results to only roles with names which contain the string.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Return only roles assigned to this principal.
	Principal     string `protobuf:"bytes,3,opt,name=principal,proto3" json:"principal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolesRequest_Filter) Reset() {
	*x = ListRolesRequest_Filter{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesRequest_Filter) ProtoMessage() {}

func (x *ListRolesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListRolesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListRolesRequest_Filter) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *ListRolesRequest_Filter) GetNameContains() string {
	if x != nil {
		return x.NameContains
	}
	return ""
}

func (x *ListRolesRequest_Filter) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

// Filter options.
type ListRoleMembersRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter results to only members with names which contain the string.
	NameContains  string `protobuf:"bytes,1,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRoleMembersRequest_Filter) Reset() {
	*x = ListRoleMembersRequest_Filter{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoleMembersRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoleMembersRequest_Filter) ProtoMessage() {}

func (x *ListRoleMembersRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoleMembersRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListRoleMembersRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListRoleMembersRequest_Filter) GetNameContains() string {
	if x != nil {
		return x.NameContains
	}
	return ""
}

// Filter options.
type ListSchemaRegistryACLsRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter by principal name.
	Principal string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// Filter by resource name.
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// Filter by resource type.
	ResourceType ResourceType `protobuf:"varint,3,opt,name=resource_type,json=resourceType,proto3,enum=redpanda.api.dataplane.v1.ResourceType" json:"resource_type,omitempty"`
	// Filter by pattern type.
	PatternType PatternType `protobuf:"varint,4,opt,name=pattern_type,json=patternType,proto3,enum=redpanda.api.dataplane.v1.PatternType" json:"pattern_type,omitempty"`
	// Filter by host.
	Host string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// Filter by operation.
	Operation Operation `protobuf:"varint,6,opt,name=operation,proto3,enum=redpanda.api.dataplane.v1.Operation" json:"operation,omitempty"`
	// Filter by permission.
	Permission    Permission `protobuf:"varint,7,opt,name=permission,proto3,enum=redpanda.api.dataplane.v1.Permission" json:"permission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSchemaRegistryACLsRequest_Filter) Reset() {
	*x = ListSchemaRegistryACLsRequest_Filter{}
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSchemaRegistryACLsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemaRegistryACLsRequest_Filter) ProtoMessage() {}

func (x *ListSchemaRegistryACLsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_security_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemaRegistryACLsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListSchemaRegistryACLsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ListSchemaRegistryACLsRequest_Filter) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *ListSchemaRegistryACLsRequest_Filter) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ListSchemaRegistryACLsRequest_Filter) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *ListSchemaRegistryACLsRequest_Filter) GetPatternType() PatternType {
	if x != nil {
		return x.PatternType
	}
	return PatternType_PATTERN_TYPE_UNSPECIFIED
}

func (x *ListSchemaRegistryACLsRequest_Filter) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ListSchemaRegistryACLsRequest_Filter) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_OPERATION_UNSPECIFIED
}

func (x *ListSchemaRegistryACLsRequest_Filter) GetPermission() Permission {
	if x != nil {
		return x.Permission
	}
	return Permission_PERMISSION_UNSPECIFIED
}

var File_redpanda_api_dataplane_v1_security_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1_security_proto_rawDesc = []byte{
	0x0a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x04, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xba, 0x48, 0x14, 0xc8, 0x01, 0x01, 0x72, 0x0f, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32,
	0x08, 0x5e, 0x5b, 0x5e, 0x2c, 0x3d, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xe4, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xba, 0x48, 0x10, 0x1a, 0x0e, 0x18,
	0xe8, 0x07, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xa2, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xba, 0x48, 0x11, 0x72, 0x0f, 0x18, 0x80, 0x01,
	0x32, 0x0a, 0x5e, 0x28, 0x5b, 0x5e, 0x2c, 0x3d, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x39, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xba, 0x48, 0x11, 0x72, 0x0f, 0x18, 0x80, 0x01, 0x32, 0x0a, 0x5e, 0x28, 0x5b, 0x5e, 0x2c,
	0x3d, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x72, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x48, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0x49, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0x46, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0xc8, 0x01, 0x01, 0x72, 0x0f, 0x10, 0x01,
	0x18, 0x80, 0x01, 0x32, 0x08, 0x5e, 0x5b, 0x5e, 0x2c, 0x3d, 0x5d, 0x2b, 0x24, 0x52, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba,
	0x48, 0x14, 0xc8, 0x01, 0x01, 0x72, 0x0f, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32, 0x08, 0x5e, 0x5b,
	0x5e, 0x2c, 0x3d, 0x5d, 0x2b, 0x24, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x6c,
	0x73, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0xc8, 0x01, 0x01, 0x72, 0x0f, 0x10,
	0x01, 0x18, 0x80, 0x01, 0x32, 0x08, 0x5e, 0x5b, 0x5e, 0x2c, 0x3d, 0x5d, 0x2b, 0x24, 0x52, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x13, 0xba, 0x48, 0x10, 0x1a, 0x0e, 0x18, 0xe8, 0x07, 0x28, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x1a, 0x37, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0d, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2e, 0x0a, 0x0e, 0x52, 0x6f,
	0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0xeb, 0x01, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba,
	0x48, 0x14, 0xc8, 0x01, 0x01, 0x72, 0x0f, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32, 0x08, 0x5e, 0x5b,
	0x5e, 0x2c, 0x3d, 0x5d, 0x2b, 0x24, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48,
	0x14, 0xc8, 0x01, 0x01, 0x72, 0x0f, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32, 0x08, 0x5e, 0x5b, 0x5e,
	0x2c, 0x3d, 0x5d, 0x2b, 0x24, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x85, 0x03, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x03,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43,
	0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xfa, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x41, 0x43, 0x4c, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x22, 0x63, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04,
	0x61, 0x63, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x22, 0x22,
	0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x63, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43,
	0x4c, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41,
	0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x64, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x2a, 0x60, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0xe2, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43,
	0x52, 0x49, 0x42, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x53, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x10, 0x08, 0x2a, 0x53, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x02, 0x32, 0x91, 0x17,
	0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x91, 0x02, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x92, 0x41, 0x8b,
	0x01, 0x12, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x3e, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x20, 0x6f, 0x6e, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x2e, 0x4a, 0x3d, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x36, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04,
	0x08, 0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0xf5, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x89, 0x01, 0x92, 0x41, 0x67, 0x12, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x2e, 0x4a, 0x48, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x41, 0x0a, 0x0c, 0x52,
	0x6f, 0x6c, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x2f, 0x1a,
	0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6,
	0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x8c, 0x02,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa9, 0x01, 0x92, 0x41, 0x80, 0x01, 0x12, 0x08, 0x47, 0x65, 0x74, 0x20, 0x52, 0x6f, 0x6c,
	0x65, 0x1a, 0x0b, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x4a, 0x3b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x34, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x2e, 0x0a, 0x2c, 0x1a,
	0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x2a, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x83, 0x02, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x92, 0x41, 0x6f, 0x12, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x4a, 0x24, 0x0a, 0x03, 0x32,
	0x30, 0x34, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x6f, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12,
	0x00, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a, 0xa6, 0x1d,
	0x04, 0x08, 0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0xa5, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01,
	0x92, 0x41, 0x7a, 0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x6f, 0x6c, 0x65, 0x20, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x4a, 0x43, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x3c, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d,
	0x04, 0x08, 0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0xc9, 0x02, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x92, 0x41, 0x93, 0x01, 0x12, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x4a, 0x48, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x41, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x3b, 0x0a, 0x39, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74,
	0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a, 0xa6,
	0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x1a,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xfe, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c,
	0x73, 0x12, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xee, 0x01, 0x92, 0x41, 0xc2, 0x01, 0x12, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x20, 0x41, 0x43, 0x4c, 0x73, 0x1a, 0x59, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x20, 0x41,
	0x43, 0x4c, 0x73, 0x2e, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2c, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x65,
	0x74, 0x63, 0x2e, 0x4a, 0x4a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x43, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0x3d, 0x0a, 0x3b, 0x1a, 0x39, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a,
	0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2f, 0x61, 0x63, 0x6c, 0x73, 0x12, 0xf3, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x41, 0x43, 0x4c, 0x73, 0x12, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x01,
	0x92, 0x41, 0xae, 0x01, 0x12, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x20, 0x41, 0x43, 0x4c,
	0x73, 0x1a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x20, 0x41, 0x43,
	0x4c, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4a, 0x66, 0x0a, 0x03, 0x32, 0x30,
	0x31, 0x12, 0x5f, 0x0a, 0x1c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x20, 0x41, 0x43, 0x4c, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x3d, 0x1a, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x61, 0x63, 0x6c, 0x73, 0x12, 0xb1, 0x03,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x12, 0x3a, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9b, 0x02, 0x92, 0x41, 0xe5, 0x01, 0x12, 0x1b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x20, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x20, 0x41, 0x43, 0x4c, 0x73, 0x1a, 0x50, 0x52, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x20, 0x41, 0x43, 0x4c, 0x20, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x2e, 0x4a, 0x48, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x41, 0x12, 0x3f, 0x0a, 0x3d, 0x1a, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f,
	0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a,
	0xa6, 0x1d, 0x04, 0x08, 0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a,
	0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x61, 0x63, 0x6c, 0x73, 0x3a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x1a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x2f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x20, 0x41, 0x43, 0x4c, 0x73,
	0x2e, 0x42, 0x92, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x42, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x44, 0xaa, 0x02, 0x19, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41,
	0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x25, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1_security_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1_security_proto_rawDescData = file_redpanda_api_dataplane_v1_security_proto_rawDesc
)

func file_redpanda_api_dataplane_v1_security_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1_security_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1_security_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1_security_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1_security_proto_rawDescData
}

var file_redpanda_api_dataplane_v1_security_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_redpanda_api_dataplane_v1_security_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_redpanda_api_dataplane_v1_security_proto_goTypes = []any{
	(ResourceType)(0),                            // 0: redpanda.api.dataplane.v1.ResourceType
	(PatternType)(0),                             // 1: redpanda.api.dataplane.v1.PatternType
	(Operation)(0),                               // 2: redpanda.api.dataplane.v1.Operation
	(Permission)(0),                              // 3: redpanda.api.dataplane.v1.Permission
	(*Role)(nil),                                 // 4: redpanda.api.dataplane.v1.Role
	(*ListRolesRequest)(nil),                     // 5: redpanda.api.dataplane.v1.ListRolesRequest
	(*ListRolesResponse)(nil),                    // 6: redpanda.api.dataplane.v1.ListRolesResponse
	(*CreateRoleRequest)(nil),                    // 7: redpanda.api.dataplane.v1.CreateRoleRequest
	(*CreateRoleResponse)(nil),                   // 8: redpanda.api.dataplane.v1.CreateRoleResponse
	(*GetRoleRequest)(nil),                       // 9: redpanda.api.dataplane.v1.GetRoleRequest
	(*GetRoleResponse)(nil),                      // 10: redpanda.api.dataplane.v1.GetRoleResponse
	(*DeleteRoleRequest)(nil),                    // 11: redpanda.api.dataplane.v1.DeleteRoleRequest
	(*DeleteRoleResponse)(nil),                   // 12: redpanda.api.dataplane.v1.DeleteRoleResponse
	(*ListRoleMembersRequest)(nil),               // 13: redpanda.api.dataplane.v1.ListRoleMembersRequest
	(*ListRoleMembersResponse)(nil),              // 14: redpanda.api.dataplane.v1.ListRoleMembersResponse
	(*RoleMembership)(nil),                       // 15: redpanda.api.dataplane.v1.RoleMembership
	(*UpdateRoleMembershipRequest)(nil),          // 16: redpanda.api.dataplane.v1.UpdateRoleMembershipRequest
	(*UpdateRoleMembershipResponse)(nil),         // 17: redpanda.api.dataplane.v1.UpdateRoleMembershipResponse
	(*SchemaRegistryACL)(nil),                    // 18: redpanda.api.dataplane.v1.SchemaRegistryACL
	(*ListSchemaRegistryACLsRequest)(nil),        // 19: redpanda.api.dataplane.v1.ListSchemaRegistryACLsRequest
	(*ListSchemaRegistryACLsResponse)(nil),       // 20: redpanda.api.dataplane.v1.ListSchemaRegistryACLsResponse
	(*CreateSchemaRegistryACLsRequest)(nil),      // 21: redpanda.api.dataplane.v1.CreateSchemaRegistryACLsRequest
	(*CreateSchemaRegistryACLsResponse)(nil),     // 22: redpanda.api.dataplane.v1.CreateSchemaRegistryACLsResponse
	(*DeleteSchemaRegistryACLsRequest)(nil),      // 23: redpanda.api.dataplane.v1.DeleteSchemaRegistryACLsRequest
	(*DeleteSchemaRegistryACLsResponse)(nil),     // 24: redpanda.api.dataplane.v1.DeleteSchemaRegistryACLsResponse
	(*ListRolesRequest_Filter)(nil),              // 25: redpanda.api.dataplane.v1.ListRolesRequest.Filter
	(*ListRoleMembersRequest_Filter)(nil),        // 26: redpanda.api.dataplane.v1.ListRoleMembersRequest.Filter
	(*ListSchemaRegistryACLsRequest_Filter)(nil), // 27: redpanda.api.dataplane.v1.ListSchemaRegistryACLsRequest.Filter
}
var file_redpanda_api_dataplane_v1_security_proto_depIdxs = []int32{
	25, // 0: redpanda.api.dataplane.v1.ListRolesRequest.filter:type_name -> redpanda.api.dataplane.v1.ListRolesRequest.Filter
	4,  // 1: redpanda.api.dataplane.v1.ListRolesResponse.roles:type_name -> redpanda.api.dataplane.v1.Role
	4,  // 2: redpanda.api.dataplane.v1.CreateRoleRequest.role:type_name -> redpanda.api.dataplane.v1.Role
	4,  // 3: redpanda.api.dataplane.v1.CreateRoleResponse.role:type_name -> redpanda.api.dataplane.v1.Role
	4,  // 4: redpanda.api.dataplane.v1.GetRoleResponse.role:type_name -> redpanda.api.dataplane.v1.Role
	15, // 5: redpanda.api.dataplane.v1.GetRoleResponse.members:type_name -> redpanda.api.dataplane.v1.RoleMembership
	26, // 6: redpanda.api.dataplane.v1.ListRoleMembersRequest.filter:type_name -> redpanda.api.dataplane.v1.ListRoleMembersRequest.Filter
	15, // 7: redpanda.api.dataplane.v1.ListRoleMembersResponse.members:type_name -> redpanda.api.dataplane.v1.RoleMembership
	15, // 8: redpanda.api.dataplane.v1.UpdateRoleMembershipRequest.add:type_name -> redpanda.api.dataplane.v1.RoleMembership
	15, // 9: redpanda.api.dataplane.v1.UpdateRoleMembershipRequest.remove:type_name -> redpanda.api.dataplane.v1.RoleMembership
	15, // 10: redpanda.api.dataplane.v1.UpdateRoleMembershipResponse.added:type_name -> redpanda.api.dataplane.v1.RoleMembership
	15, // 11: redpanda.api.dataplane.v1.UpdateRoleMembershipResponse.removed:type_name -> redpanda.api.dataplane.v1.RoleMembership
	0,  // 12: redpanda.api.dataplane.v1.SchemaRegistryACL.resource_type:type_name -> redpanda.api.dataplane.v1.ResourceType
	1,  // 13: redpanda.api.dataplane.v1.SchemaRegistryACL.pattern_type:type_name -> redpanda.api.dataplane.v1.PatternType
	2,  // 14: redpanda.api.dataplane.v1.SchemaRegistryACL.operation:type_name -> redpanda.api.dataplane.v1.Operation
	3,  // 15: redpanda.api.dataplane.v1.SchemaRegistryACL.permission:type_name -> redpanda.api.dataplane.v1.Permission
	27, // 16: redpanda.api.dataplane.v1.ListSchemaRegistryACLsRequest.filter:type_name -> redpanda.api.dataplane.v1.ListSchemaRegistryACLsRequest.Filter
	18, // 17: redpanda.api.dataplane.v1.ListSchemaRegistryACLsResponse.acls:type_name -> redpanda.api.dataplane.v1.SchemaRegistryACL
	18, // 18: redpanda.api.dataplane.v1.CreateSchemaRegistryACLsRequest.acls:type_name -> redpanda.api.dataplane.v1.SchemaRegistryACL
	18, // 19: redpanda.api.dataplane.v1.DeleteSchemaRegistryACLsRequest.acls:type_name -> redpanda.api.dataplane.v1.SchemaRegistryACL
	0,  // 20: redpanda.api.dataplane.v1.ListSchemaRegistryACLsRequest.Filter.resource_type:type_name -> redpanda.api.dataplane.v1.ResourceType
	1,  // 21: redpanda.api.dataplane.v1.ListSchemaRegistryACLsRequest.Filter.pattern_type:type_name -> redpanda.api.dataplane.v1.PatternType
	2,  // 22: redpanda.api.dataplane.v1.ListSchemaRegistryACLsRequest.Filter.operation:type_name -> redpanda.api.dataplane.v1.Operation
	3,  // 23: redpanda.api.dataplane.v1.ListSchemaRegistryACLsRequest.Filter.permission:type_name -> redpanda.api.dataplane.v1.Permission
	5,  // 24: redpanda.api.dataplane.v1.SecurityService.ListRoles:input_type -> redpanda.api.dataplane.v1.ListRolesRequest
	7,  // 25: redpanda.api.dataplane.v1.SecurityService.CreateRole:input_type -> redpanda.api.dataplane.v1.CreateRoleRequest
	9,  // 26: redpanda.api.dataplane.v1.SecurityService.GetRole:input_type -> redpanda.api.dataplane.v1.GetRoleRequest
	11, // 27: redpanda.api.dataplane.v1.SecurityService.DeleteRole:input_type -> redpanda.api.dataplane.v1.DeleteRoleRequest
	13, // 28: redpanda.api.dataplane.v1.SecurityService.ListRoleMembers:input_type -> redpanda.api.dataplane.v1.ListRoleMembersRequest
	16, // 29: redpanda.api.dataplane.v1.SecurityService.UpdateRoleMembership:input_type -> redpanda.api.dataplane.v1.UpdateRoleMembershipRequest
	19, // 30: redpanda.api.dataplane.v1.SecurityService.ListSchemaRegistryACLs:input_type -> redpanda.api.dataplane.v1.ListSchemaRegistryACLsRequest
	21, // 31: redpanda.api.dataplane.v1.SecurityService.CreateSchemaRegistryACLs:input_type -> redpanda.api.dataplane.v1.CreateSchemaRegistryACLsRequest
	23, // 32: redpanda.api.dataplane.v1.SecurityService.DeleteSchemaRegistryACLs:input_type -> redpanda.api.dataplane.v1.DeleteSchemaRegistryACLsRequest
	6,  // 33: redpanda.api.dataplane.v1.SecurityService.ListRoles:output_type -> redpanda.api.dataplane.v1.ListRolesResponse
	8,  // 34: redpanda.api.dataplane.v1.SecurityService.CreateRole:output_type -> redpanda.api.dataplane.v1.CreateRoleResponse
	10, // 35: redpanda.api.dataplane.v1.SecurityService.GetRole:output_type -> redpanda.api.dataplane.v1.GetRoleResponse
	12, // 36: redpanda.api.dataplane.v1.SecurityService.DeleteRole:output_type -> redpanda.api.dataplane.v1.DeleteRoleResponse
	14, // 37: redpanda.api.dataplane.v1.SecurityService.ListRoleMembers:output_type -> redpanda.api.dataplane.v1.ListRoleMembersResponse
	17, // 38: redpanda.api.dataplane.v1.SecurityService.UpdateRoleMembership:output_type -> redpanda.api.dataplane.v1.UpdateRoleMembershipResponse
	20, // 39: redpanda.api.dataplane.v1.SecurityService.ListSchemaRegistryACLs:output_type -> redpanda.api.dataplane.v1.ListSchemaRegistryACLsResponse
	22, // 40: redpanda.api.dataplane.v1.SecurityService.CreateSchemaRegistryACLs:output_type -> redpanda.api.dataplane.v1.CreateSchemaRegistryACLsResponse
	24, // 41: redpanda.api.dataplane.v1.SecurityService.DeleteSchemaRegistryACLs:output_type -> redpanda.api.dataplane.v1.DeleteSchemaRegistryACLsResponse
	33, // [33:42] is the sub-list for method output_type
	24, // [24:33] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1_security_proto_init() }
func file_redpanda_api_dataplane_v1_security_proto_init() {
	if File_redpanda_api_dataplane_v1_security_proto != nil {
		return
	}
	file_redpanda_api_dataplane_v1_security_proto_msgTypes[1].OneofWrappers = []any{}
	file_redpanda_api_dataplane_v1_security_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1_security_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1_security_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1_security_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1_security_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1_security_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1_security_proto = out.File
	file_redpanda_api_dataplane_v1_security_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1_security_proto_goTypes = nil
	file_redpanda_api_dataplane_v1_security_proto_depIdxs = nil
}
