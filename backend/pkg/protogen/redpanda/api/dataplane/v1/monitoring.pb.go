// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1/monitoring.proto

package dataplanev1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v2 "buf.build/gen/go/redpandadata/core/protocolbuffers/go/redpanda/core/admin/v2"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Everything is up by one (produce is actually 0, fetch -> 1, etc)
type KafkaAPI int32

const (
	KafkaAPI_KAFKA_API_UNSPECIFIED         KafkaAPI = 0
	KafkaAPI_KAFKA_API_PRODUCE             KafkaAPI = 1
	KafkaAPI_KAFKA_API_FETCH               KafkaAPI = 2
	KafkaAPI_KAFKA_API_OFFSETS             KafkaAPI = 3
	KafkaAPI_KAFKA_API_METADATA            KafkaAPI = 4
	KafkaAPI_KAFKA_API_LEADER_AND_ISR      KafkaAPI = 5
	KafkaAPI_KAFKA_API_STOP_REPLICA        KafkaAPI = 6
	KafkaAPI_KAFKA_API_UPDATE_METADATA     KafkaAPI = 7
	KafkaAPI_KAFKA_API_CONTROLLED_SHUTDOWN KafkaAPI = 8
	KafkaAPI_KAFKA_API_OFFSET_COMMIT       KafkaAPI = 9
	KafkaAPI_KAFKA_API_OFFSET_FETCH        KafkaAPI = 10
	KafkaAPI_KAFKA_API_GROUP_COORDINATOR   KafkaAPI = 11
	KafkaAPI_KAFKA_API_JOIN_GROUP          KafkaAPI = 12
	KafkaAPI_KAFKA_API_HEARTBEAT           KafkaAPI = 13
	KafkaAPI_KAFKA_API_LEAVE_GROUP         KafkaAPI = 14
	KafkaAPI_KAFKA_API_SYNC_GROUP          KafkaAPI = 15
	KafkaAPI_KAFKA_API_DESCRIBE_GROUPS     KafkaAPI = 16
	KafkaAPI_KAFKA_API_LIST_GROUPS         KafkaAPI = 17
	KafkaAPI_KAFKA_API_SASL_HANDSHAKE      KafkaAPI = 18
	KafkaAPI_KAFKA_API_API_VERSIONS        KafkaAPI = 19
	KafkaAPI_KAFKA_API_CREATE_TOPICS       KafkaAPI = 20
	KafkaAPI_KAFKA_API_DELETE_TOPICS       KafkaAPI = 21
)

// Enum value maps for KafkaAPI.
var (
	KafkaAPI_name = map[int32]string{
		0:  "KAFKA_API_UNSPECIFIED",
		1:  "KAFKA_API_PRODUCE",
		2:  "KAFKA_API_FETCH",
		3:  "KAFKA_API_OFFSETS",
		4:  "KAFKA_API_METADATA",
		5:  "KAFKA_API_LEADER_AND_ISR",
		6:  "KAFKA_API_STOP_REPLICA",
		7:  "KAFKA_API_UPDATE_METADATA",
		8:  "KAFKA_API_CONTROLLED_SHUTDOWN",
		9:  "KAFKA_API_OFFSET_COMMIT",
		10: "KAFKA_API_OFFSET_FETCH",
		11: "KAFKA_API_GROUP_COORDINATOR",
		12: "KAFKA_API_JOIN_GROUP",
		13: "KAFKA_API_HEARTBEAT",
		14: "KAFKA_API_LEAVE_GROUP",
		15: "KAFKA_API_SYNC_GROUP",
		16: "KAFKA_API_DESCRIBE_GROUPS",
		17: "KAFKA_API_LIST_GROUPS",
		18: "KAFKA_API_SASL_HANDSHAKE",
		19: "KAFKA_API_API_VERSIONS",
		20: "KAFKA_API_CREATE_TOPICS",
		21: "KAFKA_API_DELETE_TOPICS",
	}
	KafkaAPI_value = map[string]int32{
		"KAFKA_API_UNSPECIFIED":         0,
		"KAFKA_API_PRODUCE":             1,
		"KAFKA_API_FETCH":               2,
		"KAFKA_API_OFFSETS":             3,
		"KAFKA_API_METADATA":            4,
		"KAFKA_API_LEADER_AND_ISR":      5,
		"KAFKA_API_STOP_REPLICA":        6,
		"KAFKA_API_UPDATE_METADATA":     7,
		"KAFKA_API_CONTROLLED_SHUTDOWN": 8,
		"KAFKA_API_OFFSET_COMMIT":       9,
		"KAFKA_API_OFFSET_FETCH":        10,
		"KAFKA_API_GROUP_COORDINATOR":   11,
		"KAFKA_API_JOIN_GROUP":          12,
		"KAFKA_API_HEARTBEAT":           13,
		"KAFKA_API_LEAVE_GROUP":         14,
		"KAFKA_API_SYNC_GROUP":          15,
		"KAFKA_API_DESCRIBE_GROUPS":     16,
		"KAFKA_API_LIST_GROUPS":         17,
		"KAFKA_API_SASL_HANDSHAKE":      18,
		"KAFKA_API_API_VERSIONS":        19,
		"KAFKA_API_CREATE_TOPICS":       20,
		"KAFKA_API_DELETE_TOPICS":       21,
	}
)

func (x KafkaAPI) Enum() *KafkaAPI {
	p := new(KafkaAPI)
	*p = x
	return p
}

func (x KafkaAPI) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KafkaAPI) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1_monitoring_proto_enumTypes[0].Descriptor()
}

func (KafkaAPI) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1_monitoring_proto_enumTypes[0]
}

func (x KafkaAPI) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KafkaAPI.Descriptor instead.
func (KafkaAPI) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP(), []int{0}
}

type ListConnectionsRequest struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	State                 v2.KafkaConnectionState `protobuf:"varint,1,opt,name=state,proto3,enum=redpanda.core.admin.v2.KafkaConnectionState" json:"state,omitempty"`
	IpAddress             string                  `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	ClientId              string                  `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSoftwareName    string                  `protobuf:"bytes,4,opt,name=client_software_name,json=clientSoftwareName,proto3" json:"client_software_name,omitempty"`
	ClientSoftwareVersion string                  `protobuf:"bytes,5,opt,name=client_software_version,json=clientSoftwareVersion,proto3" json:"client_software_version,omitempty"`
	GroupId               string                  `protobuf:"bytes,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	User                  string                  `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	IdleMs                int64                   `protobuf:"varint,8,opt,name=idle_ms,json=idleMs,proto3" json:"idle_ms,omitempty"`
	FilterRaw             string                  `protobuf:"bytes,9,opt,name=filter_raw,json=filterRaw,proto3" json:"filter_raw,omitempty"`
	OrderBy               string                  `protobuf:"bytes,10,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Limit                 uint32                  `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListConnectionsRequest) Reset() {
	*x = ListConnectionsRequest{}
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsRequest) ProtoMessage() {}

func (x *ListConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP(), []int{0}
}

func (x *ListConnectionsRequest) GetState() v2.KafkaConnectionState {
	if x != nil {
		return x.State
	}
	return v2.KafkaConnectionState(0)
}

func (x *ListConnectionsRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ListConnectionsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ListConnectionsRequest) GetClientSoftwareName() string {
	if x != nil {
		return x.ClientSoftwareName
	}
	return ""
}

func (x *ListConnectionsRequest) GetClientSoftwareVersion() string {
	if x != nil {
		return x.ClientSoftwareVersion
	}
	return ""
}

func (x *ListConnectionsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ListConnectionsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ListConnectionsRequest) GetIdleMs() int64 {
	if x != nil {
		return x.IdleMs
	}
	return 0
}

func (x *ListConnectionsRequest) GetFilterRaw() string {
	if x != nil {
		return x.FilterRaw
	}
	return ""
}

func (x *ListConnectionsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListConnectionsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ConnectionClient struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Ip              string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port            uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Id              string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	SoftwareName    string                 `protobuf:"bytes,4,opt,name=software_name,json=softwareName,proto3" json:"software_name,omitempty"`
	SoftwareVersion string                 `protobuf:"bytes,5,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConnectionClient) Reset() {
	*x = ConnectionClient{}
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionClient) ProtoMessage() {}

func (x *ConnectionClient) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionClient.ProtoReflect.Descriptor instead.
func (*ConnectionClient) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionClient) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ConnectionClient) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ConnectionClient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectionClient) GetSoftwareName() string {
	if x != nil {
		return x.SoftwareName
	}
	return ""
}

func (x *ConnectionClient) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

type APIVersion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Api           KafkaAPI               `protobuf:"varint,1,opt,name=api,proto3,enum=redpanda.api.dataplane.v1.KafkaAPI" json:"api,omitempty"`
	Version       int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *APIVersion) Reset() {
	*x = APIVersion{}
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIVersion) ProtoMessage() {}

func (x *APIVersion) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIVersion.ProtoReflect.Descriptor instead.
func (*APIVersion) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP(), []int{2}
}

func (x *APIVersion) GetApi() KafkaAPI {
	if x != nil {
		return x.Api
	}
	return KafkaAPI_KAFKA_API_UNSPECIFIED
}

func (x *APIVersion) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ActiveRequests struct {
	state           protoimpl.MessageState    `protogen:"open.v1"`
	Requests        []*ActiveRequests_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	HasMoreRequests bool                      `protobuf:"varint,2,opt,name=has_more_requests,json=hasMoreRequests,proto3" json:"has_more_requests,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ActiveRequests) Reset() {
	*x = ActiveRequests{}
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveRequests) ProtoMessage() {}

func (x *ActiveRequests) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveRequests.ProtoReflect.Descriptor instead.
func (*ActiveRequests) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP(), []int{3}
}

func (x *ActiveRequests) GetRequests() []*ActiveRequests_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ActiveRequests) GetHasMoreRequests() bool {
	if x != nil {
		return x.HasMoreRequests
	}
	return false
}

type GroupInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InstanceId    string                 `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	MemberId      string                 `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP(), []int{4}
}

func (x *GroupInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupInfo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GroupInfo) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type Connection struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	NodeId               int32                   `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ShardId              uint32                  `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Uid                  string                  `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	State                v2.KafkaConnectionState `protobuf:"varint,4,opt,name=state,proto3,enum=redpanda.core.admin.v2.KafkaConnectionState" json:"state,omitempty"`
	OpenTime             *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	CloseTime            *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	ConnectionDuration   *durationpb.Duration    `protobuf:"bytes,7,opt,name=connection_duration,json=connectionDuration,proto3" json:"connection_duration,omitempty"`
	Authentication       *v2.AuthenticationInfo  `protobuf:"bytes,8,opt,name=authentication,proto3" json:"authentication,omitempty"`
	TlsEnabled           bool                    `protobuf:"varint,9,opt,name=tls_enabled,json=tlsEnabled,proto3" json:"tls_enabled,omitempty"`
	Client               *ConnectionClient       `protobuf:"bytes,10,opt,name=client,proto3" json:"client,omitempty"`
	Group                *GroupInfo              `protobuf:"bytes,11,opt,name=group,proto3" json:"group,omitempty"`
	ListenerName         string                  `protobuf:"bytes,12,opt,name=listener_name,json=listenerName,proto3" json:"listener_name,omitempty"`
	TransactionalId      string                  `protobuf:"bytes,13,opt,name=transactional_id,json=transactionalId,proto3" json:"transactional_id,omitempty"`
	ApiVersions          []*APIVersion           `protobuf:"bytes,14,rep,name=api_versions,json=apiVersions,proto3" json:"api_versions,omitempty"`
	IdleDuration         *durationpb.Duration    `protobuf:"bytes,15,opt,name=idle_duration,json=idleDuration,proto3" json:"idle_duration,omitempty"`
	ActiveRequests       *ActiveRequests         `protobuf:"bytes,16,opt,name=active_requests,json=activeRequests,proto3" json:"active_requests,omitempty"`
	RequestStatisticsAll *v2.RequestStatistics   `protobuf:"bytes,17,opt,name=request_statistics_all,json=requestStatisticsAll,proto3" json:"request_statistics_all,omitempty"`
	RequestStatistics_1M *v2.RequestStatistics   `protobuf:"bytes,18,opt,name=request_statistics_1m,json=requestStatistics1m,proto3" json:"request_statistics_1m,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Connection) Reset() {
	*x = Connection{}
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP(), []int{5}
}

func (x *Connection) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Connection) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *Connection) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Connection) GetState() v2.KafkaConnectionState {
	if x != nil {
		return x.State
	}
	return v2.KafkaConnectionState(0)
}

func (x *Connection) GetOpenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *Connection) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *Connection) GetConnectionDuration() *durationpb.Duration {
	if x != nil {
		return x.ConnectionDuration
	}
	return nil
}

func (x *Connection) GetAuthentication() *v2.AuthenticationInfo {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *Connection) GetTlsEnabled() bool {
	if x != nil {
		return x.TlsEnabled
	}
	return false
}

func (x *Connection) GetClient() *ConnectionClient {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *Connection) GetGroup() *GroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Connection) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *Connection) GetTransactionalId() string {
	if x != nil {
		return x.TransactionalId
	}
	return ""
}

func (x *Connection) GetApiVersions() []*APIVersion {
	if x != nil {
		return x.ApiVersions
	}
	return nil
}

func (x *Connection) GetIdleDuration() *durationpb.Duration {
	if x != nil {
		return x.IdleDuration
	}
	return nil
}

func (x *Connection) GetActiveRequests() *ActiveRequests {
	if x != nil {
		return x.ActiveRequests
	}
	return nil
}

func (x *Connection) GetRequestStatisticsAll() *v2.RequestStatistics {
	if x != nil {
		return x.RequestStatisticsAll
	}
	return nil
}

func (x *Connection) GetRequestStatistics_1M() *v2.RequestStatistics {
	if x != nil {
		return x.RequestStatistics_1M
	}
	return nil
}

type ListConnectionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Connections   []*Connection          `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConnectionsResponse) Reset() {
	*x = ListConnectionsResponse{}
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsResponse) ProtoMessage() {}

func (x *ListConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP(), []int{6}
}

func (x *ListConnectionsResponse) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ActiveRequests_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Api           KafkaAPI               `protobuf:"varint,1,opt,name=api,proto3,enum=redpanda.api.dataplane.v1.KafkaAPI" json:"api,omitempty"`
	Duration      *durationpb.Duration   `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActiveRequests_Request) Reset() {
	*x = ActiveRequests_Request{}
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveRequests_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveRequests_Request) ProtoMessage() {}

func (x *ActiveRequests_Request) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveRequests_Request.ProtoReflect.Descriptor instead.
func (*ActiveRequests_Request) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ActiveRequests_Request) GetApi() KafkaAPI {
	if x != nil {
		return x.Api
	}
	return KafkaAPI_KAFKA_API_UNSPECIFIED
}

func (x *ActiveRequests_Request) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_redpanda_api_dataplane_v1_monitoring_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1_monitoring_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x76, 0x32, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x05, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x07, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x06, 0x69, 0x64, 0x6c, 0x65, 0x4d, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x61, 0x77, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x3a, 0xb6, 0x02, 0xba, 0x48, 0xb2, 0x02, 0x1a, 0xaf, 0x02, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x12, 0x43, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x77, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x69, 0x64, 0x65,
	0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x1a, 0xcb, 0x01, 0x21, 0x28,
	0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x77, 0x29, 0x20, 0x26, 0x26, 0x20, 0x28, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x29, 0x20, 0x7c, 0x7c,
	0x20, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7c, 0x7c, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x68, 0x61,
	0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x29,
	0x20, 0x7c, 0x7c, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x29, 0x29, 0x29, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41,
	0x50, 0x49, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x84, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a,
	0x77, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x50, 0x49, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xc4, 0x08, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x74, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x5d, 0x0a, 0x15, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x31, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x31, 0x6d, 0x22, 0x62, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0xec,
	0x04, 0x0a, 0x08, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x50, 0x49, 0x12, 0x19, 0x0a, 0x15, 0x4b,
	0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x41, 0x46,
	0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4c,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x53, 0x52, 0x10, 0x05, 0x12,
	0x1a, 0x0a, 0x16, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4b,
	0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x41,
	0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x45, 0x44, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x12, 0x1b, 0x0a,
	0x17, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x41,
	0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x41, 0x46, 0x4b, 0x41,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x0c, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x48,
	0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x41,
	0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x0f, 0x12,
	0x1d, 0x0a, 0x19, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x10, 0x12, 0x19,
	0x0a, 0x15, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x41, 0x46,
	0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x53, 0x48, 0x41, 0x4b, 0x45, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x41, 0x46, 0x4b, 0x41,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x53, 0x10, 0x14,
	0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x53, 0x10, 0x15, 0x32, 0x9b, 0x03,
	0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xcf, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4,
	0x01, 0x92, 0x41, 0xa6, 0x01, 0x12, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x36,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x53, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4c, 0x0a,
	0x12, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08,
	0x03, 0x10, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x34, 0x92, 0x41, 0x31, 0x0a, 0x0a, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x42, 0x94, 0x02, 0x0a, 0x1d,
	0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x52, 0x41, 0x44, 0xaa, 0x02, 0x19, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x19, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x25, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a,
	0x41, 0x70, 0x69, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1_monitoring_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1_monitoring_proto_rawDescData = file_redpanda_api_dataplane_v1_monitoring_proto_rawDesc
)

func file_redpanda_api_dataplane_v1_monitoring_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1_monitoring_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1_monitoring_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1_monitoring_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1_monitoring_proto_rawDescData
}

var file_redpanda_api_dataplane_v1_monitoring_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_redpanda_api_dataplane_v1_monitoring_proto_goTypes = []any{
	(KafkaAPI)(0),                   // 0: redpanda.api.dataplane.v1.KafkaAPI
	(*ListConnectionsRequest)(nil),  // 1: redpanda.api.dataplane.v1.ListConnectionsRequest
	(*ConnectionClient)(nil),        // 2: redpanda.api.dataplane.v1.ConnectionClient
	(*APIVersion)(nil),              // 3: redpanda.api.dataplane.v1.APIVersion
	(*ActiveRequests)(nil),          // 4: redpanda.api.dataplane.v1.ActiveRequests
	(*GroupInfo)(nil),               // 5: redpanda.api.dataplane.v1.GroupInfo
	(*Connection)(nil),              // 6: redpanda.api.dataplane.v1.Connection
	(*ListConnectionsResponse)(nil), // 7: redpanda.api.dataplane.v1.ListConnectionsResponse
	(*ActiveRequests_Request)(nil),  // 8: redpanda.api.dataplane.v1.ActiveRequests.Request
	(v2.KafkaConnectionState)(0),    // 9: redpanda.core.admin.v2.KafkaConnectionState
	(*timestamppb.Timestamp)(nil),   // 10: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),     // 11: google.protobuf.Duration
	(*v2.AuthenticationInfo)(nil),   // 12: redpanda.core.admin.v2.AuthenticationInfo
	(*v2.RequestStatistics)(nil),    // 13: redpanda.core.admin.v2.RequestStatistics
}
var file_redpanda_api_dataplane_v1_monitoring_proto_depIdxs = []int32{
	9,  // 0: redpanda.api.dataplane.v1.ListConnectionsRequest.state:type_name -> redpanda.core.admin.v2.KafkaConnectionState
	0,  // 1: redpanda.api.dataplane.v1.APIVersion.api:type_name -> redpanda.api.dataplane.v1.KafkaAPI
	8,  // 2: redpanda.api.dataplane.v1.ActiveRequests.requests:type_name -> redpanda.api.dataplane.v1.ActiveRequests.Request
	9,  // 3: redpanda.api.dataplane.v1.Connection.state:type_name -> redpanda.core.admin.v2.KafkaConnectionState
	10, // 4: redpanda.api.dataplane.v1.Connection.open_time:type_name -> google.protobuf.Timestamp
	10, // 5: redpanda.api.dataplane.v1.Connection.close_time:type_name -> google.protobuf.Timestamp
	11, // 6: redpanda.api.dataplane.v1.Connection.connection_duration:type_name -> google.protobuf.Duration
	12, // 7: redpanda.api.dataplane.v1.Connection.authentication:type_name -> redpanda.core.admin.v2.AuthenticationInfo
	2,  // 8: redpanda.api.dataplane.v1.Connection.client:type_name -> redpanda.api.dataplane.v1.ConnectionClient
	5,  // 9: redpanda.api.dataplane.v1.Connection.group:type_name -> redpanda.api.dataplane.v1.GroupInfo
	3,  // 10: redpanda.api.dataplane.v1.Connection.api_versions:type_name -> redpanda.api.dataplane.v1.APIVersion
	11, // 11: redpanda.api.dataplane.v1.Connection.idle_duration:type_name -> google.protobuf.Duration
	4,  // 12: redpanda.api.dataplane.v1.Connection.active_requests:type_name -> redpanda.api.dataplane.v1.ActiveRequests
	13, // 13: redpanda.api.dataplane.v1.Connection.request_statistics_all:type_name -> redpanda.core.admin.v2.RequestStatistics
	13, // 14: redpanda.api.dataplane.v1.Connection.request_statistics_1m:type_name -> redpanda.core.admin.v2.RequestStatistics
	6,  // 15: redpanda.api.dataplane.v1.ListConnectionsResponse.connections:type_name -> redpanda.api.dataplane.v1.Connection
	0,  // 16: redpanda.api.dataplane.v1.ActiveRequests.Request.api:type_name -> redpanda.api.dataplane.v1.KafkaAPI
	11, // 17: redpanda.api.dataplane.v1.ActiveRequests.Request.duration:type_name -> google.protobuf.Duration
	1,  // 18: redpanda.api.dataplane.v1.MonitoringService.ListConnections:input_type -> redpanda.api.dataplane.v1.ListConnectionsRequest
	7,  // 19: redpanda.api.dataplane.v1.MonitoringService.ListConnections:output_type -> redpanda.api.dataplane.v1.ListConnectionsResponse
	19, // [19:20] is the sub-list for method output_type
	18, // [18:19] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1_monitoring_proto_init() }
func file_redpanda_api_dataplane_v1_monitoring_proto_init() {
	if File_redpanda_api_dataplane_v1_monitoring_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1_monitoring_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1_monitoring_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1_monitoring_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1_monitoring_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1_monitoring_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1_monitoring_proto = out.File
	file_redpanda_api_dataplane_v1_monitoring_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1_monitoring_proto_goTypes = nil
	file_redpanda_api_dataplane_v1_monitoring_proto_depIdxs = nil
}
