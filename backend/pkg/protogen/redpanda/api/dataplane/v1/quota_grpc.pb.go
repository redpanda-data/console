// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/api/dataplane/v1/quota.proto

package dataplanev1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuotaService_ListQuotas_FullMethodName  = "/redpanda.api.dataplane.v1.QuotaService/ListQuotas"
	QuotaService_CreateQuota_FullMethodName = "/redpanda.api.dataplane.v1.QuotaService/CreateQuota"
	QuotaService_DeleteQuota_FullMethodName = "/redpanda.api.dataplane.v1.QuotaService/DeleteQuota"
)

// QuotaServiceClient is the client API for QuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaServiceClient interface {
	ListQuotas(ctx context.Context, in *ListQuotasRequest, opts ...grpc.CallOption) (*ListQuotasResponse, error)
	CreateQuota(ctx context.Context, in *CreateQuotaRequest, opts ...grpc.CallOption) (*CreateQuotaResponse, error)
	DeleteQuota(ctx context.Context, in *DeleteQuotaRequest, opts ...grpc.CallOption) (*DeleteQuotaResponse, error)
}

type quotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaServiceClient(cc grpc.ClientConnInterface) QuotaServiceClient {
	return &quotaServiceClient{cc}
}

func (c *quotaServiceClient) ListQuotas(ctx context.Context, in *ListQuotasRequest, opts ...grpc.CallOption) (*ListQuotasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuotasResponse)
	err := c.cc.Invoke(ctx, QuotaService_ListQuotas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) CreateQuota(ctx context.Context, in *CreateQuotaRequest, opts ...grpc.CallOption) (*CreateQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuotaResponse)
	err := c.cc.Invoke(ctx, QuotaService_CreateQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) DeleteQuota(ctx context.Context, in *DeleteQuotaRequest, opts ...grpc.CallOption) (*DeleteQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuotaResponse)
	err := c.cc.Invoke(ctx, QuotaService_DeleteQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaServiceServer is the server API for QuotaService service.
// All implementations must embed UnimplementedQuotaServiceServer
// for forward compatibility.
type QuotaServiceServer interface {
	ListQuotas(context.Context, *ListQuotasRequest) (*ListQuotasResponse, error)
	CreateQuota(context.Context, *CreateQuotaRequest) (*CreateQuotaResponse, error)
	DeleteQuota(context.Context, *DeleteQuotaRequest) (*DeleteQuotaResponse, error)
	mustEmbedUnimplementedQuotaServiceServer()
}

// UnimplementedQuotaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuotaServiceServer struct{}

func (UnimplementedQuotaServiceServer) ListQuotas(context.Context, *ListQuotasRequest) (*ListQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuotas not implemented")
}
func (UnimplementedQuotaServiceServer) CreateQuota(context.Context, *CreateQuotaRequest) (*CreateQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuota not implemented")
}
func (UnimplementedQuotaServiceServer) DeleteQuota(context.Context, *DeleteQuotaRequest) (*DeleteQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuota not implemented")
}
func (UnimplementedQuotaServiceServer) mustEmbedUnimplementedQuotaServiceServer() {}
func (UnimplementedQuotaServiceServer) testEmbeddedByValue()                      {}

// UnsafeQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaServiceServer will
// result in compilation errors.
type UnsafeQuotaServiceServer interface {
	mustEmbedUnimplementedQuotaServiceServer()
}

func RegisterQuotaServiceServer(s grpc.ServiceRegistrar, srv QuotaServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuotaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuotaService_ServiceDesc, srv)
}

func _QuotaService_ListQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).ListQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_ListQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).ListQuotas(ctx, req.(*ListQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_CreateQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).CreateQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_CreateQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).CreateQuota(ctx, req.(*CreateQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_DeleteQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).DeleteQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_DeleteQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).DeleteQuota(ctx, req.(*DeleteQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaService_ServiceDesc is the grpc.ServiceDesc for QuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.dataplane.v1.QuotaService",
	HandlerType: (*QuotaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListQuotas",
			Handler:    _QuotaService_ListQuotas_Handler,
		},
		{
			MethodName: "CreateQuota",
			Handler:    _QuotaService_CreateQuota_Handler,
		},
		{
			MethodName: "DeleteQuota",
			Handler:    _QuotaService_DeleteQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/api/dataplane/v1/quota.proto",
}
