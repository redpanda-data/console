// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha3/pipeline.proto

package dataplanev1alpha3connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	v1alpha3 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha3"
)

// PipelineServiceGatewayServer implements the gRPC server API for the PipelineService service.
type PipelineServiceGatewayServer struct {
	v1alpha3.UnimplementedPipelineServiceServer
}

// NewPipelineServiceGatewayServer constructs a Connect-Gateway gRPC server for the PipelineService
// service.
func NewPipelineServiceGatewayServer(svc PipelineServiceHandler, opts ...connect_gateway.HandlerOption) *PipelineServiceGatewayServer {
	return &PipelineServiceGatewayServer{}
}

func (s *PipelineServiceGatewayServer) ExecutePipelineTask(v1alpha3.PipelineService_ExecutePipelineTaskServer) error {
	return status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
}

// RegisterPipelineServiceHandlerGatewayServer registers the Connect handlers for the
// PipelineService "svc" to "mux".
func RegisterPipelineServiceHandlerGatewayServer(mux *runtime.ServeMux, svc PipelineServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha3.RegisterPipelineServiceHandlerServer(context.TODO(), mux, NewPipelineServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
