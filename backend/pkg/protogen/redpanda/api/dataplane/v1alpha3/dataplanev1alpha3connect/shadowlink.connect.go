// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha3/shadowlink.proto

package dataplanev1alpha3connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha3 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha3"
	v2 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/core/admin/v2"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ShadowLinkServiceName is the fully-qualified name of the ShadowLinkService service.
	ShadowLinkServiceName = "redpanda.api.dataplane.v1alpha3.ShadowLinkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShadowLinkServiceFailOverProcedure is the fully-qualified name of the ShadowLinkService's
	// FailOver RPC.
	ShadowLinkServiceFailOverProcedure = "/redpanda.api.dataplane.v1alpha3.ShadowLinkService/FailOver"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	shadowLinkServiceServiceDescriptor        = v1alpha3.File_redpanda_api_dataplane_v1alpha3_shadowlink_proto.Services().ByName("ShadowLinkService")
	shadowLinkServiceFailOverMethodDescriptor = shadowLinkServiceServiceDescriptor.Methods().ByName("FailOver")
)

// ShadowLinkServiceClient is a client for the redpanda.api.dataplane.v1alpha3.ShadowLinkService
// service.
type ShadowLinkServiceClient interface {
	FailOver(context.Context, *connect.Request[v2.FailOverRequest]) (*connect.Response[v1alpha3.FailOverResponse], error)
}

// NewShadowLinkServiceClient constructs a client for the
// redpanda.api.dataplane.v1alpha3.ShadowLinkService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShadowLinkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ShadowLinkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shadowLinkServiceClient{
		failOver: connect.NewClient[v2.FailOverRequest, v1alpha3.FailOverResponse](
			httpClient,
			baseURL+ShadowLinkServiceFailOverProcedure,
			connect.WithSchema(shadowLinkServiceFailOverMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// shadowLinkServiceClient implements ShadowLinkServiceClient.
type shadowLinkServiceClient struct {
	failOver *connect.Client[v2.FailOverRequest, v1alpha3.FailOverResponse]
}

// FailOver calls redpanda.api.dataplane.v1alpha3.ShadowLinkService.FailOver.
func (c *shadowLinkServiceClient) FailOver(ctx context.Context, req *connect.Request[v2.FailOverRequest]) (*connect.Response[v1alpha3.FailOverResponse], error) {
	return c.failOver.CallUnary(ctx, req)
}

// ShadowLinkServiceHandler is an implementation of the
// redpanda.api.dataplane.v1alpha3.ShadowLinkService service.
type ShadowLinkServiceHandler interface {
	FailOver(context.Context, *connect.Request[v2.FailOverRequest]) (*connect.Response[v1alpha3.FailOverResponse], error)
}

// NewShadowLinkServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShadowLinkServiceHandler(svc ShadowLinkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	shadowLinkServiceFailOverHandler := connect.NewUnaryHandler(
		ShadowLinkServiceFailOverProcedure,
		svc.FailOver,
		connect.WithSchema(shadowLinkServiceFailOverMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.dataplane.v1alpha3.ShadowLinkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShadowLinkServiceFailOverProcedure:
			shadowLinkServiceFailOverHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShadowLinkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShadowLinkServiceHandler struct{}

func (UnimplementedShadowLinkServiceHandler) FailOver(context.Context, *connect.Request[v2.FailOverRequest]) (*connect.Response[v1alpha3.FailOverResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha3.ShadowLinkService.FailOver is not implemented"))
}
