// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha3/pipeline.proto

package dataplanev1alpha3connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha3 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha3"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PipelineServiceName is the fully-qualified name of the PipelineService service.
	PipelineServiceName = "redpanda.api.dataplane.v1alpha3.PipelineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PipelineServiceExecutePipelineTaskProcedure is the fully-qualified name of the PipelineService's
	// ExecutePipelineTask RPC.
	PipelineServiceExecutePipelineTaskProcedure = "/redpanda.api.dataplane.v1alpha3.PipelineService/ExecutePipelineTask"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pipelineServiceServiceDescriptor                   = v1alpha3.File_redpanda_api_dataplane_v1alpha3_pipeline_proto.Services().ByName("PipelineService")
	pipelineServiceExecutePipelineTaskMethodDescriptor = pipelineServiceServiceDescriptor.Methods().ByName("ExecutePipelineTask")
)

// PipelineServiceClient is a client for the redpanda.api.dataplane.v1alpha3.PipelineService
// service.
type PipelineServiceClient interface {
	// ExecutePipelineTask generates a pipeline using AI with real-time streaming updates.
	// Supports multi-turn conversations and interactive pipeline refinement.
	ExecutePipelineTask(context.Context) *connect.BidiStreamForClient[v1alpha3.ExecutePipelineTaskRequest, v1alpha3.ExecutePipelineTaskResponse]
}

// NewPipelineServiceClient constructs a client for the
// redpanda.api.dataplane.v1alpha3.PipelineService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPipelineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PipelineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pipelineServiceClient{
		executePipelineTask: connect.NewClient[v1alpha3.ExecutePipelineTaskRequest, v1alpha3.ExecutePipelineTaskResponse](
			httpClient,
			baseURL+PipelineServiceExecutePipelineTaskProcedure,
			connect.WithSchema(pipelineServiceExecutePipelineTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pipelineServiceClient implements PipelineServiceClient.
type pipelineServiceClient struct {
	executePipelineTask *connect.Client[v1alpha3.ExecutePipelineTaskRequest, v1alpha3.ExecutePipelineTaskResponse]
}

// ExecutePipelineTask calls redpanda.api.dataplane.v1alpha3.PipelineService.ExecutePipelineTask.
func (c *pipelineServiceClient) ExecutePipelineTask(ctx context.Context) *connect.BidiStreamForClient[v1alpha3.ExecutePipelineTaskRequest, v1alpha3.ExecutePipelineTaskResponse] {
	return c.executePipelineTask.CallBidiStream(ctx)
}

// PipelineServiceHandler is an implementation of the
// redpanda.api.dataplane.v1alpha3.PipelineService service.
type PipelineServiceHandler interface {
	// ExecutePipelineTask generates a pipeline using AI with real-time streaming updates.
	// Supports multi-turn conversations and interactive pipeline refinement.
	ExecutePipelineTask(context.Context, *connect.BidiStream[v1alpha3.ExecutePipelineTaskRequest, v1alpha3.ExecutePipelineTaskResponse]) error
}

// NewPipelineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPipelineServiceHandler(svc PipelineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pipelineServiceExecutePipelineTaskHandler := connect.NewBidiStreamHandler(
		PipelineServiceExecutePipelineTaskProcedure,
		svc.ExecutePipelineTask,
		connect.WithSchema(pipelineServiceExecutePipelineTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.dataplane.v1alpha3.PipelineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PipelineServiceExecutePipelineTaskProcedure:
			pipelineServiceExecutePipelineTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPipelineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPipelineServiceHandler struct{}

func (UnimplementedPipelineServiceHandler) ExecutePipelineTask(context.Context, *connect.BidiStream[v1alpha3.ExecutePipelineTaskRequest, v1alpha3.ExecutePipelineTaskResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha3.PipelineService.ExecutePipelineTask is not implemented"))
}
