// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha3/shadowlink.proto

package dataplanev1alpha3connect

import (
	context "context"
	fmt "fmt"

	v2 "buf.build/gen/go/redpandadata/core/protocolbuffers/go/redpanda/core/admin/v2"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha3 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha3"
)

// ShadowLinkServiceGatewayServer implements the gRPC server API for the ShadowLinkService service.
type ShadowLinkServiceGatewayServer struct {
	v1alpha3.UnimplementedShadowLinkServiceServer
	failOver connect_gateway.UnaryHandler[v2.FailOverRequest, v1alpha3.FailOverResponse]
}

// NewShadowLinkServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// ShadowLinkService service.
func NewShadowLinkServiceGatewayServer(svc ShadowLinkServiceHandler, opts ...connect_gateway.HandlerOption) *ShadowLinkServiceGatewayServer {
	return &ShadowLinkServiceGatewayServer{
		failOver: connect_gateway.NewUnaryHandler(ShadowLinkServiceFailOverProcedure, svc.FailOver, opts...),
	}
}

func (s *ShadowLinkServiceGatewayServer) FailOver(ctx context.Context, req *v2.FailOverRequest) (*v1alpha3.FailOverResponse, error) {
	return s.failOver(ctx, req)
}

// RegisterShadowLinkServiceHandlerGatewayServer registers the Connect handlers for the
// ShadowLinkService "svc" to "mux".
func RegisterShadowLinkServiceHandlerGatewayServer(mux *runtime.ServeMux, svc ShadowLinkServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha3.RegisterShadowLinkServiceHandlerServer(context.TODO(), mux, NewShadowLinkServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
