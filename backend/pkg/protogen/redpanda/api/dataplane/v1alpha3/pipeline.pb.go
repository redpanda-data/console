// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1alpha3/pipeline.proto

package dataplanev1alpha3

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TaskStatus represents the current state of the generation.
type TaskStatus int32

const (
	TaskStatus_TASK_STATUS_UNSPECIFIED TaskStatus = 0
	TaskStatus_TASK_STATUS_THINKING    TaskStatus = 1 // Agent is reasoning/thinking
	TaskStatus_TASK_STATUS_GENERATING  TaskStatus = 2 // Agent is generating pipeline
	TaskStatus_TASK_STATUS_COMPLETED   TaskStatus = 3 // Generation completed successfully
	TaskStatus_TASK_STATUS_FAILED      TaskStatus = 4 // Generation failed with error
	TaskStatus_TASK_STATUS_STARTED     TaskStatus = 5 // We started a conversation with the LLM, this is first expected status.
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_UNSPECIFIED",
		1: "TASK_STATUS_THINKING",
		2: "TASK_STATUS_GENERATING",
		3: "TASK_STATUS_COMPLETED",
		4: "TASK_STATUS_FAILED",
		5: "TASK_STATUS_STARTED",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNSPECIFIED": 0,
		"TASK_STATUS_THINKING":    1,
		"TASK_STATUS_GENERATING":  2,
		"TASK_STATUS_COMPLETED":   3,
		"TASK_STATUS_FAILED":      4,
		"TASK_STATUS_STARTED":     5,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{0}
}

// ContentType represents the type of streaming content.
type ContentType int32

const (
	ContentType_CONTENT_TYPE_UNSPECIFIED ContentType = 0
	ContentType_CONTENT_TYPE_STATUS      ContentType = 1 // Status update
	ContentType_CONTENT_TYPE_REASONING   ContentType = 2 // Agent reasoning/thinking
	ContentType_CONTENT_TYPE_TEXT        ContentType = 3 // Response text
	ContentType_CONTENT_TYPE_ERROR       ContentType = 4 // Error occurred
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_UNSPECIFIED",
		1: "CONTENT_TYPE_STATUS",
		2: "CONTENT_TYPE_REASONING",
		3: "CONTENT_TYPE_TEXT",
		4: "CONTENT_TYPE_ERROR",
	}
	ContentType_value = map[string]int32{
		"CONTENT_TYPE_UNSPECIFIED": 0,
		"CONTENT_TYPE_STATUS":      1,
		"CONTENT_TYPE_REASONING":   2,
		"CONTENT_TYPE_TEXT":        3,
		"CONTENT_TYPE_ERROR":       4,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_enumTypes[1].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_enumTypes[1]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{1}
}

// CompletionType represents what level of completion occurred.
type CompletionType int32

const (
	CompletionType_COMPLETION_TYPE_UNSPECIFIED CompletionType = 0 // Default/unknown
	CompletionType_COMPLETION_TYPE_NONE        CompletionType = 1 // No completion, just a delta
	CompletionType_COMPLETION_TYPE_TEXT_DONE   CompletionType = 2 // Text stream within part finished
	CompletionType_COMPLETION_TYPE_PART_DONE   CompletionType = 3 // Entire reasoning/content part finished
	CompletionType_COMPLETION_TYPE_PHASE_DONE  CompletionType = 4 // Entire thinking/generating phase finished
	CompletionType_COMPLETION_TYPE_TASK_DONE   CompletionType = 5 // Entire task finished
)

// Enum value maps for CompletionType.
var (
	CompletionType_name = map[int32]string{
		0: "COMPLETION_TYPE_UNSPECIFIED",
		1: "COMPLETION_TYPE_NONE",
		2: "COMPLETION_TYPE_TEXT_DONE",
		3: "COMPLETION_TYPE_PART_DONE",
		4: "COMPLETION_TYPE_PHASE_DONE",
		5: "COMPLETION_TYPE_TASK_DONE",
	}
	CompletionType_value = map[string]int32{
		"COMPLETION_TYPE_UNSPECIFIED": 0,
		"COMPLETION_TYPE_NONE":        1,
		"COMPLETION_TYPE_TEXT_DONE":   2,
		"COMPLETION_TYPE_PART_DONE":   3,
		"COMPLETION_TYPE_PHASE_DONE":  4,
		"COMPLETION_TYPE_TASK_DONE":   5,
	}
)

func (x CompletionType) Enum() *CompletionType {
	p := new(CompletionType)
	*p = x
	return p
}

func (x CompletionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompletionType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_enumTypes[2].Descriptor()
}

func (CompletionType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_enumTypes[2]
}

func (x CompletionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompletionType.Descriptor instead.
func (CompletionType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{2}
}

// TokenUsageStatistics tracks token usage for the task.
type TokenUsageStatistics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InputTokens   int32                  `protobuf:"varint,1,opt,name=input_tokens,json=inputTokens,proto3" json:"input_tokens,omitempty"`
	OutputTokens  int32                  `protobuf:"varint,2,opt,name=output_tokens,json=outputTokens,proto3" json:"output_tokens,omitempty"`
	TotalTokens   int32                  `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenUsageStatistics) Reset() {
	*x = TokenUsageStatistics{}
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenUsageStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUsageStatistics) ProtoMessage() {}

func (x *TokenUsageStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUsageStatistics.ProtoReflect.Descriptor instead.
func (*TokenUsageStatistics) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *TokenUsageStatistics) GetInputTokens() int32 {
	if x != nil {
		return x.InputTokens
	}
	return 0
}

func (x *TokenUsageStatistics) GetOutputTokens() int32 {
	if x != nil {
		return x.OutputTokens
	}
	return 0
}

func (x *TokenUsageStatistics) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

// ConversationMessage represents a single message in the conversation history.
type ConversationMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          string                 `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`       // Message role: "user", "assistant", "system"
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // Message content
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversationMessage) Reset() {
	*x = ConversationMessage{}
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage) ProtoMessage() {}

func (x *ConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage.ProtoReflect.Descriptor instead.
func (*ConversationMessage) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *ConversationMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ConversationMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// ExecutePipelineTaskRequest supports both initial requests and follow-up messages.
type ExecutePipelineTaskRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	UserRequest string                 `protobuf:"bytes,1,opt,name=user_request,json=userRequest,proto3" json:"user_request,omitempty"`
	// Conversation history for multi-turn context (optional for first request)
	ConversationHistory []*ConversationMessage `protobuf:"bytes,2,rep,name=conversation_history,json=conversationHistory,proto3" json:"conversation_history,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExecutePipelineTaskRequest) Reset() {
	*x = ExecutePipelineTaskRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePipelineTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePipelineTaskRequest) ProtoMessage() {}

func (x *ExecutePipelineTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePipelineTaskRequest.ProtoReflect.Descriptor instead.
func (*ExecutePipelineTaskRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *ExecutePipelineTaskRequest) GetUserRequest() string {
	if x != nil {
		return x.UserRequest
	}
	return ""
}

func (x *ExecutePipelineTaskRequest) GetConversationHistory() []*ConversationMessage {
	if x != nil {
		return x.ConversationHistory
	}
	return nil
}

// ExecutePipelineTaskResponse is streamed back with updates and the final result.
type ExecutePipelineTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ExecutePipelineTaskResponse_ConversationUpdate
	//	*ExecutePipelineTaskResponse_PipelineUpdate
	//	*ExecutePipelineTaskResponse_Usage
	//	*ExecutePipelineTaskResponse_Error
	//	*ExecutePipelineTaskResponse_Content
	Event         isExecutePipelineTaskResponse_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutePipelineTaskResponse) Reset() {
	*x = ExecutePipelineTaskResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePipelineTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePipelineTaskResponse) ProtoMessage() {}

func (x *ExecutePipelineTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePipelineTaskResponse.ProtoReflect.Descriptor instead.
func (*ExecutePipelineTaskResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutePipelineTaskResponse) GetEvent() isExecutePipelineTaskResponse_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ExecutePipelineTaskResponse) GetConversationUpdate() *ConversationUpdate {
	if x != nil {
		if x, ok := x.Event.(*ExecutePipelineTaskResponse_ConversationUpdate); ok {
			return x.ConversationUpdate
		}
	}
	return nil
}

func (x *ExecutePipelineTaskResponse) GetPipelineUpdate() *PipelineUpdate {
	if x != nil {
		if x, ok := x.Event.(*ExecutePipelineTaskResponse_PipelineUpdate); ok {
			return x.PipelineUpdate
		}
	}
	return nil
}

func (x *ExecutePipelineTaskResponse) GetUsage() *TokenUsageStatistics {
	if x != nil {
		if x, ok := x.Event.(*ExecutePipelineTaskResponse_Usage); ok {
			return x.Usage
		}
	}
	return nil
}

func (x *ExecutePipelineTaskResponse) GetError() *StreamError {
	if x != nil {
		if x, ok := x.Event.(*ExecutePipelineTaskResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *ExecutePipelineTaskResponse) GetContent() *PipelineContent {
	if x != nil {
		if x, ok := x.Event.(*ExecutePipelineTaskResponse_Content); ok {
			return x.Content
		}
	}
	return nil
}

type isExecutePipelineTaskResponse_Event interface {
	isExecutePipelineTaskResponse_Event()
}

type ExecutePipelineTaskResponse_ConversationUpdate struct {
	ConversationUpdate *ConversationUpdate `protobuf:"bytes,1,opt,name=conversation_update,json=conversationUpdate,proto3,oneof"` // Status, reasoning, or text updates
}

type ExecutePipelineTaskResponse_PipelineUpdate struct {
	PipelineUpdate *PipelineUpdate `protobuf:"bytes,2,opt,name=pipeline_update,json=pipelineUpdate,proto3,oneof"` // Pipeline updates (just YAML deltas)
}

type ExecutePipelineTaskResponse_Usage struct {
	Usage *TokenUsageStatistics `protobuf:"bytes,3,opt,name=usage,proto3,oneof"` // Token usage stats
}

type ExecutePipelineTaskResponse_Error struct {
	Error *StreamError `protobuf:"bytes,4,opt,name=error,proto3,oneof"` // Error information
}

type ExecutePipelineTaskResponse_Content struct {
	Content *PipelineContent `protobuf:"bytes,5,opt,name=content,proto3,oneof"` // Streaming pipeline content updates
}

func (*ExecutePipelineTaskResponse_ConversationUpdate) isExecutePipelineTaskResponse_Event() {}

func (*ExecutePipelineTaskResponse_PipelineUpdate) isExecutePipelineTaskResponse_Event() {}

func (*ExecutePipelineTaskResponse_Usage) isExecutePipelineTaskResponse_Event() {}

func (*ExecutePipelineTaskResponse_Error) isExecutePipelineTaskResponse_Event() {}

func (*ExecutePipelineTaskResponse_Content) isExecutePipelineTaskResponse_Event() {}

// ConversationUpdat represents any kind of streaming update.
type ConversationUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          ContentType            `protobuf:"varint,1,opt,name=type,proto3,enum=redpanda.api.dataplane.v1alpha3.ContentType" json:"type,omitempty"`                // What kind of content this is
	Status        TaskStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=redpanda.api.dataplane.v1alpha3.TaskStatus" json:"status,omitempty"`             // Current overall status
	Text          string                 `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`                                                                  // Text content (always delta)
	Completion    CompletionType         `protobuf:"varint,4,opt,name=completion,proto3,enum=redpanda.api.dataplane.v1alpha3.CompletionType" json:"completion,omitempty"` // What just completed - this is specific to the task status (e.g. thinking is done/completed)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversationUpdate) Reset() {
	*x = ConversationUpdate{}
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationUpdate) ProtoMessage() {}

func (x *ConversationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationUpdate.ProtoReflect.Descriptor instead.
func (*ConversationUpdate) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *ConversationUpdate) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentType_CONTENT_TYPE_UNSPECIFIED
}

func (x *ConversationUpdate) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (x *ConversationUpdate) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ConversationUpdate) GetCompletion() CompletionType {
	if x != nil {
		return x.Completion
	}
	return CompletionType_COMPLETION_TYPE_UNSPECIFIED
}

// PipelineResult contains the final generated pipeline configuration.
type PipelineUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                    // Generated pipeline YAML (always a delta)
	IsDone        bool                   `protobuf:"varint,2,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"` // Is done is set true when it was the last delta.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineUpdate) Reset() {
	*x = PipelineUpdate{}
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUpdate) ProtoMessage() {}

func (x *PipelineUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUpdate.ProtoReflect.Descriptor instead.
func (*PipelineUpdate) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *PipelineUpdate) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PipelineUpdate) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

// StreamError represents any error during generation.
type StreamError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                                                // Error description
	Status        TaskStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=redpanda.api.dataplane.v1alpha3.TaskStatus" json:"status,omitempty"` // Final status (TASK_STATUS_FAILED)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamError) Reset() {
	*x = StreamError{}
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamError) ProtoMessage() {}

func (x *StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamError.ProtoReflect.Descriptor instead.
func (*StreamError) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *StreamError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StreamError) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

// PipelineContent contains streaming pipeline content updates during generation.
// This message is used to stream intermediate pipeline YAML updates to the code editor
// while keeping conversational content separate in StreamUpdate messages.
type PipelineContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineYaml  string                 `protobuf:"bytes,1,opt,name=pipeline_yaml,json=pipelineYaml,proto3" json:"pipeline_yaml,omitempty"` // Current pipeline YAML snapshot
	Revision      int32                  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`                            // Revision number, strictly increasing per session
	IsFinal       bool                   `protobuf:"varint,3,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`               // True exactly once, signals completion before final PipelineResult
	Checksum      string                 `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`                             // Optional SHA-256 hash of pipeline_yaml for integrity validation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineContent) Reset() {
	*x = PipelineContent{}
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineContent) ProtoMessage() {}

func (x *PipelineContent) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineContent.ProtoReflect.Descriptor instead.
func (*PipelineContent) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *PipelineContent) GetPipelineYaml() string {
	if x != nil {
		return x.PipelineYaml
	}
	return ""
}

func (x *PipelineContent) GetRevision() int32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *PipelineContent) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *PipelineContent) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

var File_redpanda_api_dataplane_v1alpha3_pipeline_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x43, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0a, 0xc8,
	0x01, 0x01, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x10, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0xcd, 0x03, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x80, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e,
	0x65, 0x22, 0x6c, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x89, 0x01, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x79, 0x61, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2a, 0xab, 0x01, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x48, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x8f, 0x01, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0xc8, 0x01, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x44, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x32, 0xd7, 0x02, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x13, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x8a,
	0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x04, 0x28, 0x01, 0x30, 0x01, 0x1a, 0xa2, 0x01, 0x92, 0x41,
	0x9e, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x20, 0x41, 0x49, 0x20, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x7e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x41, 0x49,
	0x2d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x20, 0x5b, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0xbc, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x42, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x67, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x3b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x44, 0xaa, 0x02, 0x1f, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0xca, 0x02, 0x1f, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0xe2, 0x02, 0x2b, 0x52,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescData = file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDesc
)

func file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDescData
}

var file_redpanda_api_dataplane_v1alpha3_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_redpanda_api_dataplane_v1alpha3_pipeline_proto_goTypes = []any{
	(TaskStatus)(0),                     // 0: redpanda.api.dataplane.v1alpha3.TaskStatus
	(ContentType)(0),                    // 1: redpanda.api.dataplane.v1alpha3.ContentType
	(CompletionType)(0),                 // 2: redpanda.api.dataplane.v1alpha3.CompletionType
	(*TokenUsageStatistics)(nil),        // 3: redpanda.api.dataplane.v1alpha3.TokenUsageStatistics
	(*ConversationMessage)(nil),         // 4: redpanda.api.dataplane.v1alpha3.ConversationMessage
	(*ExecutePipelineTaskRequest)(nil),  // 5: redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskRequest
	(*ExecutePipelineTaskResponse)(nil), // 6: redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse
	(*ConversationUpdate)(nil),          // 7: redpanda.api.dataplane.v1alpha3.ConversationUpdate
	(*PipelineUpdate)(nil),              // 8: redpanda.api.dataplane.v1alpha3.PipelineUpdate
	(*StreamError)(nil),                 // 9: redpanda.api.dataplane.v1alpha3.StreamError
	(*PipelineContent)(nil),             // 10: redpanda.api.dataplane.v1alpha3.PipelineContent
}
var file_redpanda_api_dataplane_v1alpha3_pipeline_proto_depIdxs = []int32{
	4,  // 0: redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskRequest.conversation_history:type_name -> redpanda.api.dataplane.v1alpha3.ConversationMessage
	7,  // 1: redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse.conversation_update:type_name -> redpanda.api.dataplane.v1alpha3.ConversationUpdate
	8,  // 2: redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse.pipeline_update:type_name -> redpanda.api.dataplane.v1alpha3.PipelineUpdate
	3,  // 3: redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse.usage:type_name -> redpanda.api.dataplane.v1alpha3.TokenUsageStatistics
	9,  // 4: redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse.error:type_name -> redpanda.api.dataplane.v1alpha3.StreamError
	10, // 5: redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse.content:type_name -> redpanda.api.dataplane.v1alpha3.PipelineContent
	1,  // 6: redpanda.api.dataplane.v1alpha3.ConversationUpdate.type:type_name -> redpanda.api.dataplane.v1alpha3.ContentType
	0,  // 7: redpanda.api.dataplane.v1alpha3.ConversationUpdate.status:type_name -> redpanda.api.dataplane.v1alpha3.TaskStatus
	2,  // 8: redpanda.api.dataplane.v1alpha3.ConversationUpdate.completion:type_name -> redpanda.api.dataplane.v1alpha3.CompletionType
	0,  // 9: redpanda.api.dataplane.v1alpha3.StreamError.status:type_name -> redpanda.api.dataplane.v1alpha3.TaskStatus
	5,  // 10: redpanda.api.dataplane.v1alpha3.PipelineService.ExecutePipelineTask:input_type -> redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskRequest
	6,  // 11: redpanda.api.dataplane.v1alpha3.PipelineService.ExecutePipelineTask:output_type -> redpanda.api.dataplane.v1alpha3.ExecutePipelineTaskResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1alpha3_pipeline_proto_init() }
func file_redpanda_api_dataplane_v1alpha3_pipeline_proto_init() {
	if File_redpanda_api_dataplane_v1alpha3_pipeline_proto != nil {
		return
	}
	file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes[3].OneofWrappers = []any{
		(*ExecutePipelineTaskResponse_ConversationUpdate)(nil),
		(*ExecutePipelineTaskResponse_PipelineUpdate)(nil),
		(*ExecutePipelineTaskResponse_Usage)(nil),
		(*ExecutePipelineTaskResponse_Error)(nil),
		(*ExecutePipelineTaskResponse_Content)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1alpha3_pipeline_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1alpha3_pipeline_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1alpha3_pipeline_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1alpha3_pipeline_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1alpha3_pipeline_proto = out.File
	file_redpanda_api_dataplane_v1alpha3_pipeline_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1alpha3_pipeline_proto_goTypes = nil
	file_redpanda_api_dataplane_v1alpha3_pipeline_proto_depIdxs = nil
}
