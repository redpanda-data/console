// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1alpha3/ai_agent.proto

package dataplanev1alpha3

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
	v1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State of the AI agent.
type AIAgent_State int32

const (
	AIAgent_STATE_UNSPECIFIED AIAgent_State = 0
	// The AI agent is starting.
	AIAgent_STATE_STARTING AIAgent_State = 1
	// The AI agent is running and ready to handle requests.
	AIAgent_STATE_RUNNING AIAgent_State = 2
	// The AI agent is in the process of stopping.
	AIAgent_STATE_STOPPING AIAgent_State = 3
	// The AI agent is stopped and in paused state.
	AIAgent_STATE_STOPPED AIAgent_State = 4
	// The AI agent encountered an error.
	AIAgent_STATE_ERROR AIAgent_State = 5
)

// Enum value maps for AIAgent_State.
var (
	AIAgent_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_STARTING",
		2: "STATE_RUNNING",
		3: "STATE_STOPPING",
		4: "STATE_STOPPED",
		5: "STATE_ERROR",
	}
	AIAgent_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_STARTING":    1,
		"STATE_RUNNING":     2,
		"STATE_STOPPING":    3,
		"STATE_STOPPED":     4,
		"STATE_ERROR":       5,
	}
)

func (x AIAgent_State) Enum() *AIAgent_State {
	p := new(AIAgent_State)
	*p = x
	return p
}

func (x AIAgent_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AIAgent_State) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_enumTypes[0].Descriptor()
}

func (AIAgent_State) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_enumTypes[0]
}

func (x AIAgent_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AIAgent_State.Descriptor instead.
func (AIAgent_State) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{0, 0}
}

// Defines the AI Agent resource.
type AIAgent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AI Agent ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User-friendly AI agent name.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional AI agent description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// System Prompt for the AI agent behavior.
	SystemPrompt string `protobuf:"bytes,4,opt,name=system_prompt,json=systemPrompt,proto3" json:"system_prompt,omitempty"`
	// LLM configuration settings for the AI agent.
	Provider *AIAgent_Provider `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	Model    string            `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	// Map of MCP servers that this AI agent can use.
	McpServers map[string]*AIAgent_MCPServer `protobuf:"bytes,8,rep,name=mcp_servers,json=mcpServers,proto3" json:"mcp_servers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The number of resources that are guaranteed to be assigned to the AI Agent.
	Resources *v1.Pipeline_Resources `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	// Tags are key-value pairs that can be assigned to an AI agent resource.
	// They help organize AI agents and enable filtering when listing them.
	Tags map[string]string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The current AI agent state.
	State AIAgent_State `protobuf:"varint,11,opt,name=state,proto3,enum=redpanda.api.dataplane.v1alpha3.AIAgent_State" json:"state,omitempty"`
	// URL to connect to the AI agent endpoint.
	Url            string                  `protobuf:"bytes,12,opt,name=url,proto3" json:"url,omitempty"`
	MaxIterations  int32                   `protobuf:"varint,13,opt,name=max_iterations,json=maxIterations,proto3" json:"max_iterations,omitempty"`
	ServiceAccount *AIAgent_ServiceAccount `protobuf:"bytes,14,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AIAgent) Reset() {
	*x = AIAgent{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIAgent) ProtoMessage() {}

func (x *AIAgent) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIAgent.ProtoReflect.Descriptor instead.
func (*AIAgent) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{0}
}

func (x *AIAgent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AIAgent) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AIAgent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AIAgent) GetSystemPrompt() string {
	if x != nil {
		return x.SystemPrompt
	}
	return ""
}

func (x *AIAgent) GetProvider() *AIAgent_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *AIAgent) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AIAgent) GetMcpServers() map[string]*AIAgent_MCPServer {
	if x != nil {
		return x.McpServers
	}
	return nil
}

func (x *AIAgent) GetResources() *v1.Pipeline_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *AIAgent) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AIAgent) GetState() AIAgent_State {
	if x != nil {
		return x.State
	}
	return AIAgent_STATE_UNSPECIFIED
}

func (x *AIAgent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AIAgent) GetMaxIterations() int32 {
	if x != nil {
		return x.MaxIterations
	}
	return 0
}

func (x *AIAgent) GetServiceAccount() *AIAgent_ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

// AIAgentCreate contains the details for the AI agent creation request.
type AIAgentCreate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User-friendly AI agent name.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// AI agent description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// System Prompt for the AI agent behavior.
	SystemPrompt string `protobuf:"bytes,3,opt,name=system_prompt,json=systemPrompt,proto3" json:"system_prompt,omitempty"`
	// LLM configuration settings for the AI agent.
	Provider *AIAgent_Provider `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Model    string            `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	// Map of MCP servers that this AI agent can use.
	McpServers map[string]*AIAgent_MCPServer `protobuf:"bytes,7,rep,name=mcp_servers,json=mcpServers,proto3" json:"mcp_servers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional list of tags to attach to an AI agent.
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The number of resources that are guaranteed to be assigned to the AI agent.
	Resources      *v1.Pipeline_Resources  `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	MaxIterations  int32                   `protobuf:"varint,10,opt,name=max_iterations,json=maxIterations,proto3" json:"max_iterations,omitempty"`
	ServiceAccount *AIAgent_ServiceAccount `protobuf:"bytes,11,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AIAgentCreate) Reset() {
	*x = AIAgentCreate{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIAgentCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIAgentCreate) ProtoMessage() {}

func (x *AIAgentCreate) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIAgentCreate.ProtoReflect.Descriptor instead.
func (*AIAgentCreate) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{1}
}

func (x *AIAgentCreate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AIAgentCreate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AIAgentCreate) GetSystemPrompt() string {
	if x != nil {
		return x.SystemPrompt
	}
	return ""
}

func (x *AIAgentCreate) GetProvider() *AIAgent_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *AIAgentCreate) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AIAgentCreate) GetMcpServers() map[string]*AIAgent_MCPServer {
	if x != nil {
		return x.McpServers
	}
	return nil
}

func (x *AIAgentCreate) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AIAgentCreate) GetResources() *v1.Pipeline_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *AIAgentCreate) GetMaxIterations() int32 {
	if x != nil {
		return x.MaxIterations
	}
	return 0
}

func (x *AIAgentCreate) GetServiceAccount() *AIAgent_ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

// CreateAIAgentRequest is the request of CreateAIAgent.
type CreateAIAgentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AiAgent       *AIAgentCreate         `protobuf:"bytes,1,opt,name=ai_agent,json=aiAgent,proto3" json:"ai_agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAIAgentRequest) Reset() {
	*x = CreateAIAgentRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAIAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAIAgentRequest) ProtoMessage() {}

func (x *CreateAIAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAIAgentRequest.ProtoReflect.Descriptor instead.
func (*CreateAIAgentRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAIAgentRequest) GetAiAgent() *AIAgentCreate {
	if x != nil {
		return x.AiAgent
	}
	return nil
}

type CreateAIAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AiAgent       *AIAgent               `protobuf:"bytes,1,opt,name=ai_agent,json=aiAgent,proto3" json:"ai_agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAIAgentResponse) Reset() {
	*x = CreateAIAgentResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAIAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAIAgentResponse) ProtoMessage() {}

func (x *CreateAIAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAIAgentResponse.ProtoReflect.Descriptor instead.
func (*CreateAIAgentResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAIAgentResponse) GetAiAgent() *AIAgent {
	if x != nil {
		return x.AiAgent
	}
	return nil
}

type GetAIAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AI Agent ID.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAIAgentRequest) Reset() {
	*x = GetAIAgentRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAIAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAIAgentRequest) ProtoMessage() {}

func (x *GetAIAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAIAgentRequest.ProtoReflect.Descriptor instead.
func (*GetAIAgentRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{4}
}

func (x *GetAIAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAIAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AiAgent       *AIAgent               `protobuf:"bytes,1,opt,name=ai_agent,json=aiAgent,proto3" json:"ai_agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAIAgentResponse) Reset() {
	*x = GetAIAgentResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAIAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAIAgentResponse) ProtoMessage() {}

func (x *GetAIAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAIAgentResponse.ProtoReflect.Descriptor instead.
func (*GetAIAgentResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{5}
}

func (x *GetAIAgentResponse) GetAiAgent() *AIAgent {
	if x != nil {
		return x.AiAgent
	}
	return nil
}

type ListAIAgentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List filter.
	Filter *ListAIAgentsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Limit the paginated response to a number of items.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Value of the next_page_token field returned by the previous response.
	// If not provided, the system assumes the first page is requested.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAIAgentsRequest) Reset() {
	*x = ListAIAgentsRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAIAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAIAgentsRequest) ProtoMessage() {}

func (x *ListAIAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAIAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAIAgentsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{6}
}

func (x *ListAIAgentsRequest) GetFilter() *ListAIAgentsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListAIAgentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAIAgentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAIAgentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AiAgents      []*AIAgent             `protobuf:"bytes,1,rep,name=ai_agents,json=aiAgents,proto3" json:"ai_agents,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAIAgentsResponse) Reset() {
	*x = ListAIAgentsResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAIAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAIAgentsResponse) ProtoMessage() {}

func (x *ListAIAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAIAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAIAgentsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{7}
}

func (x *ListAIAgentsResponse) GetAiAgents() []*AIAgent {
	if x != nil {
		return x.AiAgents
	}
	return nil
}

func (x *ListAIAgentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AIAgentUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User-friendly AI agent name.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// AI agent description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// System Prompt for the AI agent behavior.
	SystemPrompt string `protobuf:"bytes,3,opt,name=system_prompt,json=systemPrompt,proto3" json:"system_prompt,omitempty"`
	// LLM configuration settings for the AI agent.
	Provider *AIAgent_Provider `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Model    string            `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	// Map of MCP servers that this AI agent can use.
	McpServers map[string]*AIAgent_MCPServer `protobuf:"bytes,7,rep,name=mcp_servers,json=mcpServers,proto3" json:"mcp_servers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A map of tags to add, update or delete.
	// If a tag's value is empty, the server interprets that as a deletion.
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The number of resources that are guaranteed to be assigned to the AI agent.
	Resources      *v1.Pipeline_Resources  `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	MaxIterations  int32                   `protobuf:"varint,10,opt,name=max_iterations,json=maxIterations,proto3" json:"max_iterations,omitempty"`
	ServiceAccount *AIAgent_ServiceAccount `protobuf:"bytes,11,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AIAgentUpdate) Reset() {
	*x = AIAgentUpdate{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIAgentUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIAgentUpdate) ProtoMessage() {}

func (x *AIAgentUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIAgentUpdate.ProtoReflect.Descriptor instead.
func (*AIAgentUpdate) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{8}
}

func (x *AIAgentUpdate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AIAgentUpdate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AIAgentUpdate) GetSystemPrompt() string {
	if x != nil {
		return x.SystemPrompt
	}
	return ""
}

func (x *AIAgentUpdate) GetProvider() *AIAgent_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *AIAgentUpdate) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AIAgentUpdate) GetMcpServers() map[string]*AIAgent_MCPServer {
	if x != nil {
		return x.McpServers
	}
	return nil
}

func (x *AIAgentUpdate) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AIAgentUpdate) GetResources() *v1.Pipeline_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *AIAgentUpdate) GetMaxIterations() int32 {
	if x != nil {
		return x.MaxIterations
	}
	return 0
}

func (x *AIAgentUpdate) GetServiceAccount() *AIAgent_ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

type UpdateAIAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AI Agent ID.
	Id      string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AiAgent *AIAgentUpdate `protobuf:"bytes,2,opt,name=ai_agent,json=aiAgent,proto3" json:"ai_agent,omitempty"`
	// Specifies which fields should be updated. If not provided,
	// all fields will be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAIAgentRequest) Reset() {
	*x = UpdateAIAgentRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAIAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAIAgentRequest) ProtoMessage() {}

func (x *UpdateAIAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAIAgentRequest.ProtoReflect.Descriptor instead.
func (*UpdateAIAgentRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAIAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAIAgentRequest) GetAiAgent() *AIAgentUpdate {
	if x != nil {
		return x.AiAgent
	}
	return nil
}

func (x *UpdateAIAgentRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAIAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AiAgent       *AIAgent               `protobuf:"bytes,1,opt,name=ai_agent,json=aiAgent,proto3" json:"ai_agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAIAgentResponse) Reset() {
	*x = UpdateAIAgentResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAIAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAIAgentResponse) ProtoMessage() {}

func (x *UpdateAIAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAIAgentResponse.ProtoReflect.Descriptor instead.
func (*UpdateAIAgentResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateAIAgentResponse) GetAiAgent() *AIAgent {
	if x != nil {
		return x.AiAgent
	}
	return nil
}

type DeleteAIAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AI Agent ID.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAIAgentRequest) Reset() {
	*x = DeleteAIAgentRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAIAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAIAgentRequest) ProtoMessage() {}

func (x *DeleteAIAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAIAgentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAIAgentRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteAIAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteAIAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAIAgentResponse) Reset() {
	*x = DeleteAIAgentResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAIAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAIAgentResponse) ProtoMessage() {}

func (x *DeleteAIAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAIAgentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAIAgentResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{12}
}

type StopAIAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AI Agent ID.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopAIAgentRequest) Reset() {
	*x = StopAIAgentRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAIAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAIAgentRequest) ProtoMessage() {}

func (x *StopAIAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAIAgentRequest.ProtoReflect.Descriptor instead.
func (*StopAIAgentRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{13}
}

func (x *StopAIAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopAIAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AiAgent       *AIAgent               `protobuf:"bytes,1,opt,name=ai_agent,json=aiAgent,proto3" json:"ai_agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopAIAgentResponse) Reset() {
	*x = StopAIAgentResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAIAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAIAgentResponse) ProtoMessage() {}

func (x *StopAIAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAIAgentResponse.ProtoReflect.Descriptor instead.
func (*StopAIAgentResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{14}
}

func (x *StopAIAgentResponse) GetAiAgent() *AIAgent {
	if x != nil {
		return x.AiAgent
	}
	return nil
}

type StartAIAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AI Agent ID.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartAIAgentRequest) Reset() {
	*x = StartAIAgentRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartAIAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAIAgentRequest) ProtoMessage() {}

func (x *StartAIAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAIAgentRequest.ProtoReflect.Descriptor instead.
func (*StartAIAgentRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{15}
}

func (x *StartAIAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartAIAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AiAgent       *AIAgent               `protobuf:"bytes,1,opt,name=ai_agent,json=aiAgent,proto3" json:"ai_agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartAIAgentResponse) Reset() {
	*x = StartAIAgentResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartAIAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAIAgentResponse) ProtoMessage() {}

func (x *StartAIAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAIAgentResponse.ProtoReflect.Descriptor instead.
func (*StartAIAgentResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{16}
}

func (x *StartAIAgentResponse) GetAiAgent() *AIAgent {
	if x != nil {
		return x.AiAgent
	}
	return nil
}

type AIAgent_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*AIAgent_Provider_Openai
	Provider      isAIAgent_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIAgent_Provider) Reset() {
	*x = AIAgent_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIAgent_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIAgent_Provider) ProtoMessage() {}

func (x *AIAgent_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIAgent_Provider.ProtoReflect.Descriptor instead.
func (*AIAgent_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AIAgent_Provider) GetProvider() isAIAgent_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *AIAgent_Provider) GetOpenai() *AIAgent_Provider_OpenAI {
	if x != nil {
		if x, ok := x.Provider.(*AIAgent_Provider_Openai); ok {
			return x.Openai
		}
	}
	return nil
}

type isAIAgent_Provider_Provider interface {
	isAIAgent_Provider_Provider()
}

type AIAgent_Provider_Openai struct {
	Openai *AIAgent_Provider_OpenAI `protobuf:"bytes,1,opt,name=openai,proto3,oneof"`
}

func (*AIAgent_Provider_Openai) isAIAgent_Provider_Provider() {}

type AIAgent_ServiceAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret  string                 `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIAgent_ServiceAccount) Reset() {
	*x = AIAgent_ServiceAccount{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIAgent_ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIAgent_ServiceAccount) ProtoMessage() {}

func (x *AIAgent_ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIAgent_ServiceAccount.ProtoReflect.Descriptor instead.
func (*AIAgent_ServiceAccount) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AIAgent_ServiceAccount) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AIAgent_ServiceAccount) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

// MCP server configuration.
type AIAgent_MCPServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redpanda MCP server.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIAgent_MCPServer) Reset() {
	*x = AIAgent_MCPServer{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIAgent_MCPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIAgent_MCPServer) ProtoMessage() {}

func (x *AIAgent_MCPServer) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIAgent_MCPServer.ProtoReflect.Descriptor instead.
func (*AIAgent_MCPServer) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AIAgent_MCPServer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AIAgent_Provider_OpenAI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIAgent_Provider_OpenAI) Reset() {
	*x = AIAgent_Provider_OpenAI{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIAgent_Provider_OpenAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIAgent_Provider_OpenAI) ProtoMessage() {}

func (x *AIAgent_Provider_OpenAI) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIAgent_Provider_OpenAI.ProtoReflect.Descriptor instead.
func (*AIAgent_Provider_OpenAI) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *AIAgent_Provider_OpenAI) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type ListAIAgentsRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Substring match on AI agent name. Case-sensitive.
	NameContains string `protobuf:"bytes,1,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Filter AI agents that contain all of these key/value pairs.
	Tags          map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAIAgentsRequest_Filter) Reset() {
	*x = ListAIAgentsRequest_Filter{}
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAIAgentsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAIAgentsRequest_Filter) ProtoMessage() {}

func (x *ListAIAgentsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAIAgentsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListAIAgentsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ListAIAgentsRequest_Filter) GetNameContains() string {
	if x != nil {
		return x.NameContains
	}
	return ""
}

func (x *ListAIAgentsRequest_Filter) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_redpanda_api_dataplane_v1alpha3_ai_agent_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x2f, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4,
	0x0f, 0x0a, 0x07, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xe0, 0x41, 0x03, 0xba, 0x48, 0x15, 0x72, 0x13,
	0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2f,
	0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0,
	0x41, 0x02, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x03, 0x18, 0x80, 0x01, 0x32,
	0x12, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x20, 0x2f,
	0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a,
	0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x41, 0x49, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x20, 0x62, 0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x2e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x01, 0x72,
	0x06, 0x10, 0x0a, 0x18, 0x80, 0x80, 0x01, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x58, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x18, 0x80,
	0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x59, 0x0a, 0x0b, 0x6d, 0x63, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x83, 0x02, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0xb5, 0x01, 0x92, 0x41, 0xb1, 0x01, 0x32, 0xae, 0x01,
	0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x49, 0x20, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x20, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x6d, 0x69, 0x67, 0x68,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x2c,
	0x20, 0x6f, 0x72, 0x20, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x65, 0x20, 0x74, 0x77, 0x65,
	0x61, 0x6b, 0x65, 0x64, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x49, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2d, 0xba, 0x48, 0x2a,
	0x9a, 0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e, 0x28, 0x5b, 0x5c, 0x70,
	0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x5f, 0x2e, 0x3a,
	0x2f, 0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x30, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a,
	0x04, 0x18, 0x64, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x71, 0x0a, 0x0f, 0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe5, 0x01,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x41, 0x49, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x1a, 0x72,
	0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x12, 0x68, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xe0, 0x41, 0x02, 0xba, 0x48,
	0x49, 0xc8, 0x01, 0x01, 0x72, 0x44, 0x32, 0x42, 0x5e, 0x5c, 0x24, 0x5c, 0x7b, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x5c, 0x2e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x5d, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x5d, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x29, 0x3f, 0x5c, 0x7d, 0x24, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x42, 0x11, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x05,
	0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0xae, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x74, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x49, 0xc8,
	0x01, 0x01, 0x72, 0x44, 0x32, 0x42, 0x5e, 0x5c, 0x24, 0x5c, 0x7b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x5c, 0x2e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x5d, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x5d, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5f, 0x5d, 0x2a, 0x29, 0x3f, 0x5c, 0x7d, 0x24, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x1b, 0x0a, 0x09, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x05, 0x3a, 0x41, 0xea, 0x41, 0x3e, 0x0a, 0x27, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2a, 0x09, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x08, 0x61, 0x69, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x08, 0x0a, 0x0d, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0,
	0x41, 0x02, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x03, 0x18, 0x80, 0x01, 0x32,
	0x12, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x20, 0x2f,
	0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a,
	0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x41, 0x49, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x20, 0x62, 0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x2e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x01, 0x72,
	0x06, 0x10, 0x0a, 0x18, 0x80, 0x80, 0x01, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x58, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x18, 0x80,
	0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x5f, 0x0a, 0x0b, 0x6d, 0x63, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x63,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d,
	0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x7b, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x2d, 0xba, 0x48, 0x2a, 0x9a, 0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21, 0x32,
	0x1f, 0x5e, 0x28, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70,
	0x7b, 0x4e, 0x7d, 0x5f, 0x2e, 0x3a, 0x2f, 0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06,
	0x1a, 0x04, 0x18, 0x64, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x71, 0x0a, 0x0f, 0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x47,
	0xea, 0x41, 0x44, 0x0a, 0x2d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2f, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2a, 0x09, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x08, 0x61,
	0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x07, 0x61, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x02, 0xba, 0x48,
	0x18, 0xc8, 0x01, 0x01, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xcd, 0x05, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x53, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xa7, 0x01, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x89, 0x01, 0x92, 0x41, 0x74, 0x32,
	0x60, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x35, 0x30, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x2d, 0x31, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xf0, 0xbf, 0xba, 0x48, 0x0f, 0x1a, 0x0d, 0x18, 0x64, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x97,
	0x03, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x62, 0x92, 0x41, 0x40, 0x32, 0x3e, 0x41, 0x6e, 0x79, 0x20, 0x41, 0x49, 0x20, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0xba, 0x48, 0x1c, 0xd8, 0x01, 0x01, 0x72, 0x17, 0x18, 0x80,
	0x01, 0x32, 0x12, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x20, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6e, 0x92, 0x41, 0x3e, 0x32, 0x3c,
	0x41, 0x49, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0xba, 0x48, 0x2a, 0x9a,
	0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e, 0x28, 0x5b, 0x5c, 0x70, 0x7b,
	0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x5f, 0x2e, 0x3a, 0x2f,
	0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x61, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xa4, 0x08, 0x0a, 0x0d, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0x72, 0x19, 0x10,
	0x03, 0x18, 0x80, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x20, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0x18, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x4d, 0x32, 0x4b,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20,
	0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x49, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x2e, 0xba, 0x48, 0x08, 0x72, 0x06,
	0x10, 0x0a, 0x18, 0x80, 0x80, 0x01, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x5f, 0x0a, 0x0b, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x63, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x7b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2d, 0xba, 0x48,
	0x2a, 0x9a, 0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e, 0x28, 0x5b, 0x5c,
	0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x5f, 0x2e,
	0x3a, 0x2f, 0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28,
	0x01, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x60, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x71, 0x0a, 0x0f, 0x4d, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x47,
	0xea, 0x41, 0x44, 0x0a, 0x2d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2f, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2a, 0x09, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x08, 0x61,
	0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x18, 0xc8, 0x01, 0x01, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x54, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x61,
	0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x5c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08,
	0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x69, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x22, 0x46, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x18, 0xc8, 0x01, 0x01,
	0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x44, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x18, 0xc8, 0x01, 0x01, 0x72,
	0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70,
	0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x69, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x49, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x18, 0xc8,
	0x01, 0x01, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x32, 0xb6, 0x11, 0x0a, 0x0e, 0x41, 0x49, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9a, 0x02, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x92,
	0x41, 0x69, 0x12, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x41, 0x49, 0x20, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x1a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65,
	0x77, 0x20, 0x41, 0x49, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x3e, 0x0a, 0x03, 0x32,
	0x30, 0x31, 0x12, 0x37, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x2a, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x8a, 0xa6, 0x1d, 0x04, 0x08,
	0x02, 0x10, 0x08, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x08, 0x61, 0x69, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x61,
	0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb3, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x49, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbb, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x12, 0x0c, 0x47, 0x65, 0x74, 0x20, 0x41, 0x49, 0x20,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x18, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x41, 0x49, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a,
	0x39, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x2c, 0x0a, 0x2a,
	0x1a, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30,
	0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x08, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f,
	0x61, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb7,
	0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x49, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x92,
	0x41, 0x92, 0x01, 0x12, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x49, 0x20, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x38, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x49, 0x20, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x41,
	0x49, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x46, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x3f, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x39, 0x0a, 0x37, 0x1a, 0x35,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10, 0x08, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x61,
	0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xac, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0x92, 0x41, 0x76, 0x12,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x41, 0x49, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x1a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e,
	0x20, 0x41, 0x49, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x32, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x2c, 0x0a, 0x2a, 0x1a, 0x28, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x08, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x3a, 0x08, 0x61, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x18, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x61, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x92, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x92, 0x41, 0x66, 0x12, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x41, 0x49, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x49, 0x20, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x12, 0x0a, 0x03, 0x32, 0x30, 0x34, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x00, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12,
	0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14,
	0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x08, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x61, 0x69,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc1, 0x02, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x92, 0x41, 0x95, 0x01, 0x12, 0x0d,
	0x53, 0x74, 0x6f, 0x70, 0x20, 0x41, 0x49, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x18, 0x53,
	0x74, 0x6f, 0x70, 0x20, 0x61, 0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x49,
	0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x3e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x37,
	0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x2a, 0x1a, 0x28, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23,
	0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x08, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x61, 0x69, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x73, 0x74, 0x6f, 0x70,
	0x12, 0xc7, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x49, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9,
	0x01, 0x92, 0x41, 0x97, 0x01, 0x12, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x41, 0x49, 0x20,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x20, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x41, 0x49, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x4a, 0x3e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x37, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x2a, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x41, 0x49, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a, 0xa6, 0x1d, 0x04,
	0x08, 0x02, 0x10, 0x08, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x1a, 0x1e, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x61, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x45, 0x92, 0x41, 0x42, 0x0a,
	0x09, 0x41, 0x49, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x41, 0x49,
	0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69,
	0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x42, 0xbb, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x42, 0x0c, 0x41, 0x69, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x67, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x3b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x44, 0xaa, 0x02, 0x1f, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0xca, 0x02, 0x1f, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0xe2, 0x02, 0x2b, 0x52,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescData = file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDesc
)

func file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDescData
}

var file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_goTypes = []any{
	(AIAgent_State)(0),                 // 0: redpanda.api.dataplane.v1alpha3.AIAgent.State
	(*AIAgent)(nil),                    // 1: redpanda.api.dataplane.v1alpha3.AIAgent
	(*AIAgentCreate)(nil),              // 2: redpanda.api.dataplane.v1alpha3.AIAgentCreate
	(*CreateAIAgentRequest)(nil),       // 3: redpanda.api.dataplane.v1alpha3.CreateAIAgentRequest
	(*CreateAIAgentResponse)(nil),      // 4: redpanda.api.dataplane.v1alpha3.CreateAIAgentResponse
	(*GetAIAgentRequest)(nil),          // 5: redpanda.api.dataplane.v1alpha3.GetAIAgentRequest
	(*GetAIAgentResponse)(nil),         // 6: redpanda.api.dataplane.v1alpha3.GetAIAgentResponse
	(*ListAIAgentsRequest)(nil),        // 7: redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest
	(*ListAIAgentsResponse)(nil),       // 8: redpanda.api.dataplane.v1alpha3.ListAIAgentsResponse
	(*AIAgentUpdate)(nil),              // 9: redpanda.api.dataplane.v1alpha3.AIAgentUpdate
	(*UpdateAIAgentRequest)(nil),       // 10: redpanda.api.dataplane.v1alpha3.UpdateAIAgentRequest
	(*UpdateAIAgentResponse)(nil),      // 11: redpanda.api.dataplane.v1alpha3.UpdateAIAgentResponse
	(*DeleteAIAgentRequest)(nil),       // 12: redpanda.api.dataplane.v1alpha3.DeleteAIAgentRequest
	(*DeleteAIAgentResponse)(nil),      // 13: redpanda.api.dataplane.v1alpha3.DeleteAIAgentResponse
	(*StopAIAgentRequest)(nil),         // 14: redpanda.api.dataplane.v1alpha3.StopAIAgentRequest
	(*StopAIAgentResponse)(nil),        // 15: redpanda.api.dataplane.v1alpha3.StopAIAgentResponse
	(*StartAIAgentRequest)(nil),        // 16: redpanda.api.dataplane.v1alpha3.StartAIAgentRequest
	(*StartAIAgentResponse)(nil),       // 17: redpanda.api.dataplane.v1alpha3.StartAIAgentResponse
	nil,                                // 18: redpanda.api.dataplane.v1alpha3.AIAgent.McpServersEntry
	nil,                                // 19: redpanda.api.dataplane.v1alpha3.AIAgent.TagsEntry
	(*AIAgent_Provider)(nil),           // 20: redpanda.api.dataplane.v1alpha3.AIAgent.Provider
	(*AIAgent_ServiceAccount)(nil),     // 21: redpanda.api.dataplane.v1alpha3.AIAgent.ServiceAccount
	(*AIAgent_MCPServer)(nil),          // 22: redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer
	(*AIAgent_Provider_OpenAI)(nil),    // 23: redpanda.api.dataplane.v1alpha3.AIAgent.Provider.OpenAI
	nil,                                // 24: redpanda.api.dataplane.v1alpha3.AIAgentCreate.McpServersEntry
	nil,                                // 25: redpanda.api.dataplane.v1alpha3.AIAgentCreate.TagsEntry
	(*ListAIAgentsRequest_Filter)(nil), // 26: redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.Filter
	nil,                                // 27: redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.Filter.TagsEntry
	nil,                                // 28: redpanda.api.dataplane.v1alpha3.AIAgentUpdate.McpServersEntry
	nil,                                // 29: redpanda.api.dataplane.v1alpha3.AIAgentUpdate.TagsEntry
	(*v1.Pipeline_Resources)(nil),      // 30: redpanda.api.dataplane.v1.Pipeline.Resources
	(*fieldmaskpb.FieldMask)(nil),      // 31: google.protobuf.FieldMask
}
var file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_depIdxs = []int32{
	20, // 0: redpanda.api.dataplane.v1alpha3.AIAgent.provider:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.Provider
	18, // 1: redpanda.api.dataplane.v1alpha3.AIAgent.mcp_servers:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.McpServersEntry
	30, // 2: redpanda.api.dataplane.v1alpha3.AIAgent.resources:type_name -> redpanda.api.dataplane.v1.Pipeline.Resources
	19, // 3: redpanda.api.dataplane.v1alpha3.AIAgent.tags:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.TagsEntry
	0,  // 4: redpanda.api.dataplane.v1alpha3.AIAgent.state:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.State
	21, // 5: redpanda.api.dataplane.v1alpha3.AIAgent.service_account:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.ServiceAccount
	20, // 6: redpanda.api.dataplane.v1alpha3.AIAgentCreate.provider:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.Provider
	24, // 7: redpanda.api.dataplane.v1alpha3.AIAgentCreate.mcp_servers:type_name -> redpanda.api.dataplane.v1alpha3.AIAgentCreate.McpServersEntry
	25, // 8: redpanda.api.dataplane.v1alpha3.AIAgentCreate.tags:type_name -> redpanda.api.dataplane.v1alpha3.AIAgentCreate.TagsEntry
	30, // 9: redpanda.api.dataplane.v1alpha3.AIAgentCreate.resources:type_name -> redpanda.api.dataplane.v1.Pipeline.Resources
	21, // 10: redpanda.api.dataplane.v1alpha3.AIAgentCreate.service_account:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.ServiceAccount
	2,  // 11: redpanda.api.dataplane.v1alpha3.CreateAIAgentRequest.ai_agent:type_name -> redpanda.api.dataplane.v1alpha3.AIAgentCreate
	1,  // 12: redpanda.api.dataplane.v1alpha3.CreateAIAgentResponse.ai_agent:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent
	1,  // 13: redpanda.api.dataplane.v1alpha3.GetAIAgentResponse.ai_agent:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent
	26, // 14: redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.filter:type_name -> redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.Filter
	1,  // 15: redpanda.api.dataplane.v1alpha3.ListAIAgentsResponse.ai_agents:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent
	20, // 16: redpanda.api.dataplane.v1alpha3.AIAgentUpdate.provider:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.Provider
	28, // 17: redpanda.api.dataplane.v1alpha3.AIAgentUpdate.mcp_servers:type_name -> redpanda.api.dataplane.v1alpha3.AIAgentUpdate.McpServersEntry
	29, // 18: redpanda.api.dataplane.v1alpha3.AIAgentUpdate.tags:type_name -> redpanda.api.dataplane.v1alpha3.AIAgentUpdate.TagsEntry
	30, // 19: redpanda.api.dataplane.v1alpha3.AIAgentUpdate.resources:type_name -> redpanda.api.dataplane.v1.Pipeline.Resources
	21, // 20: redpanda.api.dataplane.v1alpha3.AIAgentUpdate.service_account:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.ServiceAccount
	9,  // 21: redpanda.api.dataplane.v1alpha3.UpdateAIAgentRequest.ai_agent:type_name -> redpanda.api.dataplane.v1alpha3.AIAgentUpdate
	31, // 22: redpanda.api.dataplane.v1alpha3.UpdateAIAgentRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 23: redpanda.api.dataplane.v1alpha3.UpdateAIAgentResponse.ai_agent:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent
	1,  // 24: redpanda.api.dataplane.v1alpha3.StopAIAgentResponse.ai_agent:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent
	1,  // 25: redpanda.api.dataplane.v1alpha3.StartAIAgentResponse.ai_agent:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent
	22, // 26: redpanda.api.dataplane.v1alpha3.AIAgent.McpServersEntry.value:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer
	23, // 27: redpanda.api.dataplane.v1alpha3.AIAgent.Provider.openai:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.Provider.OpenAI
	22, // 28: redpanda.api.dataplane.v1alpha3.AIAgentCreate.McpServersEntry.value:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer
	27, // 29: redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.Filter.tags:type_name -> redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.Filter.TagsEntry
	22, // 30: redpanda.api.dataplane.v1alpha3.AIAgentUpdate.McpServersEntry.value:type_name -> redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer
	3,  // 31: redpanda.api.dataplane.v1alpha3.AIAgentService.CreateAIAgent:input_type -> redpanda.api.dataplane.v1alpha3.CreateAIAgentRequest
	5,  // 32: redpanda.api.dataplane.v1alpha3.AIAgentService.GetAIAgent:input_type -> redpanda.api.dataplane.v1alpha3.GetAIAgentRequest
	7,  // 33: redpanda.api.dataplane.v1alpha3.AIAgentService.ListAIAgents:input_type -> redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest
	10, // 34: redpanda.api.dataplane.v1alpha3.AIAgentService.UpdateAIAgent:input_type -> redpanda.api.dataplane.v1alpha3.UpdateAIAgentRequest
	12, // 35: redpanda.api.dataplane.v1alpha3.AIAgentService.DeleteAIAgent:input_type -> redpanda.api.dataplane.v1alpha3.DeleteAIAgentRequest
	14, // 36: redpanda.api.dataplane.v1alpha3.AIAgentService.StopAIAgent:input_type -> redpanda.api.dataplane.v1alpha3.StopAIAgentRequest
	16, // 37: redpanda.api.dataplane.v1alpha3.AIAgentService.StartAIAgent:input_type -> redpanda.api.dataplane.v1alpha3.StartAIAgentRequest
	4,  // 38: redpanda.api.dataplane.v1alpha3.AIAgentService.CreateAIAgent:output_type -> redpanda.api.dataplane.v1alpha3.CreateAIAgentResponse
	6,  // 39: redpanda.api.dataplane.v1alpha3.AIAgentService.GetAIAgent:output_type -> redpanda.api.dataplane.v1alpha3.GetAIAgentResponse
	8,  // 40: redpanda.api.dataplane.v1alpha3.AIAgentService.ListAIAgents:output_type -> redpanda.api.dataplane.v1alpha3.ListAIAgentsResponse
	11, // 41: redpanda.api.dataplane.v1alpha3.AIAgentService.UpdateAIAgent:output_type -> redpanda.api.dataplane.v1alpha3.UpdateAIAgentResponse
	13, // 42: redpanda.api.dataplane.v1alpha3.AIAgentService.DeleteAIAgent:output_type -> redpanda.api.dataplane.v1alpha3.DeleteAIAgentResponse
	15, // 43: redpanda.api.dataplane.v1alpha3.AIAgentService.StopAIAgent:output_type -> redpanda.api.dataplane.v1alpha3.StopAIAgentResponse
	17, // 44: redpanda.api.dataplane.v1alpha3.AIAgentService.StartAIAgent:output_type -> redpanda.api.dataplane.v1alpha3.StartAIAgentResponse
	38, // [38:45] is the sub-list for method output_type
	31, // [31:38] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_init() }
func file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_init() {
	if File_redpanda_api_dataplane_v1alpha3_ai_agent_proto != nil {
		return
	}
	file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes[19].OneofWrappers = []any{
		(*AIAgent_Provider_Openai)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1alpha3_ai_agent_proto = out.File
	file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_goTypes = nil
	file_redpanda_api_dataplane_v1alpha3_ai_agent_proto_depIdxs = nil
}
