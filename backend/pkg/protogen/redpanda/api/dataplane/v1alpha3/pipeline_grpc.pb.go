// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/api/dataplane/v1alpha3/pipeline.proto

package dataplanev1alpha3

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PipelineService_ExecutePipelineTask_FullMethodName = "/redpanda.api.dataplane.v1alpha3.PipelineService/ExecutePipelineTask"
)

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PipelineService is the service for Redpanda Connect AI-powered pipeline generation.
// It exposes a bidirectional streaming API for interactive pipeline generation tasks.
type PipelineServiceClient interface {
	// ExecutePipelineTask generates a pipeline using AI with real-time streaming updates.
	// Supports multi-turn conversations and interactive pipeline refinement.
	ExecutePipelineTask(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecutePipelineTaskRequest, ExecutePipelineTaskResponse], error)
}

type pipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineServiceClient(cc grpc.ClientConnInterface) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) ExecutePipelineTask(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecutePipelineTaskRequest, ExecutePipelineTaskResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PipelineService_ServiceDesc.Streams[0], PipelineService_ExecutePipelineTask_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecutePipelineTaskRequest, ExecutePipelineTaskResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PipelineService_ExecutePipelineTaskClient = grpc.BidiStreamingClient[ExecutePipelineTaskRequest, ExecutePipelineTaskResponse]

// PipelineServiceServer is the server API for PipelineService service.
// All implementations must embed UnimplementedPipelineServiceServer
// for forward compatibility.
//
// PipelineService is the service for Redpanda Connect AI-powered pipeline generation.
// It exposes a bidirectional streaming API for interactive pipeline generation tasks.
type PipelineServiceServer interface {
	// ExecutePipelineTask generates a pipeline using AI with real-time streaming updates.
	// Supports multi-turn conversations and interactive pipeline refinement.
	ExecutePipelineTask(grpc.BidiStreamingServer[ExecutePipelineTaskRequest, ExecutePipelineTaskResponse]) error
	mustEmbedUnimplementedPipelineServiceServer()
}

// UnimplementedPipelineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPipelineServiceServer struct{}

func (UnimplementedPipelineServiceServer) ExecutePipelineTask(grpc.BidiStreamingServer[ExecutePipelineTaskRequest, ExecutePipelineTaskResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecutePipelineTask not implemented")
}
func (UnimplementedPipelineServiceServer) mustEmbedUnimplementedPipelineServiceServer() {}
func (UnimplementedPipelineServiceServer) testEmbeddedByValue()                         {}

// UnsafePipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineServiceServer will
// result in compilation errors.
type UnsafePipelineServiceServer interface {
	mustEmbedUnimplementedPipelineServiceServer()
}

func RegisterPipelineServiceServer(s grpc.ServiceRegistrar, srv PipelineServiceServer) {
	// If the following call pancis, it indicates UnimplementedPipelineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PipelineService_ServiceDesc, srv)
}

func _PipelineService_ExecutePipelineTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipelineServiceServer).ExecutePipelineTask(&grpc.GenericServerStream[ExecutePipelineTaskRequest, ExecutePipelineTaskResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PipelineService_ExecutePipelineTaskServer = grpc.BidiStreamingServer[ExecutePipelineTaskRequest, ExecutePipelineTaskResponse]

// PipelineService_ServiceDesc is the grpc.ServiceDesc for PipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.dataplane.v1alpha3.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecutePipelineTask",
			Handler:       _PipelineService_ExecutePipelineTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "redpanda/api/dataplane/v1alpha3/pipeline.proto",
}
