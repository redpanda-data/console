// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1alpha2/cloud_storage.proto

package dataplanev1alpha2

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MountTask_Type int32

const (
	// Default value; indicates an invalid or unknown task type.
	MountTask_TYPE_UNSPECIFIED MountTask_Type = 0
	// Mount represents the process of making topics available in a cluster by loading them from object storage.
	MountTask_TYPE_MOUNT MountTask_Type = 1
	// Unmount represents the process of offloading topics back to object storage.
	MountTask_TYPE_UNMOUNT MountTask_Type = 2
)

// Enum value maps for MountTask_Type.
var (
	MountTask_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_MOUNT",
		2: "TYPE_UNMOUNT",
	}
	MountTask_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_MOUNT":       1,
		"TYPE_UNMOUNT":     2,
	}
)

func (x MountTask_Type) Enum() *MountTask_Type {
	p := new(MountTask_Type)
	*p = x
	return p
}

func (x MountTask_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MountTask_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_enumTypes[0].Descriptor()
}

func (MountTask_Type) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_enumTypes[0]
}

func (x MountTask_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MountTask_Type.Descriptor instead.
func (MountTask_Type) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{6, 0}
}

type MountTask_State int32

const (
	// Unspecified is the default value, indicating an invalid or unrecognized state.
	MountTask_STATE_UNSPECIFIED MountTask_State = 0
	// Planned: The mount task has been created and is awaiting further actions.
	MountTask_STATE_PLANNED MountTask_State = 1
	// Preparing: The mount task is gathering resources and preparing for execution.
	MountTask_STATE_PREPARING MountTask_State = 2
	// Prepared: All preparations are complete, and the mount task is ready to be executed.
	MountTask_STATE_PREPARED MountTask_State = 3
	// Executing: The mount task is actively transferring or transforming data.
	MountTask_STATE_EXECUTING MountTask_State = 4
	// Executed: The core mount task actions are complete, but the mount task has not yet cut over or finalized.
	MountTask_STATE_EXECUTED MountTask_State = 5
	// Cut Over: The mount task has reached a critical point where ownership is transferred or final adjustments are made.
	MountTask_STATE_CUT_OVER MountTask_State = 6
	// Finished: The mount task has been successfully completed, and no further actions are required.
	MountTask_STATE_FINISHED MountTask_State = 7
	// Canceling: The mount task is in the process of being canceled, and rollback or cleanup actions may be in progress.
	MountTask_STATE_CANCELING MountTask_State = 8
	// Cancelled: The mount task has been fully canceled, and no further actions will be taken.
	MountTask_STATE_CANCELLED MountTask_State = 9
)

// Enum value maps for MountTask_State.
var (
	MountTask_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_PLANNED",
		2: "STATE_PREPARING",
		3: "STATE_PREPARED",
		4: "STATE_EXECUTING",
		5: "STATE_EXECUTED",
		6: "STATE_CUT_OVER",
		7: "STATE_FINISHED",
		8: "STATE_CANCELING",
		9: "STATE_CANCELLED",
	}
	MountTask_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_PLANNED":     1,
		"STATE_PREPARING":   2,
		"STATE_PREPARED":    3,
		"STATE_EXECUTING":   4,
		"STATE_EXECUTED":    5,
		"STATE_CUT_OVER":    6,
		"STATE_FINISHED":    7,
		"STATE_CANCELING":   8,
		"STATE_CANCELLED":   9,
	}
)

func (x MountTask_State) Enum() *MountTask_State {
	p := new(MountTask_State)
	*p = x
	return p
}

func (x MountTask_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MountTask_State) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_enumTypes[1].Descriptor()
}

func (MountTask_State) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_enumTypes[1]
}

func (x MountTask_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MountTask_State.Descriptor instead.
func (MountTask_State) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{6, 1}
}

type UpdateMountTaskRequest_Action int32

const (
	UpdateMountTaskRequest_ACTION_UNSPECIFIED UpdateMountTaskRequest_Action = 0
	UpdateMountTaskRequest_ACTION_PREPARE     UpdateMountTaskRequest_Action = 1
	UpdateMountTaskRequest_ACTION_EXECUTE     UpdateMountTaskRequest_Action = 2
	UpdateMountTaskRequest_ACTION_FINISH      UpdateMountTaskRequest_Action = 3
	UpdateMountTaskRequest_ACTION_CANCEL      UpdateMountTaskRequest_Action = 4
)

// Enum value maps for UpdateMountTaskRequest_Action.
var (
	UpdateMountTaskRequest_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_PREPARE",
		2: "ACTION_EXECUTE",
		3: "ACTION_FINISH",
		4: "ACTION_CANCEL",
	}
	UpdateMountTaskRequest_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_PREPARE":     1,
		"ACTION_EXECUTE":     2,
		"ACTION_FINISH":      3,
		"ACTION_CANCEL":      4,
	}
)

func (x UpdateMountTaskRequest_Action) Enum() *UpdateMountTaskRequest_Action {
	p := new(UpdateMountTaskRequest_Action)
	*p = x
	return p
}

func (x UpdateMountTaskRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMountTaskRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_enumTypes[2].Descriptor()
}

func (UpdateMountTaskRequest_Action) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_enumTypes[2]
}

func (x UpdateMountTaskRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMountTaskRequest_Action.Descriptor instead.
func (UpdateMountTaskRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{13, 0}
}

type MountTopicsRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Topics        []*MountTopicsRequest_TopicMount `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountTopicsRequest) Reset() {
	*x = MountTopicsRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountTopicsRequest) ProtoMessage() {}

func (x *MountTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountTopicsRequest.ProtoReflect.Descriptor instead.
func (*MountTopicsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{0}
}

func (x *MountTopicsRequest) GetTopics() []*MountTopicsRequest_TopicMount {
	if x != nil {
		return x.Topics
	}
	return nil
}

type MountTopicsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of mount
	MountTaskId   int32 `protobuf:"varint,1,opt,name=mount_task_id,json=mountTaskId,proto3" json:"mount_task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountTopicsResponse) Reset() {
	*x = MountTopicsResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountTopicsResponse) ProtoMessage() {}

func (x *MountTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountTopicsResponse.ProtoReflect.Descriptor instead.
func (*MountTopicsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{1}
}

func (x *MountTopicsResponse) GetMountTaskId() int32 {
	if x != nil {
		return x.MountTaskId
	}
	return 0
}

type UnmountTopicsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of topics to unmount.
	Topics        []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnmountTopicsRequest) Reset() {
	*x = UnmountTopicsRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnmountTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmountTopicsRequest) ProtoMessage() {}

func (x *UnmountTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmountTopicsRequest.ProtoReflect.Descriptor instead.
func (*UnmountTopicsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{2}
}

func (x *UnmountTopicsRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type UnmountTopicsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of unmount
	MountTaskId   int32 `protobuf:"varint,1,opt,name=mount_task_id,json=mountTaskId,proto3" json:"mount_task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnmountTopicsResponse) Reset() {
	*x = UnmountTopicsResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnmountTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmountTopicsResponse) ProtoMessage() {}

func (x *UnmountTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmountTopicsResponse.ProtoReflect.Descriptor instead.
func (*UnmountTopicsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{3}
}

func (x *UnmountTopicsResponse) GetMountTaskId() int32 {
	if x != nil {
		return x.MountTaskId
	}
	return 0
}

type ListMountableTopicsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMountableTopicsRequest) Reset() {
	*x = ListMountableTopicsRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMountableTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMountableTopicsRequest) ProtoMessage() {}

func (x *ListMountableTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMountableTopicsRequest.ProtoReflect.Descriptor instead.
func (*ListMountableTopicsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{4}
}

type ListMountableTopicsResponse struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Topics        []*ListMountableTopicsResponse_TopicLocation `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMountableTopicsResponse) Reset() {
	*x = ListMountableTopicsResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMountableTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMountableTopicsResponse) ProtoMessage() {}

func (x *ListMountableTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMountableTopicsResponse.ProtoReflect.Descriptor instead.
func (*ListMountableTopicsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{5}
}

func (x *ListMountableTopicsResponse) GetTopics() []*ListMountableTopicsResponse_TopicLocation {
	if x != nil {
		return x.Topics
	}
	return nil
}

type MountTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for this mount task.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// State describes the current state of the mount task (e.g. "cancelled").
	State MountTask_State `protobuf:"varint,2,opt,name=state,proto3,enum=redpanda.api.dataplane.v1alpha2.MountTask_State" json:"state,omitempty"`
	// Type describes the type of this task (mount or unmount).
	Type MountTask_Type `protobuf:"varint,3,opt,name=type,proto3,enum=redpanda.api.dataplane.v1alpha2.MountTask_Type" json:"type,omitempty"`
	// List of topics that are being mounted or unmounted.
	Topics        []*MountTask_Topic `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountTask) Reset() {
	*x = MountTask{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountTask) ProtoMessage() {}

func (x *MountTask) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountTask.ProtoReflect.Descriptor instead.
func (*MountTask) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{6}
}

func (x *MountTask) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MountTask) GetState() MountTask_State {
	if x != nil {
		return x.State
	}
	return MountTask_STATE_UNSPECIFIED
}

func (x *MountTask) GetType() MountTask_Type {
	if x != nil {
		return x.Type
	}
	return MountTask_TYPE_UNSPECIFIED
}

func (x *MountTask) GetTopics() []*MountTask_Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

type ListMountTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMountTasksRequest) Reset() {
	*x = ListMountTasksRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMountTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMountTasksRequest) ProtoMessage() {}

func (x *ListMountTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMountTasksRequest.ProtoReflect.Descriptor instead.
func (*ListMountTasksRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{7}
}

type ListMountTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*MountTask           `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMountTasksResponse) Reset() {
	*x = ListMountTasksResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMountTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMountTasksResponse) ProtoMessage() {}

func (x *ListMountTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMountTasksResponse.ProtoReflect.Descriptor instead.
func (*ListMountTasksResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{8}
}

func (x *ListMountTasksResponse) GetTasks() []*MountTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetMountTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the mount or unmount task to retrieve.
	Id            int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMountTaskRequest) Reset() {
	*x = GetMountTaskRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMountTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMountTaskRequest) ProtoMessage() {}

func (x *GetMountTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMountTaskRequest.ProtoReflect.Descriptor instead.
func (*GetMountTaskRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{9}
}

func (x *GetMountTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetMountTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *MountTask             `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMountTaskResponse) Reset() {
	*x = GetMountTaskResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMountTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMountTaskResponse) ProtoMessage() {}

func (x *GetMountTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMountTaskResponse.ProtoReflect.Descriptor instead.
func (*GetMountTaskResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{10}
}

func (x *GetMountTaskResponse) GetTask() *MountTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type DeleteMountTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the mount or unmount task to delete.
	Id            int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMountTaskRequest) Reset() {
	*x = DeleteMountTaskRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMountTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMountTaskRequest) ProtoMessage() {}

func (x *DeleteMountTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMountTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteMountTaskRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteMountTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteMountTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMountTaskResponse) Reset() {
	*x = DeleteMountTaskResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMountTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMountTaskResponse) ProtoMessage() {}

func (x *DeleteMountTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMountTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteMountTaskResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{12}
}

type UpdateMountTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the unique identifier of the mount or unmount to update.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Action to execute on mount task.
	Action        UpdateMountTaskRequest_Action `protobuf:"varint,2,opt,name=action,proto3,enum=redpanda.api.dataplane.v1alpha2.UpdateMountTaskRequest_Action" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMountTaskRequest) Reset() {
	*x = UpdateMountTaskRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMountTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMountTaskRequest) ProtoMessage() {}

func (x *UpdateMountTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMountTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateMountTaskRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateMountTaskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateMountTaskRequest) GetAction() UpdateMountTaskRequest_Action {
	if x != nil {
		return x.Action
	}
	return UpdateMountTaskRequest_ACTION_UNSPECIFIED
}

type UpdateMountTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMountTaskResponse) Reset() {
	*x = UpdateMountTaskResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMountTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMountTaskResponse) ProtoMessage() {}

func (x *UpdateMountTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMountTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateMountTaskResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{14}
}

// TopicMount defines the migration of a topic from the cloud storage into this cluster,
// so that it becomes available via the Kafka API.
type MountTopicsRequest_TopicMount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The topic name or full reference of the topic to mount. The full reference
	// must be used in case the same topic exists more than once. This may be the case if
	// the same topic has been unmounted multiple times. List all mountable topics to
	// find the full reference (contains topic name, cluster uuid and revision).
	SourceTopicReference string `protobuf:"bytes,1,opt,name=source_topic_reference,json=sourceTopicReference,proto3" json:"source_topic_reference,omitempty"`
	// Alias may be provided to mount the topic under a different name. Leave
	// blank to re-use the source topic name. The alias does not persist if you
	// unmount the topic again.
	Alias         string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountTopicsRequest_TopicMount) Reset() {
	*x = MountTopicsRequest_TopicMount{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountTopicsRequest_TopicMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountTopicsRequest_TopicMount) ProtoMessage() {}

func (x *MountTopicsRequest_TopicMount) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountTopicsRequest_TopicMount.ProtoReflect.Descriptor instead.
func (*MountTopicsRequest_TopicMount) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MountTopicsRequest_TopicMount) GetSourceTopicReference() string {
	if x != nil {
		return x.SourceTopicReference
	}
	return ""
}

func (x *MountTopicsRequest_TopicMount) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type ListMountableTopicsResponse_TopicLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Topic name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Full reference for the unmounted topic in this format: `topic-name/cluster-uuid/revision`.
	// Use this as unique identifier for mounting a topic if there are multiple topics available
	// with the same name.
	TopicLocation string `protobuf:"bytes,2,opt,name=topic_location,json=topicLocation,proto3" json:"topic_location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMountableTopicsResponse_TopicLocation) Reset() {
	*x = ListMountableTopicsResponse_TopicLocation{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMountableTopicsResponse_TopicLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMountableTopicsResponse_TopicLocation) ProtoMessage() {}

func (x *ListMountableTopicsResponse_TopicLocation) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMountableTopicsResponse_TopicLocation.ProtoReflect.Descriptor instead.
func (*ListMountableTopicsResponse_TopicLocation) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListMountableTopicsResponse_TopicLocation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListMountableTopicsResponse_TopicLocation) GetTopicLocation() string {
	if x != nil {
		return x.TopicLocation
	}
	return ""
}

type MountTask_Topic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The topic reference within the current cluster, which may be either a simple topic name or a full reference
	// in the form: cluster-uuid/topic-name/revision.
	TopicReference string `protobuf:"bytes,1,opt,name=topic_reference,json=topicReference,proto3" json:"topic_reference,omitempty"`
	// The topic reference in the object storage bucket.
	// This field is only set for tasks of type MOUNT.
	SourceTopicReference string `protobuf:"bytes,2,opt,name=source_topic_reference,json=sourceTopicReference,proto3" json:"source_topic_reference,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MountTask_Topic) Reset() {
	*x = MountTask_Topic{}
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountTask_Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountTask_Topic) ProtoMessage() {}

func (x *MountTask_Topic) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountTask_Topic.ProtoReflect.Descriptor instead.
func (*MountTask_Topic) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP(), []int{6, 0}
}

func (x *MountTask_Topic) GetTopicReference() string {
	if x != nil {
		return x.TopicReference
	}
	return ""
}

func (x *MountTask_Topic) GetSourceTopicReference() string {
	if x != nil {
		return x.SourceTopicReference
	}
	return ""
}

var File_redpanda_api_dataplane_v1alpha2_cloud_storage_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDesc = []byte{
	0x0a, 0x33, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0xe0, 0x41, 0x02, 0xba, 0x48,
	0x0b, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x19, 0x72, 0x17, 0x18, 0xf9,
	0x01, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f,
	0x5c, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x39, 0x0a, 0x13,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x14, 0x55, 0x6e, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x30, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x2a, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x24, 0x08, 0x01, 0x10,
	0x80, 0x08, 0x18, 0x01, 0x22, 0x1b, 0x72, 0x19, 0x10, 0x01, 0x18, 0xf9, 0x01, 0x32, 0x12, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x5c, 0x2d, 0x5d, 0x2a,
	0x24, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x3b, 0x0a, 0x15, 0x55, 0x6e, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0x4a, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x04, 0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x48, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0x66, 0x0a, 0x05, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x02, 0x22, 0xd5, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x55, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x49,
	0x4e, 0x47, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x5a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x2a,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x22, 0x2d, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x02, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x04, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x8b, 0x1e, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa7, 0x04, 0x0a, 0x0b, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x03, 0x92, 0x41, 0xf1, 0x02, 0x12, 0x20, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0xd9, 0x01,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x6d, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x67, 0x61, 0x69, 0x6e, 0x2e, 0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61,
	0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x20, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x20, 0x69,
	0x74, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x4a, 0x45, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x3e, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x38, 0x0a, 0x36, 0x1a, 0x34, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x3a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x62, 0x01, 0x2a, 0x22, 0x24, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0xd1, 0x04, 0x0a, 0x0d, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55,
	0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0, 0x03, 0x92, 0x41, 0x93, 0x03, 0x12, 0x20, 0x55, 0x6e, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0xf9, 0x01,
	0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2c, 0x20, 0x66, 0x72, 0x65, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x20, 0x4f, 0x6e, 0x63, 0x65, 0x20, 0x79,
	0x6f, 0x75, 0x20, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x6f,
	0x6e, 0x67, 0x65, 0x72, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x2e,
	0x20, 0x49, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x74, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x73, 0x61, 0x66, 0x65,
	0x6c, 0x79, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4a, 0x47, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x40, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x3a, 0x0a, 0x38, 0x1a, 0x36, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x6e, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74,
	0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x3a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x62, 0x01, 0x2a, 0x22,
	0x26, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f,
	0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xab, 0x04, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x03, 0x92, 0x41, 0xdc,
	0x02, 0x12, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0xc7, 0x01, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x20, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x20, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4a, 0x4d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x46, 0x0a, 0x02, 0x4f, 0x4b, 0x12,
	0x40, 0x0a, 0x3e, 0x1a, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x62, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x28, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x98, 0x04, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x03, 0x92, 0x41, 0xde, 0x02,
	0x12, 0x1e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0xc5, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x61, 0x73, 0x6b,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x20,
	0x49, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0xe2,
	0x80, 0x99, 0x73, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x28, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x29, 0x2c, 0x20, 0x69, 0x74, 0x73,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2c, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x69,
	0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x2e, 0x4a, 0x48, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x41, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x3b, 0x0a, 0x39, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74,
	0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x62, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x23, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0xf7, 0x04, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf9,
	0x03, 0x92, 0x41, 0xbf, 0x03, 0x12, 0x2a, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x62, 0x79, 0x20, 0x49,
	0x44, 0x1a, 0x9c, 0x02, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x62,
	0x79, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x28, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x29, 0x2c, 0x20, 0x69, 0x74,
	0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2c,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20,
	0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x49, 0x44, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x44, 0x73, 0x2e,
	0x4a, 0x46, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3f, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x39, 0x0a,
	0x37, 0x1a, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12,
	0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14,
	0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x62, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x28, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2d,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xf2, 0x02, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xeb, 0x01, 0x92, 0x41, 0xb4, 0x01, 0x12, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x62,
	0x79, 0x20, 0x49, 0x44, 0x2e, 0x4a, 0x49, 0x0a, 0x03, 0x32, 0x30, 0x32, 0x12, 0x42, 0x0a, 0x02,
	0x4f, 0x4b, 0x12, 0x3c, 0x0a, 0x3a, 0x1a, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x62, 0x01, 0x2a, 0x2a, 0x28, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x99, 0x03, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x02, 0x92, 0x41, 0xd8, 0x01, 0x12, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x72,
	0x20, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x44, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x20, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4a, 0x49,
	0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x42, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x3c, 0x0a, 0x3a, 0x1a,
	0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a,
	0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x62, 0x01,
	0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x2d, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0xa1, 0x01, 0x92, 0x41,
	0x9d, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x8b, 0x01, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x3a, 0x20, 0x5b, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f, 0x29, 0x42,
	0xc0, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x67, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x44, 0xaa, 0x02, 0x1f, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xca, 0x02, 0x1f,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xe2,
	0x02, 0x2b, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescData = file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDesc
)

func file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDescData
}

var file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_goTypes = []any{
	(MountTask_Type)(0),                               // 0: redpanda.api.dataplane.v1alpha2.MountTask.Type
	(MountTask_State)(0),                              // 1: redpanda.api.dataplane.v1alpha2.MountTask.State
	(UpdateMountTaskRequest_Action)(0),                // 2: redpanda.api.dataplane.v1alpha2.UpdateMountTaskRequest.Action
	(*MountTopicsRequest)(nil),                        // 3: redpanda.api.dataplane.v1alpha2.MountTopicsRequest
	(*MountTopicsResponse)(nil),                       // 4: redpanda.api.dataplane.v1alpha2.MountTopicsResponse
	(*UnmountTopicsRequest)(nil),                      // 5: redpanda.api.dataplane.v1alpha2.UnmountTopicsRequest
	(*UnmountTopicsResponse)(nil),                     // 6: redpanda.api.dataplane.v1alpha2.UnmountTopicsResponse
	(*ListMountableTopicsRequest)(nil),                // 7: redpanda.api.dataplane.v1alpha2.ListMountableTopicsRequest
	(*ListMountableTopicsResponse)(nil),               // 8: redpanda.api.dataplane.v1alpha2.ListMountableTopicsResponse
	(*MountTask)(nil),                                 // 9: redpanda.api.dataplane.v1alpha2.MountTask
	(*ListMountTasksRequest)(nil),                     // 10: redpanda.api.dataplane.v1alpha2.ListMountTasksRequest
	(*ListMountTasksResponse)(nil),                    // 11: redpanda.api.dataplane.v1alpha2.ListMountTasksResponse
	(*GetMountTaskRequest)(nil),                       // 12: redpanda.api.dataplane.v1alpha2.GetMountTaskRequest
	(*GetMountTaskResponse)(nil),                      // 13: redpanda.api.dataplane.v1alpha2.GetMountTaskResponse
	(*DeleteMountTaskRequest)(nil),                    // 14: redpanda.api.dataplane.v1alpha2.DeleteMountTaskRequest
	(*DeleteMountTaskResponse)(nil),                   // 15: redpanda.api.dataplane.v1alpha2.DeleteMountTaskResponse
	(*UpdateMountTaskRequest)(nil),                    // 16: redpanda.api.dataplane.v1alpha2.UpdateMountTaskRequest
	(*UpdateMountTaskResponse)(nil),                   // 17: redpanda.api.dataplane.v1alpha2.UpdateMountTaskResponse
	(*MountTopicsRequest_TopicMount)(nil),             // 18: redpanda.api.dataplane.v1alpha2.MountTopicsRequest.TopicMount
	(*ListMountableTopicsResponse_TopicLocation)(nil), // 19: redpanda.api.dataplane.v1alpha2.ListMountableTopicsResponse.TopicLocation
	(*MountTask_Topic)(nil),                           // 20: redpanda.api.dataplane.v1alpha2.MountTask.Topic
}
var file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_depIdxs = []int32{
	18, // 0: redpanda.api.dataplane.v1alpha2.MountTopicsRequest.topics:type_name -> redpanda.api.dataplane.v1alpha2.MountTopicsRequest.TopicMount
	19, // 1: redpanda.api.dataplane.v1alpha2.ListMountableTopicsResponse.topics:type_name -> redpanda.api.dataplane.v1alpha2.ListMountableTopicsResponse.TopicLocation
	1,  // 2: redpanda.api.dataplane.v1alpha2.MountTask.state:type_name -> redpanda.api.dataplane.v1alpha2.MountTask.State
	0,  // 3: redpanda.api.dataplane.v1alpha2.MountTask.type:type_name -> redpanda.api.dataplane.v1alpha2.MountTask.Type
	20, // 4: redpanda.api.dataplane.v1alpha2.MountTask.topics:type_name -> redpanda.api.dataplane.v1alpha2.MountTask.Topic
	9,  // 5: redpanda.api.dataplane.v1alpha2.ListMountTasksResponse.tasks:type_name -> redpanda.api.dataplane.v1alpha2.MountTask
	9,  // 6: redpanda.api.dataplane.v1alpha2.GetMountTaskResponse.task:type_name -> redpanda.api.dataplane.v1alpha2.MountTask
	2,  // 7: redpanda.api.dataplane.v1alpha2.UpdateMountTaskRequest.action:type_name -> redpanda.api.dataplane.v1alpha2.UpdateMountTaskRequest.Action
	3,  // 8: redpanda.api.dataplane.v1alpha2.CloudStorageService.MountTopics:input_type -> redpanda.api.dataplane.v1alpha2.MountTopicsRequest
	5,  // 9: redpanda.api.dataplane.v1alpha2.CloudStorageService.UnmountTopics:input_type -> redpanda.api.dataplane.v1alpha2.UnmountTopicsRequest
	7,  // 10: redpanda.api.dataplane.v1alpha2.CloudStorageService.ListMountableTopics:input_type -> redpanda.api.dataplane.v1alpha2.ListMountableTopicsRequest
	10, // 11: redpanda.api.dataplane.v1alpha2.CloudStorageService.ListMountTasks:input_type -> redpanda.api.dataplane.v1alpha2.ListMountTasksRequest
	12, // 12: redpanda.api.dataplane.v1alpha2.CloudStorageService.GetMountTask:input_type -> redpanda.api.dataplane.v1alpha2.GetMountTaskRequest
	14, // 13: redpanda.api.dataplane.v1alpha2.CloudStorageService.DeleteMountTask:input_type -> redpanda.api.dataplane.v1alpha2.DeleteMountTaskRequest
	16, // 14: redpanda.api.dataplane.v1alpha2.CloudStorageService.UpdateMountTask:input_type -> redpanda.api.dataplane.v1alpha2.UpdateMountTaskRequest
	4,  // 15: redpanda.api.dataplane.v1alpha2.CloudStorageService.MountTopics:output_type -> redpanda.api.dataplane.v1alpha2.MountTopicsResponse
	6,  // 16: redpanda.api.dataplane.v1alpha2.CloudStorageService.UnmountTopics:output_type -> redpanda.api.dataplane.v1alpha2.UnmountTopicsResponse
	8,  // 17: redpanda.api.dataplane.v1alpha2.CloudStorageService.ListMountableTopics:output_type -> redpanda.api.dataplane.v1alpha2.ListMountableTopicsResponse
	11, // 18: redpanda.api.dataplane.v1alpha2.CloudStorageService.ListMountTasks:output_type -> redpanda.api.dataplane.v1alpha2.ListMountTasksResponse
	13, // 19: redpanda.api.dataplane.v1alpha2.CloudStorageService.GetMountTask:output_type -> redpanda.api.dataplane.v1alpha2.GetMountTaskResponse
	15, // 20: redpanda.api.dataplane.v1alpha2.CloudStorageService.DeleteMountTask:output_type -> redpanda.api.dataplane.v1alpha2.DeleteMountTaskResponse
	17, // 21: redpanda.api.dataplane.v1alpha2.CloudStorageService.UpdateMountTask:output_type -> redpanda.api.dataplane.v1alpha2.UpdateMountTaskResponse
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_init() }
func file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_init() {
	if File_redpanda_api_dataplane_v1alpha2_cloud_storage_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1alpha2_cloud_storage_proto = out.File
	file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_goTypes = nil
	file_redpanda_api_dataplane_v1alpha2_cloud_storage_proto_depIdxs = nil
}
