// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/core/common/acl.proto

package common

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/pbgen"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / The ACL resource types
type ACLResource int32

const (
	ACLResource_ACL_RESOURCE_UNSPECIFIED ACLResource = 0
	// Wildcard for selecting any ACL resource
	ACLResource_ACL_RESOURCE_ANY ACLResource = 1
	// Cluster wide resource
	ACLResource_ACL_RESOURCE_CLUSTER ACLResource = 2
	// Consumer group resource
	ACLResource_ACL_RESOURCE_GROUP ACLResource = 3
	// Topic resource
	ACLResource_ACL_RESOURCE_TOPIC ACLResource = 4
	// Transaction ID resource
	ACLResource_ACL_RESOURCE_TXN_ID ACLResource = 5
	// Schema Registry subject resource
	ACLResource_ACL_RESOURCE_SR_SUBJECT ACLResource = 6
	// Schema Registry wide resource
	ACLResource_ACL_RESOURCE_SR_REGISTRY ACLResource = 7
	// Wildcard to match any SR ACL resource
	ACLResource_ACL_RESOURCE_SR_ANY ACLResource = 8
)

// Enum value maps for ACLResource.
var (
	ACLResource_name = map[int32]string{
		0: "ACL_RESOURCE_UNSPECIFIED",
		1: "ACL_RESOURCE_ANY",
		2: "ACL_RESOURCE_CLUSTER",
		3: "ACL_RESOURCE_GROUP",
		4: "ACL_RESOURCE_TOPIC",
		5: "ACL_RESOURCE_TXN_ID",
		6: "ACL_RESOURCE_SR_SUBJECT",
		7: "ACL_RESOURCE_SR_REGISTRY",
		8: "ACL_RESOURCE_SR_ANY",
	}
	ACLResource_value = map[string]int32{
		"ACL_RESOURCE_UNSPECIFIED": 0,
		"ACL_RESOURCE_ANY":         1,
		"ACL_RESOURCE_CLUSTER":     2,
		"ACL_RESOURCE_GROUP":       3,
		"ACL_RESOURCE_TOPIC":       4,
		"ACL_RESOURCE_TXN_ID":      5,
		"ACL_RESOURCE_SR_SUBJECT":  6,
		"ACL_RESOURCE_SR_REGISTRY": 7,
		"ACL_RESOURCE_SR_ANY":      8,
	}
)

func (x ACLResource) Enum() *ACLResource {
	p := new(ACLResource)
	*p = x
	return p
}

func (x ACLResource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLResource) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_common_acl_proto_enumTypes[0].Descriptor()
}

func (ACLResource) Type() protoreflect.EnumType {
	return &file_redpanda_core_common_acl_proto_enumTypes[0]
}

func (x ACLResource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLResource.Descriptor instead.
func (ACLResource) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_common_acl_proto_rawDescGZIP(), []int{0}
}

// / The ACL pattern type
type ACLPattern int32

const (
	ACLPattern_ACL_PATTERN_UNSPECIFIED ACLPattern = 0
	// Wildcard to match any pattern
	ACLPattern_ACL_PATTERN_ANY ACLPattern = 1
	// Match a literal string
	ACLPattern_ACL_PATTERN_LITERAL ACLPattern = 2
	// Match a prefix
	ACLPattern_ACL_PATTERN_PREFIXED ACLPattern = 3
	// Match serves as a catch-all for all the names of a topic
	// the principal is authorized to access
	ACLPattern_ACL_PATTERN_MATCH ACLPattern = 4
)

// Enum value maps for ACLPattern.
var (
	ACLPattern_name = map[int32]string{
		0: "ACL_PATTERN_UNSPECIFIED",
		1: "ACL_PATTERN_ANY",
		2: "ACL_PATTERN_LITERAL",
		3: "ACL_PATTERN_PREFIXED",
		4: "ACL_PATTERN_MATCH",
	}
	ACLPattern_value = map[string]int32{
		"ACL_PATTERN_UNSPECIFIED": 0,
		"ACL_PATTERN_ANY":         1,
		"ACL_PATTERN_LITERAL":     2,
		"ACL_PATTERN_PREFIXED":    3,
		"ACL_PATTERN_MATCH":       4,
	}
)

func (x ACLPattern) Enum() *ACLPattern {
	p := new(ACLPattern)
	*p = x
	return p
}

func (x ACLPattern) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLPattern) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_common_acl_proto_enumTypes[1].Descriptor()
}

func (ACLPattern) Type() protoreflect.EnumType {
	return &file_redpanda_core_common_acl_proto_enumTypes[1]
}

func (x ACLPattern) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLPattern.Descriptor instead.
func (ACLPattern) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_common_acl_proto_rawDescGZIP(), []int{1}
}

// / The ACL operation to match
type ACLOperation int32

const (
	ACLOperation_ACL_OPERATION_UNSPECIFIED      ACLOperation = 0
	ACLOperation_ACL_OPERATION_ANY              ACLOperation = 1
	ACLOperation_ACL_OPERATION_READ             ACLOperation = 2
	ACLOperation_ACL_OPERATION_WRITE            ACLOperation = 3
	ACLOperation_ACL_OPERATION_CREATE           ACLOperation = 4
	ACLOperation_ACL_OPERATION_REMOVE           ACLOperation = 5
	ACLOperation_ACL_OPERATION_ALTER            ACLOperation = 6
	ACLOperation_ACL_OPERATION_DESCRIBE         ACLOperation = 7
	ACLOperation_ACL_OPERATION_CLUSTER_ACTION   ACLOperation = 8
	ACLOperation_ACL_OPERATION_DESCRIBE_CONFIGS ACLOperation = 9
	ACLOperation_ACL_OPERATION_ALTER_CONFIGS    ACLOperation = 10
	ACLOperation_ACL_OPERATION_IDEMPOTENT_WRITE ACLOperation = 11
)

// Enum value maps for ACLOperation.
var (
	ACLOperation_name = map[int32]string{
		0:  "ACL_OPERATION_UNSPECIFIED",
		1:  "ACL_OPERATION_ANY",
		2:  "ACL_OPERATION_READ",
		3:  "ACL_OPERATION_WRITE",
		4:  "ACL_OPERATION_CREATE",
		5:  "ACL_OPERATION_REMOVE",
		6:  "ACL_OPERATION_ALTER",
		7:  "ACL_OPERATION_DESCRIBE",
		8:  "ACL_OPERATION_CLUSTER_ACTION",
		9:  "ACL_OPERATION_DESCRIBE_CONFIGS",
		10: "ACL_OPERATION_ALTER_CONFIGS",
		11: "ACL_OPERATION_IDEMPOTENT_WRITE",
	}
	ACLOperation_value = map[string]int32{
		"ACL_OPERATION_UNSPECIFIED":      0,
		"ACL_OPERATION_ANY":              1,
		"ACL_OPERATION_READ":             2,
		"ACL_OPERATION_WRITE":            3,
		"ACL_OPERATION_CREATE":           4,
		"ACL_OPERATION_REMOVE":           5,
		"ACL_OPERATION_ALTER":            6,
		"ACL_OPERATION_DESCRIBE":         7,
		"ACL_OPERATION_CLUSTER_ACTION":   8,
		"ACL_OPERATION_DESCRIBE_CONFIGS": 9,
		"ACL_OPERATION_ALTER_CONFIGS":    10,
		"ACL_OPERATION_IDEMPOTENT_WRITE": 11,
	}
)

func (x ACLOperation) Enum() *ACLOperation {
	p := new(ACLOperation)
	*p = x
	return p
}

func (x ACLOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_common_acl_proto_enumTypes[2].Descriptor()
}

func (ACLOperation) Type() protoreflect.EnumType {
	return &file_redpanda_core_common_acl_proto_enumTypes[2]
}

func (x ACLOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLOperation.Descriptor instead.
func (ACLOperation) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_common_acl_proto_rawDescGZIP(), []int{2}
}

// / ACL permission types
type ACLPermissionType int32

const (
	ACLPermissionType_ACL_PERMISSION_TYPE_UNSPECIFIED ACLPermissionType = 0
	ACLPermissionType_ACL_PERMISSION_TYPE_ANY         ACLPermissionType = 1
	ACLPermissionType_ACL_PERMISSION_TYPE_ALLOW       ACLPermissionType = 2
	ACLPermissionType_ACL_PERMISSION_TYPE_DENY        ACLPermissionType = 3
)

// Enum value maps for ACLPermissionType.
var (
	ACLPermissionType_name = map[int32]string{
		0: "ACL_PERMISSION_TYPE_UNSPECIFIED",
		1: "ACL_PERMISSION_TYPE_ANY",
		2: "ACL_PERMISSION_TYPE_ALLOW",
		3: "ACL_PERMISSION_TYPE_DENY",
	}
	ACLPermissionType_value = map[string]int32{
		"ACL_PERMISSION_TYPE_UNSPECIFIED": 0,
		"ACL_PERMISSION_TYPE_ANY":         1,
		"ACL_PERMISSION_TYPE_ALLOW":       2,
		"ACL_PERMISSION_TYPE_DENY":        3,
	}
)

func (x ACLPermissionType) Enum() *ACLPermissionType {
	p := new(ACLPermissionType)
	*p = x
	return p
}

func (x ACLPermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLPermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_common_acl_proto_enumTypes[3].Descriptor()
}

func (ACLPermissionType) Type() protoreflect.EnumType {
	return &file_redpanda_core_common_acl_proto_enumTypes[3]
}

func (x ACLPermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLPermissionType.Descriptor instead.
func (ACLPermissionType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_common_acl_proto_rawDescGZIP(), []int{3}
}

var File_redpanda_core_common_acl_proto protoreflect.FileDescriptor

var file_redpanda_core_common_acl_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1c, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2f, 0x70, 0x62, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xf8, 0x01, 0x0a, 0x0b, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x4c, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43,
	0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x58, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x43, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x52, 0x5f, 0x53,
	0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x4c, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x52, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x08, 0x2a,
	0x88, 0x01, 0x0a, 0x0a, 0x41, 0x43, 0x4c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x43, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f,
	0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x4c,
	0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x2a, 0xe9, 0x02, 0x0a, 0x0c, 0x41,
	0x43, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x41,
	0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43,
	0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x4c,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x10,
	0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53,
	0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4d, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x10, 0x0b, 0x2a, 0x92, 0x01, 0x0a, 0x11, 0x41, 0x43, 0x4c, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x41, 0x43, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x03, 0x42, 0xf2, 0x01, 0xea, 0x92,
	0x19, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x08, 0x41, 0x63, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0xa2, 0x02, 0x03, 0x52, 0x43, 0x43, 0xaa, 0x02, 0x14, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xca, 0x02, 0x14,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0xe2, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c,
	0x43, 0x6f, 0x72, 0x65, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_core_common_acl_proto_rawDescOnce sync.Once
	file_redpanda_core_common_acl_proto_rawDescData = file_redpanda_core_common_acl_proto_rawDesc
)

func file_redpanda_core_common_acl_proto_rawDescGZIP() []byte {
	file_redpanda_core_common_acl_proto_rawDescOnce.Do(func() {
		file_redpanda_core_common_acl_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_core_common_acl_proto_rawDescData)
	})
	return file_redpanda_core_common_acl_proto_rawDescData
}

var file_redpanda_core_common_acl_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_redpanda_core_common_acl_proto_goTypes = []any{
	(ACLResource)(0),       // 0: redpanda.core.common.ACLResource
	(ACLPattern)(0),        // 1: redpanda.core.common.ACLPattern
	(ACLOperation)(0),      // 2: redpanda.core.common.ACLOperation
	(ACLPermissionType)(0), // 3: redpanda.core.common.ACLPermissionType
}
var file_redpanda_core_common_acl_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_redpanda_core_common_acl_proto_init() }
func file_redpanda_core_common_acl_proto_init() {
	if File_redpanda_core_common_acl_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_core_common_acl_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_redpanda_core_common_acl_proto_goTypes,
		DependencyIndexes: file_redpanda_core_common_acl_proto_depIdxs,
		EnumInfos:         file_redpanda_core_common_acl_proto_enumTypes,
	}.Build()
	File_redpanda_core_common_acl_proto = out.File
	file_redpanda_core_common_acl_proto_rawDesc = nil
	file_redpanda_core_common_acl_proto_goTypes = nil
	file_redpanda_core_common_acl_proto_depIdxs = nil
}
