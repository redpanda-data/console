// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/core/admin/v2/broker.proto

package adminv2

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/pbgen"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetBrokerRequest returns information about a single broker in the cluster
type GetBrokerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The node ID for the broker. If set to -1, the broker handling the RPC
	// request returns information about itself.
	NodeId        int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBrokerRequest) Reset() {
	*x = GetBrokerRequest{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrokerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerRequest) ProtoMessage() {}

func (x *GetBrokerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerRequest.ProtoReflect.Descriptor instead.
func (*GetBrokerRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{0}
}

func (x *GetBrokerRequest) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// GetBrokerResponse is the response from the GetBroker RPC.
type GetBrokerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The specified broker and it's information.
	Broker        *Broker `protobuf:"bytes,1,opt,name=broker,proto3" json:"broker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBrokerResponse) Reset() {
	*x = GetBrokerResponse{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrokerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerResponse) ProtoMessage() {}

func (x *GetBrokerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerResponse.ProtoReflect.Descriptor instead.
func (*GetBrokerResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{1}
}

func (x *GetBrokerResponse) GetBroker() *Broker {
	if x != nil {
		return x.Broker
	}
	return nil
}

// ListBrokersRequest returns information about all the brokers in the cluster
type ListBrokersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBrokersRequest) Reset() {
	*x = ListBrokersRequest{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBrokersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBrokersRequest) ProtoMessage() {}

func (x *ListBrokersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBrokersRequest.ProtoReflect.Descriptor instead.
func (*ListBrokersRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{2}
}

// ListBrokersResponse is the response from the ListBrokers RPC.
type ListBrokersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The brokers in the cluster and their information.
	Brokers       []*Broker `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBrokersResponse) Reset() {
	*x = ListBrokersResponse{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBrokersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBrokersResponse) ProtoMessage() {}

func (x *ListBrokersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBrokersResponse.ProtoReflect.Descriptor instead.
func (*ListBrokersResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{3}
}

func (x *ListBrokersResponse) GetBrokers() []*Broker {
	if x != nil {
		return x.Brokers
	}
	return nil
}

type ListKafkaConnectionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The node ID for the broker. If set to -1, the broker handling the RPC
	// request returns information about itself.
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The maximum number of connections to return. If unspecified or 0, a
	// default value may be applied. Note that paging is currently not fully
	// supported, and this field only acts as a limit for the first page of data
	// returned. Subsequent pages of data cannot be requested.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Filter expression to apply to the connection list.
	// Uses a subset of AIP-160 filter syntax supporting:
	// - Field comparisons (`=`, `!=`, `<`, `>`, `<=`, `>=`)
	// - Logical AND chaining: condition1 AND condition2
	// - Nested field access: parent.child = value
	// - Escape sequences: field = "string with \"quotes\""
	// - Enum types
	// - RFC3339 timestamps and ISO-like duration
	//
	// Limitations (not supported):
	// - Logical OR chaining
	// - Parentheses `(` `)` for grouping
	// - Map and repeated types
	// - HAS (:) operator
	// - Negation (-, NOT)
	// - Bare literal matching
	//
	// Example filters:
	// - `state = KAFKA_CONNECTION_STATE_OPEN`
	// - `idle_duration > 30s AND request_count_total > 100`
	// - `authentication_info.user_principal = "my-producer"`
	// - `recent_request_statistics.produce_bytes > 1000 AND
	// client_software_name = "kgo"`
	// - `open_time >= 2025-09-01T10:22:54Z`
	//
	// Reference: https://google.aip.dev/160
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Field-based ordering specification following AIP-132 syntax.
	// Supports multiple fields with `asc`/`desc` direction indicators.
	// Examples:
	// - `idle_duration desc` - longest idle connections first
	// - `open_time desc, total_request_statistics.request_count desc` - newest
	// connections first, then most active
	// - `recent_request_statistics.produce_bytes desc` - connections with
	// highest current produce throughput first
	//
	// Reference: https://google.aip.dev/132#ordering
	OrderBy       string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKafkaConnectionsRequest) Reset() {
	*x = ListKafkaConnectionsRequest{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKafkaConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKafkaConnectionsRequest) ProtoMessage() {}

func (x *ListKafkaConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKafkaConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListKafkaConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{4}
}

func (x *ListKafkaConnectionsRequest) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ListKafkaConnectionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKafkaConnectionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListKafkaConnectionsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListKafkaConnectionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of connections matching the request.
	// Note that in addition to open connections, some recently-closed
	// connections may also be included here. If you don't want to include
	// closed connections, set the filter in the request to `state =
	// KAFKA_CONNECTION_STATE_OPEN`.
	Connections []*KafkaConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
	// Total number of connections matching the request.
	// This may be greater than `len(connections)` if some connections were
	// omitted from the response due to the specified (or default) `page_size`.
	// Example:
	//
	//	request.page_size = 10
	//	response.connections = [<10 items>]
	//	response.total_size = 13
	TotalSize     uint64 `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKafkaConnectionsResponse) Reset() {
	*x = ListKafkaConnectionsResponse{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKafkaConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKafkaConnectionsResponse) ProtoMessage() {}

func (x *ListKafkaConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKafkaConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListKafkaConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{5}
}

func (x *ListKafkaConnectionsResponse) GetConnections() []*KafkaConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *ListKafkaConnectionsResponse) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// The resource for an individual broker within the Kafka Cluster.
type Broker struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This broker's node ID.
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The build this broker is running.
	BuildInfo *BuildInfo `protobuf:"bytes,2,opt,name=build_info,json=buildInfo,proto3" json:"build_info,omitempty"`
	// The admin server information.
	AdminServer   *AdminServer `protobuf:"bytes,3,opt,name=admin_server,json=adminServer,proto3" json:"admin_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Broker) Reset() {
	*x = Broker{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Broker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Broker) ProtoMessage() {}

func (x *Broker) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Broker.ProtoReflect.Descriptor instead.
func (*Broker) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{6}
}

func (x *Broker) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Broker) GetBuildInfo() *BuildInfo {
	if x != nil {
		return x.BuildInfo
	}
	return nil
}

func (x *Broker) GetAdminServer() *AdminServer {
	if x != nil {
		return x.AdminServer
	}
	return nil
}

// BuildInfo contains information about the Redpanda build.
type BuildInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A version string of Redpanda like "v25.2.1"
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The git commit SHA of the build.
	BuildSha      string `protobuf:"bytes,2,opt,name=build_sha,json=buildSha,proto3" json:"build_sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildInfo) Reset() {
	*x = BuildInfo{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildInfo) ProtoMessage() {}

func (x *BuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildInfo.ProtoReflect.Descriptor instead.
func (*BuildInfo) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{7}
}

func (x *BuildInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BuildInfo) GetBuildSha() string {
	if x != nil {
		return x.BuildSha
	}
	return ""
}

// AdminServer has information about the admin server within the broker.
type AdminServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All of the ConnectRPC routes available on this admin server.
	Routes        []*RPCRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminServer) Reset() {
	*x = AdminServer{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServer) ProtoMessage() {}

func (x *AdminServer) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServer.ProtoReflect.Descriptor instead.
func (*AdminServer) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{8}
}

func (x *AdminServer) GetRoutes() []*RPCRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

// A route in the Admin API RPC server.
type RPCRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the RPC method.
	//
	// For example `redpanda.core.admin.v2.AdminService.GetVersion`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The HTTP route for this RPC method.
	//
	// For example `/redpanda.core.admin.v2.AdminService/GetVersion`
	HttpRoute     string `protobuf:"bytes,2,opt,name=http_route,json=httpRoute,proto3" json:"http_route,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RPCRoute) Reset() {
	*x = RPCRoute{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCRoute) ProtoMessage() {}

func (x *RPCRoute) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCRoute.ProtoReflect.Descriptor instead.
func (*RPCRoute) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{9}
}

func (x *RPCRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RPCRoute) GetHttpRoute() string {
	if x != nil {
		return x.HttpRoute
	}
	return ""
}

var File_redpanda_core_admin_v2_broker_proto protoreflect.FileDescriptor

var file_redpanda_core_admin_v2_broker_proto_rawDesc = []byte{
	0x0a, 0x23, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x70, 0x62, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x70, 0x62, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x70, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x22,
	0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0x88, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x06, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x46, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x61, 0x22, 0x47, 0x0a, 0x0b,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x32, 0xf5, 0x02, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xea, 0x92, 0x19, 0x02, 0x10, 0x03,
	0x12, 0x6e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xea, 0x92, 0x19, 0x02, 0x10, 0x03,
	0x12, 0x89, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xea, 0x92, 0x19, 0x02, 0x10, 0x03, 0x42, 0x8a, 0x02, 0xea,
	0x92, 0x19, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x42, 0x0b, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x76, 0x32,
	0xa2, 0x02, 0x03, 0x52, 0x43, 0x41, 0xaa, 0x02, 0x16, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x32, 0xca,
	0x02, 0x16, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x22, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56,
	0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_redpanda_core_admin_v2_broker_proto_rawDescOnce sync.Once
	file_redpanda_core_admin_v2_broker_proto_rawDescData = file_redpanda_core_admin_v2_broker_proto_rawDesc
)

func file_redpanda_core_admin_v2_broker_proto_rawDescGZIP() []byte {
	file_redpanda_core_admin_v2_broker_proto_rawDescOnce.Do(func() {
		file_redpanda_core_admin_v2_broker_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_core_admin_v2_broker_proto_rawDescData)
	})
	return file_redpanda_core_admin_v2_broker_proto_rawDescData
}

var file_redpanda_core_admin_v2_broker_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_redpanda_core_admin_v2_broker_proto_goTypes = []any{
	(*GetBrokerRequest)(nil),             // 0: redpanda.core.admin.v2.GetBrokerRequest
	(*GetBrokerResponse)(nil),            // 1: redpanda.core.admin.v2.GetBrokerResponse
	(*ListBrokersRequest)(nil),           // 2: redpanda.core.admin.v2.ListBrokersRequest
	(*ListBrokersResponse)(nil),          // 3: redpanda.core.admin.v2.ListBrokersResponse
	(*ListKafkaConnectionsRequest)(nil),  // 4: redpanda.core.admin.v2.ListKafkaConnectionsRequest
	(*ListKafkaConnectionsResponse)(nil), // 5: redpanda.core.admin.v2.ListKafkaConnectionsResponse
	(*Broker)(nil),                       // 6: redpanda.core.admin.v2.Broker
	(*BuildInfo)(nil),                    // 7: redpanda.core.admin.v2.BuildInfo
	(*AdminServer)(nil),                  // 8: redpanda.core.admin.v2.AdminServer
	(*RPCRoute)(nil),                     // 9: redpanda.core.admin.v2.RPCRoute
	(*KafkaConnection)(nil),              // 10: redpanda.core.admin.v2.KafkaConnection
}
var file_redpanda_core_admin_v2_broker_proto_depIdxs = []int32{
	6,  // 0: redpanda.core.admin.v2.GetBrokerResponse.broker:type_name -> redpanda.core.admin.v2.Broker
	6,  // 1: redpanda.core.admin.v2.ListBrokersResponse.brokers:type_name -> redpanda.core.admin.v2.Broker
	10, // 2: redpanda.core.admin.v2.ListKafkaConnectionsResponse.connections:type_name -> redpanda.core.admin.v2.KafkaConnection
	7,  // 3: redpanda.core.admin.v2.Broker.build_info:type_name -> redpanda.core.admin.v2.BuildInfo
	8,  // 4: redpanda.core.admin.v2.Broker.admin_server:type_name -> redpanda.core.admin.v2.AdminServer
	9,  // 5: redpanda.core.admin.v2.AdminServer.routes:type_name -> redpanda.core.admin.v2.RPCRoute
	0,  // 6: redpanda.core.admin.v2.BrokerService.GetBroker:input_type -> redpanda.core.admin.v2.GetBrokerRequest
	2,  // 7: redpanda.core.admin.v2.BrokerService.ListBrokers:input_type -> redpanda.core.admin.v2.ListBrokersRequest
	4,  // 8: redpanda.core.admin.v2.BrokerService.ListKafkaConnections:input_type -> redpanda.core.admin.v2.ListKafkaConnectionsRequest
	1,  // 9: redpanda.core.admin.v2.BrokerService.GetBroker:output_type -> redpanda.core.admin.v2.GetBrokerResponse
	3,  // 10: redpanda.core.admin.v2.BrokerService.ListBrokers:output_type -> redpanda.core.admin.v2.ListBrokersResponse
	5,  // 11: redpanda.core.admin.v2.BrokerService.ListKafkaConnections:output_type -> redpanda.core.admin.v2.ListKafkaConnectionsResponse
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_redpanda_core_admin_v2_broker_proto_init() }
func file_redpanda_core_admin_v2_broker_proto_init() {
	if File_redpanda_core_admin_v2_broker_proto != nil {
		return
	}
	file_redpanda_core_admin_v2_kafka_connections_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_core_admin_v2_broker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_core_admin_v2_broker_proto_goTypes,
		DependencyIndexes: file_redpanda_core_admin_v2_broker_proto_depIdxs,
		MessageInfos:      file_redpanda_core_admin_v2_broker_proto_msgTypes,
	}.Build()
	File_redpanda_core_admin_v2_broker_proto = out.File
	file_redpanda_core_admin_v2_broker_proto_rawDesc = nil
	file_redpanda_core_admin_v2_broker_proto_goTypes = nil
	file_redpanda_core_admin_v2_broker_proto_depIdxs = nil
}
