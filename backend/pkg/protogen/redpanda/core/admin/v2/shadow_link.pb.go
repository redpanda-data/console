// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/core/admin/v2/shadow_link.proto

package adminv2

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	common "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/core/common"
	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/pbgen"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State of the shadow link
type ShadowLinkState int32

const (
	// Unspecified
	ShadowLinkState_SHADOW_LINK_STATE_UNSPECIFIED ShadowLinkState = 0
	// Shadow link is active
	ShadowLinkState_SHADOW_LINK_STATE_ACTIVE ShadowLinkState = 1
	// Shadow link was paused
	ShadowLinkState_SHADOW_LINK_STATE_PAUSED ShadowLinkState = 2
)

// Enum value maps for ShadowLinkState.
var (
	ShadowLinkState_name = map[int32]string{
		0: "SHADOW_LINK_STATE_UNSPECIFIED",
		1: "SHADOW_LINK_STATE_ACTIVE",
		2: "SHADOW_LINK_STATE_PAUSED",
	}
	ShadowLinkState_value = map[string]int32{
		"SHADOW_LINK_STATE_UNSPECIFIED": 0,
		"SHADOW_LINK_STATE_ACTIVE":      1,
		"SHADOW_LINK_STATE_PAUSED":      2,
	}
)

func (x ShadowLinkState) Enum() *ShadowLinkState {
	p := new(ShadowLinkState)
	*p = x
	return p
}

func (x ShadowLinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShadowLinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[0].Descriptor()
}

func (ShadowLinkState) Type() protoreflect.EnumType {
	return &file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[0]
}

func (x ShadowLinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShadowLinkState.Descriptor instead.
func (ShadowLinkState) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{0}
}

// Valid SCRAM mechanisms
type ScramMechanism int32

const (
	ScramMechanism_SCRAM_MECHANISM_UNSPECIFIED ScramMechanism = 0
	// SCRAM-SHA-256
	ScramMechanism_SCRAM_MECHANISM_SCRAM_SHA_256 ScramMechanism = 1
	// SCRAM-SHA-512
	ScramMechanism_SCRAM_MECHANISM_SCRAM_SHA_512 ScramMechanism = 2
)

// Enum value maps for ScramMechanism.
var (
	ScramMechanism_name = map[int32]string{
		0: "SCRAM_MECHANISM_UNSPECIFIED",
		1: "SCRAM_MECHANISM_SCRAM_SHA_256",
		2: "SCRAM_MECHANISM_SCRAM_SHA_512",
	}
	ScramMechanism_value = map[string]int32{
		"SCRAM_MECHANISM_UNSPECIFIED":   0,
		"SCRAM_MECHANISM_SCRAM_SHA_256": 1,
		"SCRAM_MECHANISM_SCRAM_SHA_512": 2,
	}
)

func (x ScramMechanism) Enum() *ScramMechanism {
	p := new(ScramMechanism)
	*p = x
	return p
}

func (x ScramMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScramMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[1].Descriptor()
}

func (ScramMechanism) Type() protoreflect.EnumType {
	return &file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[1]
}

func (x ScramMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScramMechanism.Descriptor instead.
func (ScramMechanism) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{1}
}

// The matching pattern type
type PatternType int32

const (
	PatternType_PATTERN_TYPE_UNSPECIFIED PatternType = 0
	// Must match the filter exactly
	PatternType_PATTERN_TYPE_LITERAL PatternType = 1
	// Will match anything that starts with filter
	PatternType_PATTERN_TYPE_PREFIX PatternType = 2
)

// Enum value maps for PatternType.
var (
	PatternType_name = map[int32]string{
		0: "PATTERN_TYPE_UNSPECIFIED",
		1: "PATTERN_TYPE_LITERAL",
		2: "PATTERN_TYPE_PREFIX",
	}
	PatternType_value = map[string]int32{
		"PATTERN_TYPE_UNSPECIFIED": 0,
		"PATTERN_TYPE_LITERAL":     1,
		"PATTERN_TYPE_PREFIX":      2,
	}
)

func (x PatternType) Enum() *PatternType {
	p := new(PatternType)
	*p = x
	return p
}

func (x PatternType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[2].Descriptor()
}

func (PatternType) Type() protoreflect.EnumType {
	return &file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[2]
}

func (x PatternType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternType.Descriptor instead.
func (PatternType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{2}
}

// What type of filter this is, include or exclude
type FilterType int32

const (
	FilterType_FILTER_TYPE_UNSPECIFIED FilterType = 0
	// Include the items that match the filter
	FilterType_FILTER_TYPE_INCLUDE FilterType = 1
	// Exclude the items that match the filter
	FilterType_FILTER_TYPE_EXCLUDE FilterType = 2
)

// Enum value maps for FilterType.
var (
	FilterType_name = map[int32]string{
		0: "FILTER_TYPE_UNSPECIFIED",
		1: "FILTER_TYPE_INCLUDE",
		2: "FILTER_TYPE_EXCLUDE",
	}
	FilterType_value = map[string]int32{
		"FILTER_TYPE_UNSPECIFIED": 0,
		"FILTER_TYPE_INCLUDE":     1,
		"FILTER_TYPE_EXCLUDE":     2,
	}
)

func (x FilterType) Enum() *FilterType {
	p := new(FilterType)
	*p = x
	return p
}

func (x FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[3].Descriptor()
}

func (FilterType) Type() protoreflect.EnumType {
	return &file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[3]
}

func (x FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterType.Descriptor instead.
func (FilterType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{3}
}

// Task states
type TaskState int32

const (
	TaskState_TASK_STATE_UNSPECIFIED TaskState = 0
	// Task is active
	TaskState_TASK_STATE_ACTIVE TaskState = 1
	// Task was paused
	TaskState_TASK_STATE_PAUSED TaskState = 2
	// Task is unable to communicate with source cluster
	TaskState_TASK_STATE_LINK_UNAVAILABLE TaskState = 3
	// Task is not running
	TaskState_TASK_STATE_NOT_RUNNING TaskState = 4
	// Task is faulted
	TaskState_TASK_STATE_FAULTED TaskState = 5
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "TASK_STATE_UNSPECIFIED",
		1: "TASK_STATE_ACTIVE",
		2: "TASK_STATE_PAUSED",
		3: "TASK_STATE_LINK_UNAVAILABLE",
		4: "TASK_STATE_NOT_RUNNING",
		5: "TASK_STATE_FAULTED",
	}
	TaskState_value = map[string]int32{
		"TASK_STATE_UNSPECIFIED":      0,
		"TASK_STATE_ACTIVE":           1,
		"TASK_STATE_PAUSED":           2,
		"TASK_STATE_LINK_UNAVAILABLE": 3,
		"TASK_STATE_NOT_RUNNING":      4,
		"TASK_STATE_FAULTED":          5,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[4].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[4]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{4}
}

// State of a shadow topic
type ShadowTopicState int32

const (
	ShadowTopicState_SHADOW_TOPIC_STATE_UNSPECIFIED ShadowTopicState = 0
	// Shadow topic is active
	ShadowTopicState_SHADOW_TOPIC_STATE_ACTIVE ShadowTopicState = 1
	// Shadow topic has faulted
	ShadowTopicState_SHADOW_TOPIC_STATE_FAULTED ShadowTopicState = 2
	// Shadow topic has been paused
	ShadowTopicState_SHADOW_TOPIC_STATE_PAUSED ShadowTopicState = 3
	// Shadow topic is in the process of failing over
	ShadowTopicState_SHADOW_TOPIC_STATE_FAILING_OVER ShadowTopicState = 4
	// Shadow topic has failed over successfully
	ShadowTopicState_SHADOW_TOPIC_STATE_FAILED_OVER ShadowTopicState = 5
	// Shadow topic is in the process of being promoted
	ShadowTopicState_SHADOW_TOPIC_STATE_PROMOTING ShadowTopicState = 6
	// Shadow topic is promoted successfully
	ShadowTopicState_SHADOW_TOPIC_STATE_PROMOTED ShadowTopicState = 7
)

// Enum value maps for ShadowTopicState.
var (
	ShadowTopicState_name = map[int32]string{
		0: "SHADOW_TOPIC_STATE_UNSPECIFIED",
		1: "SHADOW_TOPIC_STATE_ACTIVE",
		2: "SHADOW_TOPIC_STATE_FAULTED",
		3: "SHADOW_TOPIC_STATE_PAUSED",
		4: "SHADOW_TOPIC_STATE_FAILING_OVER",
		5: "SHADOW_TOPIC_STATE_FAILED_OVER",
		6: "SHADOW_TOPIC_STATE_PROMOTING",
		7: "SHADOW_TOPIC_STATE_PROMOTED",
	}
	ShadowTopicState_value = map[string]int32{
		"SHADOW_TOPIC_STATE_UNSPECIFIED":  0,
		"SHADOW_TOPIC_STATE_ACTIVE":       1,
		"SHADOW_TOPIC_STATE_FAULTED":      2,
		"SHADOW_TOPIC_STATE_PAUSED":       3,
		"SHADOW_TOPIC_STATE_FAILING_OVER": 4,
		"SHADOW_TOPIC_STATE_FAILED_OVER":  5,
		"SHADOW_TOPIC_STATE_PROMOTING":    6,
		"SHADOW_TOPIC_STATE_PROMOTED":     7,
	}
)

func (x ShadowTopicState) Enum() *ShadowTopicState {
	p := new(ShadowTopicState)
	*p = x
	return p
}

func (x ShadowTopicState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShadowTopicState) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[5].Descriptor()
}

func (ShadowTopicState) Type() protoreflect.EnumType {
	return &file_redpanda_core_admin_v2_shadow_link_proto_enumTypes[5]
}

func (x ShadowTopicState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShadowTopicState.Descriptor instead.
func (ShadowTopicState) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{5}
}

// A ShadowLink resource
type ShadowLink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the shadow link
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The UUID of the shadow link
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Shadow link configuration
	Configurations *ShadowLinkConfigurations `protobuf:"bytes,3,opt,name=configurations,proto3" json:"configurations,omitempty"`
	// Status of the shadow link
	Status        *ShadowLinkStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShadowLink) Reset() {
	*x = ShadowLink{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShadowLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowLink) ProtoMessage() {}

func (x *ShadowLink) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowLink.ProtoReflect.Descriptor instead.
func (*ShadowLink) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{0}
}

func (x *ShadowLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShadowLink) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ShadowLink) GetConfigurations() *ShadowLinkConfigurations {
	if x != nil {
		return x.Configurations
	}
	return nil
}

func (x *ShadowLink) GetStatus() *ShadowLinkStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Create a new shadow link
type CreateShadowLinkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The shadow link to create
	ShadowLink    *ShadowLink `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateShadowLinkRequest) Reset() {
	*x = CreateShadowLinkRequest{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShadowLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShadowLinkRequest) ProtoMessage() {}

func (x *CreateShadowLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShadowLinkRequest.ProtoReflect.Descriptor instead.
func (*CreateShadowLinkRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{1}
}

func (x *CreateShadowLinkRequest) GetShadowLink() *ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

// Response to creating a shadow link
type CreateShadowLinkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The shadow link that was created
	ShadowLink    *ShadowLink `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateShadowLinkResponse) Reset() {
	*x = CreateShadowLinkResponse{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShadowLinkResponse) ProtoMessage() {}

func (x *CreateShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*CreateShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{2}
}

func (x *CreateShadowLinkResponse) GetShadowLink() *ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

// Request to delete a shadow link
type DeleteShadowLinkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the link to delete
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteShadowLinkRequest) Reset() {
	*x = DeleteShadowLinkRequest{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShadowLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShadowLinkRequest) ProtoMessage() {}

func (x *DeleteShadowLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShadowLinkRequest.ProtoReflect.Descriptor instead.
func (*DeleteShadowLinkRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteShadowLinkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response to deleting a shadow link
type DeleteShadowLinkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteShadowLinkResponse) Reset() {
	*x = DeleteShadowLinkResponse{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShadowLinkResponse) ProtoMessage() {}

func (x *DeleteShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*DeleteShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{4}
}

// Request to get the information about a shadow link
type GetShadowLinkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the shadow link to get
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShadowLinkRequest) Reset() {
	*x = GetShadowLinkRequest{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShadowLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShadowLinkRequest) ProtoMessage() {}

func (x *GetShadowLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShadowLinkRequest.ProtoReflect.Descriptor instead.
func (*GetShadowLinkRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{5}
}

func (x *GetShadowLinkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response to getting a shadow link
type GetShadowLinkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The shadow link that was retrieved
	ShadowLink    *ShadowLink `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShadowLinkResponse) Reset() {
	*x = GetShadowLinkResponse{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShadowLinkResponse) ProtoMessage() {}

func (x *GetShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*GetShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{6}
}

func (x *GetShadowLinkResponse) GetShadowLink() *ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

// Request to list all shadow links
type ListShadowLinksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListShadowLinksRequest) Reset() {
	*x = ListShadowLinksRequest{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinksRequest) ProtoMessage() {}

func (x *ListShadowLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinksRequest.ProtoReflect.Descriptor instead.
func (*ListShadowLinksRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{7}
}

// All shadow links on the cluster
type ListShadowLinksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The shadow links
	ShadowLinks   []*ShadowLink `protobuf:"bytes,1,rep,name=shadow_links,json=shadowLinks,proto3" json:"shadow_links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListShadowLinksResponse) Reset() {
	*x = ListShadowLinksResponse{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShadowLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShadowLinksResponse) ProtoMessage() {}

func (x *ListShadowLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShadowLinksResponse.ProtoReflect.Descriptor instead.
func (*ListShadowLinksResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{8}
}

func (x *ListShadowLinksResponse) GetShadowLinks() []*ShadowLink {
	if x != nil {
		return x.ShadowLinks
	}
	return nil
}

// Updates a shadow link
type UpdateShadowLinkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The shadow link to update
	ShadowLink *ShadowLink `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	// The list of fields to update
	// See [AIP-134](https://google.aip.dev/134) for how to use `field_mask`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateShadowLinkRequest) Reset() {
	*x = UpdateShadowLinkRequest{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShadowLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShadowLinkRequest) ProtoMessage() {}

func (x *UpdateShadowLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShadowLinkRequest.ProtoReflect.Descriptor instead.
func (*UpdateShadowLinkRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateShadowLinkRequest) GetShadowLink() *ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

func (x *UpdateShadowLinkRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Response to the update shadow link request
type UpdateShadowLinkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The shadow link that was updated
	ShadowLink    *ShadowLink `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateShadowLinkResponse) Reset() {
	*x = UpdateShadowLinkResponse{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShadowLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShadowLinkResponse) ProtoMessage() {}

func (x *UpdateShadowLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShadowLinkResponse.ProtoReflect.Descriptor instead.
func (*UpdateShadowLinkResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateShadowLinkResponse) GetShadowLink() *ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

// Request to fail over a shadow link or a single shadow topic
type FailOverRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the shadow link to fail over
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the shadow topic to fail over, if not set will fail over
	// the entire shadow link
	ShadowTopicName string `protobuf:"bytes,2,opt,name=shadow_topic_name,json=shadowTopicName,proto3" json:"shadow_topic_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FailOverRequest) Reset() {
	*x = FailOverRequest{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailOverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailOverRequest) ProtoMessage() {}

func (x *FailOverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailOverRequest.ProtoReflect.Descriptor instead.
func (*FailOverRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{11}
}

func (x *FailOverRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FailOverRequest) GetShadowTopicName() string {
	if x != nil {
		return x.ShadowTopicName
	}
	return ""
}

// The response to the FailOverRequest
type FailOverResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The shadow link that was failed over
	ShadowLink    *ShadowLink `protobuf:"bytes,1,opt,name=shadow_link,json=shadowLink,proto3" json:"shadow_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FailOverResponse) Reset() {
	*x = FailOverResponse{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailOverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailOverResponse) ProtoMessage() {}

func (x *FailOverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailOverResponse.ProtoReflect.Descriptor instead.
func (*FailOverResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{12}
}

func (x *FailOverResponse) GetShadowLink() *ShadowLink {
	if x != nil {
		return x.ShadowLink
	}
	return nil
}

// ShadowLink options
type ShadowLinkConfigurations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for the internal kafka client
	ClientOptions *ShadowLinkClientOptions `protobuf:"bytes,1,opt,name=client_options,json=clientOptions,proto3" json:"client_options,omitempty"`
	// Topic metadata sync options
	TopicMetadataSyncOptions *TopicMetadataSyncOptions `protobuf:"bytes,2,opt,name=topic_metadata_sync_options,json=topicMetadataSyncOptions,proto3" json:"topic_metadata_sync_options,omitempty"`
	// Consumer offset sync options
	ConsumerOffsetSyncOptions *ConsumerOffsetSyncOptions `protobuf:"bytes,3,opt,name=consumer_offset_sync_options,json=consumerOffsetSyncOptions,proto3" json:"consumer_offset_sync_options,omitempty"`
	// Security settings sync options
	SecuritySyncOptions *SecuritySettingsSyncOptions `protobuf:"bytes,4,opt,name=security_sync_options,json=securitySyncOptions,proto3" json:"security_sync_options,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ShadowLinkConfigurations) Reset() {
	*x = ShadowLinkConfigurations{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShadowLinkConfigurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowLinkConfigurations) ProtoMessage() {}

func (x *ShadowLinkConfigurations) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowLinkConfigurations.ProtoReflect.Descriptor instead.
func (*ShadowLinkConfigurations) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{13}
}

func (x *ShadowLinkConfigurations) GetClientOptions() *ShadowLinkClientOptions {
	if x != nil {
		return x.ClientOptions
	}
	return nil
}

func (x *ShadowLinkConfigurations) GetTopicMetadataSyncOptions() *TopicMetadataSyncOptions {
	if x != nil {
		return x.TopicMetadataSyncOptions
	}
	return nil
}

func (x *ShadowLinkConfigurations) GetConsumerOffsetSyncOptions() *ConsumerOffsetSyncOptions {
	if x != nil {
		return x.ConsumerOffsetSyncOptions
	}
	return nil
}

func (x *ShadowLinkConfigurations) GetSecuritySyncOptions() *SecuritySettingsSyncOptions {
	if x != nil {
		return x.SecuritySyncOptions
	}
	return nil
}

// Options for the client link
type ShadowLinkClientOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bootstrap servers to use
	BootstrapServers []string `protobuf:"bytes,1,rep,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	// The Client ID for the Kafka RPC requests setn by this cluster to the
	// source cluster
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// If provided, this is the expected ID of the source cluster.  If it does
	// not match then the connection will be rejected.  If provided, this value
	// must match the `ClusterId` field returned in the Kafka Metadata response
	// message
	SourceClusterId string `protobuf:"bytes,3,opt,name=source_cluster_id,json=sourceClusterId,proto3" json:"source_cluster_id,omitempty"`
	// TLS settings
	TlsSettings *TLSSettings `protobuf:"bytes,4,opt,name=tls_settings,json=tlsSettings,proto3,oneof" json:"tls_settings,omitempty"`
	// Authentication settings
	AuthenticationConfiguration *AuthenticationConfiguration `protobuf:"bytes,5,opt,name=authentication_configuration,json=authenticationConfiguration,proto3,oneof" json:"authentication_configuration,omitempty"`
	// Max metadata age
	// If 0 is provided, defaults to 10 seconds
	MetadataMaxAgeMs int32 `protobuf:"varint,6,opt,name=metadata_max_age_ms,json=metadataMaxAgeMs,proto3" json:"metadata_max_age_ms,omitempty"`
	// Connection timeout
	// If 0 is provided, defaults to 1 second
	ConnectionTimeoutMs int32 `protobuf:"varint,7,opt,name=connection_timeout_ms,json=connectionTimeoutMs,proto3" json:"connection_timeout_ms,omitempty"`
	// Retry base backoff
	// If 0 is provided, defaults to 100ms
	RetryBackoffMs int32 `protobuf:"varint,8,opt,name=retry_backoff_ms,json=retryBackoffMs,proto3" json:"retry_backoff_ms,omitempty"`
	// Fetch request timeout
	// If 0 is provided, defaults to 100ms
	FetchWaitMaxMs int32 `protobuf:"varint,9,opt,name=fetch_wait_max_ms,json=fetchWaitMaxMs,proto3" json:"fetch_wait_max_ms,omitempty"`
	// Fetch min bytes
	// If 0 is provided, defaults to 1 byte
	FetchMinBytes int32 `protobuf:"varint,10,opt,name=fetch_min_bytes,json=fetchMinBytes,proto3" json:"fetch_min_bytes,omitempty"`
	// Fetch max bytes
	// If 0 is provided, defaults to 1MiB
	FetchMaxBytes int32 `protobuf:"varint,11,opt,name=fetch_max_bytes,json=fetchMaxBytes,proto3" json:"fetch_max_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShadowLinkClientOptions) Reset() {
	*x = ShadowLinkClientOptions{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShadowLinkClientOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowLinkClientOptions) ProtoMessage() {}

func (x *ShadowLinkClientOptions) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowLinkClientOptions.ProtoReflect.Descriptor instead.
func (*ShadowLinkClientOptions) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{14}
}

func (x *ShadowLinkClientOptions) GetBootstrapServers() []string {
	if x != nil {
		return x.BootstrapServers
	}
	return nil
}

func (x *ShadowLinkClientOptions) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ShadowLinkClientOptions) GetSourceClusterId() string {
	if x != nil {
		return x.SourceClusterId
	}
	return ""
}

func (x *ShadowLinkClientOptions) GetTlsSettings() *TLSSettings {
	if x != nil {
		return x.TlsSettings
	}
	return nil
}

func (x *ShadowLinkClientOptions) GetAuthenticationConfiguration() *AuthenticationConfiguration {
	if x != nil {
		return x.AuthenticationConfiguration
	}
	return nil
}

func (x *ShadowLinkClientOptions) GetMetadataMaxAgeMs() int32 {
	if x != nil {
		return x.MetadataMaxAgeMs
	}
	return 0
}

func (x *ShadowLinkClientOptions) GetConnectionTimeoutMs() int32 {
	if x != nil {
		return x.ConnectionTimeoutMs
	}
	return 0
}

func (x *ShadowLinkClientOptions) GetRetryBackoffMs() int32 {
	if x != nil {
		return x.RetryBackoffMs
	}
	return 0
}

func (x *ShadowLinkClientOptions) GetFetchWaitMaxMs() int32 {
	if x != nil {
		return x.FetchWaitMaxMs
	}
	return 0
}

func (x *ShadowLinkClientOptions) GetFetchMinBytes() int32 {
	if x != nil {
		return x.FetchMinBytes
	}
	return 0
}

func (x *ShadowLinkClientOptions) GetFetchMaxBytes() int32 {
	if x != nil {
		return x.FetchMaxBytes
	}
	return 0
}

// Options for syncing topic metadata
type TopicMetadataSyncOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// How often to sync metadata
	// If 0 provided, defaults to 30 seconds
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// List of filters that indicate which topics should be automatically
	// created as shadow topics on the shadow cluster.  This only controls
	// automatic creation of shadow topics and does not effect the state of the
	// mirror topic once it is created.
	AutoCreateShadowTopicFilters []*NameFilter `protobuf:"bytes,2,rep,name=auto_create_shadow_topic_filters,json=autoCreateShadowTopicFilters,proto3" json:"auto_create_shadow_topic_filters,omitempty"`
	// Additional topic properties to shadow
	// Partition count, `max.message.bytes`, `cleanup.policy` and
	// `timestamp.type` will always be replicated
	ShadowedTopicProperties []string `protobuf:"bytes,3,rep,name=shadowed_topic_properties,json=shadowedTopicProperties,proto3" json:"shadowed_topic_properties,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TopicMetadataSyncOptions) Reset() {
	*x = TopicMetadataSyncOptions{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicMetadataSyncOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicMetadataSyncOptions) ProtoMessage() {}

func (x *TopicMetadataSyncOptions) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicMetadataSyncOptions.ProtoReflect.Descriptor instead.
func (*TopicMetadataSyncOptions) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{15}
}

func (x *TopicMetadataSyncOptions) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *TopicMetadataSyncOptions) GetAutoCreateShadowTopicFilters() []*NameFilter {
	if x != nil {
		return x.AutoCreateShadowTopicFilters
	}
	return nil
}

func (x *TopicMetadataSyncOptions) GetShadowedTopicProperties() []string {
	if x != nil {
		return x.ShadowedTopicProperties
	}
	return nil
}

// Options for syncing consumer offsets
type ConsumerOffsetSyncOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sync interval
	// If 0 provided, defaults to 30 seconds
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Whether it's enabled
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The filters
	GroupFilters  []*NameFilter `protobuf:"bytes,3,rep,name=group_filters,json=groupFilters,proto3" json:"group_filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsumerOffsetSyncOptions) Reset() {
	*x = ConsumerOffsetSyncOptions{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerOffsetSyncOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerOffsetSyncOptions) ProtoMessage() {}

func (x *ConsumerOffsetSyncOptions) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerOffsetSyncOptions.ProtoReflect.Descriptor instead.
func (*ConsumerOffsetSyncOptions) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{16}
}

func (x *ConsumerOffsetSyncOptions) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *ConsumerOffsetSyncOptions) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConsumerOffsetSyncOptions) GetGroupFilters() []*NameFilter {
	if x != nil {
		return x.GroupFilters
	}
	return nil
}

// Options for syncing security settings
type SecuritySettingsSyncOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sync interval
	// If 0 provided, defaults to 30 seconds
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Whether or not it's enabled
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Role filters
	RoleFilters []*NameFilter `protobuf:"bytes,3,rep,name=role_filters,json=roleFilters,proto3" json:"role_filters,omitempty"`
	// SCRAM credential filters
	ScramCredFilters []*NameFilter `protobuf:"bytes,4,rep,name=scram_cred_filters,json=scramCredFilters,proto3" json:"scram_cred_filters,omitempty"`
	// ACL filters
	AclFilters    []*ACLFilter `protobuf:"bytes,5,rep,name=acl_filters,json=aclFilters,proto3" json:"acl_filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecuritySettingsSyncOptions) Reset() {
	*x = SecuritySettingsSyncOptions{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecuritySettingsSyncOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecuritySettingsSyncOptions) ProtoMessage() {}

func (x *SecuritySettingsSyncOptions) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecuritySettingsSyncOptions.ProtoReflect.Descriptor instead.
func (*SecuritySettingsSyncOptions) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{17}
}

func (x *SecuritySettingsSyncOptions) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *SecuritySettingsSyncOptions) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SecuritySettingsSyncOptions) GetRoleFilters() []*NameFilter {
	if x != nil {
		return x.RoleFilters
	}
	return nil
}

func (x *SecuritySettingsSyncOptions) GetScramCredFilters() []*NameFilter {
	if x != nil {
		return x.ScramCredFilters
	}
	return nil
}

func (x *SecuritySettingsSyncOptions) GetAclFilters() []*ACLFilter {
	if x != nil {
		return x.AclFilters
	}
	return nil
}

// TLS settings
type TLSSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether or not TLS is enabled
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// May provide TLS as a set of files or PEM values
	//
	// Types that are valid to be assigned to TlsSettings:
	//
	//	*TLSSettings_TlsFileSettings
	//	*TLSSettings_TlsPemSettings
	TlsSettings   isTLSSettings_TlsSettings `protobuf_oneof:"tls_settings"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSSettings) Reset() {
	*x = TLSSettings{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSSettings) ProtoMessage() {}

func (x *TLSSettings) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSSettings.ProtoReflect.Descriptor instead.
func (*TLSSettings) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{18}
}

func (x *TLSSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TLSSettings) GetTlsSettings() isTLSSettings_TlsSettings {
	if x != nil {
		return x.TlsSettings
	}
	return nil
}

func (x *TLSSettings) GetTlsFileSettings() *TLSFileSettings {
	if x != nil {
		if x, ok := x.TlsSettings.(*TLSSettings_TlsFileSettings); ok {
			return x.TlsFileSettings
		}
	}
	return nil
}

func (x *TLSSettings) GetTlsPemSettings() *TLSPEMSettings {
	if x != nil {
		if x, ok := x.TlsSettings.(*TLSSettings_TlsPemSettings); ok {
			return x.TlsPemSettings
		}
	}
	return nil
}

type isTLSSettings_TlsSettings interface {
	isTLSSettings_TlsSettings()
}

type TLSSettings_TlsFileSettings struct {
	// Certificates and keys are provided as files
	TlsFileSettings *TLSFileSettings `protobuf:"bytes,1,opt,name=tls_file_settings,json=tlsFileSettings,proto3,oneof"`
}

type TLSSettings_TlsPemSettings struct {
	// Certificates and keys are provided in PEM format
	TlsPemSettings *TLSPEMSettings `protobuf:"bytes,2,opt,name=tls_pem_settings,json=tlsPemSettings,proto3,oneof"`
}

func (*TLSSettings_TlsFileSettings) isTLSSettings_TlsSettings() {}

func (*TLSSettings_TlsPemSettings) isTLSSettings_TlsSettings() {}

// Authentication config.  Currently only supporting SASL/SCRAM,
// however made as a oneof for expansion
type AuthenticationConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Authentication:
	//
	//	*AuthenticationConfiguration_ScramConfiguration
	Authentication isAuthenticationConfiguration_Authentication `protobuf_oneof:"authentication"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AuthenticationConfiguration) Reset() {
	*x = AuthenticationConfiguration{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticationConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationConfiguration) ProtoMessage() {}

func (x *AuthenticationConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationConfiguration.ProtoReflect.Descriptor instead.
func (*AuthenticationConfiguration) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{19}
}

func (x *AuthenticationConfiguration) GetAuthentication() isAuthenticationConfiguration_Authentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *AuthenticationConfiguration) GetScramConfiguration() *ScramConfig {
	if x != nil {
		if x, ok := x.Authentication.(*AuthenticationConfiguration_ScramConfiguration); ok {
			return x.ScramConfiguration
		}
	}
	return nil
}

type isAuthenticationConfiguration_Authentication interface {
	isAuthenticationConfiguration_Authentication()
}

type AuthenticationConfiguration_ScramConfiguration struct {
	// SASL/SCRAM configuration
	ScramConfiguration *ScramConfig `protobuf:"bytes,1,opt,name=scram_configuration,json=scramConfiguration,proto3,oneof"`
}

func (*AuthenticationConfiguration_ScramConfiguration) isAuthenticationConfiguration_Authentication() {
}

// TLS file settings
type TLSFileSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to the CA
	CaPath string `protobuf:"bytes,1,opt,name=ca_path,json=caPath,proto3" json:"ca_path,omitempty"`
	// Key and Cert are optional but if one is provided, then both must be
	// Path to the key
	KeyPath string `protobuf:"bytes,2,opt,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
	// Path to the cert
	CertPath      string `protobuf:"bytes,3,opt,name=cert_path,json=certPath,proto3" json:"cert_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSFileSettings) Reset() {
	*x = TLSFileSettings{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSFileSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSFileSettings) ProtoMessage() {}

func (x *TLSFileSettings) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSFileSettings.ProtoReflect.Descriptor instead.
func (*TLSFileSettings) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{20}
}

func (x *TLSFileSettings) GetCaPath() string {
	if x != nil {
		return x.CaPath
	}
	return ""
}

func (x *TLSFileSettings) GetKeyPath() string {
	if x != nil {
		return x.KeyPath
	}
	return ""
}

func (x *TLSFileSettings) GetCertPath() string {
	if x != nil {
		return x.CertPath
	}
	return ""
}

// Used when providing the TLS information in PEM format
type TLSPEMSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CA
	Ca string `protobuf:"bytes,1,opt,name=ca,proto3" json:"ca,omitempty"`
	// Key and Cert are optional but if one is provided, then both must be
	// The key
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The SHA-256 of the key, in base64 format
	KeyFingerprint string `protobuf:"bytes,3,opt,name=key_fingerprint,json=keyFingerprint,proto3" json:"key_fingerprint,omitempty"`
	// The cert
	Cert          string `protobuf:"bytes,4,opt,name=cert,proto3" json:"cert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSPEMSettings) Reset() {
	*x = TLSPEMSettings{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSPEMSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSPEMSettings) ProtoMessage() {}

func (x *TLSPEMSettings) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSPEMSettings.ProtoReflect.Descriptor instead.
func (*TLSPEMSettings) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{21}
}

func (x *TLSPEMSettings) GetCa() string {
	if x != nil {
		return x.Ca
	}
	return ""
}

func (x *TLSPEMSettings) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TLSPEMSettings) GetKeyFingerprint() string {
	if x != nil {
		return x.KeyFingerprint
	}
	return ""
}

func (x *TLSPEMSettings) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

// SCRAM settings
type ScramConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SCRAM username
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Indicates that the password has been set
	PasswordSet bool `protobuf:"varint,3,opt,name=password_set,json=passwordSet,proto3" json:"password_set,omitempty"`
	// Timestamp of when the password was last set - only valid if password_set
	// is true
	PasswordSetAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=password_set_at,json=passwordSetAt,proto3" json:"password_set_at,omitempty"`
	// The SCRAM mechanism to use
	ScramMechanism ScramMechanism `protobuf:"varint,5,opt,name=scram_mechanism,json=scramMechanism,proto3,enum=redpanda.core.admin.v2.ScramMechanism" json:"scram_mechanism,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScramConfig) Reset() {
	*x = ScramConfig{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScramConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScramConfig) ProtoMessage() {}

func (x *ScramConfig) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScramConfig.ProtoReflect.Descriptor instead.
func (*ScramConfig) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{22}
}

func (x *ScramConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ScramConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ScramConfig) GetPasswordSet() bool {
	if x != nil {
		return x.PasswordSet
	}
	return false
}

func (x *ScramConfig) GetPasswordSetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PasswordSetAt
	}
	return nil
}

func (x *ScramConfig) GetScramMechanism() ScramMechanism {
	if x != nil {
		return x.ScramMechanism
	}
	return ScramMechanism_SCRAM_MECHANISM_UNSPECIFIED
}

// A filter based on the name of a resource
type NameFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Literal or prefix
	PatternType PatternType `protobuf:"varint,1,opt,name=pattern_type,json=patternType,proto3,enum=redpanda.core.admin.v2.PatternType" json:"pattern_type,omitempty"`
	// Include or exclude
	FilterType FilterType `protobuf:"varint,2,opt,name=filter_type,json=filterType,proto3,enum=redpanda.core.admin.v2.FilterType" json:"filter_type,omitempty"`
	// The resource name, or "*"
	// Note if "*", must be the _only_ character
	// and `pattern_type` must be `PATTERN_TYPE_LITERAL`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NameFilter) Reset() {
	*x = NameFilter{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NameFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameFilter) ProtoMessage() {}

func (x *NameFilter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameFilter.ProtoReflect.Descriptor instead.
func (*NameFilter) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{23}
}

func (x *NameFilter) GetPatternType() PatternType {
	if x != nil {
		return x.PatternType
	}
	return PatternType_PATTERN_TYPE_UNSPECIFIED
}

func (x *NameFilter) GetFilterType() FilterType {
	if x != nil {
		return x.FilterType
	}
	return FilterType_FILTER_TYPE_UNSPECIFIED
}

func (x *NameFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A filter for ACLs
type ACLFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource filter
	ResourceFilter *ACLResourceFilter `protobuf:"bytes,1,opt,name=resource_filter,json=resourceFilter,proto3" json:"resource_filter,omitempty"`
	// The access filter
	AccessFilter  *ACLAccessFilter `protobuf:"bytes,2,opt,name=access_filter,json=accessFilter,proto3" json:"access_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ACLFilter) Reset() {
	*x = ACLFilter{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACLFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLFilter) ProtoMessage() {}

func (x *ACLFilter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLFilter.ProtoReflect.Descriptor instead.
func (*ACLFilter) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{24}
}

func (x *ACLFilter) GetResourceFilter() *ACLResourceFilter {
	if x != nil {
		return x.ResourceFilter
	}
	return nil
}

func (x *ACLFilter) GetAccessFilter() *ACLAccessFilter {
	if x != nil {
		return x.AccessFilter
	}
	return nil
}

// A filter to match ACLs for resources
type ACLResourceFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ACL resource type to match
	ResourceType common.ACLResource `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=redpanda.core.common.ACLResource" json:"resource_type,omitempty"`
	// The pattern to apply to name
	PatternType common.ACLPattern `protobuf:"varint,2,opt,name=pattern_type,json=patternType,proto3,enum=redpanda.core.common.ACLPattern" json:"pattern_type,omitempty"`
	// Name, if not given will default to match all items in `resource_type`.
	// Note that asterisk `*` is literal and matches resource ACLs
	// that are named `*`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ACLResourceFilter) Reset() {
	*x = ACLResourceFilter{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACLResourceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLResourceFilter) ProtoMessage() {}

func (x *ACLResourceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLResourceFilter.ProtoReflect.Descriptor instead.
func (*ACLResourceFilter) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{25}
}

func (x *ACLResourceFilter) GetResourceType() common.ACLResource {
	if x != nil {
		return x.ResourceType
	}
	return common.ACLResource(0)
}

func (x *ACLResourceFilter) GetPatternType() common.ACLPattern {
	if x != nil {
		return x.PatternType
	}
	return common.ACLPattern(0)
}

func (x *ACLResourceFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Filter an ACL based on its access
type ACLAccessFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the principal, if not set will default to match
	// all principals with the specified `operation` and `permission_type`
	Principal string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// The ACL operation to match
	Operation common.ACLOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=redpanda.core.common.ACLOperation" json:"operation,omitempty"`
	// The permission type
	PermissionType common.ACLPermissionType `protobuf:"varint,3,opt,name=permission_type,json=permissionType,proto3,enum=redpanda.core.common.ACLPermissionType" json:"permission_type,omitempty"`
	// The host to match.  If not set, will default to match all hosts
	// with the specified `operation` and `permission_type`. Note that
	// the asterisk `*` is literal and matches hosts that are set to `*`
	Host          string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ACLAccessFilter) Reset() {
	*x = ACLAccessFilter{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACLAccessFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLAccessFilter) ProtoMessage() {}

func (x *ACLAccessFilter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLAccessFilter.ProtoReflect.Descriptor instead.
func (*ACLAccessFilter) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{26}
}

func (x *ACLAccessFilter) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *ACLAccessFilter) GetOperation() common.ACLOperation {
	if x != nil {
		return x.Operation
	}
	return common.ACLOperation(0)
}

func (x *ACLAccessFilter) GetPermissionType() common.ACLPermissionType {
	if x != nil {
		return x.PermissionType
	}
	return common.ACLPermissionType(0)
}

func (x *ACLAccessFilter) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Status of the shadow link
type ShadowLinkStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	State ShadowLinkState        `protobuf:"varint,1,opt,name=state,proto3,enum=redpanda.core.admin.v2.ShadowLinkState" json:"state,omitempty"`
	// Statuses of the running tasks
	TaskStatuses []*ShadowLinkTaskStatus `protobuf:"bytes,2,rep,name=task_statuses,json=taskStatuses,proto3" json:"task_statuses,omitempty"`
	// Status of shadow topics
	ShadowTopicStatuses []*ShadowTopicStatus `protobuf:"bytes,3,rep,name=shadow_topic_statuses,json=shadowTopicStatuses,proto3" json:"shadow_topic_statuses,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ShadowLinkStatus) Reset() {
	*x = ShadowLinkStatus{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShadowLinkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowLinkStatus) ProtoMessage() {}

func (x *ShadowLinkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowLinkStatus.ProtoReflect.Descriptor instead.
func (*ShadowLinkStatus) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{27}
}

func (x *ShadowLinkStatus) GetState() ShadowLinkState {
	if x != nil {
		return x.State
	}
	return ShadowLinkState_SHADOW_LINK_STATE_UNSPECIFIED
}

func (x *ShadowLinkStatus) GetTaskStatuses() []*ShadowLinkTaskStatus {
	if x != nil {
		return x.TaskStatuses
	}
	return nil
}

func (x *ShadowLinkStatus) GetShadowTopicStatuses() []*ShadowTopicStatus {
	if x != nil {
		return x.ShadowTopicStatuses
	}
	return nil
}

// Status of a task
type ShadowLinkTaskStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the task
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// State of the task
	State TaskState `protobuf:"varint,2,opt,name=state,proto3,enum=redpanda.core.admin.v2.TaskState" json:"state,omitempty"`
	// Reason for task being in state
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// The broker the task is running on
	BrokerId      int32 `protobuf:"varint,4,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShadowLinkTaskStatus) Reset() {
	*x = ShadowLinkTaskStatus{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShadowLinkTaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowLinkTaskStatus) ProtoMessage() {}

func (x *ShadowLinkTaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowLinkTaskStatus.ProtoReflect.Descriptor instead.
func (*ShadowLinkTaskStatus) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{28}
}

func (x *ShadowLinkTaskStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShadowLinkTaskStatus) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *ShadowLinkTaskStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ShadowLinkTaskStatus) GetBrokerId() int32 {
	if x != nil {
		return x.BrokerId
	}
	return 0
}

// Status of a ShadowTopic
type ShadowTopicStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the shadow topic
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Topic ID of the shadow topic
	TopicId string `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	// State of the shadow topic
	State ShadowTopicState `protobuf:"varint,3,opt,name=state,proto3,enum=redpanda.core.admin.v2.ShadowTopicState" json:"state,omitempty"`
	// List of partition information for the shadow topic
	PartitionInformation []*TopicPartitionInformation `protobuf:"bytes,4,rep,name=partition_information,json=partitionInformation,proto3" json:"partition_information,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ShadowTopicStatus) Reset() {
	*x = ShadowTopicStatus{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShadowTopicStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowTopicStatus) ProtoMessage() {}

func (x *ShadowTopicStatus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowTopicStatus.ProtoReflect.Descriptor instead.
func (*ShadowTopicStatus) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{29}
}

func (x *ShadowTopicStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShadowTopicStatus) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *ShadowTopicStatus) GetState() ShadowTopicState {
	if x != nil {
		return x.State
	}
	return ShadowTopicState_SHADOW_TOPIC_STATE_UNSPECIFIED
}

func (x *ShadowTopicStatus) GetPartitionInformation() []*TopicPartitionInformation {
	if x != nil {
		return x.PartitionInformation
	}
	return nil
}

// Topic partition information
type TopicPartitionInformation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partition ID
	PartitionId int64 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Source partition's LSO
	SourceLastStableOffset int64 `protobuf:"varint,2,opt,name=source_last_stable_offset,json=sourceLastStableOffset,proto3" json:"source_last_stable_offset,omitempty"`
	// Source partition's HWM
	SourceHighWatermark int64 `protobuf:"varint,3,opt,name=source_high_watermark,json=sourceHighWatermark,proto3" json:"source_high_watermark,omitempty"`
	// Shadowed partition's HWM
	HighWatermark int64 `protobuf:"varint,4,opt,name=high_watermark,json=highWatermark,proto3" json:"high_watermark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicPartitionInformation) Reset() {
	*x = TopicPartitionInformation{}
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicPartitionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicPartitionInformation) ProtoMessage() {}

func (x *TopicPartitionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicPartitionInformation.ProtoReflect.Descriptor instead.
func (*TopicPartitionInformation) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP(), []int{30}
}

func (x *TopicPartitionInformation) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *TopicPartitionInformation) GetSourceLastStableOffset() int64 {
	if x != nil {
		return x.SourceLastStableOffset
	}
	return 0
}

func (x *TopicPartitionInformation) GetSourceHighWatermark() int64 {
	if x != nil {
		return x.SourceHighWatermark
	}
	return 0
}

func (x *TopicPartitionInformation) GetHighWatermark() int64 {
	if x != nil {
		return x.HighWatermark
	}
	return 0
}

var File_redpanda_core_admin_v2_shadow_link_proto protoreflect.FileDescriptor

var file_redpanda_core_admin_v2_shadow_link_proto_rawDesc = []byte{
	0x0a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x1a, 0x1c, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x70, 0x62, 0x67,
	0x65, 0x6e, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x70, 0x62, 0x67, 0x65, 0x6e,
	0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x03,
	0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x58, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5e,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x5f,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x22,
	0x67, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x32,
	0x0a, 0x30, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x32, 0x0a, 0x30, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x60, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x5f, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x10, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x22,
	0xc0, 0x03, 0x0a, 0x18, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x1b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x18, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x72, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x15, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x9d, 0x05, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10,
	0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x4c,
	0x53, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6c, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x1c, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x4d, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x4d, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x4d, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x4d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x18, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xb5,
	0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x1b, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50,
	0x0a, 0x12, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10,
	0x73, 0x63, 0x72, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x42, 0x0a, 0x0b, 0x61, 0x63, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x43, 0x4c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x63, 0x6c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x55,
	0x0a, 0x11, 0x74, 0x6c, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x4c, 0x53, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x74, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x6d,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x4c, 0x53, 0x50, 0x45, 0x4d, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x6c, 0x73, 0x50, 0x65,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x6c, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x13, 0x73, 0x63, 0x72,
	0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x63, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x63, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x0f, 0x54, 0x4c, 0x53, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x79, 0x0a, 0x0e, 0x54, 0x4c, 0x53, 0x50, 0x45,
	0x4d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x61, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e,
	0x6b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x04, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x41, 0x74,
	0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x22, 0xad, 0x01, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x41, 0x43, 0x4c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x52, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x43, 0x4c,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x41, 0x43, 0x4c,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x43, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x43, 0x4c,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x74, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x13, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xd4, 0x01, 0x0a, 0x19, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x2a, 0x70, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x48,
	0x41, 0x44, 0x4f, 0x57, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x48, 0x41, 0x44, 0x4f, 0x57, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x77, 0x0a, 0x0e, 0x53, 0x63, 0x72,
	0x61, 0x6d, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x43, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f,
	0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49,
	0x53, 0x4d, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32,
	0x10, 0x02, 0x2a, 0x5e, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58,
	0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43,
	0x4c, 0x55, 0x44, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x02, 0x2a,
	0xaa, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xa0, 0x02, 0x0a,
	0x10, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x5f, 0x54, 0x4f, 0x50, 0x49,
	0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x5f,
	0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x5f, 0x54,
	0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x5f, 0x54,
	0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x5f, 0x54, 0x4f,
	0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x48, 0x41, 0x44,
	0x4f, 0x57, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x44, 0x10, 0x07, 0x32,
	0xe9, 0x05, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7d, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xea, 0x92,
	0x19, 0x02, 0x10, 0x03, 0x12, 0x7d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xea, 0x92, 0x19,
	0x02, 0x10, 0x03, 0x12, 0x74, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x06, 0xea, 0x92, 0x19, 0x02, 0x10, 0x03, 0x12, 0x7a, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2e, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xea,
	0x92, 0x19, 0x02, 0x10, 0x03, 0x12, 0x7d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xea, 0x92,
	0x19, 0x02, 0x10, 0x03, 0x12, 0x65, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72,
	0x12, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x06, 0xea, 0x92, 0x19, 0x02, 0x10, 0x03, 0x42, 0x8e, 0x02, 0xea, 0x92,
	0x19, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x0a, 0x1a,
	0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x42, 0x0f, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x3b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x52, 0x43, 0x41, 0xaa, 0x02, 0x16, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x56, 0x32, 0xca, 0x02, 0x16, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x43, 0x6f,
	0x72, 0x65, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x22, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x19, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72,
	0x65, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_core_admin_v2_shadow_link_proto_rawDescOnce sync.Once
	file_redpanda_core_admin_v2_shadow_link_proto_rawDescData = file_redpanda_core_admin_v2_shadow_link_proto_rawDesc
)

func file_redpanda_core_admin_v2_shadow_link_proto_rawDescGZIP() []byte {
	file_redpanda_core_admin_v2_shadow_link_proto_rawDescOnce.Do(func() {
		file_redpanda_core_admin_v2_shadow_link_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_core_admin_v2_shadow_link_proto_rawDescData)
	})
	return file_redpanda_core_admin_v2_shadow_link_proto_rawDescData
}

var file_redpanda_core_admin_v2_shadow_link_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_redpanda_core_admin_v2_shadow_link_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_redpanda_core_admin_v2_shadow_link_proto_goTypes = []any{
	(ShadowLinkState)(0),                // 0: redpanda.core.admin.v2.ShadowLinkState
	(ScramMechanism)(0),                 // 1: redpanda.core.admin.v2.ScramMechanism
	(PatternType)(0),                    // 2: redpanda.core.admin.v2.PatternType
	(FilterType)(0),                     // 3: redpanda.core.admin.v2.FilterType
	(TaskState)(0),                      // 4: redpanda.core.admin.v2.TaskState
	(ShadowTopicState)(0),               // 5: redpanda.core.admin.v2.ShadowTopicState
	(*ShadowLink)(nil),                  // 6: redpanda.core.admin.v2.ShadowLink
	(*CreateShadowLinkRequest)(nil),     // 7: redpanda.core.admin.v2.CreateShadowLinkRequest
	(*CreateShadowLinkResponse)(nil),    // 8: redpanda.core.admin.v2.CreateShadowLinkResponse
	(*DeleteShadowLinkRequest)(nil),     // 9: redpanda.core.admin.v2.DeleteShadowLinkRequest
	(*DeleteShadowLinkResponse)(nil),    // 10: redpanda.core.admin.v2.DeleteShadowLinkResponse
	(*GetShadowLinkRequest)(nil),        // 11: redpanda.core.admin.v2.GetShadowLinkRequest
	(*GetShadowLinkResponse)(nil),       // 12: redpanda.core.admin.v2.GetShadowLinkResponse
	(*ListShadowLinksRequest)(nil),      // 13: redpanda.core.admin.v2.ListShadowLinksRequest
	(*ListShadowLinksResponse)(nil),     // 14: redpanda.core.admin.v2.ListShadowLinksResponse
	(*UpdateShadowLinkRequest)(nil),     // 15: redpanda.core.admin.v2.UpdateShadowLinkRequest
	(*UpdateShadowLinkResponse)(nil),    // 16: redpanda.core.admin.v2.UpdateShadowLinkResponse
	(*FailOverRequest)(nil),             // 17: redpanda.core.admin.v2.FailOverRequest
	(*FailOverResponse)(nil),            // 18: redpanda.core.admin.v2.FailOverResponse
	(*ShadowLinkConfigurations)(nil),    // 19: redpanda.core.admin.v2.ShadowLinkConfigurations
	(*ShadowLinkClientOptions)(nil),     // 20: redpanda.core.admin.v2.ShadowLinkClientOptions
	(*TopicMetadataSyncOptions)(nil),    // 21: redpanda.core.admin.v2.TopicMetadataSyncOptions
	(*ConsumerOffsetSyncOptions)(nil),   // 22: redpanda.core.admin.v2.ConsumerOffsetSyncOptions
	(*SecuritySettingsSyncOptions)(nil), // 23: redpanda.core.admin.v2.SecuritySettingsSyncOptions
	(*TLSSettings)(nil),                 // 24: redpanda.core.admin.v2.TLSSettings
	(*AuthenticationConfiguration)(nil), // 25: redpanda.core.admin.v2.AuthenticationConfiguration
	(*TLSFileSettings)(nil),             // 26: redpanda.core.admin.v2.TLSFileSettings
	(*TLSPEMSettings)(nil),              // 27: redpanda.core.admin.v2.TLSPEMSettings
	(*ScramConfig)(nil),                 // 28: redpanda.core.admin.v2.ScramConfig
	(*NameFilter)(nil),                  // 29: redpanda.core.admin.v2.NameFilter
	(*ACLFilter)(nil),                   // 30: redpanda.core.admin.v2.ACLFilter
	(*ACLResourceFilter)(nil),           // 31: redpanda.core.admin.v2.ACLResourceFilter
	(*ACLAccessFilter)(nil),             // 32: redpanda.core.admin.v2.ACLAccessFilter
	(*ShadowLinkStatus)(nil),            // 33: redpanda.core.admin.v2.ShadowLinkStatus
	(*ShadowLinkTaskStatus)(nil),        // 34: redpanda.core.admin.v2.ShadowLinkTaskStatus
	(*ShadowTopicStatus)(nil),           // 35: redpanda.core.admin.v2.ShadowTopicStatus
	(*TopicPartitionInformation)(nil),   // 36: redpanda.core.admin.v2.TopicPartitionInformation
	(*fieldmaskpb.FieldMask)(nil),       // 37: google.protobuf.FieldMask
	(*durationpb.Duration)(nil),         // 38: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),       // 39: google.protobuf.Timestamp
	(common.ACLResource)(0),             // 40: redpanda.core.common.ACLResource
	(common.ACLPattern)(0),              // 41: redpanda.core.common.ACLPattern
	(common.ACLOperation)(0),            // 42: redpanda.core.common.ACLOperation
	(common.ACLPermissionType)(0),       // 43: redpanda.core.common.ACLPermissionType
}
var file_redpanda_core_admin_v2_shadow_link_proto_depIdxs = []int32{
	19, // 0: redpanda.core.admin.v2.ShadowLink.configurations:type_name -> redpanda.core.admin.v2.ShadowLinkConfigurations
	33, // 1: redpanda.core.admin.v2.ShadowLink.status:type_name -> redpanda.core.admin.v2.ShadowLinkStatus
	6,  // 2: redpanda.core.admin.v2.CreateShadowLinkRequest.shadow_link:type_name -> redpanda.core.admin.v2.ShadowLink
	6,  // 3: redpanda.core.admin.v2.CreateShadowLinkResponse.shadow_link:type_name -> redpanda.core.admin.v2.ShadowLink
	6,  // 4: redpanda.core.admin.v2.GetShadowLinkResponse.shadow_link:type_name -> redpanda.core.admin.v2.ShadowLink
	6,  // 5: redpanda.core.admin.v2.ListShadowLinksResponse.shadow_links:type_name -> redpanda.core.admin.v2.ShadowLink
	6,  // 6: redpanda.core.admin.v2.UpdateShadowLinkRequest.shadow_link:type_name -> redpanda.core.admin.v2.ShadowLink
	37, // 7: redpanda.core.admin.v2.UpdateShadowLinkRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 8: redpanda.core.admin.v2.UpdateShadowLinkResponse.shadow_link:type_name -> redpanda.core.admin.v2.ShadowLink
	6,  // 9: redpanda.core.admin.v2.FailOverResponse.shadow_link:type_name -> redpanda.core.admin.v2.ShadowLink
	20, // 10: redpanda.core.admin.v2.ShadowLinkConfigurations.client_options:type_name -> redpanda.core.admin.v2.ShadowLinkClientOptions
	21, // 11: redpanda.core.admin.v2.ShadowLinkConfigurations.topic_metadata_sync_options:type_name -> redpanda.core.admin.v2.TopicMetadataSyncOptions
	22, // 12: redpanda.core.admin.v2.ShadowLinkConfigurations.consumer_offset_sync_options:type_name -> redpanda.core.admin.v2.ConsumerOffsetSyncOptions
	23, // 13: redpanda.core.admin.v2.ShadowLinkConfigurations.security_sync_options:type_name -> redpanda.core.admin.v2.SecuritySettingsSyncOptions
	24, // 14: redpanda.core.admin.v2.ShadowLinkClientOptions.tls_settings:type_name -> redpanda.core.admin.v2.TLSSettings
	25, // 15: redpanda.core.admin.v2.ShadowLinkClientOptions.authentication_configuration:type_name -> redpanda.core.admin.v2.AuthenticationConfiguration
	38, // 16: redpanda.core.admin.v2.TopicMetadataSyncOptions.interval:type_name -> google.protobuf.Duration
	29, // 17: redpanda.core.admin.v2.TopicMetadataSyncOptions.auto_create_shadow_topic_filters:type_name -> redpanda.core.admin.v2.NameFilter
	38, // 18: redpanda.core.admin.v2.ConsumerOffsetSyncOptions.interval:type_name -> google.protobuf.Duration
	29, // 19: redpanda.core.admin.v2.ConsumerOffsetSyncOptions.group_filters:type_name -> redpanda.core.admin.v2.NameFilter
	38, // 20: redpanda.core.admin.v2.SecuritySettingsSyncOptions.interval:type_name -> google.protobuf.Duration
	29, // 21: redpanda.core.admin.v2.SecuritySettingsSyncOptions.role_filters:type_name -> redpanda.core.admin.v2.NameFilter
	29, // 22: redpanda.core.admin.v2.SecuritySettingsSyncOptions.scram_cred_filters:type_name -> redpanda.core.admin.v2.NameFilter
	30, // 23: redpanda.core.admin.v2.SecuritySettingsSyncOptions.acl_filters:type_name -> redpanda.core.admin.v2.ACLFilter
	26, // 24: redpanda.core.admin.v2.TLSSettings.tls_file_settings:type_name -> redpanda.core.admin.v2.TLSFileSettings
	27, // 25: redpanda.core.admin.v2.TLSSettings.tls_pem_settings:type_name -> redpanda.core.admin.v2.TLSPEMSettings
	28, // 26: redpanda.core.admin.v2.AuthenticationConfiguration.scram_configuration:type_name -> redpanda.core.admin.v2.ScramConfig
	39, // 27: redpanda.core.admin.v2.ScramConfig.password_set_at:type_name -> google.protobuf.Timestamp
	1,  // 28: redpanda.core.admin.v2.ScramConfig.scram_mechanism:type_name -> redpanda.core.admin.v2.ScramMechanism
	2,  // 29: redpanda.core.admin.v2.NameFilter.pattern_type:type_name -> redpanda.core.admin.v2.PatternType
	3,  // 30: redpanda.core.admin.v2.NameFilter.filter_type:type_name -> redpanda.core.admin.v2.FilterType
	31, // 31: redpanda.core.admin.v2.ACLFilter.resource_filter:type_name -> redpanda.core.admin.v2.ACLResourceFilter
	32, // 32: redpanda.core.admin.v2.ACLFilter.access_filter:type_name -> redpanda.core.admin.v2.ACLAccessFilter
	40, // 33: redpanda.core.admin.v2.ACLResourceFilter.resource_type:type_name -> redpanda.core.common.ACLResource
	41, // 34: redpanda.core.admin.v2.ACLResourceFilter.pattern_type:type_name -> redpanda.core.common.ACLPattern
	42, // 35: redpanda.core.admin.v2.ACLAccessFilter.operation:type_name -> redpanda.core.common.ACLOperation
	43, // 36: redpanda.core.admin.v2.ACLAccessFilter.permission_type:type_name -> redpanda.core.common.ACLPermissionType
	0,  // 37: redpanda.core.admin.v2.ShadowLinkStatus.state:type_name -> redpanda.core.admin.v2.ShadowLinkState
	34, // 38: redpanda.core.admin.v2.ShadowLinkStatus.task_statuses:type_name -> redpanda.core.admin.v2.ShadowLinkTaskStatus
	35, // 39: redpanda.core.admin.v2.ShadowLinkStatus.shadow_topic_statuses:type_name -> redpanda.core.admin.v2.ShadowTopicStatus
	4,  // 40: redpanda.core.admin.v2.ShadowLinkTaskStatus.state:type_name -> redpanda.core.admin.v2.TaskState
	5,  // 41: redpanda.core.admin.v2.ShadowTopicStatus.state:type_name -> redpanda.core.admin.v2.ShadowTopicState
	36, // 42: redpanda.core.admin.v2.ShadowTopicStatus.partition_information:type_name -> redpanda.core.admin.v2.TopicPartitionInformation
	7,  // 43: redpanda.core.admin.v2.ShadowLinkService.CreateShadowLink:input_type -> redpanda.core.admin.v2.CreateShadowLinkRequest
	9,  // 44: redpanda.core.admin.v2.ShadowLinkService.DeleteShadowLink:input_type -> redpanda.core.admin.v2.DeleteShadowLinkRequest
	11, // 45: redpanda.core.admin.v2.ShadowLinkService.GetShadowLink:input_type -> redpanda.core.admin.v2.GetShadowLinkRequest
	13, // 46: redpanda.core.admin.v2.ShadowLinkService.ListShadowLinks:input_type -> redpanda.core.admin.v2.ListShadowLinksRequest
	15, // 47: redpanda.core.admin.v2.ShadowLinkService.UpdateShadowLink:input_type -> redpanda.core.admin.v2.UpdateShadowLinkRequest
	17, // 48: redpanda.core.admin.v2.ShadowLinkService.FailOver:input_type -> redpanda.core.admin.v2.FailOverRequest
	8,  // 49: redpanda.core.admin.v2.ShadowLinkService.CreateShadowLink:output_type -> redpanda.core.admin.v2.CreateShadowLinkResponse
	10, // 50: redpanda.core.admin.v2.ShadowLinkService.DeleteShadowLink:output_type -> redpanda.core.admin.v2.DeleteShadowLinkResponse
	12, // 51: redpanda.core.admin.v2.ShadowLinkService.GetShadowLink:output_type -> redpanda.core.admin.v2.GetShadowLinkResponse
	14, // 52: redpanda.core.admin.v2.ShadowLinkService.ListShadowLinks:output_type -> redpanda.core.admin.v2.ListShadowLinksResponse
	16, // 53: redpanda.core.admin.v2.ShadowLinkService.UpdateShadowLink:output_type -> redpanda.core.admin.v2.UpdateShadowLinkResponse
	18, // 54: redpanda.core.admin.v2.ShadowLinkService.FailOver:output_type -> redpanda.core.admin.v2.FailOverResponse
	49, // [49:55] is the sub-list for method output_type
	43, // [43:49] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_redpanda_core_admin_v2_shadow_link_proto_init() }
func file_redpanda_core_admin_v2_shadow_link_proto_init() {
	if File_redpanda_core_admin_v2_shadow_link_proto != nil {
		return
	}
	file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[14].OneofWrappers = []any{}
	file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[18].OneofWrappers = []any{
		(*TLSSettings_TlsFileSettings)(nil),
		(*TLSSettings_TlsPemSettings)(nil),
	}
	file_redpanda_core_admin_v2_shadow_link_proto_msgTypes[19].OneofWrappers = []any{
		(*AuthenticationConfiguration_ScramConfiguration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_core_admin_v2_shadow_link_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_core_admin_v2_shadow_link_proto_goTypes,
		DependencyIndexes: file_redpanda_core_admin_v2_shadow_link_proto_depIdxs,
		EnumInfos:         file_redpanda_core_admin_v2_shadow_link_proto_enumTypes,
		MessageInfos:      file_redpanda_core_admin_v2_shadow_link_proto_msgTypes,
	}.Build()
	File_redpanda_core_admin_v2_shadow_link_proto = out.File
	file_redpanda_core_admin_v2_shadow_link_proto_rawDesc = nil
	file_redpanda_core_admin_v2_shadow_link_proto_goTypes = nil
	file_redpanda_core_admin_v2_shadow_link_proto_depIdxs = nil
}
