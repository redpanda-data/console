// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/core/admin/v2/broker.proto

package adminv2connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v2 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/core/admin/v2"
)

// BrokerServiceGatewayServer implements the gRPC server API for the BrokerService service.
type BrokerServiceGatewayServer struct {
	v2.UnimplementedBrokerServiceServer
	getBroker            connect_gateway.UnaryHandler[v2.GetBrokerRequest, v2.GetBrokerResponse]
	listBrokers          connect_gateway.UnaryHandler[v2.ListBrokersRequest, v2.ListBrokersResponse]
	listKafkaConnections connect_gateway.UnaryHandler[v2.ListKafkaConnectionsRequest, v2.ListKafkaConnectionsResponse]
}

// NewBrokerServiceGatewayServer constructs a Connect-Gateway gRPC server for the BrokerService
// service.
func NewBrokerServiceGatewayServer(svc BrokerServiceHandler, opts ...connect_gateway.HandlerOption) *BrokerServiceGatewayServer {
	return &BrokerServiceGatewayServer{
		getBroker:            connect_gateway.NewUnaryHandler(BrokerServiceGetBrokerProcedure, svc.GetBroker, opts...),
		listBrokers:          connect_gateway.NewUnaryHandler(BrokerServiceListBrokersProcedure, svc.ListBrokers, opts...),
		listKafkaConnections: connect_gateway.NewUnaryHandler(BrokerServiceListKafkaConnectionsProcedure, svc.ListKafkaConnections, opts...),
	}
}

func (s *BrokerServiceGatewayServer) GetBroker(ctx context.Context, req *v2.GetBrokerRequest) (*v2.GetBrokerResponse, error) {
	return s.getBroker(ctx, req)
}

func (s *BrokerServiceGatewayServer) ListBrokers(ctx context.Context, req *v2.ListBrokersRequest) (*v2.ListBrokersResponse, error) {
	return s.listBrokers(ctx, req)
}

func (s *BrokerServiceGatewayServer) ListKafkaConnections(ctx context.Context, req *v2.ListKafkaConnectionsRequest) (*v2.ListKafkaConnectionsResponse, error) {
	return s.listKafkaConnections(ctx, req)
}

// RegisterBrokerServiceHandlerGatewayServer registers the Connect handlers for the BrokerService
// "svc" to "mux".
func RegisterBrokerServiceHandlerGatewayServer(mux *runtime.ServeMux, svc BrokerServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v2.RegisterBrokerServiceHandlerServer(context.TODO(), mux, NewBrokerServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
