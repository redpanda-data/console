// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/core/admin/v2/kafka_connections.proto

package adminv2

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/pbgen"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums
type KafkaConnectionState int32

const (
	KafkaConnectionState_KAFKA_CONNECTION_STATE_UNSPECIFIED KafkaConnectionState = 0
	// The connection is accepting requests.
	KafkaConnectionState_KAFKA_CONNECTION_STATE_OPEN KafkaConnectionState = 1
	// The connection is aborting ongoing requests and about to be closed.
	// This is a transient state between open and closed that should rarely be
	// observable under normal circumstances.
	KafkaConnectionState_KAFKA_CONNECTION_STATE_ABORTING KafkaConnectionState = 2
	// The connection has been closed.
	KafkaConnectionState_KAFKA_CONNECTION_STATE_CLOSED KafkaConnectionState = 3
)

// Enum value maps for KafkaConnectionState.
var (
	KafkaConnectionState_name = map[int32]string{
		0: "KAFKA_CONNECTION_STATE_UNSPECIFIED",
		1: "KAFKA_CONNECTION_STATE_OPEN",
		2: "KAFKA_CONNECTION_STATE_ABORTING",
		3: "KAFKA_CONNECTION_STATE_CLOSED",
	}
	KafkaConnectionState_value = map[string]int32{
		"KAFKA_CONNECTION_STATE_UNSPECIFIED": 0,
		"KAFKA_CONNECTION_STATE_OPEN":        1,
		"KAFKA_CONNECTION_STATE_ABORTING":    2,
		"KAFKA_CONNECTION_STATE_CLOSED":      3,
	}
)

func (x KafkaConnectionState) Enum() *KafkaConnectionState {
	p := new(KafkaConnectionState)
	*p = x
	return p
}

func (x KafkaConnectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KafkaConnectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_admin_v2_kafka_connections_proto_enumTypes[0].Descriptor()
}

func (KafkaConnectionState) Type() protoreflect.EnumType {
	return &file_redpanda_core_admin_v2_kafka_connections_proto_enumTypes[0]
}

func (x KafkaConnectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KafkaConnectionState.Descriptor instead.
func (KafkaConnectionState) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{0}
}

type AuthenticationState int32

const (
	AuthenticationState_AUTHENTICATION_STATE_UNSPECIFIED     AuthenticationState = 0
	AuthenticationState_AUTHENTICATION_STATE_UNAUTHENTICATED AuthenticationState = 1
	AuthenticationState_AUTHENTICATION_STATE_SUCCESS         AuthenticationState = 2
	AuthenticationState_AUTHENTICATION_STATE_FAILURE         AuthenticationState = 3
)

// Enum value maps for AuthenticationState.
var (
	AuthenticationState_name = map[int32]string{
		0: "AUTHENTICATION_STATE_UNSPECIFIED",
		1: "AUTHENTICATION_STATE_UNAUTHENTICATED",
		2: "AUTHENTICATION_STATE_SUCCESS",
		3: "AUTHENTICATION_STATE_FAILURE",
	}
	AuthenticationState_value = map[string]int32{
		"AUTHENTICATION_STATE_UNSPECIFIED":     0,
		"AUTHENTICATION_STATE_UNAUTHENTICATED": 1,
		"AUTHENTICATION_STATE_SUCCESS":         2,
		"AUTHENTICATION_STATE_FAILURE":         3,
	}
)

func (x AuthenticationState) Enum() *AuthenticationState {
	p := new(AuthenticationState)
	*p = x
	return p
}

func (x AuthenticationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationState) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_admin_v2_kafka_connections_proto_enumTypes[1].Descriptor()
}

func (AuthenticationState) Type() protoreflect.EnumType {
	return &file_redpanda_core_admin_v2_kafka_connections_proto_enumTypes[1]
}

func (x AuthenticationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationState.Descriptor instead.
func (AuthenticationState) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{1}
}

type AuthenticationMechanism int32

const (
	AuthenticationMechanism_AUTHENTICATION_MECHANISM_UNSPECIFIED AuthenticationMechanism = 0
	// Mutual TLS using client certificates
	AuthenticationMechanism_AUTHENTICATION_MECHANISM_MTLS AuthenticationMechanism = 1
	// SASL SCRAM
	AuthenticationMechanism_AUTHENTICATION_MECHANISM_SASL_SCRAM AuthenticationMechanism = 2
	// SASL OAUTHBEARER (OAuth 2.0 / OpenID Connect)
	AuthenticationMechanism_AUTHENTICATION_MECHANISM_SASL_OAUTHBEARER AuthenticationMechanism = 3
	// SASL PLAIN (username/password in plaintext)
	AuthenticationMechanism_AUTHENTICATION_MECHANISM_SASL_PLAIN AuthenticationMechanism = 4
	// SASL GSSAPI (Kerberos)
	AuthenticationMechanism_AUTHENTICATION_MECHANISM_SASL_GSSAPI AuthenticationMechanism = 5
)

// Enum value maps for AuthenticationMechanism.
var (
	AuthenticationMechanism_name = map[int32]string{
		0: "AUTHENTICATION_MECHANISM_UNSPECIFIED",
		1: "AUTHENTICATION_MECHANISM_MTLS",
		2: "AUTHENTICATION_MECHANISM_SASL_SCRAM",
		3: "AUTHENTICATION_MECHANISM_SASL_OAUTHBEARER",
		4: "AUTHENTICATION_MECHANISM_SASL_PLAIN",
		5: "AUTHENTICATION_MECHANISM_SASL_GSSAPI",
	}
	AuthenticationMechanism_value = map[string]int32{
		"AUTHENTICATION_MECHANISM_UNSPECIFIED":      0,
		"AUTHENTICATION_MECHANISM_MTLS":             1,
		"AUTHENTICATION_MECHANISM_SASL_SCRAM":       2,
		"AUTHENTICATION_MECHANISM_SASL_OAUTHBEARER": 3,
		"AUTHENTICATION_MECHANISM_SASL_PLAIN":       4,
		"AUTHENTICATION_MECHANISM_SASL_GSSAPI":      5,
	}
)

func (x AuthenticationMechanism) Enum() *AuthenticationMechanism {
	p := new(AuthenticationMechanism)
	*p = x
	return p
}

func (x AuthenticationMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_core_admin_v2_kafka_connections_proto_enumTypes[2].Descriptor()
}

func (AuthenticationMechanism) Type() protoreflect.EnumType {
	return &file_redpanda_core_admin_v2_kafka_connections_proto_enumTypes[2]
}

func (x AuthenticationMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationMechanism.Descriptor instead.
func (AuthenticationMechanism) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{2}
}

// Kafka connection details for a broker
type KafkaConnection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Broker node ID
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Broker shard that handles the connection
	ShardId uint32 `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	// Kafka connection UUID
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// Lifecycle state of the connection (open/aborting/closed)
	State KafkaConnectionState `protobuf:"varint,4,opt,name=state,proto3,enum=redpanda.core.admin.v2.KafkaConnectionState" json:"state,omitempty"`
	// When the broker accepted the connection
	OpenTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	// When the connection was closed. This field is set only when the
	// connection state is "closed".
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	// Information about the authentication state of the connection
	AuthenticationInfo *AuthenticationInfo `protobuf:"bytes,7,opt,name=authentication_info,json=authenticationInfo,proto3" json:"authentication_info,omitempty"`
	// Name of the Kafka listener that accepted this connection.
	// A listener is a named broker endpoint (for example, "internal",
	// "external", or "sasl_tls"). Each listener defines its network address and
	// enforces its protocol and authentication policy.
	ListenerName string `protobuf:"bytes,8,opt,name=listener_name,json=listenerName,proto3" json:"listener_name,omitempty"`
	// Information about the TLS state of the connection (e.g., whether TLS
	// encryption is used for this connection)
	TlsInfo *TLSInfo `protobuf:"bytes,9,opt,name=tls_info,json=tlsInfo,proto3" json:"tls_info,omitempty"`
	// Remote client address of the TCP connection
	Source *Source `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
	// Client identifier included in every request sent by the Kafka client.
	// This is typically a configurable property (client.id) set by the
	// application when creating a producer or consumer, and is often used for
	// metrics, quotas, and debugging.
	ClientId string `protobuf:"bytes,11,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Name of the client library, reported automatically in ApiVersions v3+
	// requests. This is set by the client implementation and is not typically
	// configurable by applications.
	ClientSoftwareName string `protobuf:"bytes,12,opt,name=client_software_name,json=clientSoftwareName,proto3" json:"client_software_name,omitempty"`
	// Version of the client library, reported automatically in ApiVersions v3+
	// requests. Like client_software_name, this is set by the
	// client and not usually configurable by applications.
	ClientSoftwareVersion string `protobuf:"bytes,13,opt,name=client_software_version,json=clientSoftwareVersion,proto3" json:"client_software_version,omitempty"`
	// Most recent transactional ID seen in requests sent over this connection
	TransactionalId string `protobuf:"bytes,14,opt,name=transactional_id,json=transactionalId,proto3" json:"transactional_id,omitempty"`
	// Most recent group ID seen in requests sent over this connection. This
	// typically refers to a consumer group, but the Kafka group protocol is
	// more general and may also be used by other types of clients that
	// coordinate membership and assignments through the broker.
	GroupId string `protobuf:"bytes,15,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// Most recent group instance ID seen in requests sent over this connection.
	// This is used when static membership is enabled, allowing a specific
	// client instance to retain its group membership across restarts.
	GroupInstanceId string `protobuf:"bytes,16,opt,name=group_instance_id,json=groupInstanceId,proto3" json:"group_instance_id,omitempty"`
	// Most recent group member ID seen in requests sent over this connection.
	// This is the unique identifier assigned by the broker to a particular
	// member of the group.
	GroupMemberId string `protobuf:"bytes,17,opt,name=group_member_id,json=groupMemberId,proto3" json:"group_member_id,omitempty"`
	// This map records, for each Kafka API, the highest version number observed
	// in requests on this connection. It can be useful for understanding which
	// protocol versions a client supports or has negotiated with the broker.
	// Only APIs that were actually used (i.e. at least one request was seen)
	// are included.
	//
	// Example:
	//
	//	{ 0: 11, 1: 13 }
	//
	// means that for API key 0 (Produce), version 11 was the highest seen,
	// and for API key 1 (Fetch), version 13 was the highest seen.
	//
	// Reference:
	// - https://kafka.apache.org/0101/protocol.html#protocol_api_keys
	// - https://kafka.apache.org/0101/protocol.html#protocol_compatibility
	ApiVersions map[int32]int32 `protobuf:"bytes,18,rep,name=api_versions,json=apiVersions,proto3" json:"api_versions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// How long the connection has been idle (no in-flight requests)
	IdleDuration *durationpb.Duration `protobuf:"bytes,19,opt,name=idle_duration,json=idleDuration,proto3" json:"idle_duration,omitempty"`
	// Currently in-flight requests
	InFlightRequests *InFlightRequests `protobuf:"bytes,20,opt,name=in_flight_requests,json=inFlightRequests,proto3" json:"in_flight_requests,omitempty"`
	// Aggregated statistics for the entire connection's lifetime.
	TotalRequestStatistics *RequestStatistics `protobuf:"bytes,21,opt,name=total_request_statistics,json=totalRequestStatistics,proto3" json:"total_request_statistics,omitempty"`
	// Statistics for previous last one minute window.
	RecentRequestStatistics *RequestStatistics `protobuf:"bytes,22,opt,name=recent_request_statistics,json=recentRequestStatistics,proto3" json:"recent_request_statistics,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *KafkaConnection) Reset() {
	*x = KafkaConnection{}
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConnection) ProtoMessage() {}

func (x *KafkaConnection) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConnection.ProtoReflect.Descriptor instead.
func (*KafkaConnection) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaConnection) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *KafkaConnection) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *KafkaConnection) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *KafkaConnection) GetState() KafkaConnectionState {
	if x != nil {
		return x.State
	}
	return KafkaConnectionState_KAFKA_CONNECTION_STATE_UNSPECIFIED
}

func (x *KafkaConnection) GetOpenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *KafkaConnection) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *KafkaConnection) GetAuthenticationInfo() *AuthenticationInfo {
	if x != nil {
		return x.AuthenticationInfo
	}
	return nil
}

func (x *KafkaConnection) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *KafkaConnection) GetTlsInfo() *TLSInfo {
	if x != nil {
		return x.TlsInfo
	}
	return nil
}

func (x *KafkaConnection) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *KafkaConnection) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *KafkaConnection) GetClientSoftwareName() string {
	if x != nil {
		return x.ClientSoftwareName
	}
	return ""
}

func (x *KafkaConnection) GetClientSoftwareVersion() string {
	if x != nil {
		return x.ClientSoftwareVersion
	}
	return ""
}

func (x *KafkaConnection) GetTransactionalId() string {
	if x != nil {
		return x.TransactionalId
	}
	return ""
}

func (x *KafkaConnection) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *KafkaConnection) GetGroupInstanceId() string {
	if x != nil {
		return x.GroupInstanceId
	}
	return ""
}

func (x *KafkaConnection) GetGroupMemberId() string {
	if x != nil {
		return x.GroupMemberId
	}
	return ""
}

func (x *KafkaConnection) GetApiVersions() map[int32]int32 {
	if x != nil {
		return x.ApiVersions
	}
	return nil
}

func (x *KafkaConnection) GetIdleDuration() *durationpb.Duration {
	if x != nil {
		return x.IdleDuration
	}
	return nil
}

func (x *KafkaConnection) GetInFlightRequests() *InFlightRequests {
	if x != nil {
		return x.InFlightRequests
	}
	return nil
}

func (x *KafkaConnection) GetTotalRequestStatistics() *RequestStatistics {
	if x != nil {
		return x.TotalRequestStatistics
	}
	return nil
}

func (x *KafkaConnection) GetRecentRequestStatistics() *RequestStatistics {
	if x != nil {
		return x.RecentRequestStatistics
	}
	return nil
}

// Other Messages
type AuthenticationInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Authentication state
	State AuthenticationState `protobuf:"varint,1,opt,name=state,proto3,enum=redpanda.core.admin.v2.AuthenticationState" json:"state,omitempty"`
	// Authentication mechanism
	Mechanism AuthenticationMechanism `protobuf:"varint,2,opt,name=mechanism,proto3,enum=redpanda.core.admin.v2.AuthenticationMechanism" json:"mechanism,omitempty"`
	// Authenticated user principal
	UserPrincipal string `protobuf:"bytes,3,opt,name=user_principal,json=userPrincipal,proto3" json:"user_principal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticationInfo) Reset() {
	*x = AuthenticationInfo{}
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationInfo) ProtoMessage() {}

func (x *AuthenticationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationInfo.ProtoReflect.Descriptor instead.
func (*AuthenticationInfo) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticationInfo) GetState() AuthenticationState {
	if x != nil {
		return x.State
	}
	return AuthenticationState_AUTHENTICATION_STATE_UNSPECIFIED
}

func (x *AuthenticationInfo) GetMechanism() AuthenticationMechanism {
	if x != nil {
		return x.Mechanism
	}
	return AuthenticationMechanism_AUTHENTICATION_MECHANISM_UNSPECIFIED
}

func (x *AuthenticationInfo) GetUserPrincipal() string {
	if x != nil {
		return x.UserPrincipal
	}
	return ""
}

type TLSInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether TLS is in use
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSInfo) Reset() {
	*x = TLSInfo{}
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSInfo) ProtoMessage() {}

func (x *TLSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSInfo.ProtoReflect.Descriptor instead.
func (*TLSInfo) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{2}
}

func (x *TLSInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Source struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IpAddress     string                 `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{3}
}

func (x *Source) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Source) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type InFlightRequests struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A sample (e.g., the 5 latest) of the currently in-flight requests
	SampledInFlightRequests []*InFlightRequests_Request `protobuf:"bytes,1,rep,name=sampled_in_flight_requests,json=sampledInFlightRequests,proto3" json:"sampled_in_flight_requests,omitempty"`
	// Whether there are more in-flight requests than those in
	// `sampled_in_flight_requests`.
	HasMoreRequests bool `protobuf:"varint,2,opt,name=has_more_requests,json=hasMoreRequests,proto3" json:"has_more_requests,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InFlightRequests) Reset() {
	*x = InFlightRequests{}
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InFlightRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InFlightRequests) ProtoMessage() {}

func (x *InFlightRequests) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InFlightRequests.ProtoReflect.Descriptor instead.
func (*InFlightRequests) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{4}
}

func (x *InFlightRequests) GetSampledInFlightRequests() []*InFlightRequests_Request {
	if x != nil {
		return x.SampledInFlightRequests
	}
	return nil
}

func (x *InFlightRequests) GetHasMoreRequests() bool {
	if x != nil {
		return x.HasMoreRequests
	}
	return false
}

type RequestStatistics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sum of bytes produced.
	ProduceBytes uint64 `protobuf:"varint,1,opt,name=produce_bytes,json=produceBytes,proto3" json:"produce_bytes,omitempty"`
	// Sum of bytes fetched.
	FetchBytes uint64 `protobuf:"varint,2,opt,name=fetch_bytes,json=fetchBytes,proto3" json:"fetch_bytes,omitempty"`
	// Number of requests the client has made.
	RequestCount uint64 `protobuf:"varint,3,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	// Number of produced batches
	// Average batch size = produce_bytes / produce_batch_count
	ProduceBatchCount uint64 `protobuf:"varint,4,opt,name=produce_batch_count,json=produceBatchCount,proto3" json:"produce_batch_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RequestStatistics) Reset() {
	*x = RequestStatistics{}
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatistics) ProtoMessage() {}

func (x *RequestStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatistics.ProtoReflect.Descriptor instead.
func (*RequestStatistics) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{5}
}

func (x *RequestStatistics) GetProduceBytes() uint64 {
	if x != nil {
		return x.ProduceBytes
	}
	return 0
}

func (x *RequestStatistics) GetFetchBytes() uint64 {
	if x != nil {
		return x.FetchBytes
	}
	return 0
}

func (x *RequestStatistics) GetRequestCount() uint64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *RequestStatistics) GetProduceBatchCount() uint64 {
	if x != nil {
		return x.ProduceBatchCount
	}
	return 0
}

type InFlightRequests_Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// API key for the request type (e.g., produce/fetch/metadata/etc)
	// https://kafka.apache.org/0101/protocol.html#protocol_api_keys
	ApiKey int32 `protobuf:"varint,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// How long the request has been in-flight since it was received
	InFlightDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=in_flight_duration,json=inFlightDuration,proto3" json:"in_flight_duration,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *InFlightRequests_Request) Reset() {
	*x = InFlightRequests_Request{}
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InFlightRequests_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InFlightRequests_Request) ProtoMessage() {}

func (x *InFlightRequests_Request) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InFlightRequests_Request.ProtoReflect.Descriptor instead.
func (*InFlightRequests_Request) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP(), []int{4, 0}
}

func (x *InFlightRequests_Request) GetApiKey() int32 {
	if x != nil {
		return x.ApiKey
	}
	return 0
}

func (x *InFlightRequests_Request) GetInFlightDuration() *durationpb.Duration {
	if x != nil {
		return x.InFlightDuration
	}
	return nil
}

var File_redpanda_core_admin_v2_kafka_connections_proto protoreflect.FileDescriptor

var file_redpanda_core_admin_v2_kafka_connections_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f,
	0x70, 0x62, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x0a, 0x0a, 0x0f, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0x8c, 0xcf, 0xd7, 0x08,
	0x02, 0x08, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x5b, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x4c,
	0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x18,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x65, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x17, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x23, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x45, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0x8c, 0xcf,
	0xd7, 0x08, 0x02, 0x08, 0x04, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x1a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x1a, 0x6b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x69, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x2a, 0xa7, 0x01, 0x0a, 0x14, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x4b,
	0x41, 0x46, 0x4b, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x42, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x41, 0x46,
	0x4b, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xa9, 0x01, 0x0a,
	0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x2a, 0x91, 0x02, 0x0a, 0x17, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x4d, 0x54, 0x4c, 0x53, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x41,
	0x53, 0x4c, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43,
	0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4f, 0x41, 0x55, 0x54,
	0x48, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48,
	0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e,
	0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53,
	0x41, 0x53, 0x4c, 0x5f, 0x47, 0x53, 0x53, 0x41, 0x50, 0x49, 0x10, 0x05, 0x42, 0x94, 0x02, 0xea,
	0x92, 0x19, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x42, 0x15, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x76, 0x32, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x52, 0x43, 0x41,
	0xaa, 0x02, 0x16, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x16, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c,
	0x56, 0x32, 0xe2, 0x02, 0x22, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x43, 0x6f,
	0x72, 0x65, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a,
	0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_core_admin_v2_kafka_connections_proto_rawDescOnce sync.Once
	file_redpanda_core_admin_v2_kafka_connections_proto_rawDescData = file_redpanda_core_admin_v2_kafka_connections_proto_rawDesc
)

func file_redpanda_core_admin_v2_kafka_connections_proto_rawDescGZIP() []byte {
	file_redpanda_core_admin_v2_kafka_connections_proto_rawDescOnce.Do(func() {
		file_redpanda_core_admin_v2_kafka_connections_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_core_admin_v2_kafka_connections_proto_rawDescData)
	})
	return file_redpanda_core_admin_v2_kafka_connections_proto_rawDescData
}

var file_redpanda_core_admin_v2_kafka_connections_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_redpanda_core_admin_v2_kafka_connections_proto_goTypes = []any{
	(KafkaConnectionState)(0),        // 0: redpanda.core.admin.v2.KafkaConnectionState
	(AuthenticationState)(0),         // 1: redpanda.core.admin.v2.AuthenticationState
	(AuthenticationMechanism)(0),     // 2: redpanda.core.admin.v2.AuthenticationMechanism
	(*KafkaConnection)(nil),          // 3: redpanda.core.admin.v2.KafkaConnection
	(*AuthenticationInfo)(nil),       // 4: redpanda.core.admin.v2.AuthenticationInfo
	(*TLSInfo)(nil),                  // 5: redpanda.core.admin.v2.TLSInfo
	(*Source)(nil),                   // 6: redpanda.core.admin.v2.Source
	(*InFlightRequests)(nil),         // 7: redpanda.core.admin.v2.InFlightRequests
	(*RequestStatistics)(nil),        // 8: redpanda.core.admin.v2.RequestStatistics
	nil,                              // 9: redpanda.core.admin.v2.KafkaConnection.ApiVersionsEntry
	(*InFlightRequests_Request)(nil), // 10: redpanda.core.admin.v2.InFlightRequests.Request
	(*timestamppb.Timestamp)(nil),    // 11: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),      // 12: google.protobuf.Duration
}
var file_redpanda_core_admin_v2_kafka_connections_proto_depIdxs = []int32{
	0,  // 0: redpanda.core.admin.v2.KafkaConnection.state:type_name -> redpanda.core.admin.v2.KafkaConnectionState
	11, // 1: redpanda.core.admin.v2.KafkaConnection.open_time:type_name -> google.protobuf.Timestamp
	11, // 2: redpanda.core.admin.v2.KafkaConnection.close_time:type_name -> google.protobuf.Timestamp
	4,  // 3: redpanda.core.admin.v2.KafkaConnection.authentication_info:type_name -> redpanda.core.admin.v2.AuthenticationInfo
	5,  // 4: redpanda.core.admin.v2.KafkaConnection.tls_info:type_name -> redpanda.core.admin.v2.TLSInfo
	6,  // 5: redpanda.core.admin.v2.KafkaConnection.source:type_name -> redpanda.core.admin.v2.Source
	9,  // 6: redpanda.core.admin.v2.KafkaConnection.api_versions:type_name -> redpanda.core.admin.v2.KafkaConnection.ApiVersionsEntry
	12, // 7: redpanda.core.admin.v2.KafkaConnection.idle_duration:type_name -> google.protobuf.Duration
	7,  // 8: redpanda.core.admin.v2.KafkaConnection.in_flight_requests:type_name -> redpanda.core.admin.v2.InFlightRequests
	8,  // 9: redpanda.core.admin.v2.KafkaConnection.total_request_statistics:type_name -> redpanda.core.admin.v2.RequestStatistics
	8,  // 10: redpanda.core.admin.v2.KafkaConnection.recent_request_statistics:type_name -> redpanda.core.admin.v2.RequestStatistics
	1,  // 11: redpanda.core.admin.v2.AuthenticationInfo.state:type_name -> redpanda.core.admin.v2.AuthenticationState
	2,  // 12: redpanda.core.admin.v2.AuthenticationInfo.mechanism:type_name -> redpanda.core.admin.v2.AuthenticationMechanism
	10, // 13: redpanda.core.admin.v2.InFlightRequests.sampled_in_flight_requests:type_name -> redpanda.core.admin.v2.InFlightRequests.Request
	12, // 14: redpanda.core.admin.v2.InFlightRequests.Request.in_flight_duration:type_name -> google.protobuf.Duration
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_redpanda_core_admin_v2_kafka_connections_proto_init() }
func file_redpanda_core_admin_v2_kafka_connections_proto_init() {
	if File_redpanda_core_admin_v2_kafka_connections_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_core_admin_v2_kafka_connections_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_redpanda_core_admin_v2_kafka_connections_proto_goTypes,
		DependencyIndexes: file_redpanda_core_admin_v2_kafka_connections_proto_depIdxs,
		EnumInfos:         file_redpanda_core_admin_v2_kafka_connections_proto_enumTypes,
		MessageInfos:      file_redpanda_core_admin_v2_kafka_connections_proto_msgTypes,
	}.Build()
	File_redpanda_core_admin_v2_kafka_connections_proto = out.File
	file_redpanda_core_admin_v2_kafka_connections_proto_rawDesc = nil
	file_redpanda_core_admin_v2_kafka_connections_proto_goTypes = nil
	file_redpanda_core_admin_v2_kafka_connections_proto_depIdxs = nil
}
