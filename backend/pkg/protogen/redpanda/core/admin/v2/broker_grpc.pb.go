// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/core/admin/v2/broker.proto

package adminv2

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrokerService_GetBroker_FullMethodName            = "/redpanda.core.admin.v2.BrokerService/GetBroker"
	BrokerService_ListBrokers_FullMethodName          = "/redpanda.core.admin.v2.BrokerService/ListBrokers"
	BrokerService_ListKafkaConnections_FullMethodName = "/redpanda.core.admin.v2.BrokerService/ListKafkaConnections"
)

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The BrokerService gives information about individual brokers within the
// cluster.
type BrokerServiceClient interface {
	// GetBroker returns information about a single broker in the cluster.
	GetBroker(ctx context.Context, in *GetBrokerRequest, opts ...grpc.CallOption) (*GetBrokerResponse, error)
	// ListBrokers returns information about all brokers in the cluster.
	ListBrokers(ctx context.Context, in *ListBrokersRequest, opts ...grpc.CallOption) (*ListBrokersResponse, error)
	// ListKafkaConnections returns information about the broker's Kafka
	// connections.
	ListKafkaConnections(ctx context.Context, in *ListKafkaConnectionsRequest, opts ...grpc.CallOption) (*ListKafkaConnectionsResponse, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) GetBroker(ctx context.Context, in *GetBrokerRequest, opts ...grpc.CallOption) (*GetBrokerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrokerResponse)
	err := c.cc.Invoke(ctx, BrokerService_GetBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ListBrokers(ctx context.Context, in *ListBrokersRequest, opts ...grpc.CallOption) (*ListBrokersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBrokersResponse)
	err := c.cc.Invoke(ctx, BrokerService_ListBrokers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ListKafkaConnections(ctx context.Context, in *ListKafkaConnectionsRequest, opts ...grpc.CallOption) (*ListKafkaConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKafkaConnectionsResponse)
	err := c.cc.Invoke(ctx, BrokerService_ListKafkaConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility.
//
// The BrokerService gives information about individual brokers within the
// cluster.
type BrokerServiceServer interface {
	// GetBroker returns information about a single broker in the cluster.
	GetBroker(context.Context, *GetBrokerRequest) (*GetBrokerResponse, error)
	// ListBrokers returns information about all brokers in the cluster.
	ListBrokers(context.Context, *ListBrokersRequest) (*ListBrokersResponse, error)
	// ListKafkaConnections returns information about the broker's Kafka
	// connections.
	ListKafkaConnections(context.Context, *ListKafkaConnectionsRequest) (*ListKafkaConnectionsResponse, error)
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrokerServiceServer struct{}

func (UnimplementedBrokerServiceServer) GetBroker(context.Context, *GetBrokerRequest) (*GetBrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroker not implemented")
}
func (UnimplementedBrokerServiceServer) ListBrokers(context.Context, *ListBrokersRequest) (*ListBrokersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrokers not implemented")
}
func (UnimplementedBrokerServiceServer) ListKafkaConnections(context.Context, *ListKafkaConnectionsRequest) (*ListKafkaConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKafkaConnections not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}
func (UnimplementedBrokerServiceServer) testEmbeddedByValue()                       {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrokerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_GetBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).GetBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_GetBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).GetBroker(ctx, req.(*GetBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ListBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBrokersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).ListBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_ListBrokers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).ListBrokers(ctx, req.(*ListBrokersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ListKafkaConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKafkaConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).ListKafkaConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_ListKafkaConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).ListKafkaConnections(ctx, req.(*ListKafkaConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.core.admin.v2.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBroker",
			Handler:    _BrokerService_GetBroker_Handler,
		},
		{
			MethodName: "ListBrokers",
			Handler:    _BrokerService_ListBrokers_Handler,
		},
		{
			MethodName: "ListKafkaConnections",
			Handler:    _BrokerService_ListKafkaConnections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/core/admin/v2/broker.proto",
}
