// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/core/admin/v2/shadow_link.proto

package adminv2

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShadowLinkService_CreateShadowLink_FullMethodName = "/redpanda.core.admin.v2.ShadowLinkService/CreateShadowLink"
	ShadowLinkService_DeleteShadowLink_FullMethodName = "/redpanda.core.admin.v2.ShadowLinkService/DeleteShadowLink"
	ShadowLinkService_GetShadowLink_FullMethodName    = "/redpanda.core.admin.v2.ShadowLinkService/GetShadowLink"
	ShadowLinkService_ListShadowLinks_FullMethodName  = "/redpanda.core.admin.v2.ShadowLinkService/ListShadowLinks"
	ShadowLinkService_UpdateShadowLink_FullMethodName = "/redpanda.core.admin.v2.ShadowLinkService/UpdateShadowLink"
	ShadowLinkService_FailOver_FullMethodName         = "/redpanda.core.admin.v2.ShadowLinkService/FailOver"
)

// ShadowLinkServiceClient is the client API for ShadowLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShadowLinkServiceClient interface {
	CreateShadowLink(ctx context.Context, in *CreateShadowLinkRequest, opts ...grpc.CallOption) (*CreateShadowLinkResponse, error)
	DeleteShadowLink(ctx context.Context, in *DeleteShadowLinkRequest, opts ...grpc.CallOption) (*DeleteShadowLinkResponse, error)
	GetShadowLink(ctx context.Context, in *GetShadowLinkRequest, opts ...grpc.CallOption) (*GetShadowLinkResponse, error)
	ListShadowLinks(ctx context.Context, in *ListShadowLinksRequest, opts ...grpc.CallOption) (*ListShadowLinksResponse, error)
	UpdateShadowLink(ctx context.Context, in *UpdateShadowLinkRequest, opts ...grpc.CallOption) (*UpdateShadowLinkResponse, error)
	// Fails over a shadow link or a single shadow topic
	FailOver(ctx context.Context, in *FailOverRequest, opts ...grpc.CallOption) (*FailOverResponse, error)
}

type shadowLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShadowLinkServiceClient(cc grpc.ClientConnInterface) ShadowLinkServiceClient {
	return &shadowLinkServiceClient{cc}
}

func (c *shadowLinkServiceClient) CreateShadowLink(ctx context.Context, in *CreateShadowLinkRequest, opts ...grpc.CallOption) (*CreateShadowLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShadowLinkResponse)
	err := c.cc.Invoke(ctx, ShadowLinkService_CreateShadowLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowLinkServiceClient) DeleteShadowLink(ctx context.Context, in *DeleteShadowLinkRequest, opts ...grpc.CallOption) (*DeleteShadowLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShadowLinkResponse)
	err := c.cc.Invoke(ctx, ShadowLinkService_DeleteShadowLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowLinkServiceClient) GetShadowLink(ctx context.Context, in *GetShadowLinkRequest, opts ...grpc.CallOption) (*GetShadowLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShadowLinkResponse)
	err := c.cc.Invoke(ctx, ShadowLinkService_GetShadowLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowLinkServiceClient) ListShadowLinks(ctx context.Context, in *ListShadowLinksRequest, opts ...grpc.CallOption) (*ListShadowLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShadowLinksResponse)
	err := c.cc.Invoke(ctx, ShadowLinkService_ListShadowLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowLinkServiceClient) UpdateShadowLink(ctx context.Context, in *UpdateShadowLinkRequest, opts ...grpc.CallOption) (*UpdateShadowLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShadowLinkResponse)
	err := c.cc.Invoke(ctx, ShadowLinkService_UpdateShadowLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowLinkServiceClient) FailOver(ctx context.Context, in *FailOverRequest, opts ...grpc.CallOption) (*FailOverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FailOverResponse)
	err := c.cc.Invoke(ctx, ShadowLinkService_FailOver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShadowLinkServiceServer is the server API for ShadowLinkService service.
// All implementations must embed UnimplementedShadowLinkServiceServer
// for forward compatibility.
type ShadowLinkServiceServer interface {
	CreateShadowLink(context.Context, *CreateShadowLinkRequest) (*CreateShadowLinkResponse, error)
	DeleteShadowLink(context.Context, *DeleteShadowLinkRequest) (*DeleteShadowLinkResponse, error)
	GetShadowLink(context.Context, *GetShadowLinkRequest) (*GetShadowLinkResponse, error)
	ListShadowLinks(context.Context, *ListShadowLinksRequest) (*ListShadowLinksResponse, error)
	UpdateShadowLink(context.Context, *UpdateShadowLinkRequest) (*UpdateShadowLinkResponse, error)
	// Fails over a shadow link or a single shadow topic
	FailOver(context.Context, *FailOverRequest) (*FailOverResponse, error)
	mustEmbedUnimplementedShadowLinkServiceServer()
}

// UnimplementedShadowLinkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShadowLinkServiceServer struct{}

func (UnimplementedShadowLinkServiceServer) CreateShadowLink(context.Context, *CreateShadowLinkRequest) (*CreateShadowLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShadowLink not implemented")
}
func (UnimplementedShadowLinkServiceServer) DeleteShadowLink(context.Context, *DeleteShadowLinkRequest) (*DeleteShadowLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShadowLink not implemented")
}
func (UnimplementedShadowLinkServiceServer) GetShadowLink(context.Context, *GetShadowLinkRequest) (*GetShadowLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShadowLink not implemented")
}
func (UnimplementedShadowLinkServiceServer) ListShadowLinks(context.Context, *ListShadowLinksRequest) (*ListShadowLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShadowLinks not implemented")
}
func (UnimplementedShadowLinkServiceServer) UpdateShadowLink(context.Context, *UpdateShadowLinkRequest) (*UpdateShadowLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShadowLink not implemented")
}
func (UnimplementedShadowLinkServiceServer) FailOver(context.Context, *FailOverRequest) (*FailOverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailOver not implemented")
}
func (UnimplementedShadowLinkServiceServer) mustEmbedUnimplementedShadowLinkServiceServer() {}
func (UnimplementedShadowLinkServiceServer) testEmbeddedByValue()                           {}

// UnsafeShadowLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShadowLinkServiceServer will
// result in compilation errors.
type UnsafeShadowLinkServiceServer interface {
	mustEmbedUnimplementedShadowLinkServiceServer()
}

func RegisterShadowLinkServiceServer(s grpc.ServiceRegistrar, srv ShadowLinkServiceServer) {
	// If the following call pancis, it indicates UnimplementedShadowLinkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShadowLinkService_ServiceDesc, srv)
}

func _ShadowLinkService_CreateShadowLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShadowLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowLinkServiceServer).CreateShadowLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShadowLinkService_CreateShadowLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowLinkServiceServer).CreateShadowLink(ctx, req.(*CreateShadowLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowLinkService_DeleteShadowLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShadowLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowLinkServiceServer).DeleteShadowLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShadowLinkService_DeleteShadowLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowLinkServiceServer).DeleteShadowLink(ctx, req.(*DeleteShadowLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowLinkService_GetShadowLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShadowLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowLinkServiceServer).GetShadowLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShadowLinkService_GetShadowLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowLinkServiceServer).GetShadowLink(ctx, req.(*GetShadowLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowLinkService_ListShadowLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShadowLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowLinkServiceServer).ListShadowLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShadowLinkService_ListShadowLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowLinkServiceServer).ListShadowLinks(ctx, req.(*ListShadowLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowLinkService_UpdateShadowLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShadowLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowLinkServiceServer).UpdateShadowLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShadowLinkService_UpdateShadowLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowLinkServiceServer).UpdateShadowLink(ctx, req.(*UpdateShadowLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowLinkService_FailOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailOverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowLinkServiceServer).FailOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShadowLinkService_FailOver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowLinkServiceServer).FailOver(ctx, req.(*FailOverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShadowLinkService_ServiceDesc is the grpc.ServiceDesc for ShadowLinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShadowLinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.core.admin.v2.ShadowLinkService",
	HandlerType: (*ShadowLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShadowLink",
			Handler:    _ShadowLinkService_CreateShadowLink_Handler,
		},
		{
			MethodName: "DeleteShadowLink",
			Handler:    _ShadowLinkService_DeleteShadowLink_Handler,
		},
		{
			MethodName: "GetShadowLink",
			Handler:    _ShadowLinkService_GetShadowLink_Handler,
		},
		{
			MethodName: "ListShadowLinks",
			Handler:    _ShadowLinkService_ListShadowLinks_Handler,
		},
		{
			MethodName: "UpdateShadowLink",
			Handler:    _ShadowLinkService_UpdateShadowLink_Handler,
		},
		{
			MethodName: "FailOver",
			Handler:    _ShadowLinkService_FailOver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/core/admin/v2/shadow_link.proto",
}
