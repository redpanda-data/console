syntax = "proto3";

package redpanda.api.console.v1alpha1;

import "redpanda/api/auth/v1/authorization.proto";
import "redpanda/api/dataplane/v1/security.proto";

// ListRolesRequest is the request for ListRoles.
message ListRolesRequest {
  redpanda.api.dataplane.v1.ListRolesRequest request = 1;
}

// ListRolesResponse is the response for ListRoles.
message ListRolesResponse {
  redpanda.api.dataplane.v1.ListRolesResponse response = 1;
}

// CreateRoleRequest is the request for CreateRole.
message CreateRoleRequest {
  redpanda.api.dataplane.v1.CreateRoleRequest request = 1;
}

// CreateRoleResponse is the response for CreateRole.
message CreateRoleResponse {
  redpanda.api.dataplane.v1.CreateRoleResponse response = 1;
}

// GetRoleRequest is the request for GetRole.
message GetRoleRequest {
  redpanda.api.dataplane.v1.GetRoleRequest request = 1;
}

// GetRoleResponse is the response to GetRole.
message GetRoleResponse {
  redpanda.api.dataplane.v1.GetRoleResponse response = 1;
}

// DeleteRoleRequest is the request for DeleteRole.
message DeleteRoleRequest {
  redpanda.api.dataplane.v1.DeleteRoleRequest request = 1;
}

// DeleteRoleResponse is the response for DeleteRole.
message DeleteRoleResponse {
  redpanda.api.dataplane.v1.DeleteRoleResponse response = 1;
}

// List role members for a role. That is user principals assigned to that role.
message ListRoleMembersRequest {
  redpanda.api.dataplane.v1.ListRoleMembersRequest request = 1;
}

// ListRoleMembersResponse is the response for ListRoleMembers.
message ListRoleMembersResponse {
  redpanda.api.dataplane.v1.ListRoleMembersResponse response = 1;
}

// UpdateRoleMembershipRequest is the request to UpdateRoleMembership.
message UpdateRoleMembershipRequest {
  redpanda.api.dataplane.v1.UpdateRoleMembershipRequest request = 1;
}

// UpdateRoleMembershipResponse is the response for UpdateRoleMembership.
message UpdateRoleMembershipResponse {
  redpanda.api.dataplane.v1.UpdateRoleMembershipResponse response = 1;
}

service SecurityService {
  // ListRoles lists all the roles based on optional filter.
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // GetRole retrieves the specific role.
  rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // DeleteRole deletes the role from the system.
  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // ListRoleMembership lists all the members assigned to a role based on optional filter.
  rpc ListRoleMembers(ListRoleMembersRequest) returns (ListRoleMembersResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // UpdateRoleMembership updates role membership.
  // Partially update role membership, adding or removing from a role
  // ONLY those members listed in the “add” or “remove” fields, respectively.
  // Adding a member that is already assigned to the role (or removing one that is not) is a no-op,
  // and the rest of the members will be added and removed and reported.
  rpc UpdateRoleMembership(UpdateRoleMembershipRequest) returns (UpdateRoleMembershipResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }
}
