syntax = "proto3";

package redpanda.api.console.v1alpha1;

import "buf/validate/validate.proto";
import "redpanda/api/auth/v1/authorization.proto";

message License {
  enum Source {
    SOURCE_UNSPECIFIED = 0;
    SOURCE_REDPANDA_CONSOLE = 1;
    SOURCE_REDPANDA_CORE = 2;
  }

  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_COMMUNITY = 1;
    TYPE_TRIAL = 2;
    TYPE_ENTERPRISE = 3;
  }

  // Source is where the license is used (e.g. Redpanda Cluster, Console).
  Source source = 1;
  // Type is the type of license (community, trial, enterprise).
  Type type = 2;
  // UnixEpochSeconds is the timestamp when the license is going to expire.
  int64 expires_at = 3;
}

message ListLicensesRequest {}

message ListLicensesResponse {
  repeated License licenses = 1;
  bool violation = 2;
  bool require_gating = 3;
}

message SetLicenseRequest {
  string license = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 32,
    (buf.validate.field).string.max_len = 1024
  ];
}

message SetLicenseResponse {
  License license = 1;
}

message ListEnterpriseFeaturesRequest {}

message ListEnterpriseFeaturesResponse {
  enum LicenseStatus {
    LICENSE_STATUS_UNSPECIFIED = 0;
    LICENSE_STATUS_VALID = 1;
    LICENSE_STATUS_EXPIRED = 2;
    LICENSE_STATUS_NOT_PRESENT = 3;
  }

  // Feature is an enterprise feature and a bool indicating whether it's in use.
  message Feature {
    string name = 1;
    bool enabled = 2;
  }

  // LicenseStatus reports the status of the installed license in the Redpanda cluster.
  LicenseStatus license_status = 1;

  // Violation is true if license_status is not 'valid' AND one or more enterprise features are enabled
  bool violation = 2;

  // Features is a ist of enterprise features (name and whether in use)
  repeated Feature features = 3;
}

service LicenseService {
  // ListLicenses lists all the roles based on optional filter.
  rpc ListLicenses(ListLicensesRequest) returns (ListLicensesResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_ADMIN
    };
  }

  // SetLicense installs a new license on the Redpanda cluster.
  // This endpoint only works if the Redpanda Admin API is configured.
  rpc SetLicense(SetLicenseRequest) returns (SetLicenseResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // ListEnterpriseFeatures reports the license status and Redpanda enterprise features in use.
  // This can only be reported if the Redpanda Admin API is configured and supports this request.
  rpc ListEnterpriseFeatures(ListEnterpriseFeaturesRequest) returns (ListEnterpriseFeaturesResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_ADMIN
    };
  }
}
