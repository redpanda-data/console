syntax = "proto3";

package redpanda.api.console.v1alpha1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "redpanda/api/auth/v1/authorization.proto";
import "redpanda/core/admin/v2/shadow_link.proto";

message CreateShadowLinkResponse {
  ShadowLink shadow_link = 1;
}

message GetShadowLinkRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
}

message GetShadowLinkResponse {
  ShadowLink shadow_link = 1;
}

message ShadowLink {
  // Return name, configuration, and overall state
  string name = 1;
  string uid = 2;
  core.admin.v2.ShadowLinkConfigurations configurations = 3;
  core.admin.v2.ShadowLinkState state = 4;
}

message ListShadowLinksRequest {
  message Filter {
    // Substring match on shadow link name. Case-sensitive.
    string name_contains = 1 [
      (buf.validate.field).string.max_len = 128,
      (buf.validate.field).string.pattern = "^[a-zA-Z0-9._\\-]*$"
    ];
  }

  Filter filter = 1;

  int32 page_size = 2 [
    (buf.validate.field).int32 = {
      gte: -1
      lte: 1000
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Limit the paginated response to a number of items. Defaults to 100. Use -1 to disable pagination."
      minimum: -1
      maximum: 1000
    }
  ];

  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 3;
}

message ListShadowLinksResponse {
  message ShadowLink {
    string name = 1;
    core.admin.v2.ShadowLinkState state = 2;
    repeated string bootstrap_servers = 3;
  }

  repeated ShadowLink shadow_links = 1;
  string next_page_token = 2;
}

message UpdateShadowLinkResponse {}

message DeleteShadowLinkResponse {}

message ListShadowLinkTopicsRequest {
  string shadow_link_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];

  message Filter {
    // Substring match on shadow topic name. Case-sensitive.
    string topic_name_contains = 1 [
      (buf.validate.field).string.max_len = 249,
      (buf.validate.field).string.pattern = "^[a-zA-Z0-9._\\-]*$"
    ];
  }

  Filter filter = 2;

  int32 page_size = 3 [
    (buf.validate.field).int32 = {
      gte: -1
      lte: 1000
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Limit the paginated response to a number of items. Defaults to 100. Use -1 to disable pagination."
      minimum: -1
      maximum: 1000
    }
  ];

  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 4;
}

message ShadowTopic {
  string topic_name = 1;
  core.admin.v2.ShadowTopicState state = 2;
  int64 total_lag = 3;
  int32 total_partitions = 4;
}

message ListShadowLinkTopicsResponse {
  // Shadow topic status information
  repeated ShadowTopic shadow_topics = 1;

  // Token to retrieve the next page
  string next_page_token = 2;
}

message GetShadowTopicRequest {
  string shadow_link_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];

  string topic_name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
}

message GetShadowTopicResponse {
  // Partition-level information
  message PartitionInfo {
    int64 partition_id = 1;
    int64 source_last_stable_offset = 2;
    int64 high_watermark = 3;
    int64 source_high_watermark = 4;
    int64 lag = 5;
    google.protobuf.Timestamp source_last_updated_timestamp = 6;
  }

  string topic_name = 1;
  core.admin.v2.ShadowTopicState state = 2;
  int64 total_lag = 3;
  int64 total_partitions = 4;
  repeated PartitionInfo partitions = 5;
}

service ShadowLinkService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Shadow Links"
    description: "Manage Redpanda shadow links for disaster recovery and failover."
  };

  rpc CreateShadowLink(core.admin.v2.CreateShadowLinkRequest) returns (CreateShadowLinkResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/shadowlink"
      body: "shadow_link"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Shadow Link"
      description: "Create a new shadow link to replicate topics from a source cluster."
      responses: {
        key: "201"
        value: {
          description: "Shadow link created"
          schema: {
            json_schema: {ref: ".redpanda.api.console.v1alpha1.CreateShadowLinkResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  rpc GetShadowLink(GetShadowLinkRequest) returns (GetShadowLinkResponse) {
    option (google.api.http) = {get: "/v1alpha1/shadowlink/{name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Shadow Link"
      description: "Retrieve details of a specific shadow link by name."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.console.v1alpha1.GetShadowLinkResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_ADMIN
    };
  }

  rpc ListShadowLinks(ListShadowLinksRequest) returns (ListShadowLinksResponse) {
    option (google.api.http) = {get: "/v1alpha1/shadowlink"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Shadow Links"
      description: "List all shadow links in the cluster. Optional: filter based on shadow link name."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.console.v1alpha1.ListShadowLinksResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_ADMIN
    };
  }

  rpc UpdateShadowLink(core.admin.v2.UpdateShadowLinkRequest) returns (UpdateShadowLinkResponse) {
    option (google.api.http) = {
      patch: "/v1alpha1/shadowlink/{shadow_link.name}"
      body: "shadow_link"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Shadow Link"
      description: "Update an existing shadow link configuration."
      responses: {
        key: "200"
        value: {
          description: "Shadow link updated"
          schema: {
            json_schema: {ref: ".redpanda.api.console.v1alpha1.UpdateShadowLinkResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  rpc DeleteShadowLink(core.admin.v2.DeleteShadowLinkRequest) returns (DeleteShadowLinkResponse) {
    option (google.api.http) = {delete: "/v1alpha1/shadowlink/{name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Shadow Link"
      description: "Delete a shadow link by name."
      responses: {
        key: "204"
        value: {description: "Shadow link deleted"}
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  rpc ListShadowLinkTopics(ListShadowLinkTopicsRequest) returns (ListShadowLinkTopicsResponse) {
    option (google.api.http) = {get: "/v1alpha1/shadowlink/{shadow_link_name}/topic"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Shadow Link Topics"
      description: "List shadow topic status information for a specific shadow link. Optional: filter based on topic name."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.console.v1alpha1.ListShadowLinkTopicsResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_ADMIN
    };
  }

  rpc GetShadowTopic(GetShadowTopicRequest) returns (GetShadowTopicResponse) {
    option (google.api.http) = {get: "/v1alpha1/shadowlink/{shadow_link_name}/topic/{topic_name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Shadow Topic"
      description: "Retrieve details of a specific shadow topic within a shadow link."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.console.v1alpha1.GetShadowTopicResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_ADMIN
    };
  }
}
