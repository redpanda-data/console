syntax = "proto3";

package redpanda.api.console.v1alpha1;

import "buf/validate/validate.proto";
import "google/api/field_behavior.proto";
import "redpanda/api/auth/v1/authorization.proto";

enum SASLMechanism {
  // The SASL mechanism is unspecified.
  SASL_MECHANISM_UNSPECIFIED = 0;
  // The SASL mechanism using SCRAM-SHA-256.
  SASL_MECHANISM_SCRAM_SHA_256 = 1;
  // The SASL mechanism using SCRAM-SHA-512.
  SASL_MECHANISM_SCRAM_SHA_512 = 2;
}

message LoginSaslScramRequest {
  // The username for the login request.
  string username = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (google.api.field_behavior) = REQUIRED
  ];
  // The password for the login request.
  string password = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (google.api.field_behavior) = REQUIRED
  ];
  // The SASL mechanism to be used for authentication.
  SASLMechanism mechanism = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum = {
      defined_only: true
      not_in: [0]
    },
    (google.api.field_behavior) = REQUIRED
  ];

  // Whether or not the session token should be returned in the body.
  bool return_token = 4;
}

message LoginSaslScramResponse {
  // SessionToken is only set if return_token is set to true in the request.
  string session_token = 1;
}

message UserIdentity {
  string display_name = 1;
  AuthenticationMethod auth_method = 2;
}

enum AuthenticationMethod {
  // The authentication method is unspecified.
  AUTHENTICATION_METHOD_UNSPECIFIED = 0;
  // None is returned if authentication is disabled.
  AUTHENTICATION_METHOD_NONE = 1;
  // The authentication method using OpenID Connect.
  AUTHENTICATION_METHOD_OIDC = 2;
  // The authentication method using plain username/password.
  AUTHENTICATION_METHOD_BASIC = 3;
  // The authentication method for Redpanda Cloud.
  AUTHENTICATION_METHOD_REDPANDA_CLOUD = 4;
}

message ListAuthenticationMethodsRequest {}

message ListAuthenticationMethodsResponse {
  // The list of available authentication methods.
  repeated AuthenticationMethod methods = 1 [(google.api.field_behavior) = REQUIRED];
}

// Kafka ACL operation enumerates actions the user can perform on a Kafka cluster. The capabilties
// can apply globally or for specific resources (such as topics).
enum KafkaAclOperation {
  KAFKA_ACL_OPERATION_UNSPECIFIED = 0;
  KAFKA_ACL_OPERATION_READ = 1;
  KAFKA_ACL_OPERATION_WRITE = 2;
  KAFKA_ACL_OPERATION_CREATE = 3;
  KAFKA_ACL_OPERATION_DELETE = 4;
  KAFKA_ACL_OPERATION_ALTER = 5;
  KAFKA_ACL_OPERATION_DESCRIBE = 6;
  KAFKA_ACL_OPERATION_CLUSTER_ACTION = 7;
  KAFKA_ACL_OPERATION_DESCRIBE_CONFIGS = 8;
  KAFKA_ACL_OPERATION_ALTER_CONFIGS = 9;
  KAFKA_ACL_OPERATION_IDEMPOTENT_WRITE = 10;
  KAFKA_ACL_OPERATION_CREATE_TOKENS = 11;
  KAFKA_ACL_OPERATION_DESCRIBE_TOKENS = 12;
}

// Schema Registry-specific capabilities.
enum SchemaRegistryCapability {
  SCHEMA_REGISTRY_CAPABILITY_UNSPECIFIED = 0;
  SCHEMA_REGISTRY_CAPABILITY_READ = 1;
  SCHEMA_REGISTRY_CAPABILITY_WRITE = 2;
  SCHEMA_REGISTRY_CAPABILITY_DELETE = 3;
}

// Redpanda cluster-wide capabilities.
enum RedpandaCapability {
  REDPANDA_CAPABILITY_UNSPECIFIED = 0;
  REDPANDA_CAPABILITY_MANAGE_TRANSFORMS = 1;
  REDPANDA_CAPABILITY_MANAGE_DEBUG_BUNDLE = 2;
  REDPANDA_CAPABILITY_MANAGE_REDPANDA_USERS = 3;
  REDPANDA_CAPABILITY_MANAGE_RBAC = 4;
  REDPANDA_CAPABILITY_MANAGE_LICENSE = 5;
}

message GetIdentityRequest {}

message GetIdentityResponse {
  message Permissions {
    repeated KafkaAclOperation kafka_cluster_operations = 4;
    repeated SchemaRegistryCapability schema_registry = 5;
    repeated RedpandaCapability redpanda = 6;
  }

  string display_name = 1;
  AuthenticationMethod authentication_method = 2;
  string avatar_url = 3;
  Permissions permissions = 4;
}

message ListConsoleUsersRequest {}

message ListConsoleUsersResponse {
  message User {
    string name = 1;
    AuthenticationMethod auth_method = 2;
    string role = 3;
  }

  repeated User users = 1;
}

service AuthenticationService {
  // RPC to login using SASL-SCRAM.
  rpc LoginSaslScram(LoginSaslScramRequest) returns (LoginSaslScramResponse) {}
  // RPC to list available authentication methods.
  rpc ListAuthenticationMethods(ListAuthenticationMethodsRequest) returns (ListAuthenticationMethodsResponse) {}
  // GetIdentity returns user information for the currently logged-in user.
  rpc GetIdentity(GetIdentityRequest) returns (GetIdentityResponse) {}
  // ListConsoleUsers returns a list of all authorized Console users.
  rpc ListConsoleUsers(ListConsoleUsersRequest) returns (ListConsoleUsersResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_CONSOLE
    };
  }
}
