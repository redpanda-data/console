syntax = "proto3";

package redpanda.api.console.v1alpha1;

import "google/api/field_behavior.proto";
import "redpanda/api/auth/v1/authorization.proto";

// ClusterStatusService provides atomic endpoints to retrieve status
// information for each cluster component. Each RPC returns a complete
// resource or a proper gRPC error if the underlying check failed.
service ClusterStatusService {
  // GetKafkaInfo returns general Kafka cluster information that can be
  // retrieved via the Kafka API.
  rpc GetKafkaInfo(GetKafkaInfoRequest) returns (GetKafkaInfoResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_KAFKA
    };
  }

  // GetKafkaAuthorizerInfo returns information about Kafka's authorizer.
  // If the authorizer cannot be queried (for example due to permission errors),
  // this RPC should return a gRPC error.
  rpc GetKafkaAuthorizerInfo(GetKafkaAuthorizerInfoRequest) returns (GetKafkaAuthorizerInfoResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_KAFKA
    };
  }

  // GetRedpandaInfo returns information from the Redpanda admin API.
  rpc GetRedpandaInfo(GetRedpandaInfoRequest) returns (GetRedpandaInfoResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_ADMIN
    };
  }

  rpc GetRedpandaPartitionBalancerStatus(GetRedpandaPartitionBalancerStatusRequest) returns (GetRedpandaPartitionBalancerStatusResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_ADMIN
    };
  }

  // GetConsoleInfo returns version and build information about the Console.
  rpc GetConsoleInfo(GetConsoleInfoRequest) returns (GetConsoleInfoResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_CONSOLE
    };
  }

  // GetKafkaConnectInfo returns information about the configured Kafka Connect clusters.
  rpc GetKafkaConnectInfo(GetKafkaConnectInfoRequest) returns (GetKafkaConnectInfoResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_KAFKA_CONNECT
    };
  }

  // GetSchemaRegistryInfo returns information about the Schema Registry.
  rpc GetSchemaRegistryInfo(GetSchemaRegistryInfoRequest) returns (GetSchemaRegistryInfoResponse) {
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_SCHEMA_REGISTRY
    };
  }
}

message GetKafkaInfoRequest {}

// KafkaInfo contains general Kafka cluster information.
message GetKafkaInfoResponse {
  // The health status for Kafka.
  ComponentStatus status = 1;

  // Version is the Kafka API version.
  string version = 2;

  // Distribution indicates the software flavor (e.g. Apache Kafka, Redpanda).
  KafkaDistribution distribution = 3;

  // BrokersOnline is the number of brokers currently online.
  int32 brokers_online = 4;

  // BrokersExpected is the number of brokers expected.
  int32 brokers_expected = 5;

  // TopicsCount is the total number of topics.
  int32 topics_count = 6;

  // PartitionsCount is the total number of partitions.
  int32 partitions_count = 7;

  // ReplicasCount is the total number of replicas.
  int32 replicas_count = 8;

  // ControllerID is the ID of the controller broker.
  int32 controller_id = 9;

  // Brokers lists details of individual Kafka brokers.
  repeated KafkaBroker brokers = 10;

  // ClusterID is the unique identifier for the Kafka cluster.
  string cluster_id = 11;
}

message GetKafkaAuthorizerInfoRequest {}

message GetKafkaAuthorizerInfoResponse {
  // ACLCount is the number of ACLs created.
  int32 acl_count = 1;
}

message GetRedpandaInfoRequest {}

// RedpandaInfo contains information provided by the Redpanda admin API.
message GetRedpandaInfoResponse {
  // Version is the Redpanda cluster version.
  string version = 1;

  // UserCount is the number of users.
  int32 user_count = 2;
}

message GetRedpandaPartitionBalancerStatusRequest {}

message GetRedpandaPartitionBalancerStatusResponse {
  // Status describes the current partition balancer state.
  Status status = 1;

  // Violations are the partition balancer violations.
  Violations violations = 2;

  // SecondsSinceLastTick is the last time the partition balancer ran.
  int32 seconds_since_last_tick = 3;

  // CurrentReassignmentsCount is the current number of partition
  // reassignments in progress.
  int32 current_reassignments_count = 4;

  // PartitionsPendingForceRecovery specifies the number of partitions that
  // are yet to be force recovered. This is optional because not all Redpanda
  // versions include this parameter.
  optional int32 partitions_pending_force_recovery_count = 5;

  // PartitionsPendingRecoveryList is a sample list of partitions pending
  // force recovery (limit capped to 10).
  repeated string partitions_pending_recovery_list = 6;

  enum Status {
    // STATUS_UNSPECIFIED is the default type.
    STATUS_UNSPECIFIED = 0;

    // The balancer is disabled.
    STATUS_OFF = 1;

    // The balancer is active but there is nothing to do.
    STATUS_READY = 2;

    // The balancer is starting but has not run yet.
    STATUS_STARTING = 3;

    // The balancer is active and is in the process of
    // scheduling partition movements.
    STATUS_IN_PROGRESS = 4;

    // There are some violations, but for some reason, the
    // balancer cannot make progress in mitigating them.
    STATUS_STALLED = 5;
  }

  // Violations describes violations for the partition auto balancer.
  message Violations {
    // UnavailableNodes are the nodes that have been unavailable after a time
    // set by 'partition_autobalancing_node_availability_timeout_sec' property.
    repeated int32 unavailable_nodes = 1;

    // OverDiskLimitNodes are the nodes that surpassed the threshold of used
    // disk percentage set by 'partition_autobalancing_max_disk_usage_percent'
    // property.
    repeated int32 over_disk_limit_nodes = 2;
  }
}

message GetConsoleInfoRequest {}

// ConsoleInfo contains version and build information about Redpanda Console.
message GetConsoleInfoResponse {
  // Console version.
  string version = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // BuiltAt indicates the build time.
  string built_at = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message GetKafkaConnectInfoRequest {}

message GetKafkaConnectInfoResponse {
  // Clusters contains details for each Kafka Connect cluster.
  repeated KafkaConnectCluster clusters = 1;

  // KafkaConnectCluster represents a single Kafka Connect cluster.
  message KafkaConnectCluster {
    // Name is the Kafka Connect cluster name.
    string name = 1;

    // Status indicates the health of the cluster.
    ComponentStatus status = 2;

    // Host is the address of the Kafka Connect cluster.
    string host = 3;

    // Version is the version of the Kafka Connect cluster.
    string version = 4;

    // InstalledPlugins is the number of plugins installed.
    int32 installed_plugins_count = 5;
  }
}

message GetSchemaRegistryInfoRequest {}

// SchemaRegistryInfo contains information about the configured Schema Registry.
message GetSchemaRegistryInfoResponse {
  // Status indicates the health status of the Schema Registry.
  ComponentStatus status = 1;

  // RegisteredSubjectsCount is the number of subjects registered.
  int32 registered_subjects_count = 2;
}

// -----------------------------------------------------------------------------
// Shared Types
// -----------------------------------------------------------------------------

// ComponentStatus provides health status information common to all components.
message ComponentStatus {
  // Status is the overall health.
  StatusType status = 1;

  // StatusReason provides details if the component is not healthy.
  string status_reason = 2;
}

// KafkaBroker represents details about a single Kafka broker.
message KafkaBroker {
  // BrokerID is the unique identifier of the broker.
  int32 broker_id = 1;

  // Host is the address or hostname of the broker.
  string host = 2;

  // RackID (availability zone) configured for this broker.
  optional string rack_id = 3;
}

// -----------------------------------------------------------------------------
// Enums
// -----------------------------------------------------------------------------

// StatusType describes the health state of a component.
enum StatusType {
  // STATUS_TYPE_UNSPECIFIED is the default value.
  STATUS_TYPE_UNSPECIFIED = 0;
  // STATUS_TYPE_HEALTHY indicates the component is healthy.
  STATUS_TYPE_HEALTHY = 1;
  // STATUS_TYPE_DEGRADED indicates the component is partially impaired.
  STATUS_TYPE_DEGRADED = 2;
  // STATUS_TYPE_UNHEALTHY indicates the component is unhealthy or unreachable.
  STATUS_TYPE_UNHEALTHY = 3;
}

// KafkaDistribution describes the Kafka software flavor.
enum KafkaDistribution {
  // KAFKA_DISTRIBUTION_UNSPECIFIED is the default value.
  KAFKA_DISTRIBUTION_UNSPECIFIED = 0;
  // KAFKA_DISTRIBUTION_UNKNOWN represents a Kafka distribution that is neither Redpanda
  // nor Apache Kafka.
  KAFKA_DISTRIBUTION_UNKNOWN = 1;
  // KAFKA_DISTRIBUTION_APACHE_KAFKA indicates an Apache Kafka implementation.
  KAFKA_DISTRIBUTION_APACHE_KAFKA = 2;
  // KAFKA_DISTRIBUTION_REDPANDA indicates a Redpanda implementation.
  KAFKA_DISTRIBUTION_REDPANDA = 3;
}

enum LicenseType {
  LICENSE_TYPE_UNSPECIFIED = 0;
  LICENSE_TYPE_COMMUNITY = 1;
  LICENSE_TYPE_ENTERPRISE = 2;
  LICENSE_TYPE_TRIAL = 3;
}

enum LicenseSource {
  LICENSE_SOURCE_UNSPECIFIED = 0;
  LICENSE_SOURCE_CLUSTER = 1;
  LICENSE_SOURCE_CONSOLE = 2;
}
