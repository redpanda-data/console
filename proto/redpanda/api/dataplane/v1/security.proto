syntax = "proto3";

package redpanda.api.dataplane.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "redpanda/api/auth/v1/authorization.proto";

// Role defines a role in the system.
message Role {
  // The name of the role.
  string name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[^,=]+$"
  ];
}

// ListRolesRequest is the request for ListRoles.
message ListRolesRequest {
  // Filter options.
  message Filter {
    // Filter results only roles named with the prefix.
    string name_prefix = 1 [
      (buf.validate.field).string.max_len = 128,
      (buf.validate.field).string.pattern = "^([^,=]*)$"
    ];

    // Filter results to only roles with names which contain the string.
    string name_contains = 2 [
      (buf.validate.field).string.max_len = 128,
      (buf.validate.field).string.pattern = "^([^,=]*)$"
    ];

    // Return only roles assigned to this principal.
    string principal = 3 [(buf.validate.field).string.max_len = 128];
  }

  // Optional filter.
  optional Filter filter = 1;

  // Page size.
  int32 page_size = 2 [(buf.validate.field).int32 = {
    gte: -1
    lte: 1000
  }];

  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 3;
}

// ListRolesResponse is the response for ListRoles.
message ListRolesResponse {
  // The roles in the system.
  repeated Role roles = 1;

  // Token to retrieve the next page.
  string next_page_token = 2;
}

// CreateRoleRequest is the request for CreateRole.
message CreateRoleRequest {
  // The role to create.
  Role role = 1;
}

// CreateRoleResponse is the response for CreateRole.
message CreateRoleResponse {
  // The role.
  Role role = 1;
}

// CreateRoleRequest is the request for CreateRole.
message GetRoleRequest {
  // The role name.
  string role_name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[^,=]+$"
  ];
}

// GetRoleResponse is the response to GetRole.
message GetRoleResponse {
  // The Role.
  Role role = 1;

  // Members assigned to the role.
  repeated RoleMembership members = 2;
}

// DeleteRoleRequest is the request for DeleteRole.
message DeleteRoleRequest {
  // The role name.
  string role_name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[^,=]+$"
  ];

  // Whether to delete the ACLs bound to the role.
  bool delete_acls = 2;
}

// DeleteRoleResponse is the response for DeleteRole.
message DeleteRoleResponse {}

// List role members for a role. That is user principals assigned to that role.
message ListRoleMembersRequest {
  // Filter options.
  message Filter {
    // Filter results to only members with names which contain the string.
    string name_contains = 1 [(buf.validate.field).string.max_len = 128];
  }

  // The role name.
  string role_name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[^,=]+$"
  ];

  // Optional filter.
  optional Filter filter = 2;

  // Page size.
  int32 page_size = 3 [(buf.validate.field).int32 = {
    gte: -1
    lte: 1000
  }];

  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 4;
}

// ListRoleMembersResponse is the response for ListRoleMembers.
message ListRoleMembersResponse {
  // The role name.
  string role_name = 1;

  // Members assigned to the role.
  repeated RoleMembership members = 2;

  // Token to retrieve the next page.
  string next_page_token = 3;
}

// RoleMembership is the role membership.
message RoleMembership {
  // The name of the principal assigned to the role.
  string principal = 1;
}

// UpdateRoleMembershipRequest is the request to UpdateRoleMembership.
message UpdateRoleMembershipRequest {
  // The role name.
  string role_name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[^,=]+$"
  ];

  // Create the role if it doesn't already exist.
  // If the role is created in this way, the “add” list will be respected, but the “remove” list will be ignored.
  bool create = 2;

  // Members to assign to the role.
  repeated RoleMembership add = 3;

  // Members to remove from the role.
  repeated RoleMembership remove = 4;
}

// UpdateRoleMembershipResponse is the response for UpdateRoleMembership.
message UpdateRoleMembershipResponse {
  // The role name.
  string role_name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[^,=]+$"
  ];

  // Members assigned to the role.
  repeated RoleMembership added = 2;

  // Members removed from the role.
  repeated RoleMembership removed = 3;
}

// Schema Registry ACLs
// ResourceType defines the type of resource an ACL applies to.
enum ResourceType {
  // Unspecified resource type.
  RESOURCE_TYPE_UNSPECIFIED = 0;
  // Registry resource type.
  RESOURCE_TYPE_REGISTRY = 1;
  // Subject (schema) resource type.
  RESOURCE_TYPE_SUBJECT = 2;
}

// PatternType defines how the resource name is matched.
enum PatternType {
  // Unspecified pattern type.
  PATTERN_TYPE_UNSPECIFIED = 0;
  // Literal pattern matches a resource name exactly.
  PATTERN_TYPE_LITERAL = 1;
  // Prefixed pattern matches resource names by prefix.
  PATTERN_TYPE_PREFIXED = 2;
}

// Operation defines the action allowed or denied by an ACL.
enum Operation {
  // Unspecified operation.
  OPERATION_UNSPECIFIED = 0;
  // ALL operations.
  OPERATION_ALL = 1;
  // READ operation.
  OPERATION_READ = 2;
  // WRITE operation.
  OPERATION_WRITE = 3;
  // REMOVE operation.
  OPERATION_REMOVE = 4;
  // DESCRIBE operation.
  OPERATION_DESCRIBE = 5;
  // DESCRIBE_CONFIGS operation.
  OPERATION_DESCRIBE_CONFIGS = 6;
  // ALTER operation.
  OPERATION_ALTER = 7;
  // ALTER_CONFIGS operation.
  OPERATION_ALTER_CONFIGS = 8;
}

// Permission defines whether an ACL allows or denies an operation.
enum Permission {
  // Unspecified permission.
  PERMISSION_UNSPECIFIED = 0;
  // ALLOW permission permits the operation.
  PERMISSION_ALLOW = 1;
  // DENY permission denies the operation.
  PERMISSION_DENY = 2;
}

// ACL represents an individual access control rule.
message SchemaRegistryACL {
  // The principal (user/service) this ACL applies to.
  string principal = 1;

  // The resource name this ACL applies to.
  string resource = 2;

  // The type of resource this ACL applies to.
  ResourceType resource_type = 3;

  // How the resource name should be matched.
  PatternType pattern_type = 4;

  // The host this ACL applies to.
  string host = 5;

  // The operation this ACL controls.
  Operation operation = 6;

  // Whether this ACL allows or denies the operation.
  Permission permission = 7;
}

// ListSchemaRegistryACLsRequest is the request for ListSchemaRegistryACLs.
message ListSchemaRegistryACLsRequest {
  // Filter options.
  message Filter {
    // Filter by principal name.
    string principal = 1;

    // Filter by resource name.
    string resource = 2;

    // Filter by resource type.
    ResourceType resource_type = 3;

    // Filter by pattern type.
    PatternType pattern_type = 4;

    // Filter by host.
    string host = 5;

    // Filter by operation.
    Operation operation = 6;

    // Filter by permission.
    Permission permission = 7;
  }

  // Optional filter.
  repeated Filter filter = 1;
}

// ListSchemaRegistryACLsResponse is the response for ListSchemaRegistryACLs.
message ListSchemaRegistryACLsResponse {
  // The Schema Registry ACLs.
  repeated SchemaRegistryACL acls = 1;
}

// CreateSchemaRegistryACLsRequest is the request for CreateSchemaRegistryACLs.
message CreateSchemaRegistryACLsRequest {
  // The ACLs to create.
  repeated SchemaRegistryACL acls = 1;
}

// CreateSchemaRegistryACLsResponse is the response for CreateSchemaRegistryACLs.
message CreateSchemaRegistryACLsResponse {}

// DeleteSchemaRegistryACLsRequest is the request for DeleteSchemaRegistryACLs.
message DeleteSchemaRegistryACLsRequest {
  // The ACLs to delete. Only exact matches will be deleted.
  repeated SchemaRegistryACL acls = 1;
}

// DeleteSchemaRegistryACLsResponse is the response for DeleteSchemaRegistryACLs.
message DeleteSchemaRegistryACLsResponse {}

service SecurityService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Security"
    description: "Manage Redpanda roles and Schema Registry ACLs."
  };

  // ListRoles lists all the roles based on optional filter.
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {get: "/v1/roles"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Roles"
      description: "List roles. Optional: filter based on role name and principal."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.ListRolesResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
    option (google.api.http) = {
      post: "/v1/roles"
      body: "role"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Role"
      description: "Create a role."
      responses: {
        key: "201"
        value: {
          description: "Role created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.CreateRoleResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // GetRole retrieves the specific role.
  rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {
    option (google.api.http) = {get: "/v1/roles/{role_name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Role"
      description: "Get a role."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.GetRoleResponse"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // DeleteRole deletes the role from the system.
  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
    option (google.api.http) = {delete: "/v1/roles/{role_name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Role"
      description: "Delete a Role."
      responses: {
        key: "204"
        value: {
          description: "Role deleted successfully"
          schema: {}
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // ListRoleMembership lists all the members assigned to a role based on optional filter.
  rpc ListRoleMembers(ListRoleMembersRequest) returns (ListRoleMembersResponse) {
    option (google.api.http) = {get: "/v1/roles/{role_name}/members"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Role Members"
      description: "List members assigned to a role."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.ListRoleMembersResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // UpdateRoleMembership updates role membership.
  // Partially update role membership, adding or removing from a role
  // ONLY those members listed in the “add” or “remove” fields, respectively.
  // Adding a member that is already assigned to the role (or removing one that is not) is a no-op,
  // and the rest of the members will be added and removed and reported.
  rpc UpdateRoleMembership(UpdateRoleMembershipRequest) returns (UpdateRoleMembershipResponse) {
    option (google.api.http) = {
      put: "/v1/roles/{role_name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Role"
      description: "Update a role."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.UpdateRoleMembershipResponse"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // ListSchemaRegistryACLs lists Schema Registry ACLs based on optional filters.
  rpc ListSchemaRegistryACLs(ListSchemaRegistryACLsRequest) returns (ListSchemaRegistryACLsResponse) {
    option (google.api.http) = {get: "/v1/schema-registry/acls"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Schema Registry ACLs"
      description: "List Schema Registry ACLs. Optional: filter based on principal, resource, operation, etc."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.ListSchemaRegistryACLsResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // CreateSchemaRegistryACLs creates new Schema Registry ACL entries.
  rpc CreateSchemaRegistryACLs(CreateSchemaRegistryACLsRequest) returns (CreateSchemaRegistryACLsResponse) {
    option (google.api.http) = {
      post: "/v1/schema-registry/acls"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Schema Registry ACLs"
      description: "Create new Schema Registry ACL entries."
      responses: {
        key: "201"
        value: {
          description: "Schema Registry ACLs created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.CreateSchemaRegistryACLsResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }

  // DeleteSchemaRegistryACLs deletes existing Schema Registry ACL entries.
  rpc DeleteSchemaRegistryACLs(DeleteSchemaRegistryACLsRequest) returns (DeleteSchemaRegistryACLsResponse) {
    option (google.api.http) = {
      post: "/v1/schema-registry/acls:remove"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove Schema Registry ACLs"
      description: "Relete existing Schema Registry ACL entries. Only exact matches will be removed."
      responses: {
        key: "200"
        value: {
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.DeleteSchemaRegistryACLsResponse"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_ADMIN
      api: API_REDPANDA_ADMIN
    };
  }
}
