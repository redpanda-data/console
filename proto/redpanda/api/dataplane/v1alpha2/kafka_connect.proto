syntax = "proto3";

package redpanda.api.dataplane.v1alpha2;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// State of a connector or one of its tasks, as described in the [Kafka Connect documentation](https://kafka.apache.org/documentation.html#connect_administration). Takes into account not just the state of the connector instance itself, but also the tasks within the connector.
enum ConnectorHolisticState {
  CONNECTOR_HOLISTIC_STATE_UNSPECIFIED = 0;
  // The connector or task has been administratively paused.
  CONNECTOR_HOLISTIC_STATE_PAUSED = 1;
  // The connector or task is restarting.
  CONNECTOR_HOLISTIC_STATE_RESTARTING = 2;
  // The connector is destroyed, regardless of any tasks.
  CONNECTOR_HOLISTIC_STATE_DESTROYED = 3;
  // The connector or task has been stopped.
  CONNECTOR_HOLISTIC_STATE_STOPPED = 4;
  // - The connector or task has not yet been assigned to a worker,
  // - THe connector is running, but there are unassigned tasks.
  CONNECTOR_HOLISTIC_STATE_UNASSIGNED = 5;
  // The connector is running, > 0 tasks, all of them in running state.
  CONNECTOR_HOLISTIC_STATE_HEALTHY = 6;
  // - The connector has failed,
  // - The connector is running, but has no tasks,
  // - Connector is running and has tasks, but all tasks have failed.
  CONNECTOR_HOLISTIC_STATE_UNHEALTHY = 7;
  // The connector is running and has tasks, and at least one task, but not all, have failed.
  CONNECTOR_HOLISTIC_STATE_DEGRADED = 8;
  // The connector or task state could not be determined.
  CONNECTOR_HOLISTIC_STATE_UNKNOWN = 9;
}

message ConnectorPlugin {
  string type = 1;
  string version = 2;
  string class = 3;
}

message ConnectCluster {
  message Info {
    // Connect worker version.
    string version = 1;
    // The git commit ID of the connect worker source code.
    string commit = 2;
    // Cluster ID.
    string kafka_cluster_id = 3;
  }
  // Unique name of connect cluster. For Redpanda Cloud, the value is `redpanda`.
  string name = 1;
  // The host address of the Kafka Connect cluster.
  string address = 2;
  Info info = 3;
  repeated ConnectorPlugin plugins = 4;
}

message ConnectorStatus {
  message Connector {
    // State of the connector instance.
    string state = 1;
    // ID of worker that the connector is assigned to.
    string worker_id = 2;
    // String value of stack trace.
    string trace = 3;
  }
  // Name of connector.
  string name = 1;
  Connector connector = 2;
  // Status of connector tasks. For more information, see the [https://docs.redpanda.com/current/deploy/deployment-option/cloud/managed-connectors/monitor-connectors/#connector-tasks](Monitor Connectors) documentation.
  repeated TaskStatus tasks = 3;
  // Type of connector (sink or source).
  string type = 4;
  // State of the connector including all the tasks within the connector.
  ConnectorHolisticState holistic_state = 5;
  // List of parsed connectors' and tasks' errors.
  repeated ConnectorError errors = 6;
}

message TaskStatus {
  // The connector task ID.
  int32 id = 1;
  // State of connector task.
  string state = 2;
  // ID of worker that the task is assigned to.
  string worker_id = 3;
  // String value of stack trace.
  string trace = 4;
}

message TaskInfo {
  // Name of connector.
  string connector = 1;
  // The connector task ID.
  int32 task = 2;
}

// ConnectorError is the error of a connector, this is holistic error
// abstraction, made parsing the error trace of connector or Task
message ConnectorError {
  // Error level.
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_ERROR = 1;
    TYPE_WARNING = 2;
  }
  Type type = 1;
  // Short description of the error.
  string title = 2;
  // Detailed description of the error.
  string content = 3;
}

// Connector specifications as defined in the Kafka Connect
// API. You may include this in the request body when creating a new connector.
message ConnectorSpec {
  // Name of connector.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
  // Connector configuration properties.
  map<string, string> config = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
  repeated TaskInfo tasks = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  string type = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message ListConnectorsRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];
  // Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
  string page_token = 2;
  int32 page_size = 3 [
    (buf.validate.field).int32 = {
      gte: -1
      lte: 1000
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Limit the paginated response to a number of items. Defaults to 100. Use -1 to disable pagination."
      minimum: -1
      maximum: 1000
    }
  ];
}

message RestartConnectorRequest {
  message Options {
    // Restart connector's tasks.
    bool include_tasks = 1;
    // Restart only connectors that have failed.
    bool only_failed = 2;
  }
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];

  Options options = 3;
}

message DeleteConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];
  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message PauseConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message ResumeConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message StopConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message GetConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];
  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message CreateConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];
  ConnectorSpec connector = 2;
}

message GetConnectorResponse {
  ConnectorSpec connector = 1;
}

message CreateConnectorResponse {
  ConnectorSpec connector = 1;
}

message ListConnectorsResponse {
  message ConnectorInfoStatus {
    // Name of connector.
    string name = 1;
    ConnectorSpec info = 2;
    ConnectorStatus status = 3;
  }

  // List of connectors, where the parent key is the connector name.
  repeated ConnectorInfoStatus connectors = 1;
  string next_page_token = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Page Token to fetch the next page. The value can be used as page_token in the next call to this endpoint."}];
}

message GetConnectClusterRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];
}

message GetConnectClusterResponse {
  ConnectCluster cluster = 1;
}

message ListConnectClustersRequest {}

message ListConnectClustersResponse {
  repeated ConnectCluster clusters = 1;
}

message UpsertConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // Name of connector. If a connector with this name does not already exist, a new connector is created.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];

  // Connector configuration property.
  map<string, string> config = 3 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
}

message UpsertConnectorResponse {
  ConnectorSpec connector = 1;
}

message GetConnectorConfigRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message GetConnectorConfigResponse {
  map<string, string> config = 1;
}

message GetConnectorStatusRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message GetConnectorStatusResponse {
  ConnectorStatus status = 1;
}

message ListConnectorTopicsRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message ListConnectorTopicsResponse {
  // Topic names.
  repeated string topics = 1 [(google.api.field_behavior) = UNORDERED_LIST];
}

message ResetConnectorTopicsRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // Name of connector using the topics to be reset.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

// KafkaConnectService is the service for the Kafka connect, it exposes the
// Kafka Connect API, you can set multiple Kafka connect services and all of
// them can be managed using this service definition, the request is not only
// proxied but also enriched with better error handling and custom
// documentation and configuration
service KafkaConnectService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Kafka Connect"
    description: "Manage [connectors](https://docs.redpanda.com/redpanda-cloud/develop/managed-connectors/) and interact with the Kafka Connect API."
  };

  // ListConnectClusters implements the list clusters method, list connect
  // clusters available in the console configuration
  rpc ListConnectClusters(ListConnectClustersRequest) returns (ListConnectClustersResponse) {
    option (google.api.http) = {get: "/v1alpha2/kafka-connect/clusters"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List connect clusters"
      description: "List connect clusters available for being consumed by the console's kafka-connect service."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ListConnectClustersResponse"}
          }
        }
      }
    };
  }

  // GetConnectCluster implements the get cluster info method, exposes a Kafka
  // Connect equivalent REST endpoint
  rpc GetConnectCluster(GetConnectClusterRequest) returns (GetConnectClusterResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/kafka-connect/clusters/{cluster_name}"
      response_body: "cluster"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connect cluster"
      description: "Get information about an available Kafka Connect cluster."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ConnectCluster"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Connect cluster not found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }

  // ListConnectors implements the list connectors method, exposes a Kafka
  // Connect equivalent REST endpoint
  rpc ListConnectors(ListConnectorsRequest) returns (ListConnectorsResponse) {
    option (google.api.http) = {get: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List connectors"
      description: "List connectors managed by the Kafka Connect service."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ListConnectorsResponse"}
          }
        }
      }
    };
  }

  // CreateConnector implements the create connector method, and exposes an
  // equivalent REST endpoint as the Kafka connect API endpoint
  rpc CreateConnector(CreateConnectorRequest) returns (CreateConnectorResponse) {
    option (google.api.http) = {
      post: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors"
      body: "connector"
      response_body: "connector"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create connector"
      description: "Create a connector with the specified configuration."
      responses: {
        key: "201"
        value: {
          description: "Created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ConnectorSpec"}
          }
        }
      }
    };
  }

  // RestartConnector implements the restart connector method, exposes a Kafka
  // Connect equivalent REST endpoint
  rpc RestartConnector(RestartConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}/restart"
      body: "options"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Restart connector"
      description: "Triggers a connector restart. You must specify whether or not tasks are also restarted, and whether only failed connectors are restarted."
      responses: {
        key: "204"
        value: {
          description: "Restart connector request success"
          schema: {}
        }
      }
    };
  }

  // GetConnector implements the get connector method, exposes a Kafka
  // Connect equivalent REST endpoint
  rpc GetConnector(GetConnectorRequest) returns (GetConnectorResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}"
      response_body: "connector"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connector"
      description: "Get information about a connector in a specific cluster."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ConnectorSpec"}
          }
        }
      }
    };
  }

  // GetConnectorStatus implement the get status method, Gets the current status of the connector, including:
  // Whether it is running or restarting, or if it has failed or paused
  // Which worker it is assigned to
  // Error information if it has failed
  // The state of all its tasks
  rpc GetConnectorStatus(GetConnectorStatusRequest) returns (GetConnectorStatusResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}/status"
      response_body: "status"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connector status"
      description: "Gets the current status of the connector, including the state for each of its tasks, error information, etc."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ConnectorStatus"}
          }
        }
      }
    };
  }

  // PauseConnector implements the pause connector method, exposes a Kafka
  // connect equivalent REST endpoint
  rpc PauseConnector(PauseConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {put: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}/pause"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Pause connector"
      description: "Pause the connector and its tasks, which stops messages from processing until the connector is resumed. This call is asynchronous and may take some time to process."
      responses: {
        key: "202"
        value: {
          description: "Pause request accepted"
          schema: {}
        }
      }
    };
  }

  // ResumeConnector implements the resume connector method, exposes a Kafka
  // connect equivalent REST endpoint
  rpc ResumeConnector(ResumeConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {put: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}/resume"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Resume connector"
      description: "Resume a paused connector and its tasks, and resumes message processing. This call is asynchronous and may take some time to process. If the connector was not paused, this operation does not do anything."
      responses: {
        key: "202"
        value: {
          description: "Resume request accepted"
          schema: {}
        }
      }
    };
  }

  // StopConnector implements the stop connector method, exposes a Kafka
  // connect equivalent REST endpoint it stops the connector but does not
  // delete the connector. All tasks for the connector are shut down completely
  rpc StopConnector(StopConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {put: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}/stop"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Stop connector"
      description: "Stops a connector, but does not delete it. All tasks for the connector are shut down completely. This call is asynchronous and may take some time to process."
      responses: {
        key: "202"
        value: {
          description: "Request accepted"
          schema: {}
        }
      }
    };
  }

  // DeleteConnector implements the delete connector method, exposes a Kafka
  // connect equivalent REST endpoint
  rpc DeleteConnector(DeleteConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete connector"
      description: "Delete a connector. This operation force stops all tasks and also deletes the connector configuration."
      responses: {
        key: "204"
        value: {
          description: "Deleted"
          schema: {}
        }
      }
    };
  }

  // UpsertConector implements the update or create connector method, it
  // exposes a kafka connect equivalent REST endpoint
  rpc UpsertConnector(UpsertConnectorRequest) returns (UpsertConnectorResponse) {
    option (google.api.http) = {
      put: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}/config"
      body: "config"
      response_body: "connector"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Upsert connector configuration"
      description: "Update the configuration for an existing connector with the specified name, or create a new connector using the given configuration. Returns information about the connector after the change has been made."
      responses: {
        key: "200"
        value: {
          description: "Updated"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ConnectorSpec"}
          }
        }
      }
      responses: {
        key: "201"
        value: {
          description: "Created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ConnectorSpec"}
          }
        }
      }
    };
  }

  // GetConnectorConfig implements the get connector configuration method, expose a kafka connect equivalent REST endpoint
  rpc GetConnectorConfig(GetConnectorConfigRequest) returns (GetConnectorConfigResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}/config"
      response_body: "config"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connector configuration"
      description: "Get the configuration for the connector."
    };
  }

  // ListConnectorTopics implements the list connector topics method, expose a kafka connect equivalent REST endpoint
  rpc ListConnectorTopics(ListConnectorTopicsRequest) returns (ListConnectorTopicsResponse) {
    option (google.api.http) = {get: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}/topics"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List connector topics"
      description: "Returns a list of connector topic names. If the connector is inactive, this call returns an empty list."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ListConnectorTopicsResponse"}
          }
        }
      }
    };
  }

  // ResetConnectorTopics implements the reset connector topics method, expose a kafka connect equivalent REST endpoint
  // the request body is empty.
  rpc ResetConnectorTopics(ResetConnectorTopicsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {put: "/v1alpha2/kafka-connect/clusters/{cluster_name}/connectors/{name}/topics/reset"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Reset connector topics"
      description: "Resets the set of topic names that the connector is using."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {}
        }
      }
    };
  }
}
