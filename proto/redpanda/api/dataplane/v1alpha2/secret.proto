syntax = "proto3";

package redpanda.api.dataplane.v1alpha2;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Defines the scope of a secret.
enum Scope {
  SCOPE_UNSPECIFIED = 0;
  SCOPE_REDPANDA_CONNECT = 1;
}

// Defines the secret resource.
message Secret {
  // Secret identifier.
  string id = 1 [
    (google.api.field_behavior) = IMMUTABLE,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // Secret labels.
  map<string, string> labels = 2 [
    (buf.validate.field).map = {
      values: {
        string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
      }
    },
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Secret scopes
  repeated Scope scopes = 3;
}

// ListSecretsResponse is the response of ListSecrets.
message ListSecretsResponse {
  // Secrets retrieved.
  repeated Secret secrets = 1;

  // Token to retrieve the next page.
  string next_page_token = 2;
}

// ListSecretsFilter are the filter options for listing secrets.
message ListSecretsFilter {
  // Substring match on secret name. Case-sensitive.
  string name_contains = 1 [
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^([a-zA-Z0-9-_]*)$"
  ];

  // The secret labels to search for.
  map<string, string> labels = 2 [(buf.validate.field).map = {
    values: {
      string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
    }
  }];

  // Secret scopes to search for
  repeated Scope scopes = 3;
}

// Generic Secrets API

// ListSecretsRequest is the request of ListSecrets.
message ListSecretsRequest {
  // List filter.
  ListSecretsFilter filter = 1;

  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 2;

  // Limit the paginated response to a number of items.
  int32 page_size = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Limit the paginated response to a number of items."
    minimum: 1
    maximum: 50
  }];
}

// GetSecretRequest is the request of GetSecret.
message GetSecretRequest {
  // The id of the secret to retrieve.
  string id = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[A-Z][A-Z0-9_]*$"
  ];
}

// GetSecretResponse is the response of GetSecret.
message GetSecretResponse {
  // The created secret.
  Secret secret = 1;
}

// CreateSecretRequest is the request of CreateSecret.
message CreateSecretRequest {
  // Secret identifier.
  string id = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[A-Z][A-Z0-9_]*$"
  ];

  // Secret labels.
  map<string, string> labels = 2 [
    (buf.validate.field).map = {
      values: {
        string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
      }
    },
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Secret scopes
  repeated Scope scopes = 3 [(buf.validate.field).repeated = {
    min_items: 1
    unique: true
    items: {
      enum: {
        defined_only: true
        not_in: [0]
      }
    }
  }];

  // The secret data. Must be Base64-encoded.
  bytes secret_data = 4 [
    (google.api.field_behavior) = INPUT_ONLY,
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).bytes.max_len = 65536
  ];
}

// CreateSecretResponse is the response of CreateSecret.
message CreateSecretResponse {
  // The created secret.
  Secret secret = 1;
}

// UpdateSecretRequest is the request of UpdateSecret.
message UpdateSecretRequest {
  // Secret identifier.
  string id = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[A-Z][A-Z0-9_]*$"
  ];

  // Secret labels.
  map<string, string> labels = 2 [
    (buf.validate.field).map = {
      values: {
        string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
      }
    },
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Secret scopes
  repeated Scope scopes = 3 [(buf.validate.field).repeated = {
    min_items: 1
    unique: true
    items: {
      enum: {
        defined_only: true
        not_in: [0]
      }
    }
  }];

  // The secret data. Must be Base64-encoded.
  bytes secret_data = 4 [
    (google.api.field_behavior) = INPUT_ONLY,
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).bytes.max_len = 65536
  ];
}

// UpdateSecretResponse is the response of UpdateSecret.
message UpdateSecretResponse {
  // The updated secret.
  Secret secret = 1;
}

// DeleteSecretRequest is the request of DeleteSecret.
message DeleteSecretRequest {
  // The id of the secret to delete.
  string id = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[A-Z][A-Z0-9_]*$"
  ];
}

// DeleteSecretResponse is the response of DeleteSecret.
message DeleteSecretResponse {}

// ListSecretScopesRequest is the request of ListSecretScopes.
message ListSecretScopesRequest {}

// ListSecretScopesResponse is the response of ListSecretScopes.
message ListSecretScopesResponse {
  repeated Scope scopes = 1;
}

// Connect Secrets API

// GetConnectSecretRequest is the request of GetSecret.
message GetConnectSecretRequest {
  // Unique name of the target connect cluster.
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // The ID of the secret to retrieve.
  string id = 2 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9/_+=.@%-]+$"
  ];
}

// GetConnectSecretResponse is the response of GetConnectSecret.
message GetConnectSecretResponse {
  // The retrieved secret.
  Secret secret = 1;
}

// CreateConnectSecretRequest is the request of CreateConnectSecret.
message CreateConnectSecretRequest {
  // Unique name of the target connect cluster.
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
    }
  ];

  // Name of connector.
  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$"
  ];

  // Secret labels.
  map<string, string> labels = 3 [
    (buf.validate.field).map = {
      values: {
        string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
      }
    },
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The secret data. Must be Base64-encoded.
  bytes secret_data = 4 [
    (google.api.field_behavior) = INPUT_ONLY,
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).bytes.min_len = 1,
    (buf.validate.field).bytes.max_len = 65536
  ];
}

// CreateConnectSecretResponse is the response of CreateConnectSecret.
message CreateConnectSecretResponse {
  // The created secret.
  Secret secret = 1;
}

// ListConnectSecretRequest is the request of ListConnectSecrets.
message ListConnectSecretsRequest {
  // Unique name of the target connect cluster.
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // List filter.
  ListSecretsFilter filter = 2;

  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 3;

  // Limit the paginated response to a number of items.
  int32 page_size = 4 [
    (buf.validate.field).int32 = {
      gte: -1
      lte: 1000
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Limit the paginated response to a number of items. Defaults to 100. Use -1 to disable pagination."
      minimum: -1
      maximum: 1000
    }
  ];
}

// ListConnectSecretsResponse is the response of ListConnectSecrets.
message ListConnectSecretsResponse {
  // Secrets retrieved.
  repeated Secret secrets = 1;

  // Token to retrieve the next page.
  string next_page_token = 2;
}

// UpdateConnectSecretRequest is the request of UpdateConnectSecret.
message UpdateConnectSecretRequest {
  // Unique name of the target connect cluster.
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
    }
  ];

  // ID of the secret to update.
  string id = 2 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9/_+=.@%-]+$"
  ];

  // Secret labels.
  map<string, string> labels = 3 [
    (buf.validate.field).map = {
      values: {
        string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
      }
    },
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The secret data. Must be Base64-encoded.
  bytes secret_data = 4 [
    (google.api.field_behavior) = INPUT_ONLY,
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).bytes.min_len = 1,
    (buf.validate.field).bytes.max_len = 65536
  ];
}

// UpdateConnectSecretResponse is the response of UpdateConnectSecret.
message UpdateConnectSecretResponse {
  // The updated secret.
  Secret secret = 1;
}

// DeleteConnectSecretRequest is the request of DeleteConnectSecret.
message DeleteConnectSecretRequest {
  // Unique name of the target connect cluster.
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda Cloud, use `redpanda`."
      example: "\"redpanda\""
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  // ID of the secret to delete.
  string id = 2 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9/_+=.@%-]+$"
  ];
}

// DeleteConnectSecretResponse is the response of DeleteConnectSecret.
message DeleteConnectSecretResponse {}

service SecretService {
  // Secrets API.
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Secrets"
    description: "Manage [secrets](https://docs.redpanda.com/redpanda-cloud/security/secrets) for Redpanda Cloud."
  };

  // GetSecret retrieves the specific secret.
  rpc GetSecret(GetSecretRequest) returns (GetSecretResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/secrets/{id}"
      response_body: "secret"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Secret"
      description: "Get a secret."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Secret"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }

  // ListSecrets lists the secrets based on optional filter.
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {
    option (google.api.http) = {get: "/v1alpha2/secrets"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Secrets"
      description: "List secrets. Optional: filter based on secret name and labels."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ListSecretsResponse"}
          }
        }
      }
    };
  }

  // CreateSecret creates the secret.
  rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse) {
    option (google.api.http) = {
      post: "/v1alpha2/secrets"
      body: "*"
      response_body: "secret"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Secret"
      description: "Create a secret."
      responses: {
        key: "201"
        value: {
          description: "Secret created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Secret"}
          }
        }
      }
    };
  }

  // UpdateSecret updates the secret.
  rpc UpdateSecret(UpdateSecretRequest) returns (UpdateSecretResponse) {
    option (google.api.http) = {
      put: "/v1alpha2/secrets/{id}"
      body: "*"
      response_body: "secret"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Secret"
      description: "Update a secret."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Secret"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }

  // DeleteSecret deletes the secret.
  rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse) {
    option (google.api.http) = {delete: "/v1alpha2/secrets/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Secret"
      description: "Delete a secret."
      responses: {
        key: "204"
        value: {
          description: "Secret deleted successfully"
          schema: {}
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }

  // ListSecretScopes lists the supported secret scopes.
  rpc ListSecretScopes(ListSecretScopesRequest) returns (ListSecretScopesResponse) {
    option (google.api.http) = {get: "/v1alpha2/secret-scopes"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Secret Scopes"
      description: "List supported secret scopes."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ListSecretScopesResponse"}
          }
        }
      }
    };
  }

  // Connect Secrets API.

  // GetConnectSecret retrieves the specific secret for a specific Connect.
  rpc GetConnectSecret(GetConnectSecretRequest) returns (GetConnectSecretResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/kafka-connect/clusters/{cluster_name}/secrets/{id}"
      response_body: "secret"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Connect Cluster Secret"
      description: "Get a specific Kafka Connect cluster secret."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Secret"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }

  // ListConnectSecrets lists the Connect secrets based on optional filter.
  rpc ListConnectSecrets(ListConnectSecretsRequest) returns (ListConnectSecretsResponse) {
    option (google.api.http) = {get: "/v1alpha2/kafka-connect/clusters/{cluster_name}/secrets"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Connect Cluster Secrets"
      description: "List Kafka Connect cluster secrets. Optional: filter based on secret name and labels."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ListSecretsResponse"}
          }
        }
      }
    };
  }

  // CreateConnectSecret creates the secret for a Connect.
  rpc CreateConnectSecret(CreateConnectSecretRequest) returns (CreateConnectSecretResponse) {
    option (google.api.http) = {
      post: "/v1alpha2/kafka-connect/clusters/{cluster_name}/secrets"
      body: "*"
      response_body: "secret"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Connect Cluster Secret"
      description: "Create a Kafka Connect cluster secret."
      responses: {
        key: "201"
        value: {
          description: "Secret created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Secret"}
          }
        }
      }
    };
  }

  // UpdateConnectSecret updates the Connect secret.
  rpc UpdateConnectSecret(UpdateConnectSecretRequest) returns (UpdateConnectSecretResponse) {
    option (google.api.http) = {
      put: "/v1alpha2/kafka-connect/clusters/{cluster_name}/secrets/{id}"
      body: "*"
      response_body: "secret"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Connect Cluster Secret"
      description: "Update a Kafka Connect cluster secret."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Secret"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }

  // DeleteSecret deletes the secret.
  rpc DeleteConnectSecret(DeleteConnectSecretRequest) returns (DeleteConnectSecretResponse) {
    option (google.api.http) = {delete: "/v1alpha2/kafka-connect/clusters/{cluster_name}/secrets/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Connect Cluster Secret"
      description: "Delete a Kafka Connect cluster secret."
      responses: {
        key: "204"
        value: {
          description: "Secret deleted successfully"
          schema: {}
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
}
