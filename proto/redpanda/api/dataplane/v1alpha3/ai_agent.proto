syntax = "proto3";

package redpanda.api.dataplane.v1alpha3;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "redpanda/api/auth/v1/authorization.proto";
import "redpanda/api/dataplane/v1/pipeline.proto";

// Defines the AI Agent resource.
message AIAgent {
  option (google.api.resource) = {
    type: "redpanda.api.dataplane.v1alpha3/AIAgent"
    singular: "ai_agent"
    plural: "ai_agents"
  };

  // AI Agent ID.
  string id = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];

  // User-friendly AI agent name.
  string display_name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 128
  ];

  // Optional AI agent description.
  string description = 3 [(buf.validate.field).string.max_len = 256];

  // System Prompt for the AI agent behavior.
  string system_prompt = 4 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 10,
    (buf.validate.field).string.max_len = 16384,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "System instructions that define how the AI agent should behave and respond."}
  ];

  // LLM configuration settings for the AI agent.
  Provider provider = 5 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
  string model = 7 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE,
    (buf.validate.field).required = true,
    (buf.validate.field).string.max_len = 128
  ];

  // Map of MCP servers that this AI agent can use.
  map<string, MCPServer> mcp_servers = 8;

  // The number of resources that are guaranteed to be assigned to the AI Agent.
  redpanda.api.dataplane.v1.Pipeline.Resources resources = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The requested amount of resources for the AI Agent. Depending on the backend, the resources might be guaranteed, or might be tweaked based on the utilization of the AI Agent."}];

  // Tags are key-value pairs that can be assigned to an AI agent resource.
  // They help organize AI agents and enable filtering when listing them.
  map<string, string> tags = 10 [(buf.validate.field).map = {
    max_pairs: 16
    values: {
      string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
    }
  }];

  // The current AI agent state.
  State state = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // URL to connect to the AI agent endpoint.
  string url = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  int32 max_iterations = 13 [(buf.validate.field).int32 = {
    gte: 1
    lte: 100
  }];

  ServiceAccount service_account = 14 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];

  message Provider {
    message OpenAI {
      string api_key = 1 [
        (google.api.field_behavior) = REQUIRED,
        (buf.validate.field).required = true,
        (buf.validate.field).string.pattern = "^\\$\\{secrets\\.[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)?\\}$"
      ];
    }

    oneof provider {
      option (buf.validate.oneof).required = true;
      OpenAI openai = 1;
    }
  }

  message ServiceAccount {
    string client_id = 1 [
      (google.api.field_behavior) = REQUIRED,
      (buf.validate.field).required = true
    ];
    string client_secret = 2 [
      (google.api.field_behavior) = REQUIRED,
      (buf.validate.field).required = true,
      (buf.validate.field).string.pattern = "^\\$\\{secrets\\.[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)?\\}$"
    ];
  }

  // State of the AI agent.
  enum State {
    STATE_UNSPECIFIED = 0;
    // The AI agent is starting.
    STATE_STARTING = 1;
    // The AI agent is running and ready to handle requests.
    STATE_RUNNING = 2;
    // The AI agent is in the process of stopping.
    STATE_STOPPING = 3;
    // The AI agent is stopped and in paused state.
    STATE_STOPPED = 4;
    // The AI agent encountered an error.
    STATE_ERROR = 5;
  }

  // MCP server configuration.
  message MCPServer {
    // ID of the Redpanda MCP server.
    string id = 1;
  }
}

// AIAgentService is the service for AI Agents.
// It exposes the API for creating and managing AI agents and their configurations.
service AIAgentService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "AI Agents"
    description: "Create and manage AI agents and their configurations."
  };

  // CreateAIAgent creates an AI Agent in the Redpanda cluster.
  rpc CreateAIAgent(CreateAIAgentRequest) returns (CreateAIAgentResponse) {
    option (google.api.http) = {
      post: "/v1alpha3/ai-agents"
      body: "ai_agent"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create AI Agent"
      description: "Create a new AI agent."
      responses: {
        key: "201"
        value: {
          description: "Created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha3.AIAgent"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_AI_AGENT
    };
  }

  // GetAIAgent gets a specific AI Agent.
  rpc GetAIAgent(GetAIAgentRequest) returns (GetAIAgentResponse) {
    option (google.api.http) = {get: "/v1alpha3/ai-agents/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get AI Agent"
      description: "Get a specific AI agent."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha3.AIAgent"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_AI_AGENT
    };
  }

  // ListAIAgents implements the list AI agents method which lists the AI agents
  // in the Redpanda cluster.
  rpc ListAIAgents(ListAIAgentsRequest) returns (ListAIAgentsResponse) {
    option (google.api.http) = {get: "/v1alpha3/ai-agents"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List AI Agents"
      description: "List AI agents. Optional: filter based on AI agent name."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha3.ListAIAgentsResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_AI_AGENT
    };
  }

  // UpdateAIAgent updates a specific AI agent configuration.
  rpc UpdateAIAgent(UpdateAIAgentRequest) returns (UpdateAIAgentResponse) {
    option (google.api.http) = {
      put: "/v1alpha3/ai-agents/{id}"
      body: "ai_agent"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update AI Agent"
      description: "Update the configuration of an AI agent."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha3.AIAgent"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_AI_AGENT
    };
  }

  // DeleteAIAgent deletes a specific AI agent.
  rpc DeleteAIAgent(DeleteAIAgentRequest) returns (DeleteAIAgentResponse) {
    option (google.api.http) = {delete: "/v1alpha3/ai-agents/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete AI Agent"
      description: "Delete an AI agent."
      responses: {
        key: "204"
        value: {
          description: "Deleted"
          schema: {}
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_AI_AGENT
    };
  }

  // StopAIAgent stops a specific AI agent.
  rpc StopAIAgent(StopAIAgentRequest) returns (StopAIAgentResponse) {
    option (google.api.http) = {put: "/v1alpha3/ai-agents/{id}:stop"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Stop AI Agent"
      description: "Stop a running AI agent."
      responses: {
        key: "200"
        value: {
          description: "Stopped"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha3.AIAgent"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_AI_AGENT
    };
  }

  // StartAIAgent starts a specific AI agent that has been previously stopped.
  rpc StartAIAgent(StartAIAgentRequest) returns (StartAIAgentResponse) {
    option (google.api.http) = {put: "/v1alpha3/ai-agents/{id}:start"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Start AI Agent"
      description: "Start a stopped AI agent."
      responses: {
        key: "200"
        value: {
          description: "Started"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha3.AIAgent"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_AI_AGENT
    };
  }
}

// AIAgentCreate contains the details for the AI agent creation request.
message AIAgentCreate {
  option (google.api.resource) = {
    type: "redpanda.api.dataplane.v1alpha3/AIAgentCreate"
    singular: "ai_agent"
    plural: "ai_agents"
  };

  // User-friendly AI agent name.
  string display_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 128
  ];

  // AI agent description.
  string description = 2 [(buf.validate.field).string.max_len = 256];

  // System Prompt for the AI agent behavior.
  string system_prompt = 3 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 10,
    (buf.validate.field).string.max_len = 16384,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "System instructions that define how the AI agent should behave and respond."}
  ];

  // LLM configuration settings for the AI agent.
  AIAgent.Provider provider = 4 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
  string model = 6 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE,
    (buf.validate.field).required = true,
    (buf.validate.field).string.max_len = 128
  ];

  // Map of MCP servers that this AI agent can use.
  map<string, AIAgent.MCPServer> mcp_servers = 7;

  // Optional list of tags to attach to an AI agent.
  map<string, string> tags = 8 [(buf.validate.field).map = {
    max_pairs: 16
    values: {
      string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
    }
  }];

  // The number of resources that are guaranteed to be assigned to the AI agent.
  redpanda.api.dataplane.v1.Pipeline.Resources resources = 9;

  int32 max_iterations = 10 [(buf.validate.field).int32 = {
    gte: 1
    lte: 100
  }];

  AIAgent.ServiceAccount service_account = 11 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
}

// CreateAIAgentRequest is the request of CreateAIAgent.
message CreateAIAgentRequest {
  AIAgentCreate ai_agent = 1;
}

message CreateAIAgentResponse {
  AIAgent ai_agent = 1;
}

message GetAIAgentRequest {
  // AI Agent ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message GetAIAgentResponse {
  AIAgent ai_agent = 1;
}

message ListAIAgentsRequest {
  // List filter.
  Filter filter = 1;

  // Limit the paginated response to a number of items.
  int32 page_size = 2 [
    (buf.validate.field).int32 = {
      gte: -1
      lte: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Limit the paginated response to a number of items. Defaults to 50. Use -1 to disable pagination."
      minimum: -1
      maximum: 100
    }
  ];

  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 3;

  message Filter {
    // Substring match on AI agent name. Case-sensitive.
    string name_contains = 1 [
      (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
      (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
      (buf.validate.field).string.max_len = 128,
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Any AI agents that partially match this name will be returned."}
    ];

    // Filter AI agents that contain all of these key/value pairs.
    map<string, string> tags = 2 [
      (buf.validate.field).map = {
        max_pairs: 16
        values: {
          string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
        }
      },
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "AI agents that match all the provided tags will be returned."}
    ];
  }
}

message ListAIAgentsResponse {
  repeated AIAgent ai_agents = 1;
  string next_page_token = 2;
}

message AIAgentUpdate {
  option (google.api.resource) = {
    type: "redpanda.api.dataplane.v1alpha3/AIAgentUpdate"
    singular: "ai_agent"
    plural: "ai_agents"
  };

  // User-friendly AI agent name.
  string display_name = 1 [
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 128
  ];

  // AI agent description.
  string description = 2 [(buf.validate.field).string.max_len = 256];

  // System Prompt for the AI agent behavior.
  string system_prompt = 3 [
    (buf.validate.field).string.min_len = 10,
    (buf.validate.field).string.max_len = 16384,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "System instructions that define how the AI agent should behave and respond."}
  ];

  // LLM configuration settings for the AI agent.
  AIAgent.Provider provider = 4;

  string model = 6 [(buf.validate.field).string.max_len = 128];

  // Map of MCP servers that this AI agent can use.
  map<string, AIAgent.MCPServer> mcp_servers = 7;

  // A map of tags to add, update or delete.
  // If a tag's value is empty, the server interprets that as a deletion.
  map<string, string> tags = 8 [(buf.validate.field).map = {
    max_pairs: 16
    values: {
      string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
    }
  }];

  // The number of resources that are guaranteed to be assigned to the AI agent.
  redpanda.api.dataplane.v1.Pipeline.Resources resources = 9;

  int32 max_iterations = 10 [(buf.validate.field).int32 = {
    gte: 1
    lte: 100
  }];

  AIAgent.ServiceAccount service_account = 11;
}

message UpdateAIAgentRequest {
  // AI Agent ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];

  AIAgentUpdate ai_agent = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];

  // Specifies which fields should be updated. If not provided,
  // all fields will be updated.
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateAIAgentResponse {
  AIAgent ai_agent = 1;
}

message DeleteAIAgentRequest {
  // AI Agent ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message DeleteAIAgentResponse {}

message StopAIAgentRequest {
  // AI Agent ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message StopAIAgentResponse {
  AIAgent ai_agent = 1;
}

message StartAIAgentRequest {
  // AI Agent ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message StartAIAgentResponse {
  AIAgent ai_agent = 1;
}
